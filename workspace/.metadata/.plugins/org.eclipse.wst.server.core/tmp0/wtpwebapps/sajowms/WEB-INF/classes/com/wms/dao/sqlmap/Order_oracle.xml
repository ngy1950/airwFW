<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL MAP 2.0//EN"
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="WmsOrder">
	<typeAlias alias="DataMap" type="com.common.bean.DataMap" />
	<typeAlias alias="StringMap" type="com.common.util.StringMap" />

	<select id="OWNRKYCOMBO_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
			OW.OWNRKY AS VALUE_COL,
			OW.NAME01 AS TEXT_COL
		FROM OWNWC OC,
			 OWNER OW
		WHERE 1 = 1
		 AND OC.OWNRKY = OW.OWNRKY
		 AND OC.WAREKY = #SES_WAREKY#
	</select>
	
	<select id="RCPTTYCOMBO_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
				DOCUTY AS VALUE_COL,
				SHORTX AS TEXT_COL
		FROM 	DOCTM
		WHERE	1 = 1
		AND		DOCCAT = #DOCCAT#
		<isEqual property="PROGID" compareValue="IO01">AND DOCUTY = '101'</isEqual>
		<isEqual property="PROGID" compareValue="GR01">AND DOCUTY = '101'</isEqual>
		<isEqual property="PROGID" compareValue="GR00">AND DOCUTY = '112'</isEqual>
	</select>
	
	<select id="AREAKYCOMBO_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
			AREAKY AS VALUE_COL,
			SHORTX AS TEXT_COL
		FROM AREMA
		WHERE 1 = 1
		 AND WAREKY = #SES_WAREKY#
		 AND AREATY = 'STOR'
	</select>

	<select id="OM01COMBO_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT CMCDVL AS VALUE_COL,
		       CDESC1 AS TEXT_COL
		  FROM CMCDV
		 WHERE CMCDKY = 'SRQTYP'
	</select>
	
	<select id="SHPMTYCOMBO_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
			DOCUTY AS VALUE_COL,
			SHORTX AS TEXT_COL
		FROM DOCTM
		WHERE 1 = 1
		 AND DOCCAT = '200'
	</select>

	<select id="OM01_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
			' ' AS INPUTSKU,
			'IMV' AS OWNRKY,
			(SELECT NAME01 FROM OWNER WHERE OWNRKY='IMV') AS OWNRNM,
			' ' AS SKUKEY,
			' ' AS DESC01,
			' ' AS DESC02,
			' ' AS QTYORD,
			' ' AS UOMKEY,
			' ' AS QTSIWH,
			' ' AS QTTTWH,
			' ' AS MATNR,
			' ' AS LOTA10,
			0 AS LOTA16,
			0 AS LOTA17,
			' ' AS TEXT,
			' ' AS COSTCT,
			' ' AS DOCTXT,
			' ' AS ASKU05
		FROM DUAL
	</select>

	<select id="OM01SKUKEY_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT SM.SKUKEY
		  	 , SM.SKUKEY AS MATNR
			 , SM.DESC01
			 , SM.DESC02
			 , SM.DUOMKY AS UOMKEY
			 , SM.ASKU05
			 , NVL((
			   SELECT SUM(QTSIWH) AS QTSIWH
				FROM STKKY ST
				WHERE WAREKY = #WAREKY# -- 거점 V
				  AND OWNRKY = SM.OWNRKY -- 화주 (IMV)
<!-- 				  AND AREAKY = #AREAKY#  출고요청창고 V -->
				  AND SKUKEY = SM.SKUKEY -- 품번
				  AND QTSIWH - GREATEST(QTSALO,QTSPMO) - QTSBLK > 0
				  AND QTSIWH > 0
				  AND LOTA06 = '00'
<!-- 				  AND AREAKY NOT IN ('V05') -->
			),0) AS QTSIWH
			, NVL((
				SELECT SUM(QTSIWH) AS QTSIWH
					FROM STKKY ST
				WHERE WAREKY = 'WH01' -- 거점
				  AND OWNRKY = SM.OWNRKY -- 화주 (IMV)
<!-- 				  AND AREAKY = 'V05'  출고요청창고 -->
				  AND SKUKEY = SM.SKUKEY -- 품번
				  AND QTSIWH - GREATEST(QTSALO,QTSPMO) - QTSBLK > 0
				  AND QTSIWH > 0
				  AND LOTA06 = '00'
			),0) AS QTTTWH
		FROM SKUMA SM
	   WHERE SM.OWNRKY = #OWNRKY#
		 AND SM.SKUKEY = #SKUKEY#
	</select>

	<select id="OM01SKUKEY2_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT SM.SKUKEY
		  	 , SM.SKUKEY AS MATNR
			 , SM.DESC01
			 , SM.DESC02
			 , SM.DUOMKY AS UOMKEY
			 , SM.ASKU05
			 , NVL((
				SELECT SUM(QTSIWH) AS QTSIWH
					FROM STKKY ST
				WHERE WAREKY = #WAREKY# -- 거점 V
				  AND OWNRKY = SM.OWNRKY -- 화주 (IMV)
<!-- 				  AND AREAKY = #AREAKY#  출고요청창고 V -->
				  AND SKUKEY = SM.SKUKEY -- 품번
				  AND QTSIWH - GREATEST(QTSALO,QTSPMO) - QTSBLK > 0
				  AND QTSIWH > 0
				  AND LOTA06 = '00'
<!-- 				  AND AREAKY NOT IN ('V05') -->
			),0) AS QTSIWH
			, NVL((
				SELECT SUM(QTSIWH) AS QTSIWH
					FROM STKKY ST
				WHERE WAREKY = #WAREKY# -- 거점
				  AND OWNRKY = SM.OWNRKY -- 화주 (IMV)
<!-- 				  AND AREAKY = 'V05'  출고요청창고 -->
				  AND SKUKEY = SM.SKUKEY -- 품번
				  AND QTSIWH - GREATEST(QTSALO,QTSPMO) - QTSBLK > 0
				  AND QTSIWH > 0
				  AND LOTA06 = '00'
			),0) AS QTTTWH
		FROM SKUMA SM
	   WHERE SM.OWNRKY = #OWNRKY#
		 AND SM.SKUKEY = #SKUKEY#
		 AND BUFMNG = 'V'
	</select>

	<select id="SKUKEYval_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT
			COUNT(*) CNT
		FROM VSKUMA SM
		WHERE 1 = 1
	      AND SM.WAREKY = #WAREKY#
		  AND SM.OWNRKY = #OWNRKY#
		  AND SM.SKUKEY = #SKUKEY#
		 
	</select>

	<insert id="OM01_INSERT" parameterClass="Map">
		INSERT INTO SHPRQ ( SHPRQK,SHPRQI,CONFIM,WAREKY,RQSHPD,
							DPTNKY,PTRCVR,SHPMTY,DLTRRT,WRKCNT,
							ROUTKY,VEHINO,AREAKY,OWNRKY,
							SKUKEY,QTYORD,MEASKY,UOMKEY,LOTA01,
							LOTA02,LOTA03,LOTA04,LOTA05,LOTA06,
							LOTA07,LOTA08,LOTA09,LOTA10,LOTA11,
							LOTA12,LOTA13,LOTA14,LOTA15,LOTA16,
							LOTA17,LOTA18,LOTA19,LOTA20,DOCTXT,
							CREDAT,CRETIM,CREUSR,LMODAT,LMOTIM,
							LMOUSR,INDBZL,INDARC,UPDCHK )
		VALUES (#SHPRQK#,#SHPRQI#,' ',#WAREKY#,#RQSHPD#,
				NVL( #PTRCVR#, ' ' ),#PTRCVR#,#SHPMTY#,'TRN','1',
				'0000','0000',NVL(#AREAKY#, ' '),#OWNRKY#,
				#SKUKEY#,#QTYORD#,' ',NVL( #UOMKEY#, ' ' ),' ',
				NVL( #COSTCT#, ' ' ),' ',' ',' ',' ',
				' ',' ',NVL( #MATNR#, ' ' ),NVL( #LOTA10#, ' ' ),' ',
				' ',' ',' ',' ',TO_NUMBER(NVL(TRIM(#LOTA16#),'0')),
				TO_NUMBER(NVL(TRIM(#LOTA17#),'0')),0,#QTSIWH#,#QTTTWH#,NVL( #DOCTXT#,
				' ' ),
				TO_CHAR(SYSDATE, 'YYYYMMDD'),TO_CHAR(SYSDATE, 'HH24MISS'),#SES_USER_ID#,
				TO_CHAR(SYSDATE, 'YYYYMMDD'),TO_CHAR(SYSDATE,
				'HH24MISS'),#SES_USER_ID#,
				' ',' ',0)
	</insert>
	
	<select id="OM01POP_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT  ST.AREAKY AS AREAKY,
		        AR.SHORTX AS SHORTX,
		        SUM(ST.QTSIWH) AS QTSIWH,
		        SM.DUOMKY AS DUOMKY
  		   FROM STKKY ST, SKUMA SM, AREMA AR
		  WHERE ST.WAREKY = #SES_WAREKY#
            AND ST.OWNRKY = SM.OWNRKY      
            AND ST.SKUKEY = SM.SKUKEY
            AND ST.WAREKY = AR.WAREKY
            AND ST.AREAKY = AR.AREAKY
            AND ST.SKUKEY = #SKUKEY#    --품번
            AND ST.QTSIWH - GREATEST(ST.QTSALO,ST.QTSPMO) - ST.QTSBLK > 0
            AND ST.QTSIWH > 0
            AND ST.LOTA06 = '00'
<!--             AND ST.AREAKY NOT IN ('V05') -->
		GROUP BY ST.AREAKY, AR.SHORTX, SM.DUOMKY
		
	</select>

	<select id="OM01PROCALL_MAP" parameterClass="Map" resultClass="DataMap">
		{ call P_CREATE_REQUEST_SHPD(#SHPRQK#, #SES_USER_ID#) }
	</select>

	<select id="SEQSHPRQK_OBJECT" parameterClass="Map" resultClass="Integer">
		SELECT TRIM(TO_CHAR(SEQ_SHPRQK.NEXTVAL,'0000000000')) FROM DUAL
	</select>

	<select id="IO01_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
			' ' AS INPUTSKU,
			' ' AS MATNR,
			' ' AS SKUKEY,
			' ' AS DESC01,
			' ' AS DESC02,
			' ' AS QTYORD,
			' ' AS UOMKEY,
			' ' AS QTSIWH,
			' ' AS LOTA10,
			' ' AS LOTA16,
			' ' AS LOTA17
		FROM DUAL
	</select>
		
	<select id="IO01PROCALL_MAP" parameterClass="Map" resultClass="DataMap">
		{ call P_CREATE_REQUEST_RCV(#RCVRQK#, #SES_USER_ID#) }
	</select>

	<select id="SEQRCVRQK_OBJECT" parameterClass="Map" resultClass="Integer">
		SELECT TRIM(TO_CHAR(SEQ_RCVRQK.NEXTVAL,'0000000000')) FROM DUAL
	</select>

	<select id="IO01SKUKEY_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT SM.SKUKEY
			 , SM.SKUKEY AS MATNR
			 , SM.DESC01
			 , SM.DESC02
			 , SM.DUOMKY AS UOMKEY
			 , NVL((
				SELECT SUM(QTSIWH) AS QTSIWH
				 FROM STKKY
				WHERE WAREKY = #WAREKY# 
				  AND OWNRKY = SM.OWNRKY
				  AND SKUKEY = SM.SKUKEY
				  AND QTSIWH > 0
				  AND QTSIWH - GREATEST(QTSALO,QTSPMO) - QTSBLK > 0
				  AND LOTA06 = '00'
			),0) AS QTSIWH
		FROM SKUMA SM
	   WHERE SM.OWNRKY = #OWNRKY#
		 AND SM.SKUKEY = #SKUKEY#
	</select>

	<select id="BZPTNval_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT COUNT(*)CNT
		FROM
			BZPTN
		WHERE 1 = 1
			AND OWNRKY = #OWNRKY#
			AND PTNRKY = #DPTNKY#
			AND PTNRTY = DECODE(SUBSTR(#RCPTTY#,0,2), '13', 'CT', 'VD')
	</select>
	
	<select id="BZPTNname_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT NAME01
		FROM
			BZPTN
		WHERE 1 = 1
			AND OWNRKY = #OWNRKY#
			AND PTNRKY = #DPTNKY#
			AND PTNRTY = DECODE(SUBSTR(#RCPTTY#,0,2), '13', 'CT', 'VD')
	</select>

	<select id="OM01_VALIDATION" parameterClass="Map" resultClass="DataMap">
		SELECT
			CASE
			  WHEN SM.SKUKEY IS NULL THEN 'MASTER_M0669' || ' ' || STD.SKUKEY
			  ELSE 'OK'
			END AS MSG
		FROM (
				$VALIDATION_SQL$
			 ) STD
		LEFT OUTER JOIN SKUMA SM ON SM.OWNRKY = #SES_OWNER# AND SM.SKUKEY = STD.SKUKEY
	</select>

	<select id="IO01_VALIDATION" parameterClass="Map" resultClass="DataMap">
		SELECT
			CASE
			  WHEN SM.SKUKEY IS NULL THEN 'MASTER_M0669' || ' ' || STD.SKUKEY
			  ELSE 'OK'
			END AS MSG
		FROM (
				$VALIDATION_SQL$
			 ) STD
		LEFT OUTER JOIN SKUMA SM ON SM.OWNRKY = #SES_OWNER# AND SM.SKUKEY = STD.SKUKEY
	</select>

	<!-- <insert id="IO01_INSERT" parameterClass="Map">
		INSERT INTO RCVRQ ( RCVRQK,RCVRQI,CONFIM,WAREKY,AREAKY,
							ASNDAT,DPTNKY,RCPTTY,POTRRT,WRKCNT,
							ROUTKY,VEHINO,OWNRKY,SKUKEY,QTYORD,
							MEASKY,UOMKEY,LOTA01,LOTA02,LOTA03,
							LOTA04,LOTA05,LOTA06,LOTA07,LOTA08,
							LOTA09,LOTA10,LOTA11,LOTA12,LOTA13,
							LOTA14,LOTA15,LOTA16,LOTA17,LOTA18,
							LOTA19,LOTA20,DOCTXT,PURCKY,PURCIT,RQSHPD,PTRCVR,
							CREDAT,CRETIM,CREUSR,
							LMODAT,LMOTIM,LMOUSR,
							INDBZL,INDARC,UPDCHK )
		VALUES (#RCVRQK#,#RCVRQI#,' ',#WAREKY#, NVL(#AREAKY#, ' '),
				#ASNDAT#,NVL( #DPTNKY#, ' ' ),#RCPTTY#,'PUR','1',
				'0000','0000',#OWNRKY#,#SKUKEY#,#QTYORD#,
				' ',NVL( #UOMKEY#, ' ' ),' ',' ',' ',
				' ',' ',' ',' ',' ',
				' ',NVL( #LOTA10#, ' ' ),' ',' ',' ',
				' ',' ',TO_NUMBER( NVL(TRIM(#LOTA16#),'0')),TO_NUMBER(
				NVL(TRIM(#LOTA17#),'0')),0,
				0,0,NVL( #DOCTXT#, ' ' ),' ',' ',#RQSHPD#,NVL( #PTRCVR#, ' ' ),
				TO_CHAR(SYSDATE, 'YYYYMMDD'),TO_CHAR(SYSDATE,
				'HH24MISS'),#SES_USER_ID#,
				TO_CHAR(SYSDATE, 'YYYYMMDD'),TO_CHAR(SYSDATE, 'HH24MISS'),#SES_USER_ID#,
				' ',' ',0)
	</insert> -->
	
	<insert id="IO01_INSERT" parameterClass="Map">
		INSERT INTO IFWMS103 (
			      MANDT   , SEQNO   , EBELN   , EBELP  , BWART  , LIFNR  , BEDAT   , ZEKKO_AEDAT , LOEKZ       , MATNR
                , MAKTX_K , MAKTX_E , MAKTX_C , MENGE  , MEINS  , WERKS  , LGORT   , EINDT       , ZEKPO_AEDAT , MENGE_B  
                , MENGE_R , BWTAR   , VGBEL   , VGPOS  , VGDAT  , ELIKZ  , STATUS  , TDATE       , CDATE       , IFFLG
                , ERTXT   , WAREKY  , SKUKEY  , DESC01 , DESC02 , USRID1 , DEPTID1 , USRID2      , DEPTID2     , USRID3
                , DEPTID3 , USRID4  , DEPTID4 , CREDAT , CRETIM , LMODAT , LMOTIM  , MBLNO       , MIPNO       , C00101
                , C00102  , C00103  , C00104  , C00105 , N00101 , N00102

			) VALUES (
			      #MANDT#
                , #SEQNO#
                , #EBELN#
                , #EBELP#
                , #BWART#
                , #LIFNR#
                , NVL( #BEDAT#, ' ' )
                , TO_CHAR(SYSDATE, 'YYYYMMDD')
                , NVL( #LOEKZ#, '0' )
                , #SKUKEY#
                
                , #DESC01# 
                , ' '
                , ' '
                , TO_NUMBER(NVL(TRIM(#QTYORD#), 0))
                , #UOMKEY#    
                , #OWNRKY#      
                , NVL( #LGORT#, ' ' )    
                , #ASNDAT#       
                , NVL( #ZEKPO_AEDAT#, ' ' )
                , 0
                
                , 0
                , ' '  
                , NVL( #VGBEL#, ' ' )    
                , NVL( #VGPOS#, ' ' )  
                , NVL( #VGDAT#, ' ' )
                , NVL( #ELIKZ#, '0' )
                , #STATUS#     
                , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')       
                , NVL( #CDATE#, ' ' )        
			    , #IFFLG#     
                
                , NVL( #ERTXT#, ' ' ) 
                , #WAREKY# 
                , #SKUKEY#
                , #DESC01# 
                , NVL((SELECT DESC02 FROM SKUMA WHERE 1=1 AND OWNRKY = #OWNRKY# AND SKUKEY = #SKUKEY# ),' ')
                , #SES_USER_ID# 
                , NVL( #LIFNR#, ' ' )  
                , NVL( #USRID2#, ' ' )
				, NVL( #DEPTID2#, ' ' )
				, NVL( #USRID3#, ' ' )
                
                , NVL( #DEPTID3#, ' ' )
				, NVL( #USRID4#, ' ' )
				, NVL( #DEPTID4#, ' ' )
                , TO_CHAR(SYSDATE, 'YYYYMMDD')     
			    , TO_CHAR(SYSDATE, 'HH24MISS')     
			    , TO_CHAR(SYSDATE, 'YYYYMMDD')    
			    , TO_CHAR(SYSDATE, 'HH24MISS')   
                , ' '
                , ' ' 
                , ' '
                
                , ' '
                , NVL( #DOCTXT#, ' ' )
                , ' '
                , ' '
                , 0
                , 0
			)        
    </insert>

<!-- 	<select id="IO05_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
			RQ.RCVRQK,
			RQ.WAREKY,
			NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = RQ.WAREKY),' ') AS WARENM,
			RQ.OWNRKY,
			NVL((SELECT NAME01 FROM OWNER WHERE OWNRKY = RQ.OWNRKY), ' ') AS OWNRNM,
			RQ.RCPTTY,
			NVL((SELECT SHORTX FROM DOCTM WHERE DOCUTY = RQ.RCPTTY), ' ') AS RCPTTYNM,
			RQ.DPTNKY,
			VD.NAME01 AS DPTNNM,
			AREAKY,
			NVL((SELECT SHORTX FROM AREMA WHERE WAREKY = RQ.WAREKY AND AREAKY = RQ.AREAKY),' ') AS AREANM,
			ASNDAT,
			COUNT(DISTINCT RQ.SKUKEY) AS CNTSKU,
			(CASE 
				WHEN EXISTS (SELECT 1 FROM IFWMS103 WHERE IFWMS103.WERKS = RQ.OWNRKY 
													  AND IFWMS103.EBELN = RQ.PURCKY 
													  AND IFWMS103.STATUS IN ('A','C') 
													  AND IFWMS103.IFFLG IN ('Y','N') 
													  AND IFWMS103.MENGE_R > 0) THEN 'V' ELSE ' ' END) AS INDRCV,
			DECODE(RQ.CONFIM , 'D', 'V', ' ') AS CONFIM,
			RQ.DOCTXT
		FROM RCVRQ RQ
		INNER JOIN SKUMA SM
			ON SM.OWNRKY = RQ.OWNRKY AND SM.SKUKEY = RQ.SKUKEY
		INNER JOIN BZPTN VD
			ON VD.OWNRKY = RQ.OWNRKY AND VD.PTNRKY = RQ.DPTNKY
			AND VD.PTNRTY = DECODE(SUBSTR(RQ.RCPTTY,0,2), '13', 'CT', 'VD')
		WHERE 1 = 1
			AND RQ.OWNRKY = #SES_OWNER#
		<isNotEmpty property="WAREKY">
			AND RQ.WAREKY = #WAREKY#
		</isNotEmpty>
		<isNotEmpty property="OWNRKY">
			AND RQ.OWNRKY = #OWNRKY#
		</isNotEmpty>
		<isNotEmpty property="AREAKY">
			AND RQ.AREAKY = #AREAKY#
		</isNotEmpty>
		<isNotEmpty property="RANGE_SQL">
			$RANGE_SQL$
		</isNotEmpty>
		GROUP BY RQ.OWNRKY, RQ.RCPTTY, RQ.DPTNKY, VD.NAME01, RQ.RCVRQK, RQ.PURCKY, RQ.WAREKY, RQ.ASNDAT, RQ.CONFIM, RQ.DOCTXT , RQ.AREAKY
		ORDER BY RQ.RCVRQK
	</select> -->
	
	<select id="IO05_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT	 RQ.MANDT  
		        ,RQ.EBELN AS SEBELN
		        ,RQ.WAREKY AS WAREKY
        		,NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = RQ.WAREKY), ' ') AS WARENM 
		        ,RQ.WERKS AS OWNRKY
		        ,NVL((SELECT NAME01 FROM OWNER WHERE OWNRKY = RQ.WERKS), ' ') AS OWNRNM
		        ,RQ.LIFNR AS DPTNKY
		        ,VD.NAME01 AS DPTNNM
		        ,RQ.EINDT
		        ,RQ.BWART AS RCPTTY
		        ,NVL((SELECT SHORTX FROM DOCTM WHERE DOCUTY = RQ.BWART), ' ') AS RCPTTYNM  
		        ,COUNT(RQ.EBELN) AS CNTSKU
		        ,(CASE WHEN RQ.IFFLG = 'Y' THEN 'V' ELSE ' ' END) AS INDRCV
		        ,DECODE(RQ.STATUS, 'D', 'V', ' ') AS CONFIM
		        ,RQ.USRID1 AS USRID
		        ,RQ.CREDAT AS CREDAT
		        ,RQ.CRETIM AS CRETIM
		        ,RQ.LMODAT AS LMODAT
		        ,RQ.LMOTIM AS LMOTIM
		FROM 	IFWMS103 RQ
		    INNER JOIN BZPTN VD
						ON  VD.OWNRKY = RQ.WERKS AND VD.PTNRKY = RQ.LIFNR
						AND VD.PTNRTY = DECODE(SUBSTR(RQ.BWART,0,2), '13', 'CT', 'VD')
		WHERE 	1 = 1
		--AND     RQ.BWART = '101'
		<isNotEmpty property="RANGE_SQL">
			$RANGE_SQL$
		</isNotEmpty>
		GROUP BY RQ.MANDT
		        ,RQ.EBELN
		        ,RQ.WERKS 
		        ,RQ.LIFNR 
		        ,RQ.EINDT 
		        ,RQ.BWART 
		        ,VD.NAME01
		        ,RQ.STATUS
		        ,RQ.WAREKY
		        ,RQ.IFFLG
		        ,RQ.USRID1
		        ,RQ.CREDAT
		        ,RQ.CRETIM
		        ,RQ.LMODAT
		        ,RQ.LMOTIM
		ORDER BY EBELN DESC
	</select>
	
	<select id="IO05SUB_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT  RQ.MANDT    AS MANDT
		        ,RQ.EBELN   AS EBELN 
		        ,RQ.EBELP   AS EBELP
		        ,RQ.SKUKEY  AS SKUKEY
		        ,RQ.DESC01  AS DESC01
		        ,RQ.MENGE   AS QTYORD
		        ,RQ.MEINS   AS UOMKEY
		        ,NVL((SELECT SUM(QTYRCV) FROM RECDI RI WHERE RI.SEBELN = RQ.EBELN AND RI.SEBELP = RQ.EBELP AND TRIM(INDRCN) IS NULL),0) AS QTYRCV
		 		,RQ.MENGE - NVL((SELECT SUM(QTYRCV) FROM RECDI RI WHERE RI.SEBELN = RQ.EBELN AND RI.SEBELP = RQ.EBELP AND TRIM(INDRCN) IS NULL),0) AS QTURCV
		FROM    IFWMS103 RQ
		    INNER JOIN BZPTN VD
					 ON VD.OWNRKY = RQ.WERKS AND VD.PTNRKY = RQ.LIFNR
					AND VD.PTNRTY = DECODE(SUBSTR(RQ.BWART,0,2), '13', 'CT', 'VD')
		WHERE   1 = 1
		AND     RQ.EBELN = #SEBELN#
		ORDER BY EBELN DESC
	</select>

	<!-- <select id="IO05SUB_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
			RQ.RCVRQK AS RCVRQK,
			RQ.RCVRQI AS RCVRQI,
			SM.DESC01 AS DESC01,
			RQ.SKUKEY AS SKUKEY,
			SM.DESC02 AS DESC02,
			RQ.QTYORD AS QTYORD,
			RQ.UOMKEY AS UOMKEY,
			NVL((SELECT SUM(QTYRCV) FROM RECDI WHERE SEBELN = RQ.PURCKY AND SEBELP = RQ.PURCIT AND TRIM(INDRCN) IS NULL),0) AS QTYRCV,
			RQ.QTYORD - NVL((SELECT QTYRCV FROM RECDI WHERE SEBELN = RQ.PURCKY AND SEBELP = RQ.PURCIT AND TRIM(INDRCN) IS NULL),0) AS QTURCV,
			RQ.PURCKY AS PURCKY,
			RQ.PURCIT AS PURCIT,
			RQ.LOTA10 AS LOTA10,
			RQ.LOTA16 AS LOTA16,
			RQ.LOTA17 AS LOTA17
		FROM RCVRQ RQ
		INNER JOIN SKUMA SM
			ON SM.OWNRKY = RQ.OWNRKY AND SM.SKUKEY = RQ.SKUKEY
		INNER JOIN BZPTN VD
			ON VD.OWNRKY = RQ.OWNRKY AND VD.PTNRKY = RQ.DPTNKY 
			AND VD.PTNRTY = DECODE(SUBSTR(RQ.RCPTTY,0,2), '13', 'CT', 'VD')
		WHERE 1 = 1
		<isNotEmpty property="RCVRQK">
			AND RQ.RCVRQK = #RCVRQK#
		</isNotEmpty>
		<isNotEmpty property="AREAKY">
			AND AREAKY = #AREAKY#
		</isNotEmpty>
	</select>

	<select id="IO05DELSPCALL_MAP" parameterClass="Map" resultClass="DataMap">
		{ call P_DELETE_REQUEST_RCV(#RCVRQK#, #SES_USER_ID#) }
	</select> -->

	<select id="OM05_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT DISTINCT
			SR.SHPRQK,
			SR.LOTA01 AS SRQTYP,
			NVL((SELECT CDESC1 FROM CMCDV WHERE CMCDKY = 'SRQTYP' AND CMCDVL = SR.LOTA01),' ') AS SRQTNM,
			SR.RQSHPD,
			SR.WAREKY,
			SR.OWNRKY,
			NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = SR.WAREKY),' ') AS WARENM,
			SR.SHPOKY,
			COUNT(DISTINCT SR.SKUKEY) AS CNTSKU,
			
			(CASE WHEN SR.CONFIM = 'D' THEN 'V' ELSE ' ' END) AS INDDEL,
			NVL((SELECT INDDCL FROM SHPDH WHERE SHPOKY = (SELECT MAX(TRNSHP) FROM SHPRQ WHERE SHPRQK = SR.SHPRQK)),' ') AS INDTRN,
			(CASE WHEN NVL((SELECT MAX(MENGE_R) FROM IFWMS103 WHERE WERKS = SR.OWNRKY AND USRID2 IN (SELECT SVBELN FROM SHPDI WHERE SHPOKY = (SELECT MAX(TRNSHP) FROM SHPRQ WHERE SHPRQK = SR.SHPRQK)) AND STATUS IN ('A','C') AND IFFLG IN ('N','Y')),0) > 0 THEN 'V' ELSE ' ' END) AS INDRCV,
			NVL((SELECT INDDCL FROM SHPDH WHERE SHPOKY = SR.SHPOKY),' ') AS INDSHP,
			
			SR.CREDAT,
			SR.DOCTXT,
			SR.CREUSR
		FROM SHPRQ SR
		INNER JOIN SKUMA SM
			ON SM.OWNRKY = SR.OWNRKY
			AND SM.SKUKEY = SR.SKUKEY
		INNER JOIN BZPTN VD
			ON VD.OWNRKY = SR.OWNRKY
			AND VD.PTNRKY = SR.DPTNKY
			AND VD.PTNRTY = (SELECT CDOCTY FROM DOCTM WHERE DOCCAT = '200' AND DOCUTY = SR.SHPMTY)
		WHERE 1 = 1
			AND SR.OWNRKY = #OWNRKY#
		<isNotEmpty property="WAREKY">
			AND SR.WAREKY = #WAREKY#
		</isNotEmpty>
		<isNotEmpty property="RANGE_SQL">
			$RANGE_SQL$
		</isNotEmpty>
		GROUP BY SR.SHPRQK, SR.LOTA01, SR.WAREKY,SR.OWNRKY, SR.SHPOKY, SR.RQSHPD, SR.CREDAT, SR.DOCTXT, SR.CREUSR, SR.CONFIM
		ORDER BY SR.SHPRQK
	</select>

	<select id="OM05SUB_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT
			SR.SHPRQK AS SHPRQK,
			SR.SHPRQI AS SHPRQI,
			SR.SKUKEY AS SKUKEY,
			SM.DESC01 AS DESC01,
			SM.DESC02 AS DESC02,
			SR.QTYORD AS QTYORD,
			SR.UOMKEY AS UOMKEY,
			CASE WHEN TRIM(SR.TRNSHP) IS NOT NULL THEN NVL((SELECT QTSHPO FROM SHPDI WHERE SHPOKY = SR.TRNSHP AND SHPOIT = SR.TRNSHI),0) ELSE 0 END AS QTYTRN,
			CASE WHEN TRIM(SR.TRNSHP) IS NOT NULL THEN NVL((SELECT QTSHPO FROM SHPDI WHERE SHPOKY = SR.TRNSHP AND SHPOIT = SR.TRNSHI),0) ELSE 0 END AS QTYTRS,
			NVL((SELECT MENGE_R FROM IFWMS103 WHERE WERKS = SR.OWNRKY AND (USRID2,DEPTID2) IN (SELECT SVBELN,SPOSNR FROM SHPDI WHERE SHPOKY = SR.TRNSHP AND SHPOIT = SR.TRNSHI) AND STATUS IN ('A','C') AND IFFLG IN ('N','Y')),0) AS QTYTRR,
			NVL((SELECT QTALOC FROM SHPDI WHERE SHPOKY = SR.SHPOKY AND SHPOIT = SR.SHPOIT),0) AS QTALOC,
			NVL((SELECT QTJCMP FROM SHPDI WHERE SHPOKY = SR.SHPOKY AND SHPOIT = SR.SHPOIT),0) AS QTJCMP,
			NVL((SELECT QTSHPD FROM SHPDI WHERE SHPOKY = SR.SHPOKY AND SHPOIT = SR.SHPOIT),0) AS QTSHPD,
			SR.QTYORD - NVL((SELECT QTSHPD FROM SHPDI WHERE SHPOKY = SR.SHPOKY AND SHPOIT = SR.SHPOIT),0) AS QTUSHP,
			SR.TRNSHP AS TRNSHP,
			SR.TRNSHI AS TRNSHI,
			SR.SHPOKY AS SHPOKY,
			SR.SHPOIT AS SHPOIT,
			SR.LOTA09 AS MATNR,
			SR.LOTA10 AS LOTA10,
			SR.LOTA16 AS LOTA16,
			SR.LOTA17 AS LOTA17,
			SR.LOTA02 AS LOTA02							
		FROM SHPRQ SR
		INNER JOIN SKUMA SM
			ON SM.OWNRKY = SR.OWNRKY AND SM.SKUKEY = SR.SKUKEY
		INNER JOIN BZPTN VD
			ON VD.OWNRKY = SR.OWNRKY AND VD.PTNRKY = SR.DPTNKY
			AND VD.PTNRTY = (SELECT CDOCTY FROM DOCTM WHERE DOCCAT = '200' AND DOCUTY = SR.SHPMTY)
		WHERE 1 = 1
		<isNotEmpty property="SHPRQK">
			AND SHPRQK = #SHPRQK#
		</isNotEmpty>
	</select>

	<insert id="PRTLG_INSERT" parameterClass="Map">
		INSERT
		INTO PRTLG
		 (PRTSEQ, QTYPRT, PRTTYP, WAREKY, AREAKY, LOCAKY, TRNUID, OWNRKY, SKUKEY, PTNRKY
		, PTNRTY, DOCDAT, ASNDAT, RCVDAT, RQSHPD, SHPDAT, QTSIWH, QTYORG, QTYASN, QTYRCV
		, QTSHPO, QTYALO, QTYCMP, QTYSHP, QTYBLK, QTYADJ, QTYPHY, MEASKY, UOMKEY, QTDUOM
		, QTYBOX, QTYREM, LOTA01, LOTA02, LOTA03, LOTA04, LOTA05, LOTA06, LOTA07, LOTA08
		, LOTA09, LOTA10, LOTA11, LOTA12, LOTA13, LOTA14, LOTA15, LOTA16, LOTA17, LOTA18
		, LOTA19, LOTA20, DOCKEY, DOCITM, DOCUTY, PURCKY, PURCIT, ASNDKY, ASNDIT, RECVKY
		, RECVIT, SHPOKY, SHPOIT, SHPGKY, SHPGIT, TASKKY, TASKIT, STKNUM, SADJKY, SADJIT
		, INVBKY, INVBIT, PHYIKY, PHYIIT, CREDAT, CRETIM, CREUSR, LMODAT, LMOTIM, LMOUSR
		, INDBZL, INDARC, UPDCHK)
		VALUES
		(   #PRTSEQ#, 1, 'SHRQ', #WAREKY#, #AREAKY#, ' ', ' ', #OWNRKY#, ' ', ' '
			,' ', #CREDAT#, ' ', ' ', #RQSHPD#, ' ', 0, 0, 0, 0
			, 0, 0, 0, 0, 0, 0, 0, ' ', ' ', 0
			, 0, 0, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '
			, ' ', ' ', ' ', ' ', ' ', ' ', ' ', 0, 0, 0
			, 0, 0, #SHPRQK#, ' ', ' ', ' ', ' ', ' ', ' ', ' '
			, ' ', #SHPOKY#, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '
			,' ', ' ', ' ', ' ', TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE,
			'HH24MISS'), #SES_USER_ID#, TO_CHAR(SYSDATE,
			'YYYYMMDD'),TO_CHAR(SYSDATE, 'HH24MISS'), #SES_USER_ID#,' '
			,' ', 0
		)
	</insert>

	<select id="OM05DELSPCALL_MAP" parameterClass="Map" resultClass="DataMap">
		{ call P_DELETE_REQUEST_SHPD(#SHPRQK#, #SES_USER_ID#) }
	</select>

	<select id="OM05_VALIDATION" parameterClass="Map" resultClass="DataMap">
		SELECT
			CASE
			  WHEN SH.SHPRQK IS NOT NULL THEN 'MASTER_M0582' || ' ' || STD.SHPRQK
			  ELSE 'OK'
			END AS MSG
		FROM (
				$VALIDATION_SQL$
			 ) STD
		LEFT OUTER JOIN SHPDH SH ON SH.SHPOKY = STD.SHPOKY
		WHERE SH.INDDCL = 'V'
	</select>

	<select id="SEQPRTSEQ_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT SEQ_PRTSEQ.NEXTVAL AS PRTSEQ FROM DUAL
	</select>

	<!-- 보충량 산정 -->
	<select id="OM03_LIST" parameterClass="Map" resultClass="DataMap">
		<![CDATA[
		SELECT 
			  C.OWNRKY  -- 화주
		    , NVL((SELECT NAME01 FROM OWNER WHERE OWNRKY = C.OWNRKY),' ') AS OWNRNM
		    , C.WAREKY  -- 거점
		    , NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = C.WAREKY),' ') AS WARENM
 		    , C.AREAKY  -- 창고
 		    , NVL((SELECT SHORTX FROM AREMA WHERE WAREKY = C.WAREKY AND AREAKY = C.AREAKY),' ') AS AREANM
		    , C.AREARK  -- 창고분배순위
		    , C.SKUKEY  -- 품번
		    , SM.DESC01 -- 품명
		    , SM.DESC02 -- 규격 
		    , C.QTYROP  -- ROP
		    , C.QTYMSL  -- MSL
		    , C.QTYTRN  -- 이고예정수량
		    , C.QTYASN  -- 입고예정수량
		    , C.QTSIWH  -- 재고수량
		    , C.QTNEED  -- 보충필요수량
		    , C.QTSV05  -- 통합창고재고수량
		    , C.QTACUM  -- 필요수량누적
		    , CASE WHEN QTSV05 - (QTACUM - QTNEED) > 0 AND QTSV05 - (QTACUM - QTNEED) >= QTNEED
		                THEN QTNEED
		           WHEN QTSV05 - (QTACUM - QTNEED) > 0 AND QTSV05 - (QTACUM - QTNEED) < QTNEED
		                THEN QTSV05 - (QTACUM - QTNEED)
		           ELSE 0
		        END AS QTREPL -- 보충수량
		FROM (
	        SELECT B.*
	             , SUM(QTNEED) OVER(PARTITION BY SKUKEY ORDER BY AREARANK) AS QTACUM
	          FROM (
	                 SELECT A.OWNRKY
	                      , A.WAREKY
	                      , A.AREAKY
	                      , A.AREARK
	                      , A.SKUKEY
	                      , DENSE_RANK() OVER(PARTITION BY SKUKEY ORDER BY SKUKEY, AREARK) AS AREARANK
	                      , A.QTYROP
	                      , A.QTYMSL
	                      , A.QTYTRN
	                      , A.QTYASN
	                      , A.QTSIWH
	                      , A.QTYTRN + A.QTYASN + A.QTSIWH AS QTSTOT
	                      , CASE WHEN A.QTYTRN + A.QTYASN + A.QTSIWH <= A.QTYROP THEN A.QTYMSL - A.QTYTRN + A.QTYASN + A.QTSIWH ELSE 0 END QTNEED
	                      , NVL((
	                              SELECT SUM(QTSIWH)
	                                FROM STKKY
	                               WHERE OWNRKY = #OWNRKY#
	                                 AND WAREKY = #WAREKY#
-- 	                                 AND AREAKY = 'V05'
	                                 AND SKUKEY = A.SKUKEY
	                                 AND QTSIWH > 0
	                                 AND QTSIWH - GREATEST(QTSALO,QTSPMO) - QTSBLK > 0
	                                 AND LOTA06 = '00'
	                            ),0) AS QTSV05
	                   FROM (
	                          SELECT RP.OWNRKY
	                               , RP.WAREKY
	                               , RP.AREAKY
	                               , NVL((SELECT UPDCHK FROM AREMA WHERE WAREKY = RP.WAREKY AND AREAKY = RP.AREAKY),99) AS AREARK
	                               , RP.SKUKEY
	                               , RP.QTYROP
	                               , RP.QTYMSL
	                               , NVL((
	                                       SELECT SUM(SI.QTSHPO)
	                                         FROM SHPDH SH
	                                              INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
	                                        WHERE SH.OWNRKY = RP.OWNRKY
	                                          AND SH.WAREKY = RP.WAREKY
	                                          AND SH.PGRC05 = RP.AREAKY
	                                          AND SH.RQSHPD IN (SELECT SYCDAT FROM SYCAL WHERE SYCDAT BETWEEN TO_CHAR(SYSDATE-6,'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD'))
	                                          AND SI.SKUKEY = RP.SKUKEY
	                                          AND TRIM(SH.INDDCL) IS NULL
	                                          AND SH.STATDO IN ('NEW','PAL','FAL','PPC','FPC')
	                                     ),0) AS QTYTRN
	                               , NVL((
	                                       SELECT SUM(MENGE)
	                                         FROM IFWMS103
	                                        WHERE OWNRKY = RP.OWNRKY
	                                          AND WAREKY = RP.WAREKY
	                                          AND LGORT  = RP.AREAKY
	                                          AND EINDT  IN (SELECT SYCDAT FROM SYCAL WHERE SYCDAT BETWEEN TO_CHAR(SYSDATE-6,'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD'))
	                                          AND SKUKEY = RP.SKUKEY
	                                          AND MENGE - MENGE_R > 0 
	                                          AND STATUS IN ('A','C')
	                                          AND IFFLG  IN ('N','Y')
	                                     ),0) AS QTYASN
	                               , NVL((
	                                       SELECT SUM(QTSIWH)
	                                         FROM STKKY
	                                        WHERE OWNRKY = RP.OWNRKY
	                                          AND WAREKY = RP.WAREKY
	                                          AND AREAKY = RP.AREAKY
	                                          AND SKUKEY = RP.SKUKEY
	                                          AND QTSIWH > 0
	                                          AND QTSIWH - GREATEST(QTSALO,QTSPMO) - QTSBLK > 0
	                                          AND LOTA06 = '00'
	                                     ),0) AS QTSIWH
	                            FROM SKURP RP
	                           WHERE RP.OWNRKY = #OWNRKY#
	                             AND RP.WAREKY IN (#WAREKY#)
-- 	                             AND RP.AREAKY IN ('V01','V02','VD1')
	                             AND EXISTS (SELECT 1 FROM SKUMA WHERE OWNRKY = #OWNRKY# AND BATMNG = 'V')
	                        ) A
	               ) B
	      ) C
		]]>
		INNER JOIN SKUMA SM ON SM.OWNRKY = C.OWNRKY AND SM.SKUKEY = C.SKUKEY
		WHERE 1 = 1
		<isNotEmpty property="WAREKY">
			AND WAREKY = #WAREKY#
		</isNotEmpty>
		<isEqual property="Opt" compareValue="2">
			AND QTNEED > 0
		</isEqual>
		<isNotEmpty property="RANGE_SQL">
			$RANGE_SQL$
		</isNotEmpty>
	</select>

	<select id="OM03SPCALL_MAP" parameterClass="Map" resultClass="DataMap">
		{ call P_CREATE_SHPD_BY_RPLST(#RPLSTK#, #SES_USER_ID#) }
	</select>

	<insert id="OM03_INSERT" parameterClass="Map">
		INSERT INTO RPLST
		(
			RPLSTK,
			OWNRKY,
			WAREKY,
			AREAKY,
			AREARK,
			SKUKEY,
			QTYROP,
			QTYMSL,
			QTYTRN,
			QTYASN,
			QTSIWH,
			QTNEED,
			QTSV05,
			QTACUM,
			QTREPL,
			CREDAT, CRETIM, CREUSR,
			LMODAT, LMOTIM, LMOUSR,
			INDBZL, INDARC, UPDCHK
		)
		VALUES
		(   
			#RPLSTK#,
			#OWNRKY#,
			#WAREKY#,
			#AREAKY#,
			#AREARK#,
			#SKUKEY#,
			TO_NUMBER(NVL(TRIM(#QTYROP#), 0)),
			TO_NUMBER(NVL(TRIM(#QTYMSL#), 0)),
			TO_NUMBER(NVL(TRIM(#QTYTRN#), 0)),
			TO_NUMBER(NVL(TRIM(#QTYASN#), 0)),
			TO_NUMBER(NVL(TRIM(#QTSIWH#), 0)),
			TO_NUMBER(NVL(TRIM(#QTNEED#), 0)),
			TO_NUMBER(NVL(TRIM(#QTSV05#), 0)),
			TO_NUMBER(NVL(TRIM(#QTACUM#), 0)),
			TO_NUMBER(NVL(TRIM(#QTREPL#), 0)),
			TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS'), #SES_USER_ID#,
			TO_CHAR(SYSDATE, 'YYYYMMDD'),TO_CHAR(SYSDATE, 'HH24MISS'),
			#SES_USER_ID#,
			NVL(#INDBZL#, ' '), NVL(#INDARC#, ' '), 0
		)
	</insert>

	<select id="SEQRPLSTK_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT SEQ_RPLSTK.NEXTVAL AS PRTSEQ FROM DUAL
	</select>
	
	<select id="IO05VAL_VALIDATION" parameterClass="Map" resultClass="DataMap">
		SELECT EBELN
			   , CASE WHEN ROWCNT &lt;&gt; EXISTS_IFWMS103 THEN 'MASTER_M1107' || ' ' || EBELN
					  WHEN ALREADY_RECEIPT > 0 THEN 'MASTER_M1106' || ' ' || EBELN
				 ELSE 'OK'
				 END MSG
		FROM (
		        SELECT IFWMS103.EBELN
		               , COUNT(IFWMS103.EBELP) AS ROWCNT
		               , SUM(CASE WHEN TRIM(IFWMS103.MANDT) IS NULL THEN 0 ELSE 1 END) AS EXISTS_IFWMS103
		               , SUM(CASE WHEN NVL(IFWMS103.MENGE_R,0) > 0 THEN 1 ELSE 0 END) AS ALREADY_RECEIPT
		        FROM (
		        		$VALIDATION_SQL$
		        ) STD
		        LEFT OUTER JOIN IFWMS103
                        ON IFWMS103.WERKS = STD.OWNRKY
                       AND IFWMS103.EBELN = STD.SEBELN
                       AND IFWMS103.STATUS IN ('A','C')
                       AND IFWMS103.IFFLG IN ('Y','N')
				GROUP BY IFWMS103.EBELN  
		)
		WHERE (
		        CASE WHEN ROWCNT &lt;&gt; EXISTS_IFWMS103 THEN 'ERROR_ORDER_DELETED'
		             WHEN ALREADY_RECEIPT &gt; 0 THEN 'ERROR_ALREADY_RECEIPT'
		        ELSE 'OK'
		        END
			   ) &lt;&gt; 'OK'
		AND ROWNUM = 1
	</select>
	
	
	<!-- <select id="IO05VAL_VALIDATION" parameterClass="Map" resultClass="DataMap">
		SELECT RCVRQK
		     , CASE WHEN ROWCNT &lt;&gt; EXISTS_IFWMS103 THEN 'MASTER_M1107' || ' ' || RCVRQK
		            WHEN ALREADY_RECEIPT &gt; 0 THEN 'MASTER_M1106' || ' ' || RCVRQK
		         ELSE 'OK'
		       END MSG
		  FROM (
		         SELECT RV.RCVRQK
		              , COUNT(RV.RCVRQI) AS ROWCNT
		              , SUM(CASE WHEN TRIM(IFWMS103.MANDT) IS NULL THEN 0 ELSE 1 END) AS EXISTS_IFWMS103
		              , SUM(CASE WHEN NVL(IFWMS103.MENGE_R,0) > 0 THEN 1 ELSE 0 END) AS ALREADY_RECEIPT
	            FROM (
					$VALIDATION_SQL$
				) STD
                LEFT OUTER JOIN RCVRQ RV ON RV.RCVRQK = STD.RCVRQK
                LEFT OUTER JOIN IFWMS103
                        ON IFWMS103.WERKS = RV.OWNRKY
                       AND IFWMS103.EBELN = RV.PURCKY
                       AND IFWMS103.EBELP = RV.PURCIT
                       AND IFWMS103.STATUS IN ('A','C')
                       AND IFWMS103.IFFLG IN ('Y','N')
          GROUP BY RV.RCVRQK
       )
		 WHERE (
		         CASE WHEN ROWCNT &lt;&gt; EXISTS_IFWMS103 THEN 'ERROR_ORDER_DELETED'
		              WHEN ALREADY_RECEIPT &gt; 0 THEN 'ERROR_ALREADY_RECEIPT'
		           ELSE 'OK'
		         END
		       ) &lt;&gt; 'OK'
		   AND ROWNUM = 1
	</select> -->
	
	<delete id="IO05_DELETE" parameterClass="Map">
		DELETE 
		FROM	IFWMS103	 
		WHERE	EBELN = #SEBELN# 
		AND		IFFLG = 'N'
	</delete>
	
	<select id="OM05VAL_VALIDATION" parameterClass="Map" resultClass="DataMap">
        SELECT *
          FROM (
                 SELECT CASE WHEN SR.CONFIM = 'D'
                                  THEN 'OUT_M0166†' || STD.SHPOKY
                             WHEN SR.LOTA01 NOT IN ('2','3') AND NVL((SELECT INDDCL FROM SHPDH WHERE SHPOKY = SR.SHPOKY),'X') = 'X'
                                  THEN 'OUT_M0167†' || STD.SHPRQK || '/' || SR.SHPOKY
                             WHEN NVL((SELECT INDDCL FROM SHPDH WHERE SHPOKY = SR.SHPOKY),'X') = 'V'
                                  THEN 'OUT_M0168†' || STD.SHPRQK || '/' || SR.SHPOKY
                             ELSE 'OK'
                          END AS RESULTMSG
                   FROM (
                         	$APPEND_QUERY$
                        ) STD
                        INNER JOIN SHPRQ SR ON SR.SHPRQK = STD.SHPRQK
               )
         WHERE RESULTMSG != 'OK'
	</select>
	
	<select id="SEQRCVRQK_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT TRIM(TO_CHAR(SEQ_RCVRQK.NEXTVAL,'0000000000')) AS SEQ FROM DUAL
	</select>
	
	<select id="SEQSHPRQK_MAP" parameterClass="Map" resultClass="DataMap">
		SELECT TRIM(TO_CHAR(SEQ_SHPRQK.NEXTVAL,'0000000000')) AS SEQ FROM DUAL
	</select>
	
	<select id="IO02_VALIDATION" parameterClass="Map" resultClass="DataMap">
		SELECT A.*
		     , CASE WHEN TRIM(A.ASNDAT) IS NULL
		                 THEN 'You must input ASN DATE.'
                    WHEN F_CHECK_DATE(A.ASNDAT,'YYYYMMDD') = 'FALSE'
		                 THEN 'ASN DATE is not matched date format.'
		            WHEN TRIM(A.VENDOR) IS NULL
		                 THEN 'You must input VENDOR CODE.'
		            WHEN NOT EXISTS (SELECT 1 FROM BZPTN WHERE OWNRKY = A.OWNRKY AND PTNRKY = A.VENDOR AND PTNRTY = (CASE WHEN #RCPTTY# LIKE '13%' THEN 'CT' ELSE 'VD' END))
		                 THEN 'Inputed VENDOR CODE [' || A.VENDOR || '] is not exists on Master.'
<!-- 		            WHEN A.WAREKY = 'WH00' AND TRIM(A.RQSHPD) IS NULL -->
<!-- 		                 THEN 'You must input REQUIREMENT SHIPPING DATE.' -->
<!--                     WHEN F_CHECK_DATE(A.RQSHPD,'YYYYMMDD') = 'FALSE' -->
<!-- 		                 THEN 'REQUIREMENT SHIPPING DATE is not matched date format' -->
<!-- 		            WHEN A.WAREKY = 'WH00' AND TRIM(A.PTRCVR) IS NULL -->
<!-- 		                 THEN 'You must input CUSTOMER CODE.' -->
<!-- 		            WHEN NOT EXISTS (SELECT 1 FROM BZPTN WHERE OWNRKY = A.OWNRKY AND PTNRKY = A.PTRCVR AND PTNRTY = 'CT') -->
<!-- 		                 THEN 'Inputed CUSTOMER CODE [' || A.PTRCVR || '] is not exists on Master.' -->
<!-- 		            WHEN TRIM(A.AREAKY) IS NULL -->
<!-- 		                 THEN 'You must input AREA CODE.' -->
<!-- 		            WHEN NOT EXISTS (SELECT 1 FROM AREMA WHERE WAREKY = A.WAREKY AND AREAKY = A.AREAKY) -->
<!-- 		                 THEN 'Inputed AREA CODE [' || A.AREAKY || '] is not exists on Master.' -->
		            WHEN NOT EXISTS (SELECT 1 FROM OWNER WHERE OWNRKY = A.OWNRKY)
		                 THEN 'Inputed OWNER CODE [' || A.OWNRKY || '] is not exists on Master.'
		            WHEN TRIM(A.SKUKEY) IS NULL
		                 THEN 'You must input SKU CODE.'
		            WHEN NOT EXISTS (SELECT 1 FROM SKUMA WHERE OWNRKY = A.OWNRKY AND SKUKEY = A.SKUKEY)
		                 THEN 'Inputed SKU CODE [' || A.SKUKEY || '] is not exists on Master. (SKUMA)'
		            WHEN NOT EXISTS (SELECT 1 FROM SKUWC WHERE WAREKY = A.WAREKY AND OWNRKY = A.OWNRKY AND SKUKEY = A.SKUKEY)
		                 THEN 'Inputed SKU CODE [' || A.SKUKEY || '] is not exists on Master. (SKUWC)'
		            WHEN TRIM(A.UOMKEY) IS NULL
		                 THEN 'You must input UOM.'
		            WHEN NOT EXISTS (SELECT 1 FROM MEASI WHERE WAREKY = A.WAREKY AND MEASKY = A.OWNRKY || A.SKUKEY AND UOMKEY = A.UOMKEY)
		                 THEN 'UOM [' || A.UOMKEY || '] is not exists on Master.'
		            WHEN F_CHECK_NUMBER(A.QTYORD) = 'FALSE'
		                 THEN 'ORDER QUANTITY is not matched number format.'
		            WHEN TRIM(A.LOTA16) IS NOT NULL AND F_CHECK_NUMBER(A.LOTA16) = 'FALSE'
		                 THEN 'PURCHASE VALUE is not matched number format.'
		            WHEN TRIM(A.LOTA17) IS NOT NULL AND F_CHECK_NUMBER(A.LOTA17) = 'FALSE'
		                 THEN 'SALES VALUE is not matched number format.'
			     ELSE 'OK'
		         END AS MSG
		  FROM (
		         SELECT #SES_WAREKY# AS WAREKY
		              , #OWNRKY# AS OWNRKY
		              , #RCPTTY# AS RCPTTY
		              , A.*
		           FROM ( $VALIDATION_SQL$ ) A
		       ) A
	</select>
	
	<insert id="IO02_INSERT" parameterClass="Map">
		INSERT INTO RCVRQ ( RCVRQK,RCVRQI,CONFIM,WAREKY,AREAKY,
							ASNDAT,DPTNKY,RCPTTY,POTRRT,WRKCNT,
							ROUTKY,VEHINO,OWNRKY,SKUKEY,QTYORD,
							MEASKY,UOMKEY,LOTA01,LOTA02,LOTA03,
							LOTA04,LOTA05,LOTA06,LOTA07,LOTA08,
							LOTA09,LOTA10,LOTA11,LOTA12,LOTA13,
							LOTA14,LOTA15,LOTA16,LOTA17,LOTA18,
							LOTA19,LOTA20,DOCTXT,PURCKY,PURCIT,RQSHPD,PTRCVR,
							CREDAT,CRETIM,CREUSR,
							LMODAT,LMOTIM,LMOUSR,
							INDBZL,INDARC,UPDCHK )
		VALUES (#RCVRQK#,#RCVRQI#,' ',#WAREKY#,NVL(#AREAKY#, ' '),
				#ASNDAT#,NVL( #VENDOR#, ' ' ),#RCPTTY#,'PUR','1',
				'0000','0000',#OWNRKY#,#SKUKEY#,#QTYORD#,
				' ',NVL( #UOMKEY#, ' ' ),' ',' ',' ',
				' ',' ',' ',' ',' ',
				' ',NVL( #LOTA10#, ' ' ),' ',' ',' ',
				' ',' ',TO_NUMBER( NVL(TRIM(#LOTA16#),'0')),TO_NUMBER(
				NVL(TRIM(#LOTA17#),'0')),0,
				0,0,NVL( #DOCTXT#, ' ' ),' ',' ',NVL(#RQSHPD#, ' '),NVL( #PTRCVR#, ' ' ),
				TO_CHAR(SYSDATE, 'YYYYMMDD'),TO_CHAR(SYSDATE,'HH24MISS'),#SES_USER_ID#,
				TO_CHAR(SYSDATE, 'YYYYMMDD'),TO_CHAR(SYSDATE, 'HH24MISS'),#SES_USER_ID#,
				' ',' ',0)
	</insert>
	
	<select id="RL05_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT 
			DOCDAT,
	 		WAREKY,
			SKUKEY,
			STATUS,
			SKUG01,
			LOTL06,
			LOTL03,
			LOTL03NM,
			DESC01,
			SKUL01,
			SKUL03,
			VENDKY,
			VENDKYNM,
			LOTL02,
			LOTL08,
			FLD001,
			FLD002,
			GRDOCUTY,
			GRDOCUTY_01,
			GRDOCUTY_02,
			GRDOCUTY_03,
			GRDOCUTY_04,
			GRDOCUTY_05,
			GRDOCUTY_06,
			GIDOCUTY,
			GIDOCUTY_01,
			GIDOCUTY_02,
			GIDOCUTY_03,
			GIDOCUTY_04,
			GIDOCUTY_05,
			GIDOCUTY_06,
			GIDOCUTY_07,
			GIDOCUTY_08,
			GIDOCUTY_09,
			FLD003,
			FLD004,
			FLD005,
			FLD006,
			FLD007,
			FLD008,
			FLD009,
			FLD010,
			FLD011,
			FLD012,
			FLD013,
			FLD014,
			FLD015,
			CALUSR,
			CALUSRNM,
			CREDAT,
			CRETIM,
			CREUSR,
			LMODAT,
			LMOTIM,
			LMOUSR,
			INDBZL,
			INDARC,
			UPDCHK
		FROM GRGIRESULT_SUMMARY
	   WHERE WAREKY = #WAREKY#
	   <isNotEmpty property="RANGE_SQL">
		$RANGE_SQL$
	   </isNotEmpty>
	</select>
	
	<select id="COSTCTCOMBO_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT CMCDVL AS VALUE_COL,
		       CDESC1 AS TEXT_COL
		  FROM CMCDV
		 WHERE CMCDKY = 'COSTCT'
		 ORDER BY CMCDVL
	</select>
	
	<select id="SKU_IMG_POP_LIST" parameterClass="Map" resultClass="DataMap">
		SELECT 
			ITEM_CODE AS SKUKEY, 
			IMG_FILE_TYPE_CODE AS FTYPE, 
			FILE_PATH AS FPATH, 
			IMG_FILE_NAME AS FNAME, 
			EXE_NAME AS EXENAME,
			'../../' || FILE_PATH  ||'/'|| IMG_FILE_NAME ||'.'|| EXE_NAME AS IMGFILE
	    FROM MITTG0600
	     WHERE ITEM_CODE = #SKUKEY# -- 품목코드
         AND STATUS IN ('C','R')  
         AND IMG_FILE_TYPE_CODE IN ('MB','SB')
	</select>
</sqlMap>