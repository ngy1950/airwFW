<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Report">

	<!-- [RL00] 일별집계  조회 -->
	<select id="RL00_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT LOC.WAREKY AS "WAREKY",
		       LOC.AREAKY AS "AREAKY",
		       LOC.ZONEKY AS "ZONEKY",
		       LOC.LOCAKY AS "LOCAKY",
		       A.SKUKEY AS "SKUKEY",
		       A.DESC01 AS "DESC01",
		       TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') AS "DATTIM",
		       NVL(ST.QTSIWH,0) AS "QTSIWH",
		       NVL(ST.QTABLE,0) AS "QTABLE",
		       NVL(ST.QTSALO,0) AS "QTSALO",
		       NVL(ST.QTSPMO,0) AS "QTSPMO",
		       NVL(ST.QTSBLK,0) AS "QTSBLK",
		       NVL(SUM(
		            CASE WHEN A.DOCGRP = 1 AND A.LOCAKY = LOC.LOCAKY THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                 ELSE 0 END
		              )
		           , 0) AS "QTYRCV",
		       NVL(SUM(
		            CASE WHEN A.DOCGRP = 2 AND A.LOCAKY = LOC.LOCAKY THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                 ELSE 0 END
		              )
		           , 0) AS "QTYMVI",
		
		       NVL(SUM(
		             CASE WHEN A.DOCGRP = 3 AND A.LOCAKY = LOC.LOCAKY AND A.DOCTYP NOT IN ('208','210') THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                  ELSE 0 END
		              )
		           , 0) AS "QTYMVO",
		
		       NVL(SUM(
		             CASE WHEN A.DOCGRP = 3 AND A.LOCAKY = LOC.LOCAKY AND A.DOCTYP IN ('208','210') THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                  ELSE 0 END
		              )
		           , 0) AS "QTYSHP",
		
		       NVL(SUM(
		             CASE WHEN A.DOCGRP = 4 AND A.LOCAKY = LOC.LOCAKY THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                  ELSE 0 END
		              )
		           , 0) AS "QTYADJ"
		  FROM (
		        SELECT WAREKY, AREAKY, ZONEKY, LOCAKY
		          FROM LOCMA L
		         WHERE L.WAREKY = #{WAREKY}
		       ) LOC
		       LEFT OUTER JOIN (
		                        SELECT 1                 AS DOCGRP,
		                               RH.RCPTTY         AS DOCTYP,
		                               RH.DOCDAT         AS DOCDAT,
		                               RH.WAREKY         AS WAREKY,
		                               L.AREAKY          AS AREAKY,
		                               NVL(L.ZONEKY,' ') AS ZONEKY,
		                               RI.LOCAKY         AS LOCAKY,
		                               RI.SKUKEY         AS SKUKEY,
		                               RI.DESC01         AS DESC01,
		                               RI.QTYRCV         AS QTYNOR,
		                               CASE WHEN RH.STATDO IN ('NEW','FRV') THEN 0
		                                    ELSE RI.QTYRCV END AS QTYCNC,
		                               NVL((SELECT SUM(QTADJU) FROM ADJDH AH INNER JOIN ADJDI AI ON AI.SADJKY = AH.SADJKY
		                                     WHERE AH.ADJUTY='420' AND AI.REFDKY=RH.RECVKY AND AI.REFDIT=RI.RECVIT),0) AS QTYADJ
		                          FROM RECDH RH
		                               INNER JOIN RECDI RI
		                                       ON RI.RECVKY = RH.RECVKY
		                               LEFT OUTER JOIN LOCMA L
		                                       ON L.WAREKY = RH.WAREKY
		                                      AND L.LOCAKY = RI.LOCAKY
		                         WHERE RH.WAREKY = #{WAREKY}
		                        <!--     <statement property="docdatRange" prefix="AND"/>-->
                           		 <if test="RANGE_SQL != null and RANGE_SQL != ''">
										${RANGE_SQL}
								 </if>
		                        UNION ALL
		
		                        SELECT 2,
		                               TH.TASOTY,
		                               TH.DOCDAT,
		                               TH.WAREKY,
		                               L.AREAKY,
		                               NVL(L.ZONEKY,' '),
		                               TI.LOCAAC,
		                               TI.SKUKEY,
		                               TI.DESC01,
		                               CASE WHEN TI.STATIT IN ('PPC','FPC') THEN TI.QTCOMP
		                                    ELSE 0 END,
		                               0,
		                               CASE WHEN TH.TASOTY IN ('208','210') THEN 0
		                                    ELSE NVL((SELECT SUM(QTADJU) FROM ADJDH AH INNER JOIN ADJDI AI ON AI.SADJKY = AH.SADJKY
		                                               WHERE AH.ADJUTY IN ('421', '422') AND AI.REFDKY=TH.TASKKY AND AI.REFDIT=TI.TASKIT),0) END AS QTYADJ
		                          FROM TASDH TH
		                               INNER JOIN TASDI TI
		                                       ON TI.TASKKY = TH.TASKKY
		                               LEFT OUTER JOIN LOCMA L
		                                       ON L.WAREKY = TH.WAREKY
		                                      AND L.LOCAKY = TI.LOCASR
		                         WHERE TH.WAREKY = #{WAREKY}
		                           AND TI.STATIT IN ('PPC','FPC')
		                           AND TH.TASOTY IN ('310','320','331','332','333','334','335','380','399')
		                           <!--  <statement property="docdatRange" prefix="AND"/>-->
                           		 <if test="RANGE_SQL != null and RANGE_SQL != ''">
										${RANGE_SQL}
								 </if>
		                        UNION ALL
		
		                        SELECT 3,
		                               TH.TASOTY,
		                               TH.DOCDAT,
		                               TH.WAREKY,
		                               L.AREAKY,
		                               NVL(L.ZONEKY,' '),
		                               TI.LOCASR,
		                               TI.SKUKEY,
		                               TI.DESC01,
		                               CASE WHEN TI.STATIT IN ('PPC','FPC') THEN TI.QTCOMP
		                                    ELSE 0 END,
		                               0,
		                               CASE WHEN TH.TASOTY IN ('208','210') THEN 0
		                                    ELSE NVL((SELECT SUM(QTADJU) FROM ADJDH AH INNER JOIN ADJDI AI ON AI.SADJKY = AH.SADJKY
		                                               WHERE AH.ADJUTY='470' AND AI.REFDKY=TH.TASKKY AND AI.REFDIT=TI.TASKIT),0) END AS QTYADJ
		                          FROM TASDH TH
		                               INNER JOIN TASDI TI
		                                       ON TI.TASKKY = TH.TASKKY
		                               LEFT OUTER JOIN LOCMA L
		                                       ON L.WAREKY = TH.WAREKY
		                                      AND L.LOCAKY = TI.LOCASR
		                         WHERE TH.WAREKY = #{WAREKY}
		                           AND TI.STATIT IN ('PPC','FPC')
		                           AND TH.TASOTY IN ('310','320','331','332','333','334','335','380','399')
		                         <!--   <statement property="docdatRange" prefix="AND"/>--> 
		                         <if test="RANGE_SQL != null and RANGE_SQL != ''">
										${RANGE_SQL}
								 </if>
		                        UNION ALL
		
		                        SELECT 4,
		                               AH.ADJUTY,
		                               AH.DOCDAT,
		                               AH.WAREKY,
		                               L.AREAKY,
		                               NVL(L.ZONEKY,' '),
		                               AI.LOCAKY,
		                               AI.SKUKEY,
		                               AI.DESC01,
		                               0,
		                               0,
		                               AI.QTADJU
		                          FROM ADJDH AH
		                               INNER JOIN ADJDI AI
		                                       ON AI.SADJKY = AH.SADJKY
		                               LEFT OUTER JOIN LOCMA L
		                                       ON L.WAREKY = AH.WAREKY
		                                      AND L.LOCAKY = AI.LOCAKY
		                         WHERE AH.WAREKY = #{WAREKY}
		                           AND AH.ADJUTY IN ('401','402','403','410','420','425','430','440')
		                         <!--   <statement property="docdatRange" prefix="AND"/>--> 
		                         <if test="RANGE_SQL != null and RANGE_SQL != ''">
										${RANGE_SQL}
								 </if>
		                       ) A
		               ON LOC.WAREKY = A.WAREKY
		              AND LOC.LOCAKY = A.LOCAKY
		       LEFT OUTER JOIN (SELECT WAREKY, AREAKY, ZONEKY, LOCAKY, SKUKEY, DESC01,
		                               NVL(SUM(QTSIWH),0) AS QTSIWH,
		                               NVL(SUM(QTSIWH - GREATEST(QTSALO,QTSPMO) - QTSBLK),0) AS QTABLE,
		                               NVL(SUM(QTSALO),0) AS QTSALO,
		                               NVL(SUM(GREATEST(QTSALO,QTSPMO)),0) AS QTSPMO,
		                               NVL(SUM(QTSBLK),0) AS QTSBLK
		                          FROM STKKY
		                         WHERE WAREKY = #{WAREKY}
		                           AND QTSIWH > 0
		                         GROUP BY WAREKY, AREAKY, ZONEKY, LOCAKY, SKUKEY, DESC01
		                       ) ST
		               ON ST.WAREKY = LOC.WAREKY
		              AND ST.AREAKY = LOC.AREAKY
		              AND ST.ZONEKY = LOC.ZONEKY
		              AND ST.LOCAKY = LOC.LOCAKY
		              AND ST.SKUKEY = A.SKUKEY
		 WHERE LOC.WAREKY = #{WAREKY}
		   <!--  <statement property="range" prefix="AND"/>-->
              <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
					${RANGE_SQL2}
			 </if>
		 GROUP BY LOC.WAREKY, LOC.AREAKY, LOC.ZONEKY, LOC.LOCAKY, A.SKUKEY, A.DESC01,
		          NVL(ST.QTSIWH,0),NVL(ST.QTABLE,0),NVL(ST.QTSALO,0),NVL(ST.QTSPMO,0),NVL(ST.QTSBLK,0)
		HAVING NVL(SUM(
		            CASE WHEN A.DOCGRP = 1 AND A.LOCAKY = LOC.LOCAKY THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                 ELSE 0 END
		              )
		           , 0) > 0 OR
		
		       NVL(SUM(
		            CASE WHEN A.DOCGRP = 2 AND A.LOCAKY = LOC.LOCAKY THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                 ELSE 0 END
		              )
		           , 0) > 0 OR
		
		       NVL(SUM(
		             CASE WHEN A.DOCGRP = 3 AND A.LOCAKY = LOC.LOCAKY AND A.DOCTYP NOT IN ('208','210') THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                  ELSE 0 END
		              )
		           , 0) > 0 OR
		
		       NVL(SUM(
		             CASE WHEN A.DOCGRP = 3 AND A.LOCAKY = LOC.LOCAKY AND A.DOCTYP IN ('208','210') THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                  ELSE 0 END
		              )
		           , 0) > 0 OR
		
		       NVL(SUM(
		             CASE WHEN A.DOCGRP = 4 AND A.LOCAKY = LOC.LOCAKY THEN A.QTYNOR-A.QTYCNC-A.QTYADJ
		                  ELSE 0 END
		              )
		           , 0) > 0
		 ORDER BY 1,2,3,4,5,6
	</select>

	<!-- [RL01] 입고실적  조회 연월별 -->
	<select id="RL01_01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT RH.WAREKY AS "WAREKY",
		       WH.NAME01 AS "WAREKYNM",
		       SUBSTR(RH.ARCPTD,1,4) AS "YEAR",
		       SUBSTR(RH.ARCPTD,5,2) AS "MONTH",
		       NVL(SUM(RI.QTYRCV),0) AS "QTYRCV",
		       NVL(SUM(RI.QTYORG),0) AS "QTYORG",
		       NVL(SUM(RI.HEIGHT * RI.QTYORG),0) AS "AMOUNT",
		       NVL(SUM(RI.CUBICM * RI.QTYORG),0) AS "CUBICT"
		  FROM V_ALL_RECDH RH
		       INNER JOIN V_ALL_RECDI RI
		               ON RH.RECVKY = RI.RECVKY
		       LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = RH.WAREKY
		 WHERE 1 = 1
		   AND RH.OWNRKY = #{OWNRKY}
		   AND RH.WAREKY = #{WAREKY}
		   <!--  <statement property="RangeSearch" prefix="AND"/>-->
            <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
			</if>
			
		 GROUP BY SUBSTR(RH.ARCPTD,1,4),
		          SUBSTR(RH.ARCPTD,5,2),
		          RH.WAREKY, WH.NAME01
		 ORDER BY 1,2,3,4
	</select>

	<!-- [RL01] 입고실적  조회 일별 -->
	<select id="RL01_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT RH.WAREKY AS "WAREKY",
		       WH.NAME01 AS "WAREKYNM",
		       SUBSTR(RH.ARCPTD,1,4) AS "YEAR",
		       SUBSTR(RH.ARCPTD,5,2) AS "MONTH",
		       SUBSTR(RH.ARCPTD,7,2) AS "DAY",
		       NVL(SUM(RI.QTYRCV),0) AS "QTYRCV",
		       NVL(SUM(RI.QTYORG),0) AS "QTYORG",
		       NVL(SUM(RI.HEIGHT * RI.QTYORG),0) AS "AMOUNT",
		       NVL(SUM(RI.CUBICM * RI.QTYORG),0) AS "CUBICT"
		  FROM V_ALL_RECDH RH
		       INNER JOIN V_ALL_RECDI RI
		               ON RH.RECVKY = RI.RECVKY
		       LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = RH.WAREKY
		 WHERE  1 = 1
		   AND RH.OWNRKY = #{OWNRKY}
		   AND RH.WAREKY = #{WAREKY}
		   <!--  <statement property="RangeSearch" prefix="AND"/>-->
            <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
			</if>
		 GROUP BY RH.ARCPTD,
		          RH.WAREKY, WH.NAME01
		 ORDER BY 1,2,3,4,5
	</select>
	
	<!-- [RL01] 입고실적  조회 제품별 -->
	<select id="RL01_03_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT RH.WAREKY AS "WAREKY",
		       WH.NAME01 AS "WAREKYNM",
		       RI.SKUKEY AS "SKUKEY",
		       RI.DESC01 AS "DESC01",
		       NVL(SUM(RI.QTYRCV),0) AS "QTYRCV",
		       NVL(SUM(RI.QTYORG),0) AS "QTYORG",
		
		       NVL(SUM(RI.HEIGHT * RI.QTYORG),0) AS "AMOUNT",
		
		       NVL(SUM(RI.CUBICM * RI.QTYORG),0) AS "CUBICT"
		  FROM V_ALL_RECDH RH
		       INNER JOIN V_ALL_RECDI RI
		               ON RH.RECVKY = RI.RECVKY
		       LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = RH.WAREKY
		 WHERE 1 = 1
		   AND RH.OWNRKY = #{OWNRKY}
		   AND RH.WAREKY = #{WAREKY}
		   <!--  <statement property="RangeSearch" prefix="AND"/>-->
            <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
			</if>
		 GROUP BY RH.WAREKY, WH.NAME01,
		          RI.SKUKEY, RI.DESC01
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL01] 입고실적  조회 문서별 -->
	<select id="RL01_04_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT RH.WAREKY AS "WAREKY",
		       WH.NAME01 AS "WAREKYNM",
		       RH.RCPTTY AS "DOCUTY",
		       DT.SHORTX AS "DOCUTYNM",
		       NVL(SUM(RI.QTYRCV),0) AS "QTYRCV",
		       NVL(SUM(RI.QTYORG),0) AS "QTYORG",
		       NVL(SUM(RI.HEIGHT * RI.QTYORG),0) AS "AMOUNT",
		       NVL(SUM(RI.CUBICM * RI.QTYORG),0) AS "CUBICT"
		  FROM V_ALL_RECDH RH
		       INNER JOIN V_ALL_RECDI RI
		               ON RH.RECVKY = RI.RECVKY
		       LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = RH.WAREKY
		       LEFT OUTER JOIN DOCTM DT
		               ON DT.DOCUTY = RH.RCPTTY
		 WHERE 1 = 1
		   AND RH.OWNRKY = #{OWNRKY}
		   AND RH.WAREKY = #{WAREKY}
		   <!--  <statement property="RangeSearch" prefix="AND"/>-->
            <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
			</if>
		 GROUP BY RH.WAREKY, WH.NAME01,
		          RH.RCPTTY, DT.SHORTX
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL01] 입고실적  조회 문서/제품별 -->
	<select id="RL01_05_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT RH.WAREKY AS "WAREKY",
		       WH.NAME01 AS "WAREKYNM",
		       RH.RCPTTY AS "DOCUTY",
		       DT.SHORTX AS "DOCUTYNM",
		       RI.SKUKEY AS "SKUKEY",
		       RI.DESC01 AS "DESC01",
		       NVL(SUM(RI.QTYRCV),0) AS "QTYRCV",
		       NVL(SUM(RI.QTYORG),0) AS "QTYORG",
		       NVL(SUM(RI.HEIGHT * RI.QTYORG),0) AS "AMOUNT",
		       NVL(SUM(RI.CUBICM * RI.QTYORG),0) AS "CUBICT",
		       NVL(DECODE(SM.QTDUOM,0,9999999,SM.QTDUOM),9999999) AS "QTDUOM",
		       ROUND(SUM(RI.QTYRCV) / MAX(SM.QTYSTD),0) AS "PLTQTY",
		       MAX(SM.QTYSTD) AS "PLTQTYCAL",
		       MAX(SM.QTYSTD) AS "QTPUOM",
		       ROUND(SUM(RI.QTYRCV) / SM.QTDUOM,0) AS "BOXQTY",
		       MAX(SM.QTDUOM) AS "BXIQTY"
		  FROM V_ALL_RECDH RH
		       INNER JOIN V_ALL_RECDI RI
		               ON RH.RECVKY = RI.RECVKY
		       INNER JOIN SKUMA SM ON SM.OWNRKY = RH.OWNRKY AND SM.SKUKEY = RI.SKUKEY
		       LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = RH.WAREKY
		       LEFT OUTER JOIN DOCTM DT
		               ON DT.DOCUTY = RH.RCPTTY
		 WHERE 1 = 1
		   AND RH.OWNRKY = #{OWNRKY}
		   AND RH.WAREKY = #{WAREKY}
		   <!--  <statement property="RangeSearch" prefix="AND"/>-->
            <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
			</if>
		 GROUP BY RH.WAREKY, WH.NAME01, RH.RCPTTY, DT.SHORTX, 
		          RI.SKUKEY, RI.DESC01,SM.QTDUOM,SM.QTYSTD
		 ORDER BY RH.WAREKY, WH.NAME01, RH.RCPTTY, DT.SHORTX, RI.SKUKEY
	</select>
	
	<!-- [RL02] 출고실적  조회 연/월별 -->
	<select id="RL02_01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ORDERED INDEX(SD IDX_SHPDR_NEW01)*/ SH.WAREKY AS "WAREKY",
		       SUBSTR(SD.CARDAT,1,4) AS "YEAR",
		       SUBSTR(SD.CARDAT,5,2) AS "MONTH",
		       SUM(SI.QTSHPD) AS "QTSHPD",
		       ROUND(SUM(SI.QTSHPD / SI.QTDUOM),2)  AS "TOTBOX",
		       SUM(SI.QTSHPD) * MAX(SI.NETWGT)  AS "TOTWGT"
		  FROM SHPDH SH 
		       INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN SHPDR SD ON SD.SHPOKY = SI.SHPOKY AND SD.SHPOIT = SI.SHPOIT
		 WHERE SH.SHPMTY NOT IN ('299')
		   AND SH.STATDO IN ('PSH','FSH')
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}
		   <!--  <statement property="RangeSearch" prefix="AND"/>-->
            <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
			</if>
		 GROUP BY SUBSTR(SD.CARDAT,1,4),SUBSTR(SD.CARDAT,5,2), SH.WAREKY
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL02] 출고실적  조회 일별 -->
	<select id="RL02_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ORDERED INDEX(SD IDX_SHPDR_NEW01)*/ SH.WAREKY AS "WAREKY",
		       SUBSTR(SD.CARDAT,1,4) AS "YEAR",
		       SUBSTR(SD.CARDAT,5,2) AS "MONTH",
		       SUBSTR(SD.CARDAT,7,2) AS "DAY",
		       NVL(SUM(SI.QTSHPD),0) AS "QTSHPD",
		       NVL(ROUND(SUM(SI.QTSHPD / SI.QTDUOM),2),0)  AS "TOTBOX",
		       NVL(SUM(SI.QTSHPD) * MAX(SI.NETWGT),0)  AS "TOTWGT"
		  FROM SHPDH SH 
		       INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN SHPDR SD ON SD.SHPOKY = SI.SHPOKY AND SD.SHPOIT = SI.SHPOIT
		 WHERE SH.SHPMTY NOT IN ('299')
		   AND SH.STATDO IN ('PSH','FSH')
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}
		 <!--    <statement property="RangeSearch" prefix="AND"/>-->
         <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		 </if>
		 GROUP BY SD.CARDAT, SH.WAREKY
		 ORDER BY 1,2,3,4,5
	</select>
	
	<!-- [RL02] 출고실적  조회 제품별 -->
	<select id="RL02_03_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ORDERED INDEX(SD IDX_SHPDR_NEW01)*/ SH.WAREKY AS WAREKY,
		       SI.SKUKEY AS SKUKEY,
		       SI.DESC01 AS DESC01,
		       NVL(SUM(SI.QTSHPD),0) AS "QTSHPD",
		       NVL(ROUND(SUM(SI.QTSHPD / SI.QTDUOM),2),0)  AS "TOTBOX",
		       NVL(SUM(SI.QTSHPD) * MAX(SI.NETWGT),0)  AS "TOTWGT"
		  FROM SHPDH SH 
		       INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN SHPDR SD ON SD.SHPOKY = SI.SHPOKY AND SD.SHPOIT = SI.SHPOIT
		 WHERE SH.SHPMTY NOT IN ('299')
		   AND SH.STATDO IN ('PSH','FSH')
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}
		 <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		 </if>
		 GROUP BY SH.WAREKY, SI.SKUKEY, SI.DESC01
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL02] 출고실적  조회 문서별 -->
	<select id="RL02_04_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ORDERED INDEX(SD IDX_SHPDR_NEW01)*/ SH.WAREKY AS WAREKY,
		       SH.SHPMTY AS DOCUTY,
		       NVL(SUM(SI.QTSHPD),0) AS "QTSHPD",
		       NVL(ROUND(SUM(SI.QTSHPD / SI.QTDUOM),2),0)  AS "TOTBOX",
		       NVL(SUM(SI.QTSHPD) * MAX(SI.NETWGT),0)  AS "TOTWGT"
		  FROM SHPDH SH 
		       INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN SHPDR SD ON SD.SHPOKY = SI.SHPOKY AND SD.SHPOIT = SI.SHPOIT
		 WHERE SH.SHPMTY NOT IN ('299')
		   AND SH.STATDO IN ('PSH','FSH')
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY SH.WAREKY, SH.SHPMTY
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL02] 출고실적  조회 문서/제품별 -->
	<select id="RL02_05_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ORDERED INDEX(SD IDX_SHPDR_NEW01)*/ SH.WAREKY AS WAREKY,
		       SH.SHPMTY AS DOCUTY,
		       SI.SKUKEY AS SKUKEY,
		       SI.DESC01 AS DESC01,
		       NVL(SUM(SI.QTSHPD),0) AS "QTSHPD",
		       NVL(ROUND(SUM(SI.QTSHPD / SI.QTDUOM),2),0)  AS "TOTBOX",
		       NVL(SUM(SI.QTSHPD) * MAX(SI.NETWGT),0)  AS "TOTWGT"
		
		  FROM SHPDH SH 
		       INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN SHPDR SD ON SD.SHPOKY = SI.SHPOKY AND SD.SHPOIT = SI.SHPOIT
		 WHERE SH.SHPMTY NOT IN ('299')
		   AND SH.STATDO IN ('PSH','FSH')
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY SH.WAREKY, SH.SHPMTY, SI.SKUKEY, SI.DESC01
		 ORDER BY 1,2,3,4,5
	</select>
	
	<!-- [RL02] 출고실적  조회 주문부서별 -->
	<select id="RL02_06_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ORDERED INDEX(SD IDX_SHPDR_NEW01)*/ SH.WAREKY AS WAREKY,
		       SH.PGRC04 AS "PGRC04",
		       SH.SHPMTY AS "DOCUTY",
		       NVL(SUM(SI.QTSHPD),0) AS "QTSHPD",
		       NVL(ROUND(SUM(SI.QTSHPD / SI.QTDUOM),2),0)  AS "TOTBOX",
		       NVL(SUM(SI.QTSHPD * SI.NETWGT),0)  AS "TOTWGT"
		
		  FROM SHPDH SH 
		       INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN SHPDR SD ON SD.SHPOKY = SI.SHPOKY AND SD.SHPOIT = SI.SHPOIT
		 WHERE SH.SHPMTY NOT IN ('299')
		   AND SH.STATDO IN ('PSH','FSH')
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY SH.WAREKY, SH.PGRC04, SH.SHPMTY
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL02] 출고실적  조회 주문부서/문서별 -->
	<select id="RL02_07_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ORDERED INDEX(SD IDX_SHPDR_NEW01)*/ SH.WAREKY AS WAREKY,
		       SH.PGRC04 AS "PGRC04",
		       NVL(SUM(SI.QTSHPD),0) AS "QTSHPD",
		       NVL(ROUND(SUM(SI.QTSHPD / SI.QTDUOM),2),0)  AS "TOTBOX",
		       NVL(SUM(SI.QTSHPD * SI.NETWGT),0)  AS "TOTWGT"
		
		  FROM SHPDH SH 
		       INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN SHPDR SD ON SD.SHPOKY = SI.SHPOKY AND SD.SHPOIT = SI.SHPOIT
		 WHERE SH.SHPMTY NOT IN ('299')
		   AND SH.STATDO IN ('PSH','FSH')
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY SH.WAREKY, SH.PGRC04
		 ORDER BY 1,2,3
	</select>
	
	<!-- [RL02] 출고실적  조회 주문부서/문서/제품별 -->
	<select id="RL02_08_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ORDERED INDEX(SD IDX_SHPDR_NEW01)*/ SH.WAREKY AS WAREKY,
		       SH.PGRC04 AS "PGRC04",
		       SH.SHPMTY AS "DOCUTY",
		       SI.SKUKEY AS "SKUKEY",
		       SI.DESC01 AS "DESC01",
		       NVL(SUM(SI.QTSHPD),0) AS "QTSHPD",
		       NVL(ROUND(SUM(SI.QTSHPD / SI.QTDUOM),2),0)  AS "TOTBOX",
		       NVL(SUM(SI.QTSHPD) * MAX(SI.NETWGT),0)  AS "TOTWGT"
		
		  FROM SHPDH SH 
		       INNER JOIN SHPDI SI ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN SHPDR SD ON SD.SHPOKY = SI.SHPOKY AND SD.SHPOIT = SI.SHPOIT
		 WHERE SH.SHPMTY NOT IN ('299')
		   AND SH.STATDO IN ('PSH','FSH')
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY SH.WAREKY, SH.PGRC04, SH.SHPMTY, SI.SKUKEY, SI.DESC01
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL03] 조정실적  조회 연/월별 -->
	<select id="RL03_01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT AH.WAREKY AS WAREKY,
		       WH.NAME01 AS WAREKYNM,
		       SUBSTR(AH.DOCDAT,1,4) AS YEAR,
		       SUBSTR(AH.DOCDAT,5,2) AS MONTH,
		       NVL(SUM(AI.QTADJU),0) AS QTADJU,
		       NVL(SUM(AI.HEIGHT * AI.QTADJU),0) AS AMOUNT
		  FROM ADJDH AH
		       INNER JOIN ADJDI AI
		               ON AH.SADJKY = AI.SADJKY
		       INNER JOIN WAHMA WH
		               ON WH.WAREKY = AH.WAREKY
		 WHERE 1 = 1
		   AND AI.OWNRKY = #{OWNRKY}
		   AND AH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY SUBSTR(AH.DOCDAT,1,4),SUBSTR(AH.DOCDAT,5,2),
		          AH.WAREKY, WH.NAME01
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL03] 조정실적  조회 일별 -->
	<select id="RL03_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT AH.WAREKY AS WAREKY,
		       WH.NAME01 AS WAREKYNM,
		       SUBSTR(AH.DOCDAT,1,4) AS YEAR,
		       SUBSTR(AH.DOCDAT,5,2) AS MONTH,
		       SUBSTR(AH.DOCDAT,7,2) AS DAY,
		       NVL(SUM(AI.QTADJU),0) AS QTADJU,
		       NVL(SUM(AI.HEIGHT * AI.QTADJU),0) AS AMOUNT
		  FROM ADJDH AH
		       INNER JOIN ADJDI AI
		               ON AH.SADJKY = AI.SADJKY
		       INNER JOIN WAHMA WH
		               ON WH.WAREKY = AH.WAREKY
		 WHERE 1= 1
		   AND AI.OWNRKY = #{OWNRKY}
		   AND AH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY SUBSTR(AH.DOCDAT,1,4),SUBSTR(AH.DOCDAT,5,2),SUBSTR(AH.DOCDAT,7,2),
		          AH.WAREKY, WH.NAME01
		 ORDER BY 1,2,3,4,5
	</select>
	
	<!-- [RL03] 조정실적  조회 제품별 -->
	<select id="RL03_03_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT AH.WAREKY AS WAREKY,
		       WH.NAME01 AS WAREKYNM,
		       AI.SKUKEY AS SKUKEY,
		       AI.DESC01 AS DESC01,
		       NVL(SUM(AI.QTADJU),0) AS QTADJU,
		       NVL(SUM(AI.HEIGHT * AI.QTADJU),0) AS AMOUNT
		  FROM ADJDH AH
		       INNER JOIN ADJDI AI
		               ON AH.SADJKY = AI.SADJKY
		       INNER JOIN WAHMA WH
		               ON WH.WAREKY = AH.WAREKY
		 WHERE 1 =1 
		   AND AI.OWNRKY = #{OWNRKY}
		   AND AH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY AH.WAREKY, WH.NAME01, AI.SKUKEY, AI.DESC01
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL03] 조정실적  조회 문서별 -->
	<select id="RL03_04_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT AH.WAREKY AS WAREKY,
		       WH.NAME01 AS WAREKYNM,
		       AH.ADJUTY AS DOCUTY,
		       DT.SHORTX AS DOCUTYNM,
		       NVL(SUM(AI.QTADJU),0) AS QTADJU,
		       NVL(SUM(AI.HEIGHT * AI.QTADJU),0) AS AMOUNT
		  FROM ADJDH AH
		       INNER JOIN ADJDI AI
		               ON AH.SADJKY = AI.SADJKY
		       INNER JOIN WAHMA WH
		               ON WH.WAREKY = AH.WAREKY
		       LEFT OUTER JOIN DOCTM DT
		               ON DT.DOCUTY = AH.ADJUTY
		 WHERE 1 = 1
		   AND AI.OWNRKY = #{OWNRKY}
		   AND AH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY AH.WAREKY, WH.NAME01, AH.ADJUTY, DT.SHORTX
		 ORDER BY 1,2,3,4
	</select>
	
	<!-- [RL03] 조정실적  조회 문서/제품별 -->
	<select id="RL03_05_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT AH.WAREKY AS WAREKY,
		       WH.NAME01 AS WAREKYNM,
		       AH.ADJUTY AS DOCUTY,
		       DT.SHORTX AS DOCUTYNM,
		       AI.SKUKEY AS SKUKEY,
		       AI.DESC01 AS DESC01,
		       NVL(SUM(AI.QTADJU),0) AS QTADJU,
		       NVL(SUM(AI.HEIGHT * AI.QTADJU),0) AS AMOUNT
		  FROM ADJDH AH
		       INNER JOIN ADJDI AI
		               ON AH.SADJKY = AI.SADJKY
		       INNER JOIN WAHMA WH
		               ON WH.WAREKY = AH.WAREKY
		       LEFT OUTER JOIN DOCTM DT
		               ON DT.DOCUTY = AH.ADJUTY
		 WHERE 1 = 1
		   AND AI.OWNRKY = #{OWNRKY}
		   AND AH.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
		 GROUP BY AH.WAREKY, WH.NAME01, AH.ADJUTY, DT.SHORTX, AI.SKUKEY, AI.DESC01 
		 ORDER BY AH.WAREKY, AH.ADJUTY, AI.SKUKEY
	</select>
	
	<!-- [RL04] 재고트랜잭션 -->
	<select id="RL04_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT WT.TRNHKY  AS "TRNHKY",
		       WT.ITEMNO  AS "ITEMNO",
		       WT.TRNHTY  AS "TRNHTY",
		       WT.TASKTY  AS "TASKTY",
		       WT.WAREKY  AS "WAREKY",
		       WT.AREAKY  AS "AREAKY",
		       WT.ZONEKY  AS "ZONEKY",
		       WT.LOCAKY  AS "LOCAKY",
		       WT.OWNRKY  AS "OWNRKY",
		       WT.SKUKEY  AS "SKUKEY",
		       WT.DESC01  AS "DESC01",
		       WT.DESC02  AS "DESC02",
		       WT.QTPROC  AS "QTPROC",
		       WT.UOMKEY  AS "UOMKEY",
		       WT.PURCKY  AS "PURCKY",
		       WT.PURCIT  AS "PURCIT",
		       WT.ASNDKY  AS "ASNDKY",
		       WT.ASNDIT  AS "ASNDIT",
		       WT.RECVKY  AS "RECVKY",
		       WT.RECVIT  AS "RECVIT",
		       WT.SHPOKY  AS "SHPOKY",
		       WT.SHPOIT  AS "SHPOIT",
		       WT.GRPOKY  AS "GRPOKY",
		       WT.GRPOIT  AS "GRPOIT",
		       WT.TASKKY  AS "TASKKY",
		       WT.TASKIT  AS "TASKIT",
		       WT.SADJKY  AS "SADJKY",
		       WT.SADJIT  AS "SADJIT",
		       WT.PHYIKY  AS "PHYIKY",
		       WT.PHYIIT  AS "PHYIIT",
		       WT.SMANDT  AS "SMANDT",
		       WT.SEBELN  AS "SEBELN",
		       WT.SEBELP  AS "SEBELP",
		       WT.SZMBLNO AS "SZMBLNO",
		       WT.SZMIPNO AS "SZMIPNO",
		       WT.STRAID  AS "STRAID",
		       WT.SVBELN  AS "SVBELN",
		       WT.SPOSNR  AS "SPOSNR",
		       WT.STKNUM  AS "STKNUM",
		       WT.STPNUM  AS "STPNUM",
		       WT.SWERKS  AS "SWERKS",
		       WT.SLGORT  AS "SLGORT",
		       WT.CREDAT  AS "CREDAT",
		       WT.CRETIM  AS "CRETIM",
		       WT.CREUSR  AS "CREUSR",
		       CU.NMLAST  AS "CUSRNM",
		       WT.LMODAT  AS "LMODAT",
		       WT.LMOTIM  AS "LMOTIM",
		       WT.LMOUSR  AS "LMOUSR",
		       LU.NMLAST  AS "LUSRNM"
		  FROM V_WHTRH WT LEFT OUTER JOIN USRMA CU ON CU.USERID = WT.CREUSR
		                  LEFT OUTER JOIN USRMA LU ON LU.USERID = WT.LMOUSR
		 WHERE 1 = 1
		   AND WT.OWNRKY = #{OWNRKY}
           AND WT.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
	</select>
	
	<!-- [RL05] 배송물량집계표 -->
	<select id="RL05_01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.ORDDAT||VW.CARNUM AS "KEY",
		       VW.OWNRKY AS "OWNRKY",
		       VW.WAREKY AS "WAREKY",
		       VW.CARNUM AS "CARNUM",
		       VW.DRIVER AS "DRIVER",
		       VW.CARTYP AS "CARTYP",
		       VW.DESC01 AS "DESC01",
		       VW.CARGBN AS "CARGBN",
		       VW.CARTMP AS "CARTMP",
		       VW.ORDDAT AS "ORDDAT",
		       SUM(VW.QTYREQ) AS "QTJCMP",
		       SUM(TRUNC(VW.QTYREQ / SM.QTDUOM)) AS "QTYBOX",
		       SUM(MOD(VW.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM))) AS "REMQTY",
		       NVL( ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3),0) AS "QTJWGT",
		       NVL(ROUND(SUM(VW.QTYREQ * SM.NETWGT), 3) - TRIM(REPLACE(CARTYP,'T','')) * 1000,0) AS "DIFQTY" 
	  FROM V_WMS_RL05_VIEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
	  WHERE VW.OWNRKY = #{OWNRKY}
	    AND VW.WAREKY = #{WAREKY}
	   <!--  
	   <statement property="range1" prefix="and"/>
	   <isEqual property="c00102" compareValue="ALL" >
	   </isEqual> 
	   <isEqual property="c00102" compareValue="B" >
	   AND VW.C00102 = 'X'
	   </isEqual> 
	   <isEqual property="c00102" compareValue="C" >
	   AND VW.C00102 = 'N'
	   </isEqual> 
	   <isEqual property="c00102" compareValue="D" >
	   AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
	   </isEqual> 
	   <isEqual property="c00102" compareValue="E" >
	   AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
	   </isEqual> 
		-->	   
	   	   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
			<if test='C00102 == "ALL"'>
		   		
		   	</if>
		   	<if test='C00102 == "B"'>
		   		AND VW.C00102 = 'X'
		   	</if>
		   	<if test='C00102 == "C"'>
		   		AND VW.C00102 = 'N'
		   	</if>
		   	<if test='C00102 == "D"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   	</if>
		   	<if test='C00102 == "E"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   	</if>
	   
		 GROUP BY VW.OWNRKY, VW.WAREKY, VW.CARTYP, VW.CARGBN, VW.CARTMP, VW.DESC01, VW.DRIVER, VW.ORDDAT, VW.CARNUM
		 ORDER BY VW.ORDDAT, VW.CARNUM

	</select>
	
	<!-- [RL05] 배송물량집계표 -->
	<select id="RL05_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS "OWNRKY",
		       VW.WAREKY AS "WAREKY",
		       VW.CARNUM AS "CARNUM",
		       VW.DRIVER AS "DRIVER",
		       VW.CARTYP AS "CARTYP",
		       VW.DESC01 AS "DESC01",
		       VW.CARGBN AS "CARGBN",
		       VW.CARTMP AS "CARTMP",
		       SUM(VW.QTYREQ) AS "QTJCMP",
		       SUM(TRUNC(VW.QTYREQ / SM.QTDUOM)) AS "QTYBOX",
		       SUM(MOD(VW.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM))) AS "REMQTY",
		       NVL( ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3),0) AS "QTJWGT",
		       NVL(ROUND(SUM(VW.QTYREQ * SM.NETWGT), 3) - TRIM(REPLACE(CARTYP,'T','')) * 1000,0) AS "DIFQTY" 
		  FROM V_WMS_RL05_VIEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
	  	 WHERE VW.OWNRKY = #{OWNRKY}
	 	   AND VW.WAREKY = #{WAREKY}
	   	   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
		   </if>
			<if test='C00102 == "ALL"'>
		   		
		   	</if>
		   	<if test='C00102 == "B"'>
		   		AND VW.C00102 = 'X'
		   	</if>
		   	<if test='C00102 == "C"'>
		   		AND VW.C00102 = 'N'
		   	</if>
		   	<if test='C00102 == "D"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   	</if>
		   	<if test='C00102 == "E"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   	</if>
			 GROUP BY VW.OWNRKY, VW.WAREKY, VW.CARTYP, VW.CARGBN, VW.CARTMP, VW.DESC01, VW.DRIVER, VW.CARNUM
			 ORDER BY VW.CARNUM

	</select>
	
	
	<!-- [RL05] 배송물량집계표 일자별탭 POPUP-->
	<select id="DRCAR_01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS "OWNRKY",
		       VW.WAREKY AS "WAREKY",
		       WM.NAME01 AS "NAME01",
		       NVL(VW.CARNUM,' ') AS "CARNUM",
		       VW.DESC01 AS "CNUMNM",
		       VW.SKUKEY AS "SKUKEY",
		       SM.QTDUOM AS "QTDUOM",
		       SM.DESC01 AS "DESC01",
		       SUM(VW.QTYREQ) AS "QTJCMP",
		       NVL(SUM(TRUNC((VW.QTYREQ) / SM.QTDUOM)), 0) AS "QTYBOX",
		       NVL(SUM(MOD( VW.QTYREQ , DECODE(SM.QTDUOM, 0,NULL, SM.QTDUOM))),0) AS "REMQTY",
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS "QTJWGT"
		  FROM V_WMS_RL05_VIEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                          LEFT OUTER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		 WHERE 1 = 1
		   AND VW.OWNRKY = #{OWNRKY}
		   AND VW.WAREKY = #{WAREKY}
		   AND VW.ORDDAT = #{ORDDAT}
		   
		   <if test="CARNUM != null and CARNUM != ''">
		   		AND VW.CARNUM = #{CARNUM}
		   </if>
		   	<if test='C00102 == "ALL"'>
		   	</if>
		   	<if test='C00102 == "B"'>
		   		AND VW.C00102 = 'X'
		   	</if>
		   	<if test='C00102 == "C"'>
		   		AND VW.C00102 = 'N'
		   	</if>
		   	<if test='C00102 == "D"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   	</if>
		   	<if test='C00102 == "E"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   	</if>
	 GROUP BY VW.OWNRKY, VW.WAREKY, WM.NAME01, VW.DESC01, VW.CARNUM , VW.SKUKEY, SM.QTDUOM, SM.DESC01, VW.CARNUM
	 ORDER BY VW.CARNUM
	
	</select>
	
	<!-- [RL05] 배송물량집계표 일자별탭 POPUP-->
	<select id="DRCAR_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS "OWNRKY",
		       VW.WAREKY AS "WAREKY",
		       VW.ORDDAT AS "ORDDAT",
		       VW.ORDDAT AS "ORDDAT2",
		       WM.NAME01 AS "NAME01",
		       NVL(VW.CARNUM,' ') AS "CARNUM",
		       VW.DESC01 AS "CNUMNM",
		       VW.PTNROD  AS "PTNROD",
		       BZ.NAME01 AS "PTNRODNM",
		       VW.PTNRTO  AS "PTNRTO",
		       BZ2.NAME01 AS "PTNRTONM",
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS "QTJWGT"
		  FROM V_WMS_RL05_VIEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                          INNER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		                          INNER JOIN BZPTN BZ ON BZ.OWNRKY = VW.OWNRKY AND BZ.PTNRKY = VW.PTNROD AND BZ.PTNRTY='0001'
		                          INNER JOIN BZPTN BZ2 ON BZ2.OWNRKY = VW.OWNRKY AND BZ2.PTNRKY = VW.PTNRTO AND BZ2.PTNRTY='0007'
		 WHERE 1 = 1
		   AND VW.OWNRKY = #{OWNRKY}
		   AND VW.WAREKY = #{WAREKY}
		   AND VW.ORDDAT = #{ORDDAT}
		   
		   <if test="CARNUM != null and CARNUM != ''">
		   		AND VW.CARNUM = #{CARNUM}
		   </if>
		   	<if test='C00102 == "ALL"'>
		   	</if>
		   	<if test='C00102 == "B"'>
		   		AND VW.C00102 = 'X'
		   	</if>
		   	<if test='C00102 == "C"'>
		   		AND VW.C00102 = 'N'
		   	</if>
		   	<if test='C00102 == "D"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   	</if>
		   	<if test='C00102 == "E"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   	</if>
	 GROUP BY VW.OWNRKY, VW.WAREKY, VW.ORDDAT, WM.NAME01, VW.CARNUM, VW.DESC01, VW.PTNROD, VW.PTNRTO, BZ.NAME01, BZ2.NAME01
 	 ORDER BY VW.CARNUM
	</select>
	
	
	
	<!-- [RL05] 배송물량집계표 -->
	<select id="DRBZPTN_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS "OWNRKY",
		       VW.WAREKY AS "WAREKY",
		       WM.NAME01 AS "NAME01",
		       VW.CARNUM AS "CARNUM",
		       VW.DESC01 AS "CNUMNM",
		       VW.PTNROD  AS "PTNROD",
		       BZ.NAME01 AS "PTNRODNM",
		       VW.PTNRTO  AS "PTNRTO",
		       BZ2.NAME01 AS "PTNRTONM",
		       VW.SKUKEY AS "SKUKEY",
		       SM.QTDUOM AS "QTDUOM",
		       SM.DESC01 AS "DESC01",
		       SUM(VW.QTYREQ) AS "QTJCMP",
		       NVL(SUM(TRUNC((VW.QTYREQ) / SM.QTDUOM)), 0)  AS "QTYBOX",
		       NVL(SUM(MOD( VW.QTYREQ , DECODE(SM.QTDUOM, 0,NULL, SM.QTDUOM))),0) AS "REMQTY",
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS "QTJWGT"
		  FROM V_WMS_RL05_VIEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY           
		                          INNER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		                          INNER JOIN BZPTN BZ ON BZ.OWNRKY = VW.OWNRKY AND  BZ.PTNRKY = VW.PTNROD AND BZ.PTNRTY='0001'
		                          INNER JOIN BZPTN BZ2 ON BZ2.OWNRKY = VW.OWNRKY AND BZ2.PTNRKY = VW.PTNRTO AND BZ2.PTNRTY='0007'
		 WHERE 1 = 1
		   AND VW.OWNRKY = #{OWNRKY}
		   AND VW.WAREKY = #{WAREKY}
		   AND VW.ORDDAT = #{ORDDAT}
	   	   AND VW.CARNUM = #{CARNUM}
	   	   AND VW.PTNRTO = #{PTNRTO}
	   	   AND VW.PTNROD = #{PTNROD}
		   
		   	<if test='C00102 == "ALL"'>
		   	</if>
		   	<if test='C00102 == "B"'>
		   		AND VW.C00102 = 'X'
		   	</if>
		   	<if test='C00102 == "C"'>
		   		AND VW.C00102 = 'N'
		   	</if>
		   	<if test='C00102 == "D"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   	</if>
		   	<if test='C00102 == "E"'>
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   	</if>
		 GROUP BY VW.OWNRKY, VW.WAREKY, WM.NAME01, VW.DESC01, VW.PTNROD, VW.PTNRTO, BZ.NAME01, BZ2.NAME01, VW.CARNUM , VW.SKUKEY, SM.QTDUOM, SM.DESC01, VW.CARNUM
		 ORDER BY VW.CARNUM
	</select>
	
	<!-- [RL06] 출고실적집계표 -->
	<select id="RL06_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT PGRC04 AS "PGRC04",
	       SKUKEY AS "SKUKEY",
	       DESC01 AS "DESC01",
	       DESC02 AS "DESC02",
	       NETWGT AS "NETWGT",
	       SUM(NVL(TRIM(NUM01),0)) AS "NUM01",
	       SUM(NVL(TRIM(NUM02),0)) AS "NUM02",
	       SUM(NVL(TRIM(NUM03),0)) AS "NUM03",
	       SUM(NVL(TRIM(NUM04),0)) AS "NUM04",
	       SUM(NVL(TRIM(NUM05),0)) AS "NUM05",
	       SUM(NVL(TRIM(NUM06),0)) AS "NUM06",
	       SUM(NVL(TRIM(NUM01),0)+NVL(TRIM(NUM02),0)+NVL(TRIM(NUM03),0)+NVL(TRIM(NUM04),0)+NVL(TRIM(NUM05),0)+NVL(TRIM(NUM06),0)) AS "TOT01",
	       SUM(NVL(TRIM(NUM07),0)) AS "NUM07",
	       SUM(NVL(TRIM(NUM08),0)) AS "NUM08",
	       SUM(NVL(TRIM(NUM09),0)) AS "NUM09",
	       SUM(NVL(TRIM(NUM10),0)) AS "NUM10",
	       SUM(NVL(TRIM(NUM11),0)) AS "NUM11",
	       SUM(NVL(TRIM(NUM12),0)) AS "NUM12",
	       SUM(NVL(TRIM(NUM13),0)) AS "NUM13",
	       SUM(NVL(TRIM(NUM07),0)+NVL(TRIM(NUM08),0)+NVL(TRIM(NUM09),0)+NVL(TRIM(NUM10),0)+NVL(TRIM(NUM11),0)+NVL(TRIM(NUM12),0)+NVL(TRIM(NUM13),0)) AS "TOT02"
	  FROM (
	        SELECT /*+ INDEX(SR IDX_SHPDR_NEW01)*/ SH.SHPMTY,
	               SH.PGRC04,
	               SI.SKUKEY,
	               SM.DESC01,
	               SM.DESC02,
	               SM.NETWGT,
	               CASE SH.WAREKY WHEN '2101' THEN 0 
	                              WHEN '2263' THEN 0   
	                              ELSE CASE PGRC02 WHEN '02' THEN 0 
	                                               ELSE CASE SH.SHPMTY WHEN '211' THEN (SI.QTSHPD - SI.QTYREF) 
	                                                                   WHEN '215' THEN (SI.QTSHPD - SI.QTYREF) ELSE 0 END END END AS NUM01,
	               CASE SH.WAREKY WHEN '2101' THEN 0 
	                              WHEN '2263' THEN 0
	                              ELSE CASE PGRC02 WHEN '02' THEN (SI.QTSHPD - SI.QTYREF) ELSE 0 END END AS NUM02,
	               CASE SH.WAREKY WHEN '2101' THEN (SI.QTSHPD - SI.QTYREF) 
	                              WHEN '2263' THEN (SI.QTSHPD - SI.QTYREF)
	               ELSE 0 END AS NUM03,
	               CASE SH.WAREKY WHEN '2101' THEN 0
	                              WHEN '2263' THEN 0 
	                              ELSE CASE PGRC02 WHEN '02' THEN 0 
	                                               ELSE CASE SH.SHPMTY WHEN '212' THEN (SI.QTSHPD - SI.QTYREF) ELSE 0 END END END AS NUM04,
	               CASE SH.WAREKY WHEN '2101' THEN 0 
	                              WHEN '2263' THEN 0
	                              ELSE CASE PGRC02 WHEN '02' THEN 0 
	                                               ELSE CASE SH.SHPMTY WHEN '213' THEN (SI.QTSHPD - SI.QTYREF) 
	                                                                   WHEN '214' THEN (SI.QTSHPD - SI.QTYREF) ELSE 0 END END END AS NUM05,
	               CASE SH.SHPMTY WHEN '216' THEN (SI.QTSHPD - SI.QTYREF) ELSE 0 END AS NUM06,
	               0 AS NUM07,
	               0 AS NUM08,
	               0 AS NUM09,
	               0 AS NUM10,
	               0 AS NUM11,
	               0 AS NUM12,
	               0 AS NUM13
	          FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
	                        INNER JOIN SHPDR SR ON SH.SHPOKY = SR.SHPOKY AND SI.SHPOIT = SR.SHPOIT
	                        INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
	         WHERE 1 = 1
	           AND SH.STATDO IN ('PSH','FSH')
	           AND SH.OWNRKY = #{OWNRKY}
	          <!--   AND SH.WAREKY = #{WAREKY}-->
	           <!--  <statement property="RangeSearch" prefix="AND"/>-->
               <if test="RANGE_SQL != null and RANGE_SQL != ''">
					${RANGE_SQL}
			   </if>
	   
	        UNION ALL
	        SELECT RH.RCPTTY AS SHPMTY,
	               (SELECT DISTINCT WARESR FROM IFWMS113 IFW WHERE RI.SVBELN = IFW.SVBELN AND RI.SPOSNR = IFW.SPOSNR AND XSTAT IN('R','D')) AS WARESR,
	               RI.SKUKEY,
	               SM.DESC01,
	               SM.DESC02,
	               SM.NETWGT,
	               0 AS NUM01,
	               0 AS NUM02,
	               0 AS NUM03,
	               0 AS NUM04,
	               0 AS NUM05,
	               0 AS NUM06,
	               CASE RH.RCPTTY WHEN '131' THEN RI.QTYRCV ELSE 0 END AS NUM07,
	               CASE RH.RCPTTY WHEN '133' THEN RI.QTYRCV ELSE 0 END AS NUM08,
	               CASE RH.RCPTTY WHEN '134' THEN RI.QTYRCV ELSE 0 END AS NUM09,
	               CASE RH.RCPTTY WHEN '135' THEN RI.QTYRCV ELSE 0 END AS NUM10,
	               CASE RH.RCPTTY WHEN '137' THEN RI.QTYRCV ELSE 0 END AS NUM11,
	               CASE RH.RCPTTY WHEN '138' THEN RI.QTYRCV ELSE 0 END AS NUM12,
	               CASE RH.RCPTTY WHEN '139' THEN RI.QTYRCV ELSE 0 END AS NUM13
	          FROM RECDI RI INNER JOIN RECDH RH ON RH.RECVKY = RI.RECVKY
	                        INNER JOIN SKUMA SM ON RH.OWNRKY = SM.OWNRKY AND RI.SKUKEY = SM.SKUKEY
	         WHERE 1 = 1
	           AND RH.OWNRKY = #{OWNRKY}
	          <!--  AND RH.WAREKY = #{WAREKY}--> 
	           AND RH.STATDO IN ('FRV')
	           AND RH.RCPTTY IN ('131','133','134','135','137','138','139')
	           <!--  <statement property="RangeSearch2" prefix="AND"/>-->
	           <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
					${RANGE_SQL2}
			   </if>
	       )
	 GROUP BY PGRC04, SKUKEY, DESC01, DESC02, NETWGT
	 ORDER BY 1, 2
	 </select>
	 
	<!-- [RL07] 입/출/재고 -->
	<select id="RL07_01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT RH.DOCDAT, RH.RECVKY, RI.RECVIT,
		       RH.WAREKY, WH.NAME01,
		       RH.RCPTTY, DT.SHORTX,
		       RH.DPTNKY, NVL(BZ.NAME01, BZ2.NAME01) DPTNKYNM,
		       RH.CREDAT, RH.CRETIM, RH.CREUSR, US.NMLAST AS "CREUSR",
		       RI.CREDAT  AS "CREDAT",
		       RI.CRETIM  AS "CRETIM",
		       RI.CREUSR  AS "CREUSR",
		       US.NMLAST  AS "CUSRNM",
		       RI.LMODAT  AS "LMODAT",
		       RI.LMOTIM  AS "LMOTIM",
		       RI.LMOUSR  AS "LMOUSR",
		       US.NMLAST  AS "LUSRNM"
		       RI.LOCAKY, RI.SKUKEY, RI.DESC01, RI.SMANDT, RI.SEBELN, RI.SEBELP, RI.STRAID,
		       RI.QTYRCV, RI.QTYORG, RI.UOMKEY, RI.QTDUOM,
		       TRUNC(RI.QTYRCV/NVL(DECODE(RI.QTDUOM,0,9999999,RI.QTDUOM),9999999)) AS BOXQTY,
		       MOD(RI.QTYRCV,NVL(DECODE(RI.QTDUOM,0,9999999,RI.QTDUOM),9999999)) AS REMQTY,
		       RI.LOTA01,RI.LOTA02,RI.LOTA03,RI.LOTA04,RI.LOTA05,
		       RI.LOTA06,RI.LOTA07,RI.LOTA08,RI.LOTA09,RI.LOTA10,
		       RI.LOTA11,RI.LOTA12,RI.LOTA13,RI.LOTA14,RI.LOTA15,
		       RI.LOTA16,RI.LOTA17,RI.LOTA18,RI.LOTA19,RI.LOTA20
	  FROM V_ALL_RECDH RH
	       INNER JOIN V_ALL_RECDI RI
	               ON RH.RECVKY = RI.RECVKY
	       LEFT OUTER JOIN WAHMA WH
	               ON WH.WAREKY = RH.WAREKY
	       LEFT OUTER JOIN DOCTM DT
	               ON DT.DOCUTY = RH.RCPTTY
	       LEFT OUTER JOIN BZPTN BZ
	               ON BZ.PTNRKY = RH.DPTNKY
	              AND BZ.PTNRTY = '0002'
	              AND BZ.OWNRKY = RH.OWNRKY
	       LEFT OUTER JOIN WAHMA BZ2
	               ON BZ2.WAREKY = RH.DPTNKY
	       LEFT OUTER JOIN USRMA US
	               ON US.USERID = RH.CREUSR
	 WHERE 1=1
	   AND RH.STATDO != 'FCN' 
	   AND RI.STATIT != 'FCN' 
   		<!--  <statement property="RangeSearch1" prefix="AND"/>-->
   		<if test="RANGE_SQL != null and RANGE_SQL != ''">
   			${RANGE_SQL}
   		</if> 
	</select>
	
	
	<!-- [RL07] 입/출/재고 -->
	<select id="RL07_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT SH.DOCDAT, SH.SHPOKY, SI.SHPOIT,
		       SH.WAREKY, WH.NAME01,
		       SH.SHPMTY, DT.SHORTX,
		       SH.DPTNKY, NVL(BZ.NAME01, BZ2.NAME01) DPTNKYNM,
		       SH.CREDAT, SH.CRETIM, SH.CREUSR, US.NMLAST,
		       SI.SKUKEY, SI.DESC01, SI.SMANDT, SI.SVBELN, SI.SPOSNR, SI.STKNUM,SI.STRAID,
		       SI.QTSHPO, SI.QTALOC, SI.QTJCMP, (SI.QTSHPD-SI.QTSHPC-SI.QTYREF) AS QTSHPD, SI.UOMKEY, SI.QTDUOM,
		       TRUNC(SI.QTSHPD/NVL(DECODE(SI.QTDUOM,0,9999999,SI.QTDUOM),9999999)) AS BOXQTY,
		       MOD(SI.QTSHPD,NVL(DECODE(SI.QTDUOM,0,9999999,SI.QTDUOM),9999999)) AS REMQTY,
		       SI.LOTA01,SI.LOTA02,SI.LOTA03,SI.LOTA04,SI.LOTA05,
		       SI.LOTA06,SI.LOTA07,SI.LOTA08,SI.LOTA09,SI.LOTA10,
		       SI.LOTA11,SI.LOTA12,SI.LOTA13,SI.LOTA14,SI.LOTA15,
		       SI.LOTA16,SI.LOTA17,SI.LOTA18,SI.LOTA19,SI.LOTA20,
		       SI.CREDAT  AS "CREDAT",
		       SI.CRETIM  AS "CRETIM",
		       SI.CREUSR  AS "CREUSR",
		       US.NMLAST  AS "CUSRNM",
		       SI.LMODAT  AS "LMODAT",
		       SI.LMOTIM  AS "LMOTIM",
		       SI.LMOUSR  AS "LMOUSR",
		       US.NMLAST  AS "LUSRNM"
		  FROM V_ALL_SHPDH SH
		       INNER JOIN V_ALL_SHPDI SI
		               ON SH.SHPOKY = SI.SHPOKY
		       LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = SH.WAREKY
		       LEFT OUTER JOIN DOCTM DT
		               ON DT.DOCUTY = SH.SHPMTY
		       LEFT OUTER JOIN BZPTN BZ
		               ON BZ.PTNRKY = SH.DPTNKY
		              AND BZ.OWNRKY = SH.OWNRKY
		
		       LEFT OUTER JOIN WAHMA BZ2
		               ON BZ2.WAREKY = SH.DPTNKY
		       LEFT OUTER JOIN USRMA US
		               ON US.USERID = SH.CREUSR
		 WHERE 1=1
		  <!--   <statement property="RangeSearch2" prefix="AND"/>-->
		  <if test="RANGE_SQL != null and RANGE_SQL != ''">
		  		${RANGE_SQL}
		  </if>
		   AND SH.SHPMTY NOT IN ('299')
		  AND BZ.PTNRTY = '0007'
	</select>
	
		<!-- [RL07] 입/출/재고 -->
	<select id="RL07_03_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT AH.DOCDAT, AH.SADJKY, AI.SADJIT,
		       AH.WAREKY, WH.NAME01,
		       AH.ADJUTY, DT.SHORTX,
		       AH.CREDAT, AH.CRETIM, AH.CREUSR, US.NMLAST,
		       AI.SKUKEY, AI.DESC01,
		       AI.QTADJU, AI.UOMKEY, AI.QTDUOM,
		       TRUNC(AI.QTADJU/NVL(DECODE(AI.QTDUOM,0,9999999,AI.QTDUOM),9999999)) AS BOXQTY,
		       MOD(AI.QTADJU,NVL(DECODE(AI.QTDUOM,0,9999999,AI.QTDUOM),9999999)) AS REMQTY,
		       AI.LOTA01,AI.LOTA02,AI.LOTA03,AI.LOTA04,AI.LOTA05,
		       AI.LOTA06,AI.LOTA07,AI.LOTA08,AI.LOTA09,AI.LOTA10,
		       AI.LOTA11,AI.LOTA12,AI.LOTA13,AI.LOTA14,AI.LOTA15,
		       AI.LOTA16,AI.LOTA17,AI.LOTA18,AI.LOTA19,AI.LOTA20,
		       ADT.CREDAT  AS "CREDAT",
		       WT.CRETIM  AS "CRETIM",
		       WT.CREUSR  AS "CREUSR",
		       CU.NMLAST  AS "CUSRNM",
		       WT.LMODAT  AS "LMODAT",
		       WT.LMOTIM  AS "LMOTIM",
		       WT.LMOUSR  AS "LMOUSR",
		       LU.NMLAST  AS "LUSRNM"
		  FROM ADJDH AH
		       INNER JOIN ADJDI AI
		               ON AH.SADJKY = AI.SADJKY
		       INNER JOIN WAHMA WH
		               ON WH.WAREKY = AH.WAREKY
		       LEFT OUTER JOIN DOCTM DT
		               ON DT.DOCUTY = AH.ADJUTY
		       LEFT OUTER JOIN USRMA US
		               ON US.USERID = AH.CREUSR
		 WHERE 1=1
		  <if test="RANGE_SQL != null and RANGE_SQL != ''">
		  		${RANGE_SQL}
		  </if>
	</select>
	
	<!-- [RL08] 창고가동률 -->
	<select id="RL08_01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT WAREKY AS "WAREKY",
       WAREKYNM AS "WAREKYNM",
       AREAKY AS "AREAKY",
       AREAKYNM AS "AREAKYNM",
       ZONEKY AS "ZONEKY",
       ZONEKYNM AS "ZONEKYNM",
       STKLOC AS "STKLOC",
       LOCCNT AS "LOCCNT",
       LOCCNT - STKLOC AS "EMPLOC",
       DECODE(LOCCNT, 0 , '0' , ROUND((STKLOC / LOCCNT) * 100) || '%') AS "PERCNT",
       SKUCNT AS "SKUCNT",
       STKCNT AS "STKCNT"
  FROM (
  
SELECT WAREKY, WAREKYNM, AREAKY, AREAKYNM, ZONEKY, ZONEKYNM, STKLOC, LOCCNT, LOCCNT - STKLOC AS EMPLOC,
       DECODE(LOCCNT, 0 , '0' , ROUND((STKLOC / LOCCNT) * 100) || '%') AS PERCNT,
       SKUCNT, STKCNT
  FROM (
  
        SELECT ZN.WAREKY AS WAREKY, WH.NAME01 AS WAREKYNM,
               ' ' AS AREAKY, ' ' AS AREAKYNM,
               ' ' AS ZONEKY, ' ' AS ZONEKYNM,
               SUM(
               (SELECT COUNT(*) FROM (SELECT WAREKY, ZONEKY, LOCAKY
                                        FROM STKKY
                                       WHERE WAREKY = #{WAREKY}
                                         AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                       GROUP BY WAREKY, ZONEKY, LOCAKY)
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY)) AS STKLOC,
               SUM(
               (SELECT COUNT(*) FROM LOCMA
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY
                                 <if test='includeYN == "N"'>
                                 AND TKZONE != 'HAND'
                                 </if>
                               )) AS LOCCNT,
               SUM(
               (SELECT COUNT(*) FROM (SELECT WAREKY, ZONEKY, SKUKEY
                                        FROM STKKY
                                       WHERE WAREKY = #{WAREKY}
                                         AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                       GROUP BY WAREKY, ZONEKY, SKUKEY)
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY)) AS SKUCNT,
               SUM(
               (SELECT NVL(SUM(QTSIWH),0) FROM STKKY
                                         WHERE WAREKY = ZN.WAREKY
                                           AND ZONEKY = ZN.ZONEKY
                                           AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                        )) AS STKCNT
          FROM ZONMA ZN
               LEFT OUTER JOIN AREMA AR ON AR.WAREKY = ZN.WAREKY AND AR.AREAKY = ZN.AREAKY
               LEFT OUTER JOIN WAHMA WH ON WH.WAREKY = ZN.WAREKY
         WHERE AR.WAREKY = #{WAREKY}
            <!--  <statement property="range" prefix="AND"/>-->
           <if test="RANGE_SQL != null and RANGE_SQL != ''">
           		${RANGE_SQL}
           </if>
         GROUP BY ZN.WAREKY, WH.NAME01
        UNION ALL
        SELECT ZN.WAREKY AS WAREKY, WH.NAME01 AS WAREKYNM,
               ZN.AREAKY AS AREAKY, AR.SHORTX AS AREAKYNM,
               ' ' AS ZONEKY, ' ' AS ZONEKYNM,
               SUM(
               (SELECT COUNT(*) FROM (SELECT WAREKY, ZONEKY, LOCAKY
                                        FROM STKKY
                                       WHERE WAREKY = #{WAREKY}
                                         AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                       GROUP BY WAREKY, ZONEKY, LOCAKY)
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY)) AS STKLOC,
               SUM(
               (SELECT COUNT(*) FROM LOCMA
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY
                                 <if test='includeYN == "N"'>
                                 AND TKZONE != 'HAND'
                                 </if>
                               )) AS LOCCNT,
               SUM(
               (SELECT COUNT(*) FROM (SELECT WAREKY, ZONEKY, SKUKEY
                                        FROM STKKY
                                       WHERE WAREKY = #{WAREKY}
                                         AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                       GROUP BY WAREKY, ZONEKY, SKUKEY)
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY)) AS SKUCNT,
               SUM(
               (SELECT NVL(SUM(QTSIWH),0) FROM STKKY
                                         WHERE WAREKY = ZN.WAREKY
                                           AND ZONEKY = ZN.ZONEKY
                                           AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                        )) AS STKCNT
          FROM ZONMA ZN
               LEFT OUTER JOIN AREMA AR ON AR.WAREKY = ZN.WAREKY AND AR.AREAKY = ZN.AREAKY
               LEFT OUTER JOIN WAHMA WH ON WH.WAREKY = ZN.WAREKY
         WHERE AR.AREAKY NOT IN ('SYS', 'SHP') 
           AND AR.WAREKY = #{WAREKY}
           <!--  <statement property="range" prefix="AND"/>-->
           <if test="RANGE_SQL != null and RANGE_SQL != ''">
           		${RANGE_SQL}
           </if>
         GROUP BY ZN.WAREKY, WH.NAME01, ZN.AREAKY, AR.SHORTX
        UNION ALL
        SELECT ZN.WAREKY AS WAREKY, WH.NAME01 AS WAREKYNM,
               ZN.AREAKY AS AREAKY, AR.SHORTX AS AREAKYNM,
               ZN.ZONEKY AS ZONEKY, ZN.SHORTX AS ZONEKYNM,
               (SELECT COUNT(*) FROM (SELECT WAREKY, ZONEKY, LOCAKY
                                        FROM STKKY
                                       WHERE WAREKY = ${WAREKY}
                                         AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                       GROUP BY WAREKY, ZONEKY, LOCAKY)
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY) AS STKLOC,
               (SELECT COUNT(*) FROM LOCMA
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY
                                 <if test='includeYN == "N"'>
                                 AND TKZONE != 'HAND'
                                 </if>
                               ) AS LOCCNT,
               (SELECT COUNT(*) FROM (SELECT WAREKY, ZONEKY, SKUKEY
                                        FROM STKKY
                                       WHERE WAREKY = #{WAREKY}
                                         AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                       GROUP BY WAREKY, ZONEKY, SKUKEY)
                               WHERE WAREKY = ZN.WAREKY
                                 AND ZONEKY = ZN.ZONEKY) AS SKUCNT,
               (SELECT NVL(SUM(QTSIWH),0) FROM STKKY
                                         WHERE WAREKY = ZN.WAREKY
                                           AND ZONEKY = ZN.ZONEKY
                                           AND QTSIWH > 0
                                         <if test='includeYN == "N"'>
                                         AND LOCAKY IN (SELECT LOCAKY FROM LOCMA WHERE WAREKY = #{WAREKY} AND TKZONE != 'HAND')
                                         </if>
                                        ) AS STKCNT
          FROM ZONMA ZN
               LEFT OUTER JOIN AREMA AR ON AR.WAREKY = ZN.WAREKY AND AR.AREAKY = ZN.AREAKY
               LEFT OUTER JOIN WAHMA WH ON WH.WAREKY = ZN.WAREKY
         WHERE AR.AREAKY NOT IN ('SYS', 'SHP')
           AND AR.WAREKY = #{WAREKY}
           <!--  <statement property="range" prefix="AND"/>-->
           <if test="RANGE_SQL != null and RANGE_SQL != ''">
           		${RANGE_SQL}
           </if>
           
		       )
		     )
		 ORDER BY 1,3,5 
	</select>
	
	<!-- [RL08] 창고가동률 -->
	<select id="RL08_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT ZN.WAREKY "WAREKY",
			    SF_GET_WAHNM(ZN.WAREKY) AS "WAREKYNM",
			    ZN.AREAKY AS "AREAKY",
			    ZN.ZONEKY AS "ZONEKY",
			    ZN.LOCAKY AS "LOCAKY"
		FROM LOCMA ZN LEFT OUTER JOIN (SELECT WAREKY, LOCAKY, SUM(QTSIWH) QTSIWH FROM STKKY WHERE WAREKY = #{WAREKY} GROUP BY WAREKY, LOCAKY) S ON ZN.WAREKY = S.WAREKY AND ZN.LOCAKY = S.LOCAKY
		WHERE 1=1
		    AND ZN.WAREKY = #{WAREKY}
		    AND (S.QTSIWH = 0 OR S.QTSIWH IS NULL)
		    AND ZN.AREAKY IN ('1', '2')
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
	</select>
	
	<!-- [RL20] 출고조회(오더별) -->
	<select id="RL20_HEADER_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT <![CDATA[ /*+ ]]> ORDERED INDEX(SR PK_SHPDR_NEW) INDEX(SI PK_SHPDI_NEW) <![CDATA[ */]]> DISTINCT (SH.SHPOKY||NVL(SR.CARNUM,' ')||NVL(SR.SHIPSQ,0)||NVL(SR.CARDAT,' ')) AS "KEY",
		       SH.SHPOKY AS "SHPOKY",
		       SH.WAREKY AS "WAREKY",
		       (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.WAREKY) AS "WAREKYNM",
		       NVL(SR.CARNUM,' ') AS "CARNUM",
		       NVL(SR.SHIPSQ,0) AS "SHIPSQ",
		       NVL(SR.CARDAT,' ') AS "CARDAT",
		       NVL(SR.DOCSEQ,' ') AS "DOCSEQ",
		       SH.STATDO AS "STATDO",
		       CV.CDESC1 AS "STATDONM",
		       SH.DRELIN AS "DRELIN",
		       DECODE(SH.DRELIN,'V','YES','NO') AS "DRELINNM",
		       SH.INDDCL AS "INDDCL",
		       SH.ALSTKY AS "ALSTKY",
		       SH.DPTNKY AS "DPTNKY",
		       ( DECODE( SH.SHPMTY, '266', (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.DPTNKY),
		                            '267', (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.DPTNKY),
		                            '270', RBP.NAME01,
		                             BP.NAME01)) AS "DPTNKYNM",
		       SH.PTRCVR AS "PTRCVR",
		       ( DECODE( SH.SHPMTY, '266', (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.PTRCVR), 
		                            '267', (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.PTRCVR),
		                            '270', RBP.NAME01,
		                             BT.NAME01)) AS "PTRCVRNM",
		       SH.PGRC01 AS "PGRC01",
		       SH.PGRC02 AS "PGRC02",
		       SH.PGRC03 AS "PGRC03",
		       SH.PGRC04 AS "PGRC04",
		       SH.PGRC05 AS "PGRC05",
		       ' ' AS "PTNBLK",
		       SH.OWNRKY AS "OWNRKY",
		       SH.DOCDAT AS "DOCDAT",
		       SH.DOCCAT AS "DOCCAT",
		       (SELECT SHORTX FROM DOCCM WHERE DOCCAT = SH.DOCCAT AND ROWNUM = 1)  AS "DOCCATNM",
		       SH.SHPMTY AS "SHPMTY",
		       (SELECT SHORTX FROM DOCTM WHERE DOCUTY = SH.SHPMTY AND ROWNUM = 1)  AS "SHPMTYNM",
		       SH.SHPMTY AS "DOCUTY",
		       SH.RQSHPD AS "RQSHPD",
		       SH.RQARRD AS "RQARRD",
		       SH.RQARRT AS "RQARRT",
		       SH.OPURKY AS "OPURKY",
		       DECODE(SH.SHPMTY, '299', ' ', SUBSTR(SI.SVBELN,1,13)) AS "SOBELN",
		       DECODE(SH.SHPMTY, '299', ' ', SI.SVBELN) AS "SVBELN",
		       SH.QTAPPO AS "QTAPPO",
		       SH.LOCADT AS "LOCADT",
		       SH.LOCADK AS "LOCADK",
		       SH.USRID1 AS "USRID1",
		       SH.UNAME1 AS "UNAME1",
		       SH.DEPTID1 AS "DEPTID1",
		       SH.DNAME1 AS "DNAME1",
		       SH.USRID2 AS "USRID2",
		       SH.UNAME2 AS "UNAME2",
		       SH.DEPTID2 AS "DEPTID2",
		       SH.DNAME2 AS "DNAME2",
		       SH.USRID3 AS "USRID3",
		       SH.UNAME3 AS "UNAME3",
		       SH.DEPTID3 AS "DEPTID3",
		       SH.DNAME3 AS "DNAME3",
		       SH.USRID4 AS "USRID4",
		       SH.UNAME4 AS "UNAME4",
		       SH.DEPTID4 AS "DEPTID4",
		       SH.DNAME4 AS "DNAME4",
		       SH.DOCTXT AS "DOCTXT",
		       SH.CREDAT AS "CREDAT",
		       SH.CRETIM AS "CRETIM",
		       SH.CREUSR AS "CREUSR",
		       (SELECT NMLAST FROM USRMA WHERE USERID = SH.CREUSR) AS "CUSRNM",
		       SH.LMODAT AS "LMODAT",
		       SH.LMOTIM AS "LMOTIM",
		       SH.LMOUSR AS "LMOUSR",
		       (SELECT NMLAST FROM USRMA WHERE USERID = SH.LMOUSR) AS "LUSRNM",
		       DECODE(SR.PRITYN,'Y','V',' ') AS "PRITYN",
		       DECODE(SR.PRITYN,'Y','FF0000','000000') AS "PRINTCHK",
		       SR.DOCSEQ "DOCSEQ",
		       SH.DOCTXT AS "NAME01",
		       (SELECT SUM(ROUND(QTJCMP / DECODE(QTDUOM,0,NULL,QTDUOM), 1)) FROM SHPDI WHERE SHPOKY = SH.SHPOKY) AS "BOXQTY2",
		       (SELECT SUM(ROUND(QTSHPD / DECODE(QTDUOM,0,NULL,QTDUOM), 1)) FROM SHPDI WHERE SHPOKY = SH.SHPOKY) AS "BOXQTY3",
		       (CASE WHEN NVL(OM.XLS_REAL_PATH,'**') LIKE 'S%' THEN '다운로드' ELSE ' ' END) AS "FILEDN",
		       DECODE(SR.RECNUM,' ',' ',SR.RECNUM) AS "RECNUM",
		       DECODE(SR.DCNDTN,' ',' ',SR.DCNDTN) AS "DCNDTN",
		       DECODE(SR.CARNBR,' ',' ',SR.CARNBR) AS "CARNBR",
		       ' ' AS STKNUM
		  FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
		           LEFT OUTER JOIN SHPDR SR ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT 
		           LEFT OUTER JOIN BZPTN BP ON BP.PTNRKY = SH.DPTNKY AND BP.OWNRKY = SH.OWNRKY AND BP.PTNRTY = '0001'
		           LEFT OUTER JOIN BZPTN BT ON BT.PTNRKY = SH.PTRCVR AND BT.OWNRKY = SH.OWNRKY AND BT.PTNRTY = '0007'
		           LEFT OUTER JOIN BZPTN RBP ON RBP.PTNRKY = SH.DPTNKY AND RBP.OWNRKY = SH.OWNRKY AND RBP.PTNRTY = '0002'
		                INNER JOIN CMCDV CV ON SH.STATDO = CV.CMCDVL AND CV.CMCDKY = 'STATDO'
		           LEFT OUTER JOIN SA_ORDER_MST@WMSTOTOS OM ON OM.ORD_NO = SI.SVBELN
		 WHERE SH.DRELIN LIKE #{DRELIN}||'%'
		   AND SH.STATDO NOT IN (DECODE(SH.WAREKY, '1H700', 'PAL', 'NEW'), DECODE(SH.WAREKY, '1H700', 'FAL', 'NEW'))
		<!-- <statement property="range" prefix="AND" /> -->
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		
		<!-- 해당 조건들은 파라미터로 선언되어있으나 rl20에서 값 세팅하는부분이 없음
		<isEqual property="grprl" compareValue="ERPSO">
		   AND SH.SHPMTY IN ('211','212','213','214','267' )
		</isEqual>
		<isEqual property="grprl" compareValue="TOTAL">
		   AND SH.SHPMTY IN ('299')
		</isEqual>
		<isEqual property="grprl" compareValue="MOVE">
		   AND SH.SHPMTY IN ('266')
		</isEqual>
		<isEqual property="grprl" compareValue="RTNPUR">
		   AND SH.SHPMTY IN ('270')
		</isEqual>
		<isNotEmpty property="shpokys">
		   AND sh.shpoky in (<statement property="shpokys"/>)
		</isNotEmpty>
		<isNotNull property="inddcl">
		   AND SH.INDDCL = #inddcl#
		</isNotNull>
		<isEqual property="close" compareValue="V">
		   AND STATDO &lt;&gt; 'REF'
		</isEqual>
		 -->
		 ORDER BY SH.SHPOKY
	</select>
	
	<!-- [RL20] 출고조회(오더별) -->
	<select id="RL20_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT <![CDATA[ /*+ ]]> INDEX(SR IDX_SHPDR_NEW01)<![CDATA[ */]]> (SH.SHPOKY||NVL(SR.CARNUM,' ')||TO_CHAR(NVL(SR.SHIPSQ,0))||NVL(SR.CARDAT,' ')) AS "KEY",
		       SI.SHPOKY AS "SHPOKY",
		       SI.SHPOIT AS "SHPOIT",
		<!--  /*       SIC.ITEMCNT  AS "ITEMCOUNT", */-->
		       SI.STATIT AS "STATIT",
		       CV.CDESC1 AS "STATITNM",
		       SI.SKUKEY AS "SKUKEY",
		       SI.QTSHPO AS "QTSHPO",
		       SI.QTSHPO - SI.QTALOC AS "QTALLM",
		       SI.QTYORG AS "QTYORG",
		       DECODE(SI.STATIT, 'REF', SI.QTJCMP, SI.QTYREF) AS "QTYREF",
		       SI.QTAPPO AS "QTAPPO",
		       SI.QTALOC AS "QTALOC",
		       SI.QTJCMP AS "QTJCMP",
		       <!-- 
		<isEqual property="progid" compareValue="DL180">
		       DECODE(SI.EXSUBS,' ',SI.QTJCMP,SI.QTSHPD) AS "QTSHPD",
		</isEqual>
		<isNotEqual property="progid" compareValue="DL180">
		       SI.QTSHPD AS "QTSHPD",
		</isNotEqual>
		 -->
		 	   SI.QTSHPD AS "QTSHPD",
		       NVL(  TRUNC((SI.QTSHPD) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS "BOXQTY2",
		       NVL(  TRUNC((SI.QTJCMP) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS "BOXQTY3",
		       SI.QTSHPC AS "QTSHPC",
		       SI.QTYUOM AS "QTYUOM",
		       SI.MEASKY AS "MEASKY",
		       SI.UOMKEY AS "UOMKEY",
		       SI.QTPUOM AS "QTPUOM",
		       SI.DUOMKY AS "DUOMKY",
		       SI.QTDUOM AS "QTDUOM",
		       SI.SASTKY AS "SASTKY",
		       SI.ALSTKY AS "ALSTKY",
		       SI.TKFLKY AS "TKFLKY",
		       SI.ESHPKY AS "ESHPKY",
		       SI.ESHPIT AS "ESHPIT",
		       SI.OPURKY AS "OPURKY",
		       SI.REFDKY AS "REFDKY",
		       SI.REFDIT AS "REFDIT",
		       SI.REFCAT AS "REFCAT",
		       SI.REFDAT AS "REFDAT",
		       SI.EXSUBS AS "EXSUBS",
		       SI.DESC01 AS "DESC01",
		       SI.DESC02 AS "DESC02",
		       SI.ASKU01 AS "ASKU01",
		       SI.ASKU02 AS "ASKU02",
		       SI.ASKU03 AS "ASKU03",
		       SI.ASKU04 AS "ASKU04",
		       SI.ASKU05 AS "ASKU05",
		       SI.EANCOD AS "EANCOD",
		       SI.GTINCD AS "GTINCD",
		       SI.SKUG01 AS "SKUG01",
		       SI.SKUG02 AS "SKUG02",
		       SI.SKUG03 AS "SKUG03",
		       SI.SKUG04 AS "SKUG04",
		       SI.SKUG05 AS "SKUG05",
		       SI.GRSWGT AS "GRSWGT",
		       SI.NETWGT AS "NETWGT",
		       SI.WGTUNT AS "WGTUNT",
		       SI.LENGTH AS "LENGTH",
		       SI.WIDTHW AS "WIDTHW",
		       SI.HEIGHT AS "HEIGHT",
		       SI.CUBICM AS "CUBICM",
		       <!-- 
		<isEqual property="progid" compareValue="DL040">
		       CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
		            ELSE ROUND(SI.QTALOC * (SI.CUBICM / SI.QTDUOM),3) END AS "CUBICT",
		</isEqual>
		<isNotEqual property="progid" compareValue="DL040">
		       CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
		            ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS "CUBICT",
		</isNotEqual>
		 -->
		       CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
		            ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS "CUBICT",
		       SI.CAPACT AS "CAPACT",
		       SI.PROCHA AS "PROCHA",
		       SI.AREAKY AS "AREAKY",
		       SI.LOTA01 AS "LOTA01",
		       SI.LOTA02 AS "LOTA02",
		       SI.LOTA03 AS "LOTA03",
		       SI.LOTA04 AS "LOTA04",
		       SI.LOTA05 AS "LOTA05",
		       SI.LOTA06 AS "LOTA06",
		       SI.LOTA07 AS "LOTA07",
		       SI.LOTA08 AS "LOTA08",
		       SI.LOTA09 AS "LOTA09",
		       SI.LOTA10 AS "LOTA10",
		       SI.LOTA11 AS "LOTA11",
		       SI.LOTA12 AS "LOTA12",
		       SI.LOTA13 AS "LOTA13",
		       SI.LOTA14 AS "LOTA14",
		       SI.LOTA15 AS "LOTA15",
		       SI.LOTA16 AS "LOTA16",
		       SI.LOTA17 AS "LOTA17",
		       SI.LOTA18 AS "LOTA18",
		       SI.LOTA19 AS "LOTA19",
		       SI.LOTA20 AS "LOTA20",
		       SI.AWMSNO AS "AWMSNO",
		       SI.SMANDT AS "SMANDT",
		       SI.SEBELN AS "SEBELN",
		       SI.SEBELP AS "SEBELP",
		       SI.STRAID AS "STRAID",
		       SI.SVBELN AS "SVBELN",
		       SI.SPOSNR AS "SPOSNR",
		       SI.STKNUM AS "STKNUM",
		       SI.STPNUM AS "STPNUM",
		       SI.SWERKS AS "SWERKS",
		       SI.SLGORT AS "SLGORT",
		       SI.SDATBG AS "SDATBG",
		       SI.STDLNR AS "STDLNR",
		       SI.SSORNU AS "SSORNU",
		       SI.SSORIT AS "SSORIT",
		       SI.SMBLNR AS "SMBLNR",
		       SI.SZEILE AS "SZEILE",
		       SI.SMJAHR AS "SMJAHR",
		       SI.SXBLNR AS "SXBLNR",
		       SI.SAPSTS AS "SAPSTS",
		       SI.PTNRKY AS "PTNRKY",
		       SI.NAME01 AS "NAME01",
		       SI.SLAND1 AS "SLAND1",
		       SI.SBKTXT AS "SBKTXT",
		       SH.SHPMTY AS "SHPMTY",
		       SI.STRAID AS "VGBEL",
		       NVL(SM.QTYSTD,0) AS "PLIQTY",
		       NVL(SM.QTDUOM,0) AS "BXIQTY",
		       NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS "BOXQTY",       
		       NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTYSTD, NULL,0,SM.QTYSTD) ) ,0) AS "PLTQTY",       
		       NVL(MOD(SI.QTSHPO, DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM)),0) AS "REMQTY" ,
		            
		       SR.ARRIVA AS "ARRIVA",
		       NVL(SR.CARDAT,' ') AS "CARDAT",
		       NVL(SR.CARNUM,' ') AS "CARNUM",
		       NVL(SR.SHIPSQ,0) AS "SHIPSQ",
		       SR.SORTSQ AS "SORTSQ",
		       SR.DRIVER AS "DRIVER",
		       SR.RECAYN AS "RECAYN",
		       SI.QTYREF AS "QTYREF",
		       SI.QTSHPC AS "QTSHPC",
		       NVL(SR.TEXT02,' ') AS "TEXT02",
		       NVL(SR.DCNDTN,' ') AS "DCNDTN",
		       NVL(SR.CARNBR,' ') AS "CARNBR"
		
		  FROM SHPDH SH
		       INNER JOIN SHPDI SI
		               ON SH.SHPOKY = SI.SHPOKY
		<!-- 		               
		/*              AND SI.SHPOKY IN (SELECT SHPOKY FROM SHPDI <statement property="wmsCondition" prefix="WHERE"/>)
		       INNER JOIN (SELECT SHPOKY, COUNT(*) AS ITEMCNT FROM SHPDI GROUP BY SHPOKY) SIC
		               ON SIC.SHPOKY = SH.SHPOKY
		 */
		  -->
		       LEFT OUTER JOIN BZPTN BP
		                    ON BP.PTNRKY = SH.DPTNKY
		                   AND BP.OWNRKY = SH.OWNRKY
		                   AND BP.PTNRTY = '0001'
		       LEFT OUTER JOIN BZPTN RBP
		                    ON RBP.PTNRKY = SH.DPTNKY
		                   AND RBP.OWNRKY = SH.OWNRKY
		                   AND RBP.PTNRTY = '0002'
		       LEFT OUTER JOIN SHPDR SR
		               ON SR.SHPOKY = SI.SHPOKY
		              AND SR.SHPOIT = SI.SHPOIT
		       INNER JOIN SKUMA SM
		               ON SM.OWNRKY = SH.OWNRKY
		              AND SM.SKUKEY = SI.SKUKEY
		       INNER JOIN CMCDV CV
		               ON CV.CMCDKY = 'STATIT'
		              AND CV.CMCDVL = SI.STATIT
		WHERE  1 = 1
		AND SH.SHPOKY = #{SHPOKY}
		AND SH.DRELIN LIKE #{DRELIN}||'%'
		
		<!-- 해당 조건들은 파라미터로 선언되어있으나 rl20에서 값 세팅하는부분이 없음
		<isEqual property="grprl" compareValue="ERPSO">
		   AND SH.SHPMTY IN ('211','212','213','214','267')
		</isEqual>
		<isEqual property="grprl" compareValue="TOTAL">
		   AND SH.SHPMTY IN ('299')
		</isEqual>
		<isEqual property="grprl" compareValue="MOVE">
		   AND SH.SHPMTY IN ('266')
		</isEqual>
		<isEqual property="grprl" compareValue="RTNPUR">
		   AND SH.SHPMTY IN ('270')
		</isEqual>
		<isNotNull property="inddcl" prefix="AND">
		   SH.INDDCL = #inddcl#
		</isNotNull>
		 -->
		   <!--  <statement property="range" prefix="AND" />-->
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
		   		${RANGE_SQL}
		   </if>
			
		
		ORDER BY SI.SHPOKY, SI.SHPOIT
	</select>
	
	<!-- [RL26] 과거재고조회 -->
	<select id="RL26_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT STDDAT AS STDDAT,
		       WAREKY AS WAREKY,
		       SUM(QTSIWH) AS QTSIWH,
		       NVL(ROUND(SUM(QTSIWH)/NVL(QTDUOM,0),2),0) AS BOXQTY1,
		       NVL(ROUND(SUM(QTSIWH)/SF_GET_SKU_QTYSTD(OWNRKY,SKUKEY),2),0) AS PLTQTY1,
		       MEASKY AS MEASKY,
		       DUOMKY AS DUOMKY,
		       OWNRKY AS OWNRKY,
		       SKUKEY AS SKUKEY,
		       (SELECT CDESC1
		          FROM CMCDV
		         WHERE CMCDKY = 'LOTA06'
		           AND CMCDVL = LOTA06) AS LOTA06,
		CASE WHEN (LOTA07 = '21SV' AND LOTA08 = 'OD') THEN '오양위탁' 
		    WHEN LOTA07 = '21SV' THEN '삼아밴처' 
		    ELSE ' '
		END AS LOTA08,
		       DESC01 AS DESC01,
		       SKUG05 AS SKUG05,
		       NETWGT AS DESC02
		     FROM STKDY
		 WHERE 1 = 1 
		   AND QTSIWH > 0
		   AND WAREKY = #{WAREKY}
		   AND OWNRKY = #{OWNRKY}
		 <if test="RANGE_SQL != null and RANGE_SQL != ''">
		       ${RANGE_SQL}
		 </if>
		GROUP BY OWNRKY, WAREKY, STDDAT, MEASKY, SKUKEY, DUOMKY, QTDUOM, LOTA06, LOTA07, LOTA08, DESC01, SKUG05, NETWGT
		ORDER BY OWNRKY, WAREKY, SKUKEY, LOTA06
	</select>
	
	<!-- [RL23] 차량별 품목 출고내역 -->
	<select id="RL23_01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT  /*+ ORDERED INDEX(DR IDX_SHPDR_NEW04) INDEX(DH PK_SHPDH_NEW) */ DR.CARNUM CARNUM,
		       DR.CARDAT CARDAT,
		       DR.SHIPSQ SHIPSQ, 
		       CA.DESC01 CADESC01, 
		       DI.SKUKEY DISKUKEY, 
		       DI.DESC01 DIDESC01, 
		       SUM(DI.QTYORG) QTYORG,
		       SUM(DI.QTSHPO) QTSHPO,
		       SUM(DI.QTJCMP) QTJCMP,
		       SUM(DI.QTYREF) QTYREF,
		       SUM(DI.QTSHPD-DI.QTYREF) QTYSHP,
		       MAX(SM.QTYSTD) QTYSTD,
		       MAX(SM.QTDUOM) QTDUOM,
		       TRUNC(SUM(DI.QTJCMP-DI.QTYREF)/MAX(SM.QTYSTD)) AS PLTQTY,
		       TRUNC(MOD(SUM(DI.QTJCMP-DI.QTYREF),MAX(SM.QTYSTD))/MAX(SM.QTDUOM)) AS QTBXKY,
		       MOD(SUM(DI.QTJCMP-DI.QTYREF), MAX(SM.QTDUOM)) REMXKY,
		       TRUNC((SUM(DI.QTJCMP-DI.QTYREF)-SUM(NVL(TI.QTCOMP,0)))/MAX(SM.QTYSTD)) AS STKPLT,                     
		       TRUNC(MOD((SUM(DI.QTJCMP-DI.QTYREF)-SUM(NVL(TI.QTCOMP,0))), MAX(SM.QTYSTD))/MAX(SM.QTDUOM)) AS STKBOX,
		       MOD((SUM(DI.QTJCMP-DI.QTYREF)-SUM(NVL(TI.QTCOMP,0))), MAX(SM.QTDUOM)) STKREM,                         
		       TRUNC(SUM(NVL(TI.QTCOMP,0))/MAX(SM.QTYSTD)) AS PREPLT,                                                
		       TRUNC(MOD(SUM(NVL(TI.QTCOMP,0)), MAX(SM.QTYSTD))/MAX(SM.QTDUOM)) AS PREBOX,                           
		       MOD(SUM(NVL(TI.QTCOMP,0)), MAX(SM.QTDUOM)) PREREM,                                                    
		       PP.SKUKEY PPSKUKEY,
		       PP.CONQTY CONQTY,
		       SUM(NVL(TI.QTCOMP,0)) AS QTCOMP,
		       '' AS STKQTY,
		       '' AS PREQTY
		  FROM SHPDR DR INNER JOIN SHPDI DI ON DI.SHPOKY = DR.SHPOKY AND DI.SHPOIT = DR.SHPOIT
		                INNER JOIN SHPDH DH ON DH.SHPOKY = DI.SHPOKY
		                LEFT OUTER JOIN SKUMA SM ON DH.OWNRKY = SM.OWNRKY AND DI.SKUKEY = SM.SKUKEY
		                LEFT OUTER JOIN CARMA CA ON CA.CARNUM = DR.CARNUM AND CA.WAREKY = DH.WAREKY AND DH.OWNRKY = CA.OWNRKY 
		                LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, SUM(QTSPHY) - SUM(QTYPDA) AS CONQTY 
		                                   FROM PHYDH PH, PHYDI PI 
		                                  WHERE PH.PHYIKY = PI.PHYIKY 
		                                    AND PI.QTSPHY != PI.QTSIWH
		                                   <if test="WAREKY != null and WAREKY != ''">
		                                    AND PH.WAREKY = #{WAREKY}
		                                   </if>
										   <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
											 ${RANGE_SQL2}
										   </if>
		                                  GROUP BY WAREKY, SKUKEY) PP ON PP.WAREKY = DH.WAREKY AND PP.SKUKEY = DI.SKUKEY
		                LEFT OUTER JOIN (SELECT B.SHPOKY, B.SKUKEY, SUM(NVL(B.QTCOMP,0) - NVL(B.QTYFCN,0)) AS QTCOMP 
		                                   FROM TASDH A INNER JOIN TASDI B ON A.TASKKY = B.TASKKY AND A.TASOTY = '210' AND B.LOCASR = 'DOCLOC'
		                                        INNER JOIN RECDH C ON B.RECVKY = C.RECVKY AND C.RCPTTY IN ('102','111','123')
		                                  WHERE A.DOCDAT &gt; TO_CHAR(SYSDATE-30, 'YYYYMMDD')
		                                  GROUP BY B.SHPOKY, B.SKUKEY) TI ON TI.SHPOKY = DH.SHPOKY AND TI.SKUKEY = DI.SKUKEY
		 WHERE 1 = 1
		   AND DH.SHPOKY = DI.SHPOKY
		   AND DI.SHPOKY = DR.SHPOKY
		   AND DI.SHPOIT = DR.SHPOIT
		   AND DH.OWNRKY = #{OWNRKY}
		   AND DH.WAREKY = #{WAREKY}
		<if test='RANGE_SQL != null and RANGE_SQL != ""'>
		   ${RANGE_SQL}
		</if>
		<if test='CHQTYCHK != "1"'>
		   AND PP.SKUKEY != ' '
		</if>
		<if test='CHPRECHK != "1"'>
		  HAVING  SUM(NVL(TI.QTCOMP,0)) &gt; 0
		</if>
		<!-- <if test='CHQTYCHK != null and CHQTYCHK != ""'>
		   AND PP.SKUKEY != ' '
		</if> -->
		 GROUP BY DR.CARDAT, DR.CARNUM, DR.SHIPSQ, CA.DESC01, DI.SKUKEY, DI.DESC01, PP.SKUKEY, PP.CONQTY
		 ORDER BY 1, 3
	</select>
	
	<!-- [RL23] 차량별 품목 출고내역 -->
	<select id="RL23_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT DR.CARNUM CARNUM,
		       DR.CARDAT CARDAT,
		       CA.DESC01 CADESC01, 
		       DI.SKUKEY DISKUKEY, 
		       DI.DESC01 DIDESC01, 
		       SUM(DI.QTSHPO) QTSHPO,
		       SUM(DI.QTJCMP) QTJCMP,
		       MAX(SM.QTDUOM) QTDUOM,
		       SUM(DI.QTJCMP) / MAX(SM.QTDUOM) QTBXKY,
		       TRUNC(SUM(DI.QTJCMP) / MAX(SM.QTDUOM)) QTBXKY,
		       PP.SKUKEY PPSKUKEY,
		       PP.LOCAKY LOCAKY,
		       PP.CONQTY CONQTY
		  FROM SHPDH DH INNER JOIN SHPDI DI ON DH.SHPOKY = DI.SHPOKY
		                INNER JOIN SHPDR DR ON DI.SHPOKY = DR.SHPOKY AND DI.SHPOIT = DR.SHPOIT
		                LEFT OUTER JOIN SKUMA SM ON DH.OWNRKY = SM.OWNRKY AND DI.SKUKEY = SM.SKUKEY
		                LEFT OUTER JOIN CARMA CA ON CA.CARNUM = DR.CARNUM AND CA.WAREKY = DH.WAREKY
		                LEFT OUTER JOIN (SELECT WAREKY, LOCAKY, SKUKEY, SUM(QTSPHY) - SUM(QTYPDA) AS CONQTY 
		                                   FROM PHYDH PH, PHYDI PI 
		                                  WHERE PH.PHYIKY = PI.PHYIKY 
		                                    AND PI.QTSPHY != PI.QTYPDA
		                                   <if test="WAREKY != null and WAREKY != ''">
		                                    AND PH.WAREKY = #{WAREKY}
		                                   </if>
										   <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
											 ${RANGE_SQL2}
										   </if>
		                                  GROUP BY LOCAKY, WAREKY, SKUKEY) PP ON PP.SKUKEY = DI.SKUKEY
		 WHERE 1 = 1
		   AND DH.SHPOKY = DI.SHPOKY
		   AND DI.SHPOKY = DR.SHPOKY
		   AND DI.SHPOIT = DR.SHPOIT
        <if test="WAREKY != null and WAREKY != ''">
		   AND DH.WAREKY = #{WAREKY}
		</if>
		<if test='RANGE_SQL != null and RANGE_SQL != ""'>
		   ${RANGE_SQL}
		</if>
		<if test='CHQTYCHK != "1"'>
		   AND PP.SKUKEY != ' '
		</if>
		<if test='CHPRECHK != "1"'>
		  HAVING  SUM(NVL(TI.QTCOMP,0)) &gt; 0
		</if>
		 GROUP BY DR.CARDAT, DR.CARNUM, CA.DESC01, DI.SKUKEY, DI.DESC01, PP.SKUKEY, PP.CONQTY, PP.LOCAKY
		 ORDER BY 1, 3
	
	</select>
	
		<!-- [RL21] 배송명세서 -->
	<select id="RL21_1_LIST" parameterType="hashmap" resultType="DataMap">
	    SELECT OWNRKY ,
	           WAREKY ,
	           DOCDAT ,
	           CARINFO ,
	           CARNUM ,
	           CARGBN,
	           CARINFO2 ,
	           RECNUM ,
	           SHIPSQ ,
	           SHPMTY ,
	           SHPOKY ,
	           SVBELN2 ,
	           SKUKEY ,
	           DESC01 ,
	           DESC02 ,
	           UOMKEY ,
	           DPTNKY ,
	           DPTNKYNM ,
	           PTRCVR,
	           PTRCVRNM,
	           QTSHPO ,
	           BOXQTY1 ,
	           QTYORG ,
	           BOXQTY2 ,
	           QTJCMP ,
	           BOXQTY3 ,
	           PLTQTY3,
	           QTSHPD ,
	           BOXQTY4 ,
	           QTYREF ,
	           BOXQTY5 ,
	           QTYCAL ,
	           QTYCAL2 ,
	           BOXQTY6 ,
	           PLTQTY6 ,
	           PGRC02 ,
	           PGRC03 ,
	           USRID1 ,
	           REGNKY,
	           REGNNM,
	           NAME03,
	           NAME03NM,
	           UNAME1 ,
	           DEPTID1 ,
	           DNAME1 ,
	           DOCTXT ,
	           BXIQTY ,
	           CARDAT ,
	           FORKYN ,
	           PTNG07 ,
	           PGRC04 ,
	           SKUG05 ,
	           UNAME4 ,
	           DNAME4 ,
	           RQARRT , 
	           SETNM,
	           DESC03,
	           QTCAR,
	           BOXQTY7,
	           PLTQTY7,
	           UNAME2,
	           DECODE(SETNUM,' ','0',SETNUM) SETNUM,
	           IFQTYORG,
	           ERPCDT,
	           ERPCTM,
	           TEXT02,
	           DCNDTN,
	           CARNBR,
	           CUTEL2,
	           SADDR2,
	           ' ' AS NETWGT
	      FROM V_REPORT_CARSHIP_RL21
	     WHERE 1 = 1 
	       AND OWNRKY = #{OWNRKY}
	       AND WAREKY = #{WAREKY}
	     <if test="RANGE_SQL1 != null and RANGE_SQL1 != ''"> ${RANGE_SQL1}</if>
		 <if test="CARGBN != null and CARGBN != ''">
	       AND DECODE(#{CARGBN}, 'ALL', '1', CARGBN ) = DECODE(#{CARGBN}, 'ALL', '1', #{CARGBN}) 
	     </if> 
	</select>
	
	<!-- [RL21] 배송명세서 -->
	<select id="RL21_2_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT OWNRKY ,
		       WAREKY ,
		       CARINFO ,
		       CARNUM ,
		       CARGBN ,
		       RECNUM ,
		       CARINFO2 ,
		       SHIPSQ ,
		       SHPMTY ,
		       SHPOKY ,
		       DPTNKY ,
		       DPTNKYNM ,
		       QTSHPO ,
		       BOXQTY1 ,
		       QTYORG ,
		       BOXQTY2 ,
		       QTJCMP ,
		       BOXQTY3 ,
		       QTSHPD ,
		       BOXQTY4 ,
		       QTYREF ,
		       BOXQTY5 ,
		       QTYCAL ,
		       BOXQTY6 ,
		       PLTQTY6 ,
		       PGRC02 ,
		       PGRC03 ,
		       USRID1 ,
		       UNAME1 ,
		       REGNKY,
		       REGNNM,
		       NAME03,
		       NAME03NM,
		       DEPTID1 ,
		       DNAME1 ,
		       DOCTXT ,
		       BXIQTY ,
		       CARDAT ,
		       FORKYN ,
		       PTNG07 ,
		       PGRC04 ,
		       PG04NM ,
		       SKUG05 ,
		       UNAME4 ,
		       DNAME4 ,
		       RQARRT ,
		       SELAMT , 
		       VATAMT , 
		       TOTAMT,
		       QTCAR,
		       BOXQTY7,
		       PLTQTY7,
		       PTRCVR,
		       PTRCVRNM,
		       TEXT02,
		       DCNDTN,
		       CARNBR,
		       PLTQTY3,
               BXIQTY,
               0 AS NETWGT,
               0 AS IFQTYORG
		  FROM V_REPORT_CARSHIP_RL21_2
		 WHERE 1 = 1 
		   AND OWNRKY = #{OWNRKY}
		   AND WAREKY = #{WAREKY}
		 <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2}</if>
		 <if test="CARGBN != null and CARGBN != ''">
		   AND DECODE(#{CARGBN}, 'ALL', '1', CARGBN ) = DECODE(#{CARGBN}, 'ALL', '1', #{CARGBN}) 
		 </if> 
	</select>
	
	<!-- [RL21] 배송명세서 -->
	<select id="RL21_3_LIST" parameterType="hashmap" resultType="DataMap">
	    SELECT OWNRKY ,
	           WAREKY ,
	           CARINFO ,
	           CARNUM ,
	           CARGBN,
	           CARINFO2 ,
	           RECNUM ,
	           SHIPSQ ,
	           SHPMTY ,
	           SHPOKY ,
	           SVBELN2 ,
	           DPTNKY ,
	           SKUKEY ,
	           DESC01 ,
	           DESC02 ,
	           UOMKEY ,
	           DPTNKY ,
	           DPTNKYNM ,
	           PTRCVR,
	           PTRCVRNM,
	           QTSHPO ,
	           BOXQTY1 ,
	           QTYORG ,
	           BOXQTY2 ,
	           QTJCMP ,
	           BOXQTY3 ,
	           QTSHPD ,
	           BOXQTY4 ,
	           QTYREF ,
	           BOXQTY5 ,
	           QTYCAL ,
	           BOXQTY6 ,
	           PLTQTY6 ,
	           PGRC02 ,
	           PGRC03 ,
	           USRID1 ,
	           REGNKY,
	           REGNNM,
	           NAME03,
	           NAME03NM,
	           UNAME1 ,
	           DEPTID1 ,
	           DNAME1 ,
	           DOCTXT ,
	           BXIQTY ,
	           CARDAT ,
	           FORKYN ,
	           PTNG07 ,
	           LOTA11 ,
	           LOTA12 ,
	           LOTA13 ,
	           PGRC04 ,
	           PG04NM ,
	           SKUG05 ,
	           UNAME4  ,
	           DNAME4 ,
	           RQARRT ,
	           SELAMT , 
	           VATAMT , 
	           TOTAMT,
	           DESC03,
	           QTCAR,
	           BOXQTY7,
	           PLTQTY7,
	           TEXT02,
	           DCNDTN,
	           CARNBR,
	           PLTQTY3,
	           0 AS NETWGT,
	           0 AS IFQTYORG
	      FROM V_REPORT_CARSHIP_RL21_3
	     WHERE 1 = 1 
		   AND OWNRKY = #{OWNRKY}
		   AND WAREKY = #{WAREKY}
		  <if test="RANGE_SQL3 != null and RANGE_SQL3 != ''"> ${RANGE_SQL3}</if>
		  <if test="CARGBN != null and CARGBN != ''">
	       AND DECODE(#{CARGBN}, 'ALL', '1', CARGBN ) = DECODE(#{CARGBN}, 'ALL', '1', #{CARGBN}) 
	     </if> 
	</select>
	
	
	<!-- [RL22] 미출내역 -->
	<select id="RL22_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT ORDTYP ORDTYP,
			   WAREKY WAREKY,
		       ORDDAT ORDDAT,
		       CHKSEQ CHKSEQ,
		       ORDSEQ ORDSEQ,
		       SVBELN SVBELN,
		       DOCUTY DOCUTY,
		       DOSHORTX DOSHORTX,
		       OTRQDT OTRQDT,
		       DATRCV DATRCV,
		       PTNRTO PTNRTO,
		       BZ1NAME01 BZ1NAME01,
		       WARESR WARESR,
		       BZ2NAME01 BZ2NAME01,
		       SKUKEY SKUKEY,
		       DESC01 DESC01,
		       QTDUOM QTDUOM,
		       QTYORG QTYORG,
		       QTSHPD QTSHPD,
		       QTYERR QTYERR,
		       QTEWGT QTEWGT,
		       SELAMT SELAMT,
		       NETWGT NETWGT,
		       DIRDVY DIRDVY,
		       CD2CDESC1 CD2CDESC1,
		       CD1CDESC1 CD1CDESC1, 
               DIRSUP DIRSUP, 
		       C00103 C00103,
		       RSSHORTX RSSHORTX,
		       SALENM SALENM,
		       SALTEL SALTEL,
		       LMODAT LMODAT,
		       LMOTIM AS LMOTIM,
		       GUBUN  AS GUBUN
		FROM
		(
		SELECT IFWMS113.ORDTYP AS ORDTYP,
		       IFWMS113.ORDDAT AS ORDDAT,
		       IFWMS113.CHKSEQ AS CHKSEQ,
		       IFWMS113.ORDSEQ AS ORDSEQ,
		       IFWMS113.SVBELN AS SVBELN,
		       IFWMS113.DOCUTY AS DOCUTY,
		       DOCTM.SHORTX    AS DOSHORTX,
		       TO_DATE(IFWMS113.OTRQDT) AS OTRQDT,
		       IFT.DATRCV      AS DATRCV,
		       IFWMS113.PTNRTO AS PTNRTO,
		       BZ1.NAME01      AS BZ1NAME01,
		       IFWMS113.WARESR AS WARESR,
		       BZ2.NAME01      AS BZ2NAME01,
		       IFWMS113.SKUKEY AS SKUKEY,
		       SKUMA.DESC01 AS DESC01,
		       SKUMA.QTDUOM AS QTDUOM,
		       IFWMS113.QTYORG AS QTYORG,
		       IFWMS113.QTSHPD AS QTSHPD,
		       IFWMS113.QTYORG - IFWMS113.QTSHPD AS QTYERR,
		       NVL(ROUND(((IFWMS113.QTYORG - IFWMS113.QTSHPD)* SKUMA.NETWGT), 3),0) AS QTEWGT,
		       (IFWMS113.QTYORG - IFWMS113.QTSHPD) * IFWMS113.NETPR AS SELAMT,
				SKUMA.NETWGT   AS NETWGT,																							  
		       IFWMS113.DIRDVY AS DIRDVY,
		       CD1.CDESC1      AS CD1CDESC1,
		       IFWMS113.DIRSUP AS DIRSUP,
		       CD2.CDESC1      AS CD2CDESC1,
		       IFWMS113.C00103 AS C00103,
		       RSNCD.SHORTX    AS RSSHORTX,
		       IFWMS113.SALENM AS SALENM,
		       IFWMS113.SALTEL AS SALTEL,
		       IFWMS113.LMODAT AS LMODAT,
		       IFWMS113.LMOTIM AS LMOTIM,
		       '1'             AS GUBUN,
		       IFWMS113.WAREKY AS WAREKY
		FROM IFWMS113 LEFT OUTER JOIN SKUMA ON IFWMS113.OWNRKY = SKUMA.OWNRKY AND IFWMS113.SKUKEY = SKUMA.SKUKEY
		                LEFT OUTER JOIN DOCTM ON IFWMS113.DOCUTY = DOCTM.DOCUTY AND DOCCAT = '200'
		                LEFT OUTER JOIN BZPTN BZ1 ON IFWMS113.OWNRKY = BZ1.OWNRKY AND IFWMS113.PTNRTO = BZ1.PTNRKY AND BZ1.PTNRTY = '0001'
		                LEFT OUTER JOIN BZPTN BZ2 ON IFWMS113.OWNRKY = BZ2.OWNRKY AND IFWMS113.WARESR = BZ2.PTNRKY AND BZ2.PTNRTY = '0003'
		                LEFT OUTER JOIN CMCDV CD1 ON IFWMS113.DIRDVY = CD1.CMCDVL AND CD1.CMCDKY = 'PGRC02'
		                LEFT OUTER JOIN CMCDV CD2 ON IFWMS113.DIRSUP = CD2.CMCDVL AND CD2.CMCDKY = 'PGRC03'
		                LEFT OUTER JOIN RSNCD ON IFWMS113.C00103 = RSNCD.RSNCOD AND RSNCD.OWNRKY = IFWMS113.OWNRKY AND RSNCD.DOCUTY = '399'
		                LEFT OUTER JOIN IFWMS213 IFT ON IFWMS113.SVBELN = IFT.SVBELN AND IFWMS113.SPOSNR = IFT.SPOSNR AND IFT.WMSTYP != '230'
		WHERE 1 = 1
		   AND IFWMS113.XSTAT = 'D'
		   AND IFWMS113.C00102 = 'Y'
		   AND IFWMS113.C00103 != ' '
		   AND IFWMS113.QTYORG - IFWMS113.QTYREQ > 0
		   AND IFWMS113.DOCUTY NOT IN('131', '133', '134', '135', '266', '267', '270')
		   AND IFWMS113.OWNRKY = #{OWNRKY}	 
		    <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL}</if>
		   AND (IFWMS113.SVBELN , IFWMS113.SPOSNR) NOT IN (SELECT SI.SVBELN, SI.SPOSNR 
		                                                     FROM SHPDH SH 
		                                                     INNER JOIN SHPDI SI
		                                                             ON SH.SHPOKY = SI.SHPOKY 
		                                                    WHERE SH.OWNRKY = #{OWNRKY}
		                                                      AND SH.INDDCL = 'V'
		                                                      AND SI.STATIT IN ('FSH','PSH','FPC','PPC'))
		UNION ALL 
		
		SELECT IFWMS113.ORDTYP AS ORDTYP,
		       IFWMS113.ORDDAT AS ORDDAT,
		       IFWMS113.CHKSEQ AS CHKSEQ,
		       IFWMS113.ORDSEQ AS ORDSEQ,
		       IFWMS113.SVBELN AS SVBELN,
		       IFWMS113.DOCUTY AS DOCUTY,
		       DOCTM.SHORTX    AS DOSHORTX,
		       TO_DATE(IFWMS113.OTRQDT) AS OTRQDT,
		       IFT.DATRCV      AS DATRCV,
		       IFWMS113.PTNRTO AS PTNRTO,
		       BZ1.NAME01      AS BZ1NAME01,
		       IFWMS113.WARESR AS WARESR,
		       BZ2.NAME01      AS BZ2NAME01,
		       IFWMS113.SKUKEY AS SKUKEY,
		       SKUMA.DESC01 AS DESC01,
		       SKUMA.QTDUOM AS QTDUOM,
		       MAX(IFWMS113.QTYORG) AS QTYORG,
		       SUM(SI.QTSHPD) AS QTSHPD,
		       MAX(IFWMS113.QTYORG) - SUM(SI.QTSHPD) AS QTYERR,
		       NVL(ROUND(((MAX(IFWMS113.QTYORG) - SUM(SI.QTSHPD))* SKUMA.NETWGT), 3),0) AS QTEWGT,
		       (MAX(IFWMS113.QTYORG) - SUM(SI.QTSHPD)) * IFWMS113.NETPR AS SELAMT,
			   SKUMA.NETWGT   AS NETWGT,																							  
		       IFWMS113.DIRDVY AS DIRDVY,
		       CD1.CDESC1      AS CD1CDESC1,
		       IFWMS113.DIRSUP AS DIRSUP,
		       CD2.CDESC1      AS CD2CDESC1,
		       IFWMS113.C00103 AS C00103,
		       RSNCD.SHORTX    AS RSSHORTX,
		       IFWMS113.SALENM AS SALENM,
		       IFWMS113.SALTEL AS SALTEL,
		       IFWMS113.LMODAT AS LMODAT,
		       IFWMS113.LMOTIM AS LMOTIM,
		       '2'             AS GUBUN,
		       IFWMS113.WAREKY AS WAREKY
		FROM IFWMS113 LEFT OUTER JOIN SKUMA ON IFWMS113.OWNRKY = SKUMA.OWNRKY AND IFWMS113.SKUKEY = SKUMA.SKUKEY
		                LEFT OUTER JOIN DOCTM ON IFWMS113.DOCUTY = DOCTM.DOCUTY AND DOCCAT = '200'
		                LEFT OUTER JOIN BZPTN BZ1 ON IFWMS113.OWNRKY = BZ1.OWNRKY AND IFWMS113.PTNRTO = BZ1.PTNRKY AND BZ1.PTNRTY = '0001'
		                LEFT OUTER JOIN BZPTN BZ2 ON IFWMS113.OWNRKY = BZ2.OWNRKY AND IFWMS113.WARESR = BZ2.PTNRKY AND BZ2.PTNRTY = '0003'
		                LEFT OUTER JOIN CMCDV CD1 ON IFWMS113.DIRDVY = CD1.CMCDVL AND CD1.CMCDKY = 'PGRC02'
		                LEFT OUTER JOIN CMCDV CD2 ON IFWMS113.DIRSUP = CD2.CMCDVL AND CD2.CMCDKY = 'PGRC03'
		                LEFT OUTER JOIN RSNCD ON IFWMS113.C00103 = RSNCD.RSNCOD AND RSNCD.OWNRKY = IFWMS113.OWNRKY AND RSNCD.DOCUTY = '399'
		                INNER JOIN SHPDI SI ON IFWMS113.SVBELN = SI.SVBELN AND IFWMS113.SPOSNR = SI.SPOSNR
		                LEFT OUTER JOIN SHPDH SH ON SH.SHPOKY = SI.SHPOKY
		                LEFT OUTER JOIN IFWMS213 IFT ON IFWMS113.SVBELN = IFT.SVBELN AND IFWMS113.SPOSNR = IFT.SPOSNR AND IFT.WMSTYP != '230'
		WHERE 1 = 1
		   AND IFWMS113.XSTAT = 'D'
		   AND IFWMS113.C00102 = 'Y'
		   AND IFWMS113.C00103 != ' '
		   AND SH.INDDCL = 'V'
		   AND SI.STATIT IN ('FSH','PSH','FPC','PPC')
		   AND IFWMS113.DOCUTY NOT IN('131', '133', '134', '135', '266', '267', '270')
		   AND IFWMS113.OWNRKY = #{OWNRKY}
			<if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL}</if>
		   GROUP BY IFWMS113.WAREKY,IFWMS113.ORDTYP, IFWMS113.ORDDAT, IFWMS113.CHKSEQ, IFWMS113.ORDSEQ, IFWMS113.SVBELN, IFWMS113.DOCUTY, DOCTM.SHORTX, TO_DATE(IFWMS113.OTRQDT), IFT.DATRCV,
		         IFWMS113.PTNRTO, BZ1.NAME01, IFWMS113.WARESR, BZ2.NAME01, IFWMS113.SKUKEY, SKUMA.DESC01, SKUMA.QTDUOM, SKUMA.NETWGT, IFWMS113.DIRDVY, CD1.CDESC1,
		         IFWMS113.C00103, RSNCD.SHORTX, IFWMS113.SALENM, IFWMS113.SALTEL, IFWMS113.LMODAT, IFWMS113.LMOTIM, IFWMS113.NETPR, IFWMS113.DIRSUP, CD2.CDESC1
		   HAVING MAX(IFWMS113.QTYORG) - SUM(SI.QTSHPD) > 0 
		)
		ORDER BY OTRQDT, SVBELN, ORDSEQ, GUBUN
	</select>
	
	<!-- [RL28] 주문집계표(공장) -->
	<select id="RL28_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT NVL(OWNRKY,' ') AS OWNRKY,
	           NVL(WAREKY,' ') AS WAREKY,
	           NVL(OTRQDT,' ') AS OTRQDT,
	           DECODE(GRPGBN,704,'거래처계',29695,'제품계',32767,'총계',NVL(SVBELN,' ')) AS SVBELN,
	           DECODE(ORDTYP,'001','일반','004','이고','003','위탁점','008','할증','009','무상',NVL(ORDTYP,' ')) AS ORDTYP,
	           NVL(WARESR,' ') AS WARESR,
	           NVL(PTNRTO,' ') AS PTNRTO,
	           NVL(NAME01,' ') AS NAME01,
	           NVL(CTNAME,' ') AS CTNAME,
	           NVL(SKUKEY,' ') AS SKUKEY,
	           NVL(DESC01,' ') AS DESC01,
	           NVL(QTYREQ, 0)  AS QTYREQ,
	           NVL(TRUNC(QTYBOX, 0), 0) AS QTYBOX,
	           NVL(TRUNC(QTYPLT, 0), 0) AS QTYPLT,
	           NVL(TRUNC(QTDUOM, 0), 0)  AS QTDUOM,
	           NVL(SELLPR, 0)  AS SELLPR,
	           NVL(CUADDR,' ') AS CUADDR,
	           NVL(TEXT01,' ') AS TEXT01,
	           NVL(GRPGBN, 0)  AS GRPGBN
	    FROM 
	       (SELECT IFT.OWNRKY,
	               IFT.WAREKY,
	               IFT.OTRQDT,
	               IFT.SVBELN,
	               IFT.ORDTYP,
	               IFT.WARESR,
	               IFT.PTNRTO,
	               BZP.NAME01,
	               DECODE(IFT.ORDTYP, '001', IFT.CTNAME, BZP.NAME01) AS CTNAME,
	               IFT.SKUKEY,
	               SKU.DESC01 AS DESC01,
	               SUM(IFT.QTYREQ) AS QTYREQ,
	               SUM(IFT.QTYREQ) / SF_GET_SKU_QTDUOM(IFT.OWNRKY, IFT.SKUKEY) AS QTYBOX,
	               SUM(IFT.QTYREQ) / SF_GET_SKU_QTYSTD(IFT.OWNRKY, IFT.SKUKEY) AS QTYPLT,
	               SUM(IFT.QTYREQ / SKU.QTDUOM) AS QTDUOM, 
	               SUM(IFT.SELLPR * IFT.QTYREQ) AS SELLPR,
	               DECODE(IFT.ORDTYP, '001', IFT.CUADDR, BZP.ADDR01||BZP.ADDR02) AS CUADDR,
	               IFT.TEXT01,
	               GROUPING_ID(IFT.OWNRKY, IFT.WAREKY, IFT.OTRQDT, IFT.SVBELN, IFT.ORDTYP, IFT.SKUKEY, SKU.DESC01, IFT.CUADDR, IFT.TEXT01, IFT.WARESR, IFT.PTNRTO, BZP.NAME01, IFT.CTNAME) AS GRPGBN
	          FROM IFWMS113 IFT
	          LEFT JOIN BZPTN BZP ON BZP.OWNRKY = IFT.OWNRKY AND BZP.PTNRKY = IFT.WARESR AND BZP.PTNRTY IN ('0003', '0004')
	          LEFT JOIN SKUMA SKU ON IFT.OWNRKY = SKU.OWNRKY AND IFT.SKUKEY = SKU.SKUKEY
	         WHERE 1 = 1
	           AND IFT.XSTAT IN ('R', 'D')
	           AND IFT.QTYREQ > 0
	           AND IFT.OWNRKY = #{OWNRKY}
	           AND IFT.WAREKY = #{WAREKY}
	           AND IFT.OTRQDT = #{OTRQDT}
	           
				<if test="ORDTYP != null and ORDTYP != ''">
				AND IFT.ORDTYP = #{ORDTYP}
				</if>
				<if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
				</if>
				
	         GROUP BY ROLLUP((IFT.OWNRKY, IFT.WAREKY, IFT.OTRQDT, IFT.ORDTYP, IFT.WARESR, IFT.PTNRTO, BZP.NAME01, IFT.CTNAME, IFT.CUADDR, BZP.ADDR01, BZP.ADDR02, IFT.TEXT01), (IFT.SVBELN, IFT.SKUKEY, SKU.DESC01))
	         HAVING GROUPING_ID(IFT.OWNRKY, IFT.WAREKY, IFT.OTRQDT, IFT.SVBELN, IFT.ORDTYP, IFT.SKUKEY, SKU.DESC01, IFT.CUADDR, IFT.TEXT01, IFT.WARESR, IFT.PTNRTO, BZP.NAME01, IFT.CTNAME) IN (0, 704)
	         
	         UNION ALL  
	
	        SELECT IFT.OWNRKY,
	               IFT.WAREKY,
	               IFT.OTRQDT,
	               IFT.SVBELN,
	               IFT.ORDTYP,
	               IFT.WARESR,
	               IFT.PTNRTO,
	               BZP.NAME01,
	               DECODE(IFT.ORDTYP, '001', IFT.CTNAME, BZP.NAME01) AS CTNAME,
	               IFT.SKUKEY,
	               SKU.DESC01 AS DESC01,
	               SUM(IFT.QTYREQ) AS QTYREQ,
	               SUM(IFT.QTYREQ) / SF_GET_SKU_QTDUOM(IFT.OWNRKY, IFT.SKUKEY) AS QTYBOX,
	               SUM(IFT.QTYREQ) / SF_GET_SKU_QTYSTD(IFT.OWNRKY, IFT.SKUKEY) AS QTYPLT,
	               SUM(IFT.QTYREQ / SKU.QTDUOM) AS QTDUOM, 
	               SUM(IFT.SELLPR * IFT.QTYREQ) AS SELLPR,
	               DECODE(IFT.ORDTYP, '001', IFT.CUADDR, BZP.ADDR01||BZP.ADDR02) AS CUADDR,
	               IFT.TEXT01,
	               GROUPING_ID(IFT.OWNRKY, IFT.WAREKY, IFT.OTRQDT, IFT.SKUKEY, SKU.DESC01, IFT.SVBELN, IFT.ORDTYP, IFT.WARESR, IFT.PTNRTO, BZP.NAME01, IFT.CTNAME, IFT.CUADDR, BZP.ADDR01, BZP.ADDR02, IFT.TEXT01) AS GRPGBN
	          FROM IFWMS113 IFT
	          LEFT JOIN BZPTN BZP ON BZP.OWNRKY = IFT.OWNRKY AND BZP.PTNRKY = IFT.WARESR AND BZP.PTNRTY IN ('0003', '0004')
	          LEFT JOIN SKUMA SKU ON IFT.OWNRKY = SKU.OWNRKY AND IFT.SKUKEY = SKU.SKUKEY
	         WHERE 1 = 1
	           AND IFT.XSTAT IN ('R', 'D')
	           AND IFT.QTYREQ > 0
	           AND IFT.OWNRKY = #{OWNRKY}
	           AND IFT.WAREKY = #{WAREKY}
	           AND IFT.OTRQDT = #{OTRQDT}
	           
				<if test="ORDTYP != null and ORDTYP != ''">
				AND IFT.ORDTYP = #{ORDTYP}
				</if>
				<if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
				</if>
				
	         GROUP BY ROLLUP((IFT.SKUKEY, SKU.DESC01), (IFT.OWNRKY, IFT.WAREKY, IFT.OTRQDT, IFT.SVBELN, IFT.ORDTYP, IFT.WARESR, IFT.PTNRTO, BZP.NAME01, IFT.CTNAME, IFT.CUADDR, BZP.ADDR01, BZP.ADDR02, IFT.TEXT01))
	         HAVING GROUPING_ID(IFT.OWNRKY, IFT.WAREKY, IFT.OTRQDT, IFT.SKUKEY, SKU.DESC01, IFT.SVBELN, IFT.ORDTYP, IFT.WARESR, IFT.PTNRTO, BZP.NAME01, IFT.CTNAME, IFT.CUADDR, BZP.ADDR01, BZP.ADDR02, IFT.TEXT01) IN (29695, 32767))
	    WHERE 1 = 1

	</select>
	
	<!-- [RL31] 배소량조정현황 -->
	<select id="RL31_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		I.SADJKY AS SADJKY,
		I.SADJIT AS SADJIT,
		H.ADJUTY AS ADJUTY,
		I.CREDAT AS CREDAT,
		I.CRETIM AS CRETIM,
		UR.NMLAST AS CREUSR,
		I.RSNADJ AS RSNADJ,
		I.STOKKY AS STOKKY,
		I.LOTNUM AS LOTNUM,
		I.LOCAKY AS LOCAKY,
		I.TRNUID AS TRNUID,
		I.SECTID AS SECTID,
		I.PACKID AS PACKID,
		I.QTADJU AS QTADJU,
		I.QTBLKD AS QTBLKD,
		I.QTYUOM AS QTYUOM,
		I.TRUNTY AS TRUNTY,
		I.MEASKY AS MEASKY,
		I.UOMKEY AS UOMKEY,
		I.QTPUOM AS QTPUOM,
		I.DUOMKY AS DUOMKY,
		I.QTDUOM AS QTDUOM,
		I.SUBSIT AS SUBSIT,
		I.SUBSFL AS SUBSFL,
		I.REFDKY AS REFDKY,
		I.REFDIT AS REFDIT,
		I.REFCAT AS REFCAT,
		I.OWNRKY AS OWNRKY,
		I.SKUKEY AS SKUKEY,
		I.LOTA01 AS LOTA01,
		I.LOTA02 AS LOTA02,
		I.LOTA03 AS LOTA03,
		I.LOTA04 AS LOTA04,
		I.LOTA05 AS LOTA05,
		I.LOTA06 AS LOTA06,
		I.LOTA07 AS LOTA07,
		I.LOTA08 AS LOTA08,
		I.LOTA09 AS LOTA09,
		I.LOTA10 AS LOTA10,
		I.LOTA11 AS LOTA11,
		I.LOTA12 AS LOTA12,
		I.LOTA13 AS LOTA13,
		I.LOTA14 AS LOTA14,
		/*동원(시작)*/
		CV.CDESC1 AS LOTA15,
		DM.SHORTX AS LOTA16,
		SH.PGRC04 AS LOTA17,
		NVL(BP.NAME01,WH.NAME01 ) AS LOTA18,
		SH.UNAME4 AS LOTA19,
		/*동원(끝)*/
		I.LOTA20 AS LOTA20,
		I.AWMSNO AS AWMSNO,
		I.AREAKY AS AREAKY,
		I.DESC01 AS DESC01,
		I.DESC02 AS DESC02,
		I.ASKU01 AS ASKU01,
		I.ASKU02 AS ASKU02,
		I.ASKU03 AS ASKU03,
		I.ASKU04 AS ASKU04,
		I.ASKU05 AS ASKU05,
		I.EANCOD AS EANCOD,
		I.GTINCD AS GTINCD,
		I.SKUG01 AS SKUG01,
		I.SKUG02 AS SKUG02,
		I.SKUG03 AS SKUG03,
		I.SKUG04 AS SKUG04,
		I.SKUG05 AS SKUG05,
		I.GRSWGT AS GRSWGT,
		I.NETWGT AS NETWGT,
		I.WGTUNT AS WGTUNT,
		I.LENGTH AS LENGTH,
		I.WIDTHW AS WIDTHW,
		I.HEIGHT AS HEIGHT,
		I.CUBICM AS CUBICM,
		I.CAPACT AS CAPACT,
		I.WORKID AS WORKID,
		I.WORKNM AS WORKNM,
		I.HHTTID AS HHTTID,
		I.SMANDT AS SMANDT,
		I.SEBELN AS SEBELN,
		I.SEBELP AS SEBELP,
		I.SZMBLNO AS SZMBLNO,
		I.SZMIPNO AS SZMIPNO,
		I.STRAID AS STRAID,
		I.SVBELN AS SVBELN,
		I.SPOSNR AS SPOSNR,
		I.STKNUM AS STKNUM,
		I.STPNUM AS STPNUM,
		I.SWERKS AS SWERKS,
		I.SLGORT AS SLGORT,
		I.SDATBG AS SDATBG,
		I.STDLNR AS STDLNR,
		I.SSORNU AS SSORNU,
		I.SSORIT AS SSORIT,
		I.SMBLNR AS SMBLNR,
		I.SZEILE AS SZEILE,
		I.SMJAHR AS SMJAHR,
		I.SXBLNR AS SXBLNR,
		I.ADJRSN AS ADJRSN,
		I.SAPSTS AS SAPSTS,
		SH.DOCDAT AS SHPIDAT,
		SR.CARDAT AS CARDAT,
		       NVL(M.QTYSTD,0) AS PLIQTY,
		       NVL(M.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC(I.QTADJU / DECODE(M.QTDUOM, 0, NULL, M.QTDUOM), 1 ) ,0) AS BOXQTY,       
		       NVL(  TRUNC(I.QTADJU / DECODE(M.QTYSTD, 0, NULL, M.QTYSTD), 1 ) ,0) AS PLTQTY,       
		       NVL(MOD(I.QTADJU, DECODE(M.QTDUOM, 0, NULL, M.QTDUOM)),0) AS REMQTY
		,SH.DPTNKY AS DPTNKY
		,NVL(BZ.NAME01,WH.NAME01 ) AS DPTNKYNM
		FROM ADJDH H
		 INNER JOIN ADJDI I
		         ON  H.SADJKY = I.SADJKY
		 INNER JOIN LOCMA S
		         ON H.WAREKY = S.WAREKY
		        AND I.LOCAKY = S.LOCAKY
		 INNER JOIN SKUMA M
		         ON M.SKUKEY = I.SKUKEY 
		        AND M.OWNRKY = I.OWNRKY
		  INNER JOIN SHPDH SH
		          ON SH.SHPOKY = I.REFDKY
		         AND SH.STATDO IN ('FSH','PSH')
		/*동원(시작)*/
		  LEFT OUTER JOIN DOCTM DM
		          ON SH.SHPMTY = DM.DOCUTY
		         AND DM.DOCCAT = '200'
		  LEFT OUTER JOIN CMCDV CV
		          ON SH.PGRC03 = CV.CMCDVL AND CMCDKY = 'PGRC03'
		/*동원(끝)*/
		  LEFT OUTER JOIN BZPTN BZ
		                   ON BZ.OWNRKY = SH.OWNRKY
		                  AND BZ.PTNRKY = SH.DPTNKY
		                  AND BZ.PTNRTY = '0001'
		  LEFT OUTER JOIN BZPTN BP
		                  ON BP.OWNRKY = SH.OWNRKY
		                  AND BP.PTNRKY = SH.PGRC04
		                  AND BP.PTNRTY = '0003'
		  LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = SH.WAREKY
		
		  INNER JOIN SHPDR SR
		          ON SR.SHPOKY = I.REFDKY
		         AND SR.SHPOIT = I.REFDIT
		/*       AND TASKKY != ' '  */
		        AND CARNUM != ' '   
		  INNER JOIN USRMA UR
		        ON UR.USERID = I.CREUSR
		
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		<if test="OWNRKY != null and OWNRKY != ''">
			AND i.OWNRKY = #{OWNRKY}
		</if>
		<if test="WAREKY != null and WAREKY != ''">
			AND h.WAREKY = #{WAREKY}
		</if>
		ORDER BY I.SADJKY, I.SADJIT
	</select>
	
	<!-- [RL32] 일자별수불 조회 -->
	<select id="RL32_1_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		       I.DOCDAT AS DOCDAT,
		       I.SKUKEY AS SKUKEY,
		       S.DESC01 AS DESC01,
		       I.WAREKY AS WAREKY,
		       I.STKPRE AS STKPRE,
		       I.NORSHP AS NORSHP,
		       I.TRUSHP AS TRUSHP,
		       I.BNUSHP AS BNUSHP,
		       I.FRESHP AS FRESHP,
		       I.RETSHP AS RETSHP,
		       I.FILSHP AS FILSHP,
		       I.NORRCV AS NORRCV,
		       I.FILRCV AS FILRCV,
		       I.RETRCV AS RETRCV,
		       I.ASSEMB AS ASSEMB,
		       I.DISMAN AS DISMAN,
		       I.ETCSHP AS ETCSHP,
		       I.STKAFT AS STKAFT,
		       I.STKAFT * (NVL(SF_GET_BUY_COST(I.SKUKEY) / 1000, 0)) AS TOTAMT,
		       ABS(I.NORSHP+TRUSHP+BNUSHP+FRESHP+FILSHP-RETRCV)-ABS(NVL(Z.XFERQTY_OUT,0)) AS SHPCHK,
		       I.NORRCV-NVL(Z.BUYQTY,0) AS NRVCHK,
		       I.RETSHP-NVL(Z.BUYQTY_RTN,0) AS RSHCHK,
		       I.FILRCV-NVL(Z.XFERQTY_IN,0) AS FRVCHK,
		       I.ETCSHP-NVL(Z.ETCQTY,0) AS ETCCHK,
		       I.CREDAT AS CREDAT,
		       I.CRETIM AS CRETIM
		FROM READI I INNER JOIN SKUMA S ON I.SKUKEY = S.SKUKEY
		        LEFT OUTER JOIN ZIVMON1T_D@WMSTOSALE Z  ON I.DOCDAT = Z.YYYYMMDD AND I.WAREKY = Z.STCD AND I.SKUKEY = Z.PRODCD
		WHERE 1 = 1
		    AND I.WAREKY = #{WAREKY}
		    AND I.OWNRKY = #{OWNRKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL}</if>
		/*
		AND NORSHP +TRUSHP +BNUSHP +FRESHP +RETSHP +FILSHP +NORRCV +FILRCV +RETRCV +ASSEMB +DISMAN +ETCSHP > 0
		*/
		AND ROWNUM &lt;= 20000
		ORDER BY I.DOCDAT, I.SKUKEY
	</select>
	
	<!-- [RL32] 일자별수불 조회 -->
	<select id="RL32_2_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		       I.DOCDAT AS DOCDAT,
		       I.SKUKEY AS SKUKEY,
		       S.DESC01 AS DESC01,
		       I.WAREKY AS WAREKY,
		       I.STKPRE AS STKPRE,
		       I.NORSHP AS NORSHP,
		       I.TRUSHP AS TRUSHP,
		       I.BNUSHP AS BNUSHP,
		       I.FRESHP AS FRESHP,
		       I.RETSHP AS RETSHP,
		       I.FILSHP AS FILSHP,
		       I.NORRCV AS NORRCV,
		       I.FILRCV AS FILRCV,
		       I.RETRCV AS RETRCV,
		       I.ASSEMB AS ASSEMB,
		       I.DISMAN AS DISMAN,
		       I.ETCSHP AS ETCSHP,
		       I.STKAFT AS STKAFT,
		       I.STKAFT * (NVL(SF_GET_BUY_COST(I.SKUKEY) / 1000, 0)) AS TOTAMT,
		       ABS(I.NORSHP+TRUSHP+BNUSHP+FRESHP+FILSHP-RETRCV)-ABS(NVL(Z.XFERQTY_OUT,0)) AS SHPCHK,
		       I.NORRCV-NVL(Z.BUYQTY,0) AS NRVCHK,
		       I.RETSHP-NVL(Z.BUYQTY_RTN,0) AS RSHCHK,
		       I.FILRCV-NVL(Z.XFERQTY_IN,0) AS FRVCHK,
		       I.ETCSHP-NVL(Z.ETCQTY,0) AS ETCCHK,
		       I.CREDAT AS CREDAT,
		       I.CRETIM AS CRETIM
		FROM READI2 I INNER JOIN SKUMA S ON I.SKUKEY = S.SKUKEY
		        LEFT OUTER JOIN ZIVMON1T_D@WMSTOSALE Z  ON I.DOCDAT = Z.YYYYMMDD AND I.WAREKY = Z.STCD AND I.SKUKEY = Z.PRODCD
		WHERE 1 = 1
		    AND I.WAREKY = #{WAREKY}
		    AND I.OWNRKY = #{OWNRKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL}</if>
		/*
		AND NORSHP +TRUSHP +BNUSHP +FRESHP +RETSHP +FILSHP +NORRCV +FILRCV +RETRCV +ASSEMB +DISMAN +ETCSHP > 0
		*/
		AND ROWNUM &lt;= 20000
		ORDER BY I.DOCDAT, I.SKUKEY
	</select>
	
	<!-- [RL33] 시스템에리어처리현황 -->
	<select id="RL33_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		I.SADJKY AS SADJKY,
		I.SADJIT AS SADJIT,
		H.ADJUTY AS ADJUTY,
		I.CREDAT AS CREDAT,
		I.CRETIM AS CRETIM,
		UR.NMLAST AS CREUSR,
		I.RSNADJ AS RSNADJ,
		I.STOKKY AS STOKKY,
		I.LOTNUM AS LOTNUM,
		I.LOCAKY AS LOCAKY,
		I.TRNUID AS TRNUID,
		I.SECTID AS SECTID,
		I.PACKID AS PACKID,
		I.QTADJU AS QTADJU,
		I.QTBLKD AS QTBLKD,
		I.QTYUOM AS QTYUOM,
		I.TRUNTY AS TRUNTY,
		I.MEASKY AS MEASKY,
		I.UOMKEY AS UOMKEY,
		I.QTPUOM AS QTPUOM,
		I.DUOMKY AS DUOMKY,
		I.QTDUOM AS QTDUOM,
		I.SUBSIT AS SUBSIT,
		I.SUBSFL AS SUBSFL,
		I.REFDKY AS REFDKY,
		I.REFDIT AS REFDIT,
		I.REFCAT AS REFCAT,
		I.OWNRKY AS OWNRKY,
		I.SKUKEY AS SKUKEY,
		I.LOTA01 AS LOTA01,
		I.LOTA02 AS LOTA02,
		I.LOTA03 AS LOTA03,
		I.LOTA04 AS LOTA04,
		I.LOTA05 AS LOTA05,
		I.LOTA06 AS LOTA06,
		I.LOTA07 AS LOTA07,
		I.LOTA08 AS LOTA08,
		I.LOTA09 AS LOTA09,
		I.LOTA10 AS LOTA10,
		I.LOTA11 AS LOTA11,
		I.LOTA12 AS LOTA12,
		I.LOTA13 AS LOTA13,
		I.LOTA14 AS LOTA14,
		/*동원(시작)*/
		CV.CDESC1 AS LOTA15,
		DM.SHORTX AS LOTA16,
		SH.PGRC04 AS LOTA17,
		NVL(BP.NAME01,WH.NAME01 ) AS LOTA18,
		SH.UNAME4 AS LOTA19,
		/*동원(끝)*/
		I.LOTA20 AS LOTA20,
		I.AWMSNO AS AWMSNO,
		I.AREAKY AS AREAKY,
		I.DESC01 AS DESC01,
		I.DESC02 AS DESC02,
		I.ASKU01 AS ASKU01,
		I.ASKU02 AS ASKU02,
		I.ASKU03 AS ASKU03,
		I.ASKU04 AS ASKU04,
		I.ASKU05 AS ASKU05,
		I.EANCOD AS EANCOD,
		I.GTINCD AS GTINCD,
		I.SKUG01 AS SKUG01,
		I.SKUG02 AS SKUG02,
		I.SKUG03 AS SKUG03,
		I.SKUG04 AS SKUG04,
		I.SKUG05 AS SKUG05,
		I.GRSWGT AS GRSWGT,
		I.NETWGT AS NETWGT,
		I.WGTUNT AS WGTUNT,
		I.LENGTH AS LENGTH,
		I.WIDTHW AS WIDTHW,
		I.HEIGHT AS HEIGHT,
		I.CUBICM AS CUBICM,
		I.CAPACT AS CAPACT,
		I.WORKID AS WORKID,
		I.WORKNM AS WORKNM,
		I.HHTTID AS HHTTID,
		I.SMANDT AS SMANDT,
		I.SEBELN AS SEBELN,
		I.SEBELP AS SEBELP,
		I.SZMBLNO AS SZMBLNO,
		I.SZMIPNO AS SZMIPNO,
		I.STRAID AS STRAID,
		I.SVBELN AS SVBELN,
		I.SPOSNR AS SPOSNR,
		I.STKNUM AS STKNUM,
		I.STPNUM AS STPNUM,
		I.SWERKS AS SWERKS,
		I.SLGORT AS SLGORT,
		I.SDATBG AS SDATBG,
		I.STDLNR AS STDLNR,
		I.SSORNU AS SSORNU,
		I.SSORIT AS SSORIT,
		I.SMBLNR AS SMBLNR,
		I.SZEILE AS SZEILE,
		I.SMJAHR AS SMJAHR,
		I.SXBLNR AS SXBLNR,
		I.ADJRSN AS ADJRSN,
		I.SAPSTS AS SAPSTS,
		SH.DOCDAT AS SHPIDAT,
		SR.CARDAT AS CARDAT,
		       NVL(M.QTYSTD,0) AS PLIQTY,
		       NVL(M.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC(I.QTADJU / DECODE(M.QTDUOM, 0, NULL, M.QTDUOM), 1 ) ,0) AS BOXQTY,       
		       NVL(  TRUNC(I.QTADJU / DECODE(M.QTYSTD, 0, NULL, M.QTYSTD), 1 ) ,0) AS PLTQTY,       
		       NVL(MOD(I.QTADJU, DECODE(M.QTDUOM, 0, NULL, M.QTDUOM)),0) AS REMQTY
		,SH.DPTNKY AS DPTNKY
		,NVL(BZ.NAME01,WH.NAME01 ) AS DPTNKYNM,
		SH.SHPOKY AS SHPOKY
		FROM ADJDH H
		 INNER JOIN ADJDI I
		         ON  H.SADJKY = I.SADJKY
		 INNER JOIN LOCMA S
		         ON H.WAREKY = S.WAREKY
		        AND I.LOCAKY = S.LOCAKY
		 INNER JOIN SKUMA M
		         ON M.SKUKEY = I.SKUKEY 
		        AND M.OWNRKY = I.OWNRKY
		  INNER JOIN SHPDI SI
		         ON SI.SVBELN = I.SVBELN
		         AND SI.SPOSNR = I.SPOSNR    
		  INNER JOIN SHPDH SH
		         ON SH.SHPOKY = SI.SHPOKY
		         AND SH.INDDCL = 'V'         
		/*동원(시작)*/
		  LEFT OUTER JOIN DOCTM DM
		          ON SH.SHPMTY = DM.DOCUTY
		         AND DM.DOCCAT = '200'
		  LEFT OUTER JOIN CMCDV CV
		          ON SH.PGRC03 = CV.CMCDVL AND CMCDKY = 'PGRC03'
		/*동원(끝)*/
		  LEFT OUTER JOIN BZPTN BZ
		                   ON BZ.OWNRKY = SH.OWNRKY
		                  AND BZ.PTNRKY = SH.DPTNKY
		                  AND BZ.PTNRTY = '0001'
		  LEFT OUTER JOIN BZPTN BP
		                  ON BP.OWNRKY = SH.OWNRKY
		                  AND BP.PTNRKY = SH.PGRC04
		                  AND BP.PTNRTY = '0003'
		  LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = SH.WAREKY
		
		  INNER JOIN SHPDR SR
		          ON SR.SHPOKY = SI.SHPOKY
		         AND SR.SHPOIT = SI.SHPOIT
		/*       AND TASKKY != ' '  */
		        AND CARNUM != ' '   
		  INNER JOIN USRMA UR
		        ON UR.USERID = I.CREUSR
		
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		<if test="OWNRKY != null and OWNRKY != ''">
			AND i.OWNRKY = #{OWNRKY}
		</if>
		<if test="WAREKY != null and WAREKY != ''">
			AND h.WAREKY = #{WAREKY}
		</if>
		ORDER BY I.SADJKY, I.SADJIT
	</select>
	
	<!-- [RL41] 배송명세서(NEW) -->
	<select id="RL41_LIST" parameterType="hashmap" resultType="DataMap">
	    SELECT OWNRKY ,
	           WAREKY ,
	           CARINFO ,
	           CARNUM ,
	           CARGBN,
	           CARSEQ ,
	           CARGBN,
	           CARTYP,
	           SHPMTY ,
	           SHPOKY ,
	           DPTNKY ,
	           SKUKEY ,
	           DESC01 ,
	           DESC02 ,
	           UOMKEY ,
	           DPTNKY ,
	           DPTNKYNM ,
	           QTSHPO ,
	           BOXQTY1 ,
	           QTYORG ,
	           BOXQTY2 ,
	           QTJCMP ,
	           BOXQTY3 ,
	           PLTQTY3,
	           QTSHPD ,
	           BOXQTY4 ,
	           QTYREF ,
	           BOXQTY5 ,
	           QTYCAL ,
	           BOXQTY6 ,
	           PLTQTY6 ,
	           PGRC02 ,
	           PGRC03 ,
	           USRID1 ,
	           REGNKY,
	           REGNNM,
	           NAME03,
	           NAME03NM,
	           UNAME1 ,
	           DEPTID1 ,
	           DNAME1 ,
	           DOCTXT ,
	           BXIQTY ,
	           ACUDAT ,
	           FORKYN ,
	           PTNG07 ,
	           PGRC04 ,
	           SKUG05 ,
	           DNAME4 ,
	           UNAME4,
	           QTYCAR,
	           BOXQTY7,
	           PRC001,
	           SVBELN,
	           DOCDAT,
	           ACUDAT
	
	      FROM V_REPORT_CARSHIP_RL41
	     WHERE 1 = 1 
	     <if test="RANGE_SQL != null and RANGE_SQL != ''">
	        ${RANGE_SQL}
	     </if>
	     <if test="SCCARGBN != null and SCCARGBN != ''">
	       AND DECODE(#{SCCARGBN}, 'ALL', '1', CARGBN ) = DECODE(#{SCCARGBN}, 'ALL', '1', #{SCCARGBN}) 
	     </if>
	     <if test="OWNRKY != null and OWNRKY != ''">
			AND OWNRKY = #{OWNRKY}
		 </if>
		 <if test="WAREKY != null and WAREKY != ''">
			AND WAREKY = #{WAREKY}
		 </if> 
	</select>
	
	<!-- [RL50] 배송물량집계표 TAB1 -->
	<select id="RL50_TAB1_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ INDEX(SR IDX_IFWMS113K15)*/ VW.ORDDAT||VW.CARNUM AS KEY,
		       VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       VW.CARNUM AS CARNUM,
		       VW.DRIVER AS DRIVER,
		       VW.CARTYP AS CARTYP,
		       VW.DESC01 AS DESC01,
		       VW.CARGBN AS CARGBN,
		       VW.CARTMP AS CARTMP,
		       VW.ORDDAT AS ORDDAT,
		       SUM(VW.QTYREQ) AS QTJCMP,
		       SUM(TRUNC(VW.QTYREQ / SM.QTDUOM)) AS QTYBOX,
		       SUM(MOD(VW.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM))) AS REMQTY,
		       NVL( ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3),0) AS QTJWGT,       
		       NVL(ROUND(SUM(VW.QTYREQ * SM.NETWGT), 3) - NVL(TRIM(REPLACE(CARTYP,'T','')) * 1000,0),0) AS DIFQTY        
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		 WHERE VW.OWNRKY = #{OWNRKY}
		   AND VW.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
		   		${RANGE_SQL}
		   </if>
		   <if test='C00102 == "ALL"' >
		   </if> 
		   <if test='C00102 == "B"' >
		   		AND VW.C00102 = 'X'
		   </if> 
		   <if test='C00102 == "C"' >
		   		AND VW.C00102 = 'N'
		   </if> 
		   <if test='C00102 == "D"' >
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   </if> 
		   <if test='C00102 == "E"' >
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   </if> 
		   <if test="DOCUTYIF != null and DOCUTYIF != ''">
		   		AND VW.DOCUTY = #{DOCUTYIF}
		   </if> 
		   
		 GROUP BY VW.OWNRKY, VW.WAREKY, VW.CARTYP, VW.CARGBN, VW.CARTMP, VW.DESC01, VW.DRIVER, VW.ORDDAT, VW.CARNUM
		 ORDER BY VW.ORDDAT, VW.CARNUM
	</select>
	
	<!-- [RL50] 배송물량집계표 TAB2 -->
	<select id="RL50_TAB2_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ INDEX(SR IDX_IFWMS113K15)*/ VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       VW.CARNUM AS CARNUM,
		       VW.DRIVER AS DRIVER,
		       VW.CARTYP AS CARTYP,
		       VW.DESC01 AS DESC01,
		       VW.CARGBN AS CARGBN,
		       VW.CARTMP AS CARTMP,
		       SUM(VW.QTYREQ) AS QTJCMP,
		       SUM(TRUNC(VW.QTYREQ / SM.QTDUOM)) AS QTYBOX,
		       SUM(MOD(VW.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM))) AS REMQTY,
		       NVL(ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3),0) AS QTJWGT,
		       NVL(ROUND(SUM(VW.QTYREQ * SM.NETWGT), 3) - NVL(TRIM(REPLACE(CARTYP,'T','')) * 1000,0),0) AS DIFQTY,
		       MAX(VW.ORDDAT) AS ORDDAT
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		 WHERE VW.OWNRKY = #{OWNRKY}
		   AND VW.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
		   		${RANGE_SQL}
		   </if>
		   <if test='C00102 == "ALL"' >
		   </if> 
		   <if test='C00102 == "B"' >
		   		AND VW.C00102 = 'X'
		   </if> 
		   <if test='C00102 == "C"' >
		   		AND VW.C00102 = 'N'
		   </if> 
		   <if test='C00102 == "D"' >
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   </if> 
		   <if test='C00102 == "E"' >
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   </if> 
		   <if test="DOCUTYIF != null and DOCUTYIF != ''">
		   		AND VW.DOCUTY = #{DOCUTYIF}
		   </if> 
		 GROUP BY VW.OWNRKY, VW.WAREKY, VW.CARTYP, VW.CARGBN, VW.CARTMP, VW.DESC01, VW.DRIVER, VW.CARNUM
		 ORDER BY VW.CARNUM
	</select>
	
	<!-- [RL50] 배송물량집계표 TAB3 -->
	<select id="RL50_TAB3_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ INDEX(SR IDX_IFWMS113K15)*/ VW.ORDDAT||VW.CARNUM AS KEY,
		       VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       VW.CARNUM AS CARNUM,
		       VW.DRIVER AS DRIVER,
		       VW.CARTYP AS CARTYP,
		       VW.DESC01 AS DESC01,
		       VW.CARGBN AS CARGBN,
		       VW.CARTMP AS CARTMP,
		       VW.ORDDAT AS ORDDAT,
		       VW.PTNROD AS PTNROD,
		       BZ.NAME01 AS PTNRODNM,
		       VW.PTNRTO AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       SUM(VW.QTYREQ) AS QTJCMP,
		       SUM(TRUNC(VW.QTYREQ / SM.QTDUOM)) AS QTYBOX,
		       SUM(MOD(VW.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM))) AS REMQTY,
		       NVL( ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3),0) AS QTJWGT,       
		       NVL(ROUND(SUM(VW.QTYREQ * SM.NETWGT), 3) - NVL(TRIM(REPLACE(CARTYP,'T','')) * 1000,0),0) AS DIFQTY        
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                              INNER JOIN BZPTN BZ ON VW.OWNRKY = BZ.OWNRKY AND BZ.PTNRKY = VW.PTNROD AND BZ.PTNRTY IN ('0001','0004')
		                              INNER JOIN BZPTN BZ2 ON VW.OWNRKY = BZ2.OWNRKY AND BZ2.PTNRKY = VW.PTNRTO AND BZ2.PTNRTY IN ('0007','0004')
		 WHERE VW.OWNRKY = #{OWNRKY}
		   AND VW.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
		   		${RANGE_SQL}
		   </if>
		   <if test='C00102 == "ALL"' >
		   </if> 
		   <if test='C00102 == "B"' >
		   		AND VW.C00102 = 'X'
		   </if> 
		   <if test='C00102 == "C"' >
		   		AND VW.C00102 = 'N'
		   </if> 
		   <if test='C00102 == "D"' >
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   </if> 
		   <if test='C00102 == "E"' >
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   </if> 
		   <if test="DOCUTYIF != null and DOCUTYIF != ''">
		   		AND VW.DOCUTY = #{DOCUTYIF}
		   </if> 
		   
		 GROUP BY VW.OWNRKY, VW.WAREKY, VW.CARTYP, VW.CARGBN, VW.CARTMP, VW.DESC01, VW.DRIVER, VW.ORDDAT, VW.CARNUM, VW.PTNROD, VW.PTNRTO, BZ.NAME01, BZ2.NAME01
		 ORDER BY VW.ORDDAT, VW.CARNUM, VW.PTNRTO
	</select>

	<!-- [RL50] 배송물량집계표 TAB4 -->
	<select id="RL50_TAB4_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ INDEX(SR IDX_IFWMS113K15)*/ VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       VW.CARNUM AS CARNUM,
		       VW.DRIVER AS DRIVER,
		       VW.CARTYP AS CARTYP,
		       VW.DESC01 AS DESC01,
		       VW.CARGBN AS CARGBN,
		       VW.CARTMP AS CARTMP,
		       VW.PTNROD AS PTNROD,
		       BZ.NAME01 AS PTNRODNM,
		       VW.PTNRTO AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       SUM(VW.QTYREQ) AS QTJCMP,
		       SUM(TRUNC(VW.QTYREQ / SM.QTDUOM)) AS QTYBOX,
		       SUM(MOD(VW.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM))) AS REMQTY,
		       NVL(ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3),0) AS QTJWGT,
		       NVL(ROUND(SUM(VW.QTYREQ * SM.NETWGT), 3) - NVL(TRIM(REPLACE(CARTYP,'T','')) * 1000,0),0) AS DIFQTY 
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                              INNER JOIN BZPTN BZ ON VW.OWNRKY = BZ.OWNRKY AND BZ.PTNRKY = VW.PTNROD AND BZ.PTNRTY IN ('0001','0004')
		                              INNER JOIN BZPTN BZ2 ON VW.OWNRKY = BZ2.OWNRKY AND BZ2.PTNRKY = VW.PTNRTO AND BZ2.PTNRTY IN ('0007','0004')
		 WHERE VW.OWNRKY = #{OWNRKY}
		   AND VW.WAREKY = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
		   		${RANGE_SQL}
		   </if>
		   <if test='C00102 == "ALL"' >
		   </if> 
		   <if test='C00102 == "B"' >
		   		AND VW.C00102 = 'X'
		   </if> 
		   <if test='C00102 == "C"' >
		   		AND VW.C00102 = 'N'
		   </if> 
		   <if test='C00102 == "D"' >
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   </if> 
		   <if test='C00102 == "E"' >
		   		AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   </if> 
		   <if test="DOCUTYIF != null and DOCUTYIF != ''">
		   		AND VW.DOCUTY = #{DOCUTYIF}
		   </if> 
		 GROUP BY VW.OWNRKY, VW.WAREKY, VW.CARTYP, VW.CARGBN, VW.CARTMP, VW.DESC01, VW.DRIVER, VW.CARNUM, VW.PTNROD, VW.PTNRTO, BZ.NAME01, BZ2.NAME01
		 ORDER BY VW.CARNUM, VW.PTNRTO
	</select>
	
	<!-- [RL52] 미종결주문 조회 HEAD -->
	<select id="RL52_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT WAREKY KEY,
		WAREKY WAREKY,
		COUNT(WAREKY) NUM01 FROM (
		SELECT WAREKY, SVBELN 
		FROM IFWMS113 IT
		WHERE XSTAT = 'R' 
		AND C00102 != 'X'
		AND OWNRKY = #{OWNRKY}
		AND QTYORG != 0
		AND OTRQDT &lt; TO_CHAR(SYSDATE, 'YYYYMMDD')
		AND DOCUTY IN ('211','212','213','214','215','216','266','267')
		AND WAREKY IN ('2101', '2114', '2115', '2116', '2117', '2118', 
		'2120','2121','2213', '2214', '2215', '2216', '2217', '2218', '2219','2220'
		,'2315', '2316', '2317', '2318', '2319', '2320', '2321','2322','2323','2324',
		'2254', '2255' ,'2256', '2257' ,'2258' ,'2259' ,'2261' ,'2263'
		)
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		GROUP BY WAREKY, SVBELN
		) GROUP BY WAREKY
	</select>

	<!-- [RL52] 미종결주문 조회 ITEM -->
	<select id="RL52_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ ORDERED */ IT.WAREKY AS KEY, 
		       IT.SVBELN AS SVBELN, 
		       IT.DOCUTY AS DOCUTY,
		       IT.ORDDAT AS ORDDAT,
		       IT.OTRQDT AS OTRQDT,
		       IT.PTNROD AS PTNROD,
		       BZ1.NAME01 AS PTNRODNM,
		       IT.PTNRTO AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       IT.WARESR AS WARESR,
		       BZ2.PTNG08 AS PTNG08,
		       IT.DIRDVY AS DIRDVY,
		       IT.DIRSUP AS DIRSUP,
		       IT.C00102 AS C00102,
		       CASE IT.DOCUTY WHEN '214' THEN MAX(IT.C00103) ELSE ' ' END AS C00103,
		       MAX(IT.TEXT01) AS TEXT01,
		       MAX(IT.XDATS) AS XDATS,
		       MAX(IT.XTIMS) AS XTIMS
		  FROM IFWMS113 IT INNER JOIN BZPTN BZ1 ON IT.OWNRKY = BZ1.OWNRKY AND IT.PTNROD = BZ1.PTNRKY AND BZ1.PTNRTY IN( '0001', '0004')
		                   INNER JOIN BZPTN BZ2 ON IT.OWNRKY = BZ2.OWNRKY AND IT.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY IN( '0007', '0004')
		                   INNER JOIN SKUMA SM ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY AND SM.DELMAK = ' '
		 WHERE IT.MANDT = 'SAP'
		   AND IT.OWNRKY = #{OWNRKY}
		   AND DOCUTY IN ('211','212','213','214','215','216','266','267')
		   AND IT.C00102 != 'X'
		   AND IT.XSTAT = 'R'  
		   AND IT.QTYORG != 0 
		   AND OTRQDT &lt; TO_CHAR(SYSDATE, 'YYYYMMDD')
		 AND WAREKY IN ('2213', '2214', '2215', '2216', '2217', '2218', '2219','2220',
		'2315', '2316', '2317', '2318', '2319', '2320', '2321','2322','2323','2324',
		'2254', '2255' ,'2256', '2257' ,'2258' ,'2259' ,'2261' ,'2263')
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		<if test="WAREKY != null and WAREKY != ''">
			AND IT.WAREKY = #{WAREKY}
		</if>
		 GROUP BY IT.SVBELN, IT.DOCUTY, IT.ORDDAT, IT.OTRQDT, IT.PTNROD, BZ1.NAME01, IT.PTNRTO, BZ2.NAME01, IT.WARESR, IT.DIRDVY, IT.DIRSUP, IT.C00102, BZ2.PTNG08, IT.WAREKY
	</select>
	
	<!-- [RL53] 출고적기율 - 조회  -->
	<select id="RL53_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT STDDAT STDDAT,
		       OWNRKY OWNRKY,
		       WAREKY WAREKY,
		       WARENM WARENM,
		       ALLCNT ALLCNT,
		       SHPQTY SHPQTY,
		       SHPQTY2 SHPQTY2,
		       SHPPER SHPPER
		   FROM SHSBL
		  WHERE 1=1
		    AND OWNRKY = #{OWNRKY}
		        <if test="RANGE_SQL != null and RANGE_SQL != ''">
		        	${RANGE_SQL}
		        </if>
		ORDER BY STDDAT, OWNRKY, WAREKY
	</select>
	
	<!-- [SU01] WMS_SAP 수불 - 조회 -->
	<select id="SU01_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT  U.DOCDAT AS DOCDAT
		      , U.WAREKY AS WAREKY
		      , U.OWNRKY AS OWNRKY
		      , U.SKUKEY AS SKUKEY
		      , S.DESC01 AS DESC01
		      , U.QTINIT AS QTINIT
		      , U.GRQTYT AS GRQTYT
		      , U.GRQT01 AS GRQT01
		      , U.GRQT02 AS GRQT02
		      , U.GRQT03 AS GRQT03
		      , U.GRQT04 AS GRQT04
		      , U.GRQT05 AS GRQT05
		      , U.GRQT06 AS GRQT06
		      , U.GRQT07 AS GRQT07
		      , U.GRQT08 AS GRQT08
		      , U.GRQT09 AS GRQT09
		      , U.GRQT10 AS GRQT10
		      , U.GRQT11 AS GRQT11
		      , U.GRQT12 AS GRQT12
		      , U.GRQT13 AS GRQT13
		      , U.GRQT14 AS GRQT14
		      , U.GRQT15 AS GRQT15
		      , U.GRQT16 AS GRQT16
		      , U.GRQT17 AS GRQT17
		      , U.GRQT18 AS GRQT18
		      , U.GRQT19 AS GRQT19
		      , U.GRQT20 AS GRQT20
		      , U.GRQT21 AS GRQT21
		      , U.GRQT22 AS GRQT22
		      , U.GRQT23 AS GRQT23
		      , U.GRQT24 AS GRQT24
		      , U.GRQT25 AS GRQT25
		      , U.GRQT26 AS GRQT26
		      , U.GRQT27 AS GRQT27
		      , U.GRQT28 AS GRQT28
		      , U.GRQT29 AS GRQT29
		      , U.GRQT30 AS GRQT30
		      , U.GIQTYT AS GIQTYT
		      , U.GIQT01 AS GIQT01
		      , U.GIQT02 AS GIQT02
		      , U.GIQT03 AS GIQT03
		      , U.GIQT04 AS GIQT04
		      , U.GIQT05 AS GIQT05
		      , U.GIQT06 AS GIQT06
		      , U.GIQT07 AS GIQT07
		      , U.GIQT08 AS GIQT08
		      , U.GIQT09 AS GIQT09
		      , U.GIQT10 AS GIQT10
		      , U.GIQT11 AS GIQT11
		      , U.GIQT12 AS GIQT12
		      , U.GIQT13 AS GIQT13
		      , U.GIQT14 AS GIQT14
		      , U.GIQT15 AS GIQT15
		      , U.GIQT16 AS GIQT16
		      , U.GIQT17 AS GIQT17
		      , U.GIQT18 AS GIQT18
		      , U.GIQT19 AS GIQT19
		      , U.GIQT20 AS GIQT20
		      , U.GIQT21 AS GIQT21
		      , U.GIQT22 AS GIQT22
		      , U.GIQT23 AS GIQT23
		      , U.GIQT24 AS GIQT24
		      , U.GIQT25 AS GIQT25
		      , U.GIQT26 AS GIQT26
		      , U.GIQT27 AS GIQT27
		      , U.GIQT28 AS GIQT28
		      , U.GIQT29 AS GIQT29
		      , U.GIQT30 AS GIQT30
		      , U.QTCOMP AS QTCOMP
		      , U.TEMP01 AS TEMP01
		      , U.TEMP02 AS TEMP02
		      , U.TEMP03 AS TEMP03
		      , U.TEMP04 AS TEMP04
		      , U.TEMP05 AS TEMP05
		      , U.SUBLSQ AS SUBLSQ
		      , U.CREDAT AS CREDAT
		      , U.CRETIM AS CRETIM
		      , U.CREUSR AS CREUSR
		      , (SELECT NMLAST FROM USRMA WHERE USERID = U.CREUSR) AS CUSRNM
		      , U.LMODAT  AS LMODAT
		      , U.LMOTIM  AS LMOTIM
		      , U.LMOUSR  AS LMOUSR
		      , (SELECT NMLAST FROM USRMA WHERE USERID = U.LMOUSR) AS LUSRNM
		      , U.INDBZL AS INDBZL
		      , U.INDARC AS INDARC
		      , U.UPDCHK AS UPDCHK
		FROM SUBSM U
		INNER JOIN SKUMA S ON S.OWNRKY = U.OWNRKY AND U.SKUKEY = S.SKUKEY 
		WHERE 1=1
		   <if test="OWNRKY != null and OWNRKY != ''">
		   		AND U.OWNRKY = #{OWNRKY}
		   </if>
		   <if test="WAREKY != null and WAREKY != ''">
		   		AND U.WAREKY = #{WAREKY}
		   </if>
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
		   		${RANGE_SQL}
		   </if>
		ORDER BY DOCDAT
	</select>
		
	<!-- [SU01] WMS_SAP 수불 - 실행(프로시저) -->
	<update id="SU01_P_REBUILD_SUBUL_UPDATE" parameterType="hashmap" flushCache="true">
		{ CALL P_REBUILD_SUBUL(#{FROM}, #{TO}, #{WAREKY}, #{SES_USER_ID}) }
	</update>
	
	<!-- [RL25] 입/출고 집계표-->
	<select id="RL25_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		       DOCDAT AS DOCDAT,
		       ARCPTD AS ARCPTD,
		       RCPTTY AS RCPTTY,
		       SHORTX AS SHORTX,
		       SKUKEY AS SKUKEY,
		       DESC01 AS DESC01,
		       QTDUOM AS QTDUOM,
		       DECODE(DIRDVY ,'1','직송','일반') AS DIRDVY,
		       QTYRCV AS QTYRCV,
		       QTSHPD AS QTSHPD,
		       GRSWGT AS GRSWGT,
		       LOTA06 AS LOTA06,
		       CDESC1 AS CDESC1,
		       CDESC2 AS CDESC2
		FROM (
		SELECT
		    DH.DOCDAT,
		    DH.ARCPTD,
		    DH.RCPTTY,
		    DM.SHORTX,
		    DI.SKUKEY,
		    SM.DESC01,
		    SM.QTDUOM,
		    '' AS DIRDVY,
		    SUM(DI.QTYRCV) AS QTYRCV,
		    0 AS QTSHPD,
		    SUM(DI.QTYRCV) * SM.GRSWGT AS GRSWGT,
		    DI.LOTA06,
		    CM.CDESC1,
		    CM2.CDESC1 AS  CDESC2
		FROM RECDH DH INNER JOIN RECDI DI ON DH.RECVKY = DI.RECVKY AND DI.STATIT != 'RCN'
		              INNER JOIN SKUMA SM ON DH.OWNRKY = SM.OWNRKY AND DI.SKUKEY = SM.SKUKEY
		              INNER JOIN DOCTM DM ON DH.RCPTTY = DM.DOCUTY AND DM.DOCCAT = '100'
		              INNER JOIN CMCDV CM ON DI.LOTA06 = CM.CMCDVL AND CM.CMCDKY = 'LOTA06'
		              INNER JOIN CMCDV CM2 ON SM.SKUG05 = CM2.CMCDVL AND CM2.CMCDKY = 'SKUG05'
		WHERE 1=1
		<if test="OWNRKY != null and OWNRKY != ''">
		 AND DH.OWNRKY||'' = #{OWNRKY}
	    </if>
		<if test="WAREKY != null and WAREKY != ''">
		 AND DH.WAREKY||'' = #{WAREKY}
	    </if>
		<if test="LOTA06 != null and LOTA06 != ''">
		 AND DI.LOTA06 = #{LOTA06}
	    </if>
	    AND (
	    	<if test="RANGE_SQL != null and RANGE_SQL != ''">
		      ${RANGE_SQL}
			</if>
			<if test="RANGE_SQL3 != null and RANGE_SQL3 != ''">
		      ${RANGE_SQL3}
		    </if>
	    )		
		GROUP BY    DH.DOCDAT, DH.ARCPTD, DH.RCPTTY, DM.SHORTX, DI.SKUKEY, SM.DESC01, SM.QTDUOM, SM.GRSWGT, DI.LOTA06, CM.CDESC1, CM2.CDESC1
		
		UNION ALL
		
		SELECT
		    DR.CARDAT,
		    DH.LSHPCD,
		    DH.SHPMTY,
		    DM.SHORTX,
		    DI.SKUKEY,
		    SM.DESC01,
		    SM.QTDUOM,
		    I3.DIRDVY,
		    0 AS "qtyrcv",
		    SUM(DI.QTSHPD - DI.QTSHPC - DI.QTYREF),
		    SUM(DI.QTSHPD - DI.QTSHPC - DI.QTYREF) * SM.GRSWGT,
		    TI.LOTA06,
		    CM.CDESC1,
		    CM2.CDESC1 AS  CDESC2
		FROM SHPDH DH INNER JOIN SHPDI DI ON DH.SHPOKY = DI.SHPOKY AND DI.QTSHPD > 0
		              INNER JOIN SHPDR DR ON DI.SHPOKY = DR.SHPOKY AND DI.SHPOIT = DR.SHPOIT
		              INNER JOIN IFWMS113 I3 ON DH.OWNRKY = I3.OWNRKY AND DH.WAREKY = I3.WAREKY AND DI.SVBELN = I3.SVBELN AND DI.SPOSNR = I3.SPOSNR AND I3.XSTAT = 'D'
		              INNER JOIN SKUMA SM ON DH.OWNRKY = SM.OWNRKY AND DI.SKUKEY = SM.SKUKEY
		              INNER JOIN DOCTM DM ON DH.SHPMTY = DM.DOCUTY AND DM.DOCCAT = '200'
		              INNER JOIN (SELECT DISTINCT SHPOKY, SHPOIT, OWNRKY, MAX(LOTA06) AS "LOTA06" FROM TASDI WHERE ACTCDT &gt; '20170101' GROUP BY SHPOKY, SHPOIT, OWNRKY) TI ON DI.SHPOKY = TI.SHPOKY 
		                             AND TI.OWNRKY = DH.OWNRKY AND DI.SHPOIT = TI.SHPOIT
		              INNER JOIN CMCDV CM ON TI.LOTA06 = CM.CMCDVL AND CM.CMCDKY = 'LOTA06'
		              INNER JOIN CMCDV CM2 ON SM.SKUG05 = CM2.CMCDVL AND CM2.CMCDKY = 'SKUG05'
		WHERE 1=1
		and di.qtshpd > 0
		<if test="OWNRKY != null and OWNRKY != ''">
		 AND DH.OWNRKY||'' = #{OWNRKY}
	    </if>
		<if test="WAREKY != null and WAREKY != ''">
		 AND DH.WAREKY||'' = #{WAREKY}
	    </if>
		<if test="LOTA06 != null and LOTA06 != ''">
		 AND TI.LOTA06 = #{LOTA06}
	    </if>
	    
	     AND(
	     	<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
		     ${RANGE_SQL2}
			</if>
			<if test="RANGE_SQL4 != null and RANGE_SQL4 != ''">
		     ${RANGE_SQL4}
			</if>
	     )

		GROUP BY    DR.CARDAT, DH.LSHPCD, DH.SHPMTY, DM.SHORTX, DI.SKUKEY, SM.DESC01, SM.QTDUOM, SM.GRSWGT, TI.LOTA06, CM.CDESC1, I3.DIRDVY, CM2.CDESC1
		) ORDER BY SKUKEY, DOCDAT, ARCPTD, RCPTTY
				
	</select>
	
	<!-- [RL25] 입/출고 집계표-->
	<select id="RL27_LIST" parameterType="hashmap" resultType="DataMap">
		    SELECT NVL(OWNRKY,' ') AS OWNRKY,
		           NVL(WAREKY, ' ') AS WAREKY,
		           NVL(DATRCV, ' ') AS DATRCV,
		           NVL(CHKSEQ, ' ') AS CHKSEQ,
		           NVL(ORDSEQ, ' ') AS ORDSEQ,
		           DECODE(ORDTYP,'001','일반','004','이고','003','위탁점','008','할증','009','무상',NVL(ORDTYP,' ')) AS ORDTYP,
		           NVL(WARESR, ' ') AS WARESR,
		           NVL(NAME01, ' ') AS NAME01,
		           NVL(PTNRTO, ' ') AS PTNRTO,
		           NVL(CTNAME, ' ') AS CTNAME,
		           NVL(SKUKEY, ' ') AS SKUKEY,
		           NVL(SKUNM, ' ') AS DESC01,
		           NVL(NETWGT, 0) AS NETWGT,
		           NVL(QTSHPD, 0) AS QTSHPD,
		           NVL(QTYBOX, 0) AS QTYBOX,
		           NVL(QTYPLT, 0) AS QTYPLT,
		           NVL(DUOMKY, ' ') AS DUOMKY,
		           NVL(GR, 0) AS GRGUBN
		      FROM (      
		            SELECT SH.OWNRKY,
		                   SH.WAREKY,
		                   SR.CARDAT AS DATRCV,
		                   DECODE(GROUPING_ID(SH.OWNRKY, SH.WAREKY, SH.SHPMTY, IFT.ORDTYP, SH.PGRC04, SH.DPTNKY, BZP.NAME01, SR.CARDAT, SI.SKUKEY), 1, '거래처계', IFT.CHKSEQ) AS CHKSEQ,
		                   IFT.ORDSEQ AS ORDSEQ,
		                   IFT.ORDTYP AS ORDTYP,
		                   SH.PGRC04 AS WARESR,
		                   SH.DPTNKY AS PTNRTO,
		                   SH.SHPMTY,
		                   BZP.NAME01,
		                   DECODE(IFT.ORDTYP, '001', IFT.CTNAME, BZP.NAME01) AS CTNAME,
		                   SI.SKUKEY,
		                   SF_GET_SKUNM(SH.OWNRKY, SI.SKUKEY) AS SKUNM,
		                   IFT.DUOMKY AS DUOMKY,
		                   SUM(SF_GET_SKU_NETWGT(SH.OWNRKY, SI.SKUKEY) * SI.QTSHPD) AS NETWGT,
		                   SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) AS QTSHPD,
		                   SUM((SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SF_GET_SKU_QTDUOM(SH.OWNRKY, SI.SKUKEY)) AS QTYBOX,
		                   ROUND(SUM((SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SF_GET_SKU_QTYSTD(SH.OWNRKY, SI.SKUKEY)), 2) AS QTYPLT,
		                   GROUPING_ID(SH.OWNRKY, SH.WAREKY, SH.SHPMTY, IFT.ORDTYP, SH.PGRC04, SH.DPTNKY, BZP.NAME01, SR.CARDAT, SI.SKUKEY) AS GR
		              FROM SHPDH SH 
		              INNER JOIN SHPDI SI
		                      ON SH.SHPOKY = SI.SHPOKY
		              INNER JOIN SHPDR SR
		                      ON SI.SHPOKY = SR.SHPOKY 
		                     AND SI.SHPOIT = SR.SHPOIT
		              INNER JOIN IFWMS213 IFT
		                      ON SI.SVBELN = IFT.SVBELN
		                     AND SI.SPOSNR = IFT.SPOSNR
		                     AND SI.SKUKEY = IFT.SKUKEY
		                     AND IFT.XSTAT = 'D'
		                     AND IFT.WMSTYP != '230'
		               LEFT JOIN BZPTN BZP ON BZP.OWNRKY = IFT.OWNRKY
		                     AND BZP.PTNRKY = IFT.WARESR
		                     AND BZP.PTNRTY IN ('0003', '0004')
		             WHERE SH.OWNRKY = #{OWNRKY}
		               AND SH.WAREKY = #{WAREKY}
		             <if test="ORDTYP != null and ORDTYP != ''">
		               AND IFT.ORDTYP = #{ORDTYP}
		             </if>
	    			 <if test="RANGE_SQL != null and RANGE_SQL != ''">
		      		       ${RANGE_SQL}
					 </if>
		             GROUP BY ROLLUP((SH.OWNRKY, SH.WAREKY, SH.SHPMTY, IFT.ORDTYP, SH.PGRC04, IFT.CTNAME, SH.DPTNKY, BZP.NAME01, SR.CARDAT), (SI.SKUKEY, IFT.DUOMKY, IFT.ORDTYP, IFT.CHKSEQ, IFT.ORDSEQ))
		             HAVING GROUPING_ID(SH.OWNRKY, SH.WAREKY, SH.SHPMTY, IFT.ORDTYP, SH.PGRC04, SH.DPTNKY, BZP.NAME01, SR.CARDAT, SI.SKUKEY) IN (0, 1)
		             
		             UNION ALL
		             
		             SELECT SH.OWNRKY,
		                   SH.WAREKY,
		                   SR.CARDAT AS DATRCV,
		                   DECODE(GROUPING_ID(SH.OWNRKY, SH.WAREKY, SI.SKUKEY, SH.SHPMTY), 1, '제품계', IFT.CHKSEQ) AS CHKSEQ,
		                   IFT.ORDSEQ AS ORDSEQ,
		                   IFT.ORDTYP AS ORDTYP,
		                   SH.PGRC04 AS WARESR,
		                   SH.DPTNKY AS PTNRTO,
		                   SH.SHPMTY,
		                   BZP.NAME01,
		                   DECODE(IFT.ORDTYP, '001', IFT.CTNAME, BZP.NAME01) AS CTNAME,
		                   SI.SKUKEY,
		                   SF_GET_SKUNM(SH.OWNRKY, SI.SKUKEY) AS SKUNM,
		                   MAX(IFT.DUOMKY) AS DUOMKY,
		                   SUM(SF_GET_SKU_NETWGT(SH.OWNRKY, SI.SKUKEY) * SI.QTSHPD) AS NETWGT,
		                   SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) AS QTSHPD,
		                   SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SF_GET_SKU_QTDUOM(SH.OWNRKY, SI.SKUKEY) AS QTYBOX,
		                   ROUND(SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SF_GET_SKU_QTYSTD(SH.OWNRKY, SI.SKUKEY), 2) AS QTYPLT,
		                   GROUPING_ID(SH.OWNRKY, SH.WAREKY, SI.SKUKEY, SH.SHPMTY) AS GR
		              FROM SHPDH SH 
		              INNER JOIN SHPDI SI
		                      ON SH.SHPOKY = SI.SHPOKY
		              INNER JOIN SHPDR SR
		                      ON SI.SHPOKY = SR.SHPOKY 
		                     AND SI.SHPOIT = SR.SHPOIT
		              INNER JOIN IFWMS213 IFT
		                      ON SI.SVBELN = IFT.SVBELN
		                     AND SI.SPOSNR = IFT.SPOSNR
		                     AND SI.SKUKEY = IFT.SKUKEY
		                     AND IFT.XSTAT = 'D'
		                     AND IFT.WMSTYP != '230'
		               LEFT JOIN BZPTN BZP ON BZP.OWNRKY = IFT.OWNRKY
		                     AND BZP.PTNRKY = IFT.WARESR
		                     AND BZP.PTNRTY IN ('0003', '0004')
		             WHERE SH.OWNRKY = #{OWNRKY}
		               AND SH.WAREKY = #{WAREKY}
		             <if test="ORDTYP != null and ORDTYP != ''">
		               AND IFT.ORDTYP = #{ORDTYP}
		             </if>
	    			 <if test="RANGE_SQL != null and RANGE_SQL != ''">
		      		       ${RANGE_SQL}
					 </if>
		             GROUP BY ROLLUP((SH.OWNRKY, SH.WAREKY, SI.SKUKEY), (SH.SHPMTY, IFT.ORDTYP, SH.PGRC04, IFT.CTNAME, SH.DPTNKY, BZP.NAME01, SR.CARDAT, IFT.ORDTYP, IFT.CHKSEQ, IFT.ORDSEQ))
		             HAVING GROUPING_ID(SH.OWNRKY, SH.WAREKY, SI.SKUKEY, SH.SHPMTY) = 1
		             
		             UNION ALL
		             
		             SELECT SH.OWNRKY,
		                   SH.WAREKY,
		                   SR.CARDAT AS DATRCV,
		                   DECODE(GROUPING_ID(SH.OWNRKY, SH.WAREKY, SR.CARDAT, SI.SKUKEY), 1, '일자별계', '총계') AS CHKSEQ,
		                   IFT.ORDSEQ AS ORDSEQ,
		                   IFT.ORDTYP AS ORDTYP,
		                   SH.PGRC04 AS WARESR,
		                   SH.DPTNKY AS PTNRTO,
		                   SH.SHPMTY,
		                   BZP.NAME01,
		                   DECODE(IFT.ORDTYP, '001', IFT.CTNAME, BZP.NAME01) AS CTNAME,
		                   SI.SKUKEY,
		                   SF_GET_SKUNM(SH.OWNRKY, SI.SKUKEY) AS SKUNM,
		                   IFT.DUOMKY AS DUOMKY,
		                   SUM(SF_GET_SKU_NETWGT(SH.OWNRKY, SI.SKUKEY) * SI.QTSHPD) AS NETWGT,
		                   SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) AS QTSHPD,
		                   SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SF_GET_SKU_QTDUOM(SH.OWNRKY, SI.SKUKEY) AS QTYBOX,
		                   ROUND(SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SF_GET_SKU_QTYSTD(SH.OWNRKY, SI.SKUKEY), 2) AS QTYPLT,
		                   GROUPING_ID(SH.OWNRKY, SH.WAREKY, SR.CARDAT, SI.SKUKEY) AS GR
		              FROM SHPDH SH 
		              INNER JOIN SHPDI SI
		                      ON SH.SHPOKY = SI.SHPOKY
		              INNER JOIN SHPDR SR
		                      ON SI.SHPOKY = SR.SHPOKY 
		                     AND SI.SHPOIT = SR.SHPOIT
		              INNER JOIN IFWMS213 IFT
		                      ON SI.SVBELN = IFT.SVBELN
		                     AND SI.SPOSNR = IFT.SPOSNR
		                     AND SI.SKUKEY = IFT.SKUKEY
		                     AND IFT.XSTAT = 'D'
		                     AND IFT.WMSTYP != '230'
		               LEFT JOIN BZPTN BZP ON BZP.OWNRKY = IFT.OWNRKY
		                     AND BZP.PTNRKY = IFT.WARESR
		                     AND BZP.PTNRTY IN ('0003', '0004')
		             WHERE SH.OWNRKY = #{OWNRKY}
		               AND SH.WAREKY = #{WAREKY}
		             <if test="ORDTYP != null and ORDTYP != ''">
		               AND IFT.ORDTYP = #{ORDTYP}
		             </if>
	    			 <if test="RANGE_SQL != null and RANGE_SQL != ''">
		      		       ${RANGE_SQL}
					 </if>
		             GROUP BY ROLLUP((SH.OWNRKY, SH.WAREKY, SR.CARDAT), ( SI.SKUKEY, IFT.DUOMKY, SH.SHPMTY, IFT.ORDTYP, SH.PGRC04, SH.DPTNKY, BZP.NAME01, IFT.CTNAME, IFT.ORDTYP, IFT.CHKSEQ, IFT.ORDSEQ))
		             HAVING GROUPING_ID(SH.OWNRKY, SH.WAREKY, SR.CARDAT, SI.SKUKEY) != 0)
		 WHERE 1 = 1
				
	</select>
	
	<!-- [RL09] SYSTEM 에리어처리-->
	<select id="RL09_LIST" parameterType="hashmap" resultType="DataMap">
		<if test="COUNT != null and COUNT != ''">
		SELECT COUNT(*) AS CNT
		from (
		</if>
		SELECT 'V' AS CONFIRM,
		       S.WAREKY AS WAREKY,
		       S.STOKKY AS STOKKY,
		       S.QTSIWH AS QTSIWH,
		       S.QTSALO AS QTSALO,
		       S.QTSPMO AS QTSPMO,
		       S.QTSPMI AS QTSPMI,
		       S.QTSBLK AS QTSBLK,
		       'PK' AS TASKTY,
		       'NEW' AS STATIT,
		       S.QTSIWH - GREATEST(S.QTSALO, S.QTSPMO) - S.QTSBLK AS AVAILABLEQTY,
		       (S.QTSIWH - GREATEST(S.QTSALO, S.QTSPMO) - S.QTSBLK) AS AVAILABLEQTYUOM,
		       0 AS QTTAOR,
		       0 AS QTYUOM,
		       '00000000' AS ACTCDT,
		       '000000' AS ACTCTI,
		       S.LOCAKY AS LOCASR,
		       S.SECTID AS SECTSR,
		       S.PACKID AS PAIDSR,
		       S.TRNUID AS TRNUSR,
		       S.TRUNTY AS STRUTY,
		       S.MEASKY AS SMEAKY,
		       S.UOMKEY AS SUOMKY,
		       S.QTPUOM AS QTSPUM,
		       S.DUOMKY AS SDUOKY,
		       S.QTDUOM AS QTSDUM,
		       ' ' AS LOCATG,
		       S.SECTID AS SECTTG,
		       S.PACKID AS PAIDTG,
		       S.TRNUID AS TRNUTG,
		       S.TRUNTY AS TTRUTY,
		       S.MEASKY AS TMEAKY,
		       S.UOMKEY AS TUOMKY,
		       S.QTPUOM AS QTTPUM,
		       S.DUOMKY AS TDUOKY,
		       S.QTDUOM AS QTTDUM,
		       S.OWNRKY AS OWNRKY,
		       S.SKUKEY AS SKUKEY,
		       S.LOTNUM AS LOTNUM,
		       S.REFDKY AS REFDKY,
		       S.REFDIT AS REFDIT,
		       S.REFCAT AS REFCAT,
		       S.REFDAT AS REFDAT,
		       S.PURCKY AS PURCKY,
		       S.PURCIT AS PURCIT,
		       S.ASNDKY AS ASNDKY,
		       S.ASNDIT AS ASNDIT,
		       S.RECVKY AS RECVKY,
		       S.RECVIT AS RECVIT,
		       S.SHPOKY AS SHPOKY,
		       S.SHPOIT AS SHPOIT,
		       S.GRPOKY AS GRPOKY,
		       S.GRPOIT AS GRPOIT,
		       S.SADJKY AS SADJKY,
		       S.SADJIT AS SADJIT,
		       S.SDIFKY AS SDIFKY,
		       S.SDIFIT AS SDIFIT,
		       S.PHYIKY AS PHYIKY,
		       S.PHYIIT AS PHYIIT,
		       S.DESC01 AS DESC01,
		       S.DESC02 AS DESC02,
		       S.ASKU01 AS ASKU01,
		       S.ASKU02 AS ASKU02,
		       S.ASKU03 AS ASKU03,
		       S.ASKU04 AS ASKU04,
		       S.ASKU05 AS ASKU05,
		       S.EANCOD AS EANCOD,
		       S.GTINCD AS GTINCD,
		       S.SKUG01 AS SKUG01,
		       S.SKUG02 AS SKUG02,
		       S.SKUG03 AS SKUG03,
		       S.SKUG04 AS SKUG04,
		       S.SKUG05 AS SKUG05,
		       S.GRSWGT AS GRSWGT,
		       S.NETWGT AS NETWGT,
		       S.WGTUNT AS WGTUNT,
		       S.LENGTH AS LENGTH,
		       S.WIDTHW AS WIDTHW,
		       S.HEIGHT AS HEIGHT,
		       S.CUBICM AS CUBICM,
		       S.CAPACT AS CAPACT,
		       S.AREAKY AS AREAKY,
		       S.LOTA01 AS LOTA01,
		       S.LOTA02 AS LOTA02,
		       S.LOTA03 AS LOTA03,
		       S.LOTA04 AS LOTA04,
		       S.LOTA05 AS LOTA05,
		       S.LOTA06 AS LOTA06,
		       S.LOTA07 AS LOTA07,
		       S.LOTA08 AS LOTA08,
		       S.LOTA09 AS LOTA09,
		       S.LOTA10 AS LOTA10,
		       S.LOTA11 AS LOTA11,
		       S.LOTA12 AS LOTA12,
		       S.LOTA13 AS LOTA13,
		       S.LOTA14 AS LOTA14,
		       S.LOTA15 AS LOTA15,
		       S.LOTA16 AS LOTA16,
		       S.LOTA17 AS LOTA17,
		       S.LOTA18 AS LOTA18,
		       S.LOTA19 AS LOTA19,
		       S.LOTA20 AS LOTA20,
		       S.AWMSNO AS AWMSNO,
		       S.SMANDT AS SMANDT,
		       S.SEBELN AS SEBELN,
		       S.SEBELP AS SEBELP,
		       S.SVBELN AS SVBELN,
		       S.SMBLNR AS SMBLNR,
		       S.SMJAHR AS SMJAHR,
		       S.SZEILE AS SZEILE,
		       S.SZMIPNO AS SZMIPNO,
		       S.SPOSNR AS SPOSNR,
		       S.STKNUM AS STKNUM,
		       S.STPNUM AS STPNUM,
		       S.SLGORT AS SLGORT,
		       S.SWERKS AS SWERKS,
		       S.STDLNR AS STDLNR,
		       S.STRAID AS STRAID,
		       ' ' AS SSORNU,
		       ' ' AS SSORIT,
		       S.SXBLNR AS SXBLNR,
		       S.CREDAT AS CREDAT,
		       S.CRETIM AS CRETIM,
		       S.CREUSR AS CREUSR,
		       (SELECT NMLAST FROM USRMA WHERE USERID = S.CREUSR) AS CUSRNM,
		       S.LMODAT AS LMODAT,
		       S.LMOTIM AS LMOTIM,
		       S.LMOUSR AS LMOUSR,
		       '0000000000' AS TASKKY,
		       '000000' AS TASKIT,
		       ' ' AS RSNCOD,
		       0 AS QTCOMP,
		       ' ' AS TKFLKY,
		       ' ' AS STEPNO,
		       ' ' AS LSTTFL,
		       ' ' AS LOCAAC,
		       ' ' AS SECTAC,
		       ' ' AS PAIDAC,
		       ' ' AS TRNUAC,
		       ' ' AS ATRUTY,
		       ' ' AS AMEAKY,
		       ' ' AS AUOMKY,
		       0 AS QTAPUM,
		       ' ' AS ADUOKY,
		       0 AS QTADUM,
		       ' ' AS REFDKY,
		       ' ' AS REFDIT,
		       ' ' AS REFCAT,
		       ' ' AS REFDAT,
		       ' ' AS DROPID,
		       ' ' AS WORKID,
		       ' ' AS WORKNM,
		       ' ' AS HHTTID,
		       ' ' AS AWMSTS,
		       S.SAPSTS AS SAPSTS,
		       ' ' AS DOORKY,
		       ' ' AS PTLT01,
		       ' ' AS PTLT02,
		       ' ' AS PTLT03,
		       ' ' AS PTLT11,
		       ' ' AS PASTKY,
		       ' ' AS ALSTKY,
		       M.BATMNG AS BATMNG,
		       M.ASKU03 AS MASKU03,
		       S.SZMBLNO AS SZMBLNO,
		       S.SDATBG AS SDATBG,
		       LM.LOCAKY AS LOCAPK,
               S.LOCAKY AS LOCAKY,
               S.TRUNTY AS TRUNTY
		FROM   STKKY S INNER JOIN SKUMA M ON S.SKUKEY = M.SKUKEY AND S.OWNRKY = M.OWNRKY
		               INNER JOIN AREMA B ON S.WAREKY = B.WAREKY AND S.AREAKY = B.AREAKY
		               LEFT OUTER JOIN SHPDH SH ON S.SHPOKY = SH.SHPOKY
		               LEFT OUTER JOIN SHPDI SI ON S.SHPOKY = SI.SHPOKY AND S.SHPOIT = SI.SHPOIT
		               LEFT OUTER JOIN CMCDV CM ON CM.CMCDKY = 'STATIT' AND SI.STATIT = CMCDVL
		               LEFT OUTER JOIN LOCMA LM ON S.WAREKY = LM.WAREKY AND S.SKUKEY = LM.LOCSKU
		WHERE 1 = 1
		  AND S.QTSIWH != 0
		  AND B.AREATY IN ('SYST', 'SHIP')
		  AND (SH.INDDCL = 'V' OR SH.INDDCL IS NULL)
		  AND S.OWNRKY = #{OWNRKY}
   		  AND S.WAREKY = #{WAREKY}
	     <if test="RANGE_SQL != null and RANGE_SQL != ''">
		      ${RANGE_SQL}
		 </if>
		 <if test="RANGELOT_SQL != null and RANGELOT_SQL != ''">
			  ${RANGELOT_SQL}
		 </if>	
		<if test="COUNT != null and COUNT != ''">
		 )
		</if>
	</select>

	<!-- [RL09] 재고이동 재고조회 
	      REPORT.L4030.NEGATIVE.FIND_STKKY
	-->
	<select id="RL09_FIND_STKKY_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT B.QTSIWH - (GREATEST(B.QTSALO, B.QTSPMO) - B.QTSBLK) AS QTTAOR,
		       B.STOKKY AS STOKKY,
		       B.WAREKY AS WAREKY,
		       B.LOTNUM AS LOTNUM,
		       B.LOCAKY AS LOCAKY,
		       B.TRNUID AS TRNUID,
		       B.SECTID AS SECTID,
		       B.PACKID AS PACKID,
		       B.QTSIWH AS QTSIWH,
		       B.QTSALO AS QTSALO,
		       B.QTSPMO AS QTSPMO,
		       B.QTSPMI AS QTSPMI,
		       B.QTSBLK AS QTSBLK,
		       B.QTYUOM AS QTYUOM,
		       B.TRUNTY AS TRUNTY,
		       B.MEASKY AS MEASKY,
		       B.UOMKEY AS UOMKEY,
		       B.QTPUOM AS QTPUOM,
		       B.DUOMKY AS DUOMKY,
		       B.QTDUOM AS QTDUOM,
		       B.TKFLKY AS TKFLKY,
		       B.STEPNO AS STEPNO,
		       B.LSTTFL AS LSTTFL,
		       B.SRCSKY AS SRCSKY,
		       B.UOMDOC AS UOMDOC,
		       B.CNTBSK AS CNTBSK,
		       B.NUPDPS AS NUPDPS,
		       B.REFDKY AS REFDKY,
		       B.REFDIT AS REFDIT,
		       B.REFCAT AS REFCAT,
		       B.REFDAT AS REFDAT,
		       B.PURCKY AS PURCKY,
		       B.PURCIT AS PURCIT,
		       B.ASNDKY AS ASNDKY,
		       B.ASNDIT AS ASNDIT,
		       B.RECVKY AS RECVKY,
		       B.RECVIT AS RECVIT,
		       B.SHPOKY AS SHPOKY,
		       B.SHPOIT AS SHPOIT,
		       B.GRPOKY AS GRPOKY,
		       B.GRPOIT AS GRPOIT,
		       B.TASKKY AS TASKKY,
		       B.TASKIT AS TASKIT,
		       B.SADJKY AS SADJKY,
		       B.SADJIT AS SADJIT,
		       B.SDIFKY AS SDIFKY,
		       B.SDIFIT AS SDIFIT,
		       B.PHYIKY AS PHYIKY,
		       B.PHYIIT AS PHYIIT,
		       B.OWNRKY AS OWNRKY,
		       B.SKUKEY AS SKUKEY,
		       B.LOTA01 AS LOTA01,
		       B.LOTA02 AS LOTA02,
		       B.LOTA03 AS LOTA03,
		       B.LOTA04 AS LOTA04,
		       B.LOTA05 AS LOTA05,
		       B.LOTA06 AS LOTA06,
		       B.LOTA07 AS LOTA07,
		       B.LOTA08 AS LOTA08,
		       B.LOTA09 AS LOTA09,
		       B.LOTA10 AS LOTA10,
		       B.LOTA11 AS LOTA11,
		       B.LOTA12 AS LOTA12,
		       B.LOTA13 AS LOTA13,
		       B.LOTA14 AS LOTA14,
		       B.LOTA15 AS LOTA15,
		       B.LOTA16 AS LOTA16,
		       B.LOTA17 AS LOTA17,
		       B.LOTA18 AS LOTA18,
		       B.LOTA19 AS LOTA19,
		       B.LOTA20 AS LOTA20,
		       B.AWMSNO AS AWMSNO,
		       B.DESC01 AS DESC01,
		       B.DESC02 AS DESC02,
		       B.ASKU01 AS ASKU01,
		       B.ASKU02 AS ASKU02,
		       B.ASKU03 AS ASKU03,
		       B.ASKU04 AS ASKU04,
		       B.ASKU05 AS ASKU05,
		       B.EANCOD AS EANCOD,
		       B.GTINCD AS GTINCD,
		       B.SKUG01 AS SKUG01,
		       B.SKUG02 AS SKUG02,
		       B.SKUG03 AS SKUG03,
		       B.SKUG04 AS SKUG04,
		       B.SKUG05 AS SKUG05,
		       B.GRSWGT AS GRSWGT,
		       B.NETWGT AS NETWGT,
		       B.WGTUNT AS WGTUNT,
		       B.LENGTH AS LENGTH,
		       B.WIDTHW AS WIDTHW,
		       B.HEIGHT AS HEIGHT,
		       B.CUBICM AS CUBICM,
		       B.CAPACT AS CAPACT,
		       B.ZONEKY AS ZONEKY,
		       B.TKZONE AS TKZONE,
		       B.AREAKY AS AREAKY,
		       B.SMANDT AS SMANDT,
		       B.SEBELN AS SEBELN,
		       B.SEBELP AS SEBELP,
		       B.SZMBLNO AS SZMBLNO,
		       B.SZMIPNO AS SZMIPNO,
		       B.STRAID AS STRAID,
		       B.SVBELN AS SVBELN,
		       B.SPOSNR AS SPOSNR,
		       B.STKNUM AS STKNUM,
		       B.STPNUM AS STPNUM,
		       B.SWERKS AS SWERKS,
		       B.SLGORT AS SLGORT,
		       B.SDATBG AS SDATBG,
		       B.STDLNR AS STDLNR,
		       B.SSORNU AS SSORNU,
		       B.SSORIT AS SSORIT,
		       B.SMBLNR AS SMBLNR,
		       B.SZEILE AS SZEILE,
		       B.SMJAHR AS SMJAHR,
		       B.SXBLNR AS SXBLNR,
		       B.SAPSTS AS SAPSTS  
		  FROM ( ${APPENDQUERY} ) A,
		       STKKY B
		 WHERE A.WAREKY = B.WAREKY
		   AND A.LOCAKY = B.LOCAKY
		   AND A.SKUKEY = B.SKUKEY
		   AND A.LOTA01 = B.LOTA01
		   AND A.TRNUID = B.TRNUID
		   AND (B.QTSIWH - (GREATEST(B.QTSALO, B.QTSPMO) - B.QTSBLK)) > 0
		   AND B.QTSALO = 0
		ORDER BY STOKKY DESC
				
	</select>	
	
	<!-- REPORT.L4030.VALIDATE_ADJDI -->
	<select id="RL09_VALIDATE_ADJDI_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT A.*,
		       B.QTSIWH - GREATEST(B.QTSALO, B.QTSPMO) - B.QTSBLK AS QTSAVL, 
		       B.QTSIWH, 
		       B.QTSALO, 
		       B.QTSPMO, 
		       B.QTSPMI, 
		       B.QTSBLK,       
		       C.LOCAKY AS LOCMA_LOCAKY,
		       D.TRUNTY AS TUTMA_TRNUTY,
		       CASE WHEN TRIM(A.STOKKY) IS NOT NULL
		                 THEN NVL((SELECT SHPDH.INDDCL
		                             FROM SHPDH
		                            WHERE SHPDH.SHPOKY = B.SHPOKY), ' ')
		            ELSE ' ' END SHPCMPYN,
		       A.SKUKEY AS SKUKEY,
		       B.SHPOKY AS SHPOKY
		  FROM ( ${APPENDQUERY} ) A,
		       STKKY B,
		       LOCMA C,
		       TUTMA D
		 WHERE A.STOKKY = B.STOKKY(+)
		   AND A.WAREKY = C.WAREKY(+)
		   AND A.LOCAKY = C.LOCAKY(+)
		   AND A.TRUNTY = D.TRUNTY(+)
	</select>	
	
	
	<!-- [RL09] SYSTEM 에리어처리 TARGET STKKY 조회-->
	<select id="RL09_STKKY_MAP" parameterType="hashmap" resultType="DataMap">	
		SELECT COUNT(1) AS CNT
		  FROM STKKY B
		 WHERE B.STOKKY = #{STOKKY}
		   AND (B.QTSIWH - (GREATEST(B.QTSALO, B.QTSPMO) - B.QTSBLK)) > 0
		   AND B.QTSALO = 0
		   AND B.QTSIWH > #{QTTAOR}
		ORDER BY STOKKY DESC		
	</select>

	<select id="RL38_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT STDDAT  
		     , GUBUN  AS GUBUN
		     , TKZONE  AS TKZONE
             , CREUSR AS CREUSR
             , MAX(WORKER) AS WORKER
             , MAX(SSORNU) AS SSORNU 
             , SUM(QTCOMP) AS QTCOMP
             , SUM(BOXQTY) AS BOXQTY
             , SUM(PLTQTY) AS PLTQTY
             , TOTQTY AS TOTQTY 
             , ROUND(SUM(NVL(QTCOMP,1))/SUM(NVL(TOTQTY,1)) * 100, 4) AS WORPER
          FROM (
        
               SELECT A.STDDAT -- 작업일자
                    , A.GUBUN
                    , A.TKZONE
		       	    , A.CREUSR
		       	    , A.WORKER
		       	    , A.SSORNU -- 작업자별피킹번호
		       	    , SUM(QTCOMP) AS QTCOMP -- 작업수량
		       	    , SUM(BOXQTY) AS BOXQTY
		       	    , SUM(PLTQTY) AS PLTQTY
                    , TOTQTY AS TOTQTY
		         FROM (
		       	        SELECT  /*+ INDEX(PP IDX_PDAPIC_NEW01) INDEX(TI IDX_TASDI_NEW14) */  PP.STDDAT -- 작업일자
		       	            , PP.CREUSR
		       	            , UM.NMLAST AS WORKER
		       	            , TI.SSORNU -- 작업자별피킹번호
		       	            , PP.QTYWRK AS QTCOMP -- 작업수량
		       	            , SM.QTDUOM 
		       	            , SM.QTYSTD
					        , LM.TKZONE -- 작업존 (구분)
					        , DECODE(LM.TKZONE, 'HAND', '피킹', 'FORK', '지게차', LM.TKZONE) AS GUBUN -- 구분명
		       	            , TRUNC(PP.QTYWRK / NVL(TRIM(SM.QTDUOM), 1),1) AS BOXQTY --박스수량 
		       	            , TRUNC(PP.QTYWRK / NVL(TRIM(SM.QTYSTD), 1),1) AS PLTQTY --팔렛수량
		       	         FROM PDAPIC PP
		       	              INNER JOIN TASDI TI ON TI.SSORNU = PP.SSORNU AND TI.LOCASR = PP.LOCAKY AND TI.SKUKEY = PP.SKUKEY
		       	              INNER JOIN TASDH TH ON TH.TASKKY = TI.TASKKY
		       	              INNER JOIN LOCMA LM ON LM.WAREKY = TH.WAREKY AND LM.LOCAKY = TI.LOCASR
		       	              INNER JOIN SKUMA SM ON SM.OWNRKY = TI.OWNRKY AND SM.SKUKEY = TI.SKUKEY
                              INNER JOIN USRMA UM ON UM.USERID = PP.CREUSR
		       	        WHERE 1=1
				          <if test="RANGE_SQL != null and RANGE_SQL != ''">
				          	${RANGE_SQL}
				          </if>
		       	        GROUP BY TI.SSORNU,  TH.WAREKY, PP.STDDAT, PP.CREUSR,PP.QTYWRK, SM.QTDUOM, SM.QTYSTD, UM.NMLAST, LM.TKZONE
		       	        ORDER BY 1,2
		       	     ) A
                     LEFT OUTER JOIN (
                      SELECT SR.CARDAT
                           , SUM(SI.QTSHPO) AS TOTQTY
                        FROM SHPDR SR 
                             INNER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
                        WHERE 1=1 
				          <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
				          	${RANGE_SQL2}
				          </if>
                        GROUP BY SR.CARDAT
                     ) S ON S.CARDAT = A.STDDAT
                 GROUP BY STDDAT
		       	        , CREUSR
		       	        , WORKER
		       	        , SSORNU -- 작업자별피킹번호
		       	        , GUBUN
		       	        , TKZONE
                        , TOTQTY
               ) GROUP BY STDDAT, CREUSR, TOTQTY, GUBUN, TKZONE 
	</select>

	<select id="RL38_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
	  SELECT /*+ INDEX(TI IDX_TASDI_NEW14) */PP.STDDAT -- 작업일자
	       , PP.CRETIM 
	       , PP.CREUSR
	       , (SELECT NMLAST FROM USRMA WHERE USERID = PP.CREUSR) AS WORKER
	       , TI.SSORNU -- 작업자별피킹번호
	       , TI.SKUKEY -- 제품코드
	       , SM.DESC01 -- 제품명
	       , SM.DESC03 -- 구코드
	       , TI.LOCASR -- 작업 로케이션
           , PP.QTYWRK -- 작업수량
	       , SUM(TI.QTCOMP) AS QTCOMP -- 총수량
	       , LM.TKZONE -- 작업존 (구분)
	       , DECODE(LM.TKZONE, 'HAND', '피킹', 'FORK', '지게차', LM.TKZONE) AS LOCAKYNM -- 구분명
	       , TRUNC(PP.QTYWRK / NVL(TRIM(SM.QTDUOM), 1),1) AS BOXQTY --박스수량 
	       , SM.QTDUOM AS BXIQTY -- 박스입수
	       , TRUNC(PP.QTYWRK / NVL(TRIM(SM.QTYSTD), 1),1) AS PLTQTY --팔렛수량
	       , SM.QTYSTD AS PLIQTY -- 팔렛입수
	       , SR.CARDAT
	    FROM PDAPIC PP
	         INNER JOIN TASDI TI ON TI.SSORNU = PP.SSORNU AND TI.LOCASR = PP.LOCAKY AND TI.SKUKEY = PP.SKUKEY
	         INNER JOIN TASDH TH ON TH.TASKKY = TI.TASKKY
	         INNER JOIN LOCMA LM ON LM.WAREKY = TH.WAREKY AND LM.LOCAKY = TI.LOCASR
	         INNER JOIN SKUMA SM ON SM.OWNRKY = TI.OWNRKY AND SM.SKUKEY = TI.SKUKEY
	         INNER JOIN SHPDR SR ON SR.SHPOKY = TI.SHPOKY AND SR.SHPOIT = TI.SHPOIT
	   WHERE TI.SSORNU = #{SSORNU}
	     AND LM.TKZONE = #{TKZONE}
	     AND PP.CREUSR = #{CREUSR}
	   GROUP BY TI.SSORNU, TI.SKUKEY, TI.LOCASR, LM.TKZONE, TI.SKUKEY, SM.DESC01, SM.DESC03, SM.QTDUOM, SM.QTYSTD, TH.WAREKY, PP.STDDAT
	          , PP.CREUSR, PP.QTYWRK, SR.CARDAT, PP.CRETIM 
	   ORDER BY DECODE(TH.WAREKY,'2117',DECODE(TI.LOCASR,'DOCROC',11,DECODE(LENGTH(TI.LOCASR), 7, DECODE(SUBSTR(TI.LOCASR,0,1), '2', '2', '1'),'1'))
	          , DECODE(TI.LOCASR,'DOCROC',11,'1W08888',8,'9W99999',9,'1T01101',10,'1T01102',10,'1T01103',10,'1T01104',10,'1T01105',10,DECODE(LENGTH(TI.LOCASR)
	          , TI.SKUKEY
	          , DECODE(SUBSTR(TI.LOCASR,0,1), '2', '2', '1'),'1')))
	          , LM.TKZONE
	          , TI.LOCASR
	</select>	
	
	<select id="DRcarListRL50_1_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       WM.NAME01 AS NAME01,
		       NVL(VW.CARNUM,' ') AS CARNUM,
		       VW.DESC01 AS CNUMNM,
		       VW.PTNROD AS PTNROD,
       		   BZ.NAME01 AS PTNRODNM,
       		   VW.PTNRTO AS PTNRTO,
       		   BZ2.NAME01 AS PTNRTONM,
		       VW.SKUKEY AS SKUKEY,
		       SM.QTDUOM AS QTDUOM,
		       SM.DESC01 AS DESC01,
		       SUM(VW.QTYREQ) AS QTJCMP,
		       NVL(TRUNC(SUM(VW.QTYREQ / SM.QTDUOM)),0) AS QTYBOX,                                
		       NVL(MOD(SUM(VW.QTYREQ) , DECODE(SM.QTDUOM, 0,NULL, SM.QTDUOM)),0) AS REMQTY,       
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS QTJWGT
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                          LEFT OUTER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		 WHERE VW.WAREKY = #{WAREKY}
		  <if test="ORDDAT != null and ORDDAT != ''">
		    AND VW.ORDDAT = #{ORDDAT}
		  </if>
		  <if test="CARNUM != null and CARNUM != ''">
		    AND VW.CARNUM = #{CARNUM}
		  </if>  
		  <if test="CARNUM == null and CARNUM == ''">
		   AND VW.CARNUM = ' '
		  </if> 
		  
		  <if test="PTNRTO != null and PTNRTO != ''">
		   AND VW.PTNRTO = #{PTNRTO}
		  </if>
		  <if test="PTNROD != null and PTNROD != ''">
		   AND VW.PTNROD = #{PTNROD}
		  </if>
		  	
		  <if test="SCDOCUTYIF != null and SCDOCUTYIF != ''">
		   AND VW.DOCUTY = #{SCDOCUTYIF}
		  </if>     
		  <if test="C00102 == 'ALL'">
		  </if>
		  <if test="C00102 == 'B'">
		   AND VW.C00102 = 'X'
		  </if>
		  <if test="C00102 == 'C'">
		   AND VW.C00102 = 'N'
		  </if>
		  <if test="C00102 == 'D'">
		   AND VW.C00102 = 'Y' AND VW.QTSHPD = 0
		  </if>
		  <if test="C00102 == 'E'">
		   AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		  </if>
		 GROUP BY VW.OWNRKY, VW.WAREKY, WM.NAME01, VW.DESC01, VW.CARNUM , VW.SKUKEY, SM.QTDUOM, SM.DESC01, VW.CARNUM
		 ORDER BY VW.CARNUM
	</select>
	
	<select id="DRcarListRL50_2_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       VW.ORDDAT AS ORDDAT,
		       VW.ORDDAT AS ORDDAT2,
		       WM.NAME01 AS NAME01,
		       NVL(VW.CARNUM,' ') AS CARNUM,
		       VW.DESC01 AS CNUMNM,
		       VW.PTNROD  AS PTNROD,
		       BZ.NAME01 AS PTNRODNM,
		       VW.PTNRTO  AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS QTJWGT
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                          INNER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		                          INNER JOIN BZPTN BZ ON BZ.OWNRKY = VW.OWNRKY AND BZ.PTNRKY = VW.PTNROD AND BZ.PTNRTY='0001'
		                          INNER JOIN BZPTN BZ2 ON BZ2.OWNRKY = VW.OWNRKY AND BZ2.PTNRKY = VW.PTNRTO AND BZ2.PTNRTY='0007'
		 WHERE 1 = 1
		   AND VW.WAREKY = #{WAREKY}
		   <if test="ORDDAT != null and ORDDAT != ''">
		    AND VW.ORDDAT = #{ORDDAT}
		  </if>
		  <if test="CARNUM != null and CARNUM != ''">
		    AND VW.CARNUM = #{CARNUM}
		  </if>  
		  <if test="CARNUM == null and CARNUM == ''">
		   AND VW.CARNUM = ' '
		  </if> 	
		  <if test="SCDOCUTYIF != null and SCDOCUTYIF != ''">
		   AND VW.DOCUTY = #{SCDOCUTYIF}
		  </if>     
		  <if test="C00102 == 'ALL'">
		  </if>
		  <if test="C00102 == 'B'">
		   AND VW.C00102 = 'X'
		  </if>
		  <if test="C00102 == 'C'">
		   AND VW.C00102 = 'N'
		  </if>
		  <if test="C00102 == 'D'">
		   AND VW.C00102 = 'Y' AND VW.QTSHPD = 0
		  </if>
		  <if test="C00102 == 'E'">
		   AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		  </if>
		
		 GROUP BY VW.OWNRKY, VW.WAREKY, VW.ORDDAT, WM.NAME01, VW.CARNUM, VW.DESC01, VW.PTNROD, VW.PTNRTO, BZ.NAME01, BZ2.NAME01
		 ORDER BY VW.CARNUM	
	</select>
	
	<select id="DRBzptnListRL50_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       WM.NAME01 AS NAME01,
		       VW.CARNUM AS CARNUM,
		       VW.DESC01 AS CNUMNM,
		       VW.PTNROD  AS PTNROD,
		       BZ.NAME01 AS PTNRODNM,
		       VW.PTNRTO  AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       VW.SKUKEY AS SKUKEY,
		       SM.QTDUOM AS QTDUOM,
		       SM.DESC01 AS DESC01,
		       SUM(VW.QTYREQ) AS QTJCMP,
		       NVL(SUM(TRUNC((VW.QTYREQ) / SM.QTDUOM)), 0)  AS QTYBOX,
		       NVL(SUM(MOD( VW.QTYREQ , DECODE(SM.QTDUOM, 0,NULL, SM.QTDUOM))),0) AS REMQTY,
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS QTJWGT
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY           
		                          INNER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		                          INNER JOIN BZPTN BZ ON BZ.OWNRKY = VW.OWNRKY AND  BZ.PTNRKY = VW.PTNROD AND BZ.PTNRTY='0001'
		                          INNER JOIN BZPTN BZ2 ON BZ2.OWNRKY = VW.OWNRKY AND BZ2.PTNRKY = VW.PTNRTO AND BZ2.PTNRTY='0007'
		 WHERE 1 = 1
		   AND VW.WAREKY = #{WAREKY}
		  <if test="ORDDAT != null and ORDDAT != ''">
		   AND VW.ORDDAT = #{ORDDAT}
		  </if>
		  <if test="CARNUM != null and CARNUM != ''">
		   AND VW.CARNUM = #{CARNUM}
		  </if>
		  <if test="PTNRTO != null and PTNRTO != ''">
		   AND VW.PTNRTO = #{PTNRTO}
		  </if>
		  <if test="PTNROD != null and PTNROD != ''">
		   AND VW.PTNROD = #{PTNROD}
		  </if>
	      <if test="SCDOCUTYIF != null and SCDOCUTYIF != ''">
	       AND VW.DOCUTY = #{SCDOCUTYIF}
	      </if>
		  <if test="C00102 == 'ALL'"> </if>
		  <if test="C00102 == 'B'"> 
		   AND VW.C00102 = 'X'
		  </if>
		  <if test="C00102 == 'C'"> 
		   AND VW.C00102 = 'N'
		  </if>
		  <if test="C00102 == 'D'"> 
		   AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		  </if>
		  <if test="C00102 == 'E'"> 
		   AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		  </if>
		 GROUP BY VW.OWNRKY, VW.WAREKY, WM.NAME01, VW.DESC01, VW.PTNROD, VW.PTNRTO, BZ.NAME01, BZ2.NAME01, VW.CARNUM , VW.SKUKEY, SM.QTDUOM, SM.DESC01, VW.CARNUM
		 ORDER BY VW.CARNUM
	</select>
	
	<select id="DRcarListRL50_SUM_1_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       WM.NAME01 AS NAME01,
		       NVL(VW.CARNUM,' ') AS CARNUM,
		       VW.DESC01 AS CNUMNM,
		       VW.SKUKEY AS SKUKEY,
		       SM.QTDUOM AS QTDUOM,
		       SM.DESC01 AS DESC01,
		       SUM(VW.QTYREQ) AS QTJCMP,
		       NVL(TRUNC(SUM(VW.QTYREQ/ SM.QTDUOM)),0) AS QTYBOX,                                
		       NVL(MOD(SUM(VW.QTYREQ) , DECODE(SM.QTDUOM, 0,NULL, SM.QTDUOM)),0) AS REMQTY,       
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS QTJWGT
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                          LEFT OUTER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		 WHERE VW.WAREKY = #{WAREKY}
		   <if test="WHRTYP == 'EQUAL'">
		   	<if test="ORDDAT != null and ORDDAT != ''">
		   		AND VW.ORDDAT = #{ORDDAT}
		   	</if>
		   </if>
		   <if test="WHRTYP == 'BETWEEN'">
		   	<if test="SORDDAT != null and SORDDAT != ''">
		   	  <if test="EORDDAT != null and EORDDAT != ''">
		   		AND VW.ORDDAT BETWEEN #{SORDDAT} AND #{EORDDAT}
		   	  </if>
		   	</if>
		   </if> 
		   <if test="CARNUM != null and CARNUM != ''">
		   	AND VW.CARNUM = #{CARNUM}
		   </if>
		   <if test="CARNUM == null and CARNUM == ''">
		   	AND VW.CARNUM = ' '
		   </if>
		   <if test="SCDOCUTYIF != null and SCDOCUTYIF != ''">
		   	AND VW.DOCUTY = #{SCDOCUTYIF}
		   </if>
		   <if test="C00102 == 'B'">
		   	AND VW.C00102 = 'X'
		   </if>
		   <if test="C00102 == 'C'">
		   	AND VW.C00102 = 'N'
		   </if>
		   <if test="C00102 == 'D'">
		   	AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   </if>
		   <if test="C00102 == 'E'">
		   	AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   </if> 
		 GROUP BY VW.OWNRKY, VW.WAREKY, WM.NAME01, VW.DESC01, VW.CARNUM , VW.SKUKEY, SM.QTDUOM, SM.DESC01, VW.CARNUM
		 ORDER BY VW.CARNUM
	</select>
	
	<select id="DRcarListRL50_SUM_2_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       WM.NAME01 AS NAME01,
		       NVL(VW.CARNUM,' ') AS CARNUM,
		       VW.DESC01 AS CNUMNM,
		       VW.PTNROD  AS PTNROD,
		       BZ.NAME01 AS PTNRODNM,
		       VW.PTNRTO  AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS QTJWGT
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                          INNER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		                          INNER JOIN BZPTN BZ ON BZ.OWNRKY = VW.OWNRKY AND BZ.PTNRKY = VW.PTNROD AND BZ.PTNRTY='0001'
		                          INNER JOIN BZPTN BZ2 ON BZ2.OWNRKY = VW.OWNRKY AND BZ2.PTNRKY = VW.PTNRTO AND BZ2.PTNRTY='0007'
		 WHERE 1 = 1
		 
		 
		  AND VW.WAREKY = #{WAREKY}
		   <if test="WHRTYP == 'EQUAL'">
		   	<if test="ORDDAT != null and ORDDAT != ''">
		   		AND VW.ORDDAT = #{ORDDAT}
		   	</if>
		   </if>
		   <if test="WHRTYP == 'BETWEEN'">
		   	<if test="SORDDAT != null and SORDDAT != ''">
		   	  <if test="EORDDAT != null and EORDDAT != ''">
		   		AND VW.ORDDAT BETWEEN #{SORDDAT} AND #{EORDDAT}
		   	  </if>
		   	</if>
		   </if> 
		   <if test="CARNUM != null and CARNUM != ''">
		   	AND VW.CARNUM = #{CARNUM}
		   </if>
		   <if test="CARNUM == null and CARNUM == ''">
		   	AND VW.CARNUM = ' '
		   </if>
		   <if test="SCDOCUTYIF != null and SCDOCUTYIF != ''">
		   	AND VW.DOCUTY = #{SCDOCUTYIF}
		   </if>
		   <if test="C00102 == 'B'">
		   	AND VW.C00102 = 'X'
		   </if>
		   <if test="C00102 == 'C'">
		   	AND VW.C00102 = 'N'
		   </if>
		   <if test="C00102 == 'D'">
		   	AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   </if>
		   <if test="C00102 == 'E'">
		   	AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   </if>
		 GROUP BY VW.OWNRKY, VW.WAREKY, WM.NAME01, VW.CARNUM, VW.DESC01, VW.PTNROD, VW.PTNRTO, BZ.NAME01, BZ2.NAME01
		 ORDER BY VW.CARNUM
	</select>
	
	<select id="DRBzptnListRL50Sum_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT VW.OWNRKY AS OWNRKY,
		       VW.WAREKY AS WAREKY,
		       WM.NAME01 AS NAME01,
		       NVL(VW.CARNUM,' ') AS CARNUM,
		       VW.DESC01 AS CNUMNM,
		       VW.PTNROD  AS PTNROD,
		       BZ.NAME01 AS PTNRODNM,
		       VW.PTNRTO  AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       ROUND(SUM((VW.QTYREQ) * SM.NETWGT), 3) AS QTJWGT
		  FROM V_WMS_RL05_VIEW_NEW VW INNER JOIN SKUMA SM ON VW.OWNRKY = SM.OWNRKY AND VW.SKUKEY = SM.SKUKEY
		                          INNER JOIN WAHMA WM ON VW.WAREKY = WM.WAREKY
		                          INNER JOIN BZPTN BZ ON BZ.OWNRKY = VW.OWNRKY AND BZ.PTNRKY = VW.PTNROD AND BZ.PTNRTY='0001'
		                          INNER JOIN BZPTN BZ2 ON BZ2.OWNRKY = VW.OWNRKY AND BZ2.PTNRKY = VW.PTNRTO AND BZ2.PTNRTY='0007'
		 WHERE 1 = 1
		 
		 
		  AND VW.WAREKY = #{WAREKY}
		  <if test="WHRTYP == 'EQUAL'">
		   	<if test="ORDDAT != null and ORDDAT != ''">
		   		AND VW.ORDDAT = #{ORDDAT}
		   	</if>
		   </if>
		   <if test="WHRTYP == 'BETWEEN'">
		   	<if test="SORDDAT != null and SORDDAT != ''">
		   	  <if test="EORDDAT != null and EORDDAT != ''">
		   		AND VW.ORDDAT BETWEEN #{SORDDAT} AND #{EORDDAT}
		   	  </if>
		   	</if>
		   </if> 
		   <if test="CARNUM != null and CARNUM != ''">
		   	AND VW.CARNUM = #{CARNUM}
		   </if>
		   <if test="CARNUM == null and CARNUM == ''">
		   	AND VW.CARNUM = ' '
		   </if>
		   <if test="SCDOCUTYIF != null and SCDOCUTYIF != ''">
		   	AND VW.DOCUTY = #{SCDOCUTYIF}
		   </if>
		   <if test="C00102 == 'B'">
		   	AND VW.C00102 = 'X'
		   </if>
		   <if test="C00102 == 'C'">
		   	AND VW.C00102 = 'N'
		   </if>
		   <if test="C00102 == 'D'">
		   	AND VW.C00102 = 'Y' AND VW.QTSHPD = 0 
		   </if>
		   <if test="C00102 == 'E'">
		   	AND VW.C00102 = 'Y' AND VW.QTSHPD > 0
		   </if>
		 GROUP BY VW.OWNRKY, VW.WAREKY, WM.NAME01, VW.CARNUM, VW.DESC01, VW.PTNROD, VW.PTNRTO, BZ.NAME01, BZ2.NAME01
		 ORDER BY VW.CARNUM
				
	</select>

	
	
	<!-- [HP28]   조회 -->
	<select id="HP28_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT YYYYMM AS YYYYMM,
		       QTY01 AS QTY01,
		       QTY02 AS QTY02,
		       QTY03 AS QTY03,
		       QTY04 AS QTY04,
		       QTY05 AS QTY05,
		       QTY06 AS QTY06,
		       QTY07 AS QTY07,
		       QTY08 AS QTY08,
		       QTY09 AS QTY09,
		       QTY10 AS QTY10,
		       QTY11 AS QTY11,
		       QTY12 AS QTY12,
		       QTY13 AS QTY13,
		       QTY01 + QTY03 + QTY05 + QTY07 + QTY09 + QTY10 + QTY11 + QTY12 + QTY13 + QTY15 +  QTY16 AS QTY14,
		       QTY02 + QTY04 + QTY06 + QTY08 + QTY14 AS QTY15,
		       QTY01 + QTY02 + QTY03 + QTY04 + QTY05 + QTY06 + QTY07 + QTY08 + QTY09 + QTY10 + QTY11 + QTY12 + QTY13 + QTY14 + QTY15 + QTY16 AS QTY16,
		       QTY14 AS QTY17,
		       QTY15 AS QTY18,
		       QTY16 AS QTY19
		FROM 
		    (SELECT YYYYMM AS YYYYMM,
		           MAX(DECODE(DELV_ORD_TYPE, '211', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY01,
		           MAX(DECODE(DELV_ORD_TYPE, '211', DECODE(JIKSONG, '1', TRANS_QTY, 0), 0)) AS QTY02,
		           MAX(DECODE(DELV_ORD_TYPE, '212', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY03,
		           MAX(DECODE(DELV_ORD_TYPE, '212', DECODE(JIKSONG, '1', TRANS_QTY, 0), 0)) AS QTY04,
		           MAX(DECODE(DELV_ORD_TYPE, '213', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY05,
		           MAX(DECODE(DELV_ORD_TYPE, '213', DECODE(JIKSONG, '1', TRANS_QTY, 0), 0)) AS QTY06,
		           MAX(DECODE(DELV_ORD_TYPE, '214', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY07,
		           MAX(DECODE(DELV_ORD_TYPE, '214', DECODE(JIKSONG, '1', TRANS_QTY, 0), 0)) AS QTY08,
		           MAX(DECODE(DELV_ORD_TYPE, '266', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY09,
		           MAX(DECODE(DELV_ORD_TYPE, '267', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY10,
		           MAX(DECODE(DELV_ORD_TYPE, '131', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY11,
		           MAX(DECODE(DELV_ORD_TYPE, '133', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY12,
		           MAX(DECODE(DELV_ORD_TYPE, '380', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY13,
		           MAX(DECODE(DELV_ORD_TYPE, 'FACTORYJIKSONG', TRANS_QTY, 0)) AS QTY14,
		           MAX(DECODE(DELV_ORD_TYPE, '216', DECODE(JIKSONG, '1', 0, TRANS_QTY), 0)) AS QTY15,
		           MAX(NVL(DECODE(DELV_ORD_TYPE, '215', TRANS_QTY),0)) AS QTY16
		        FROM (
		        SELECT /*+ INDEX(SR IDX_SHPDR_NEW01) */  SUBSTR(SR.CARDAT,1,6) AS YYYYMM,
		               DECODE(SH.PGRC02, '1', '1', ' ') AS JIKSONG,
		               SH.SHPMTY AS DELV_ORD_TYPE,
		               DECODE(#{SRCGUB}, 'T', ROUND(SUM((SI.QTSHPD - SI.QTSHPC - SI.QTYREF) * SM.NETWGT) / 1000, 1),
		               'B', ROUND(SUM((SI.QTSHPD - SI.QTSHPC - SI.QTYREF) / SM.QTDUOM), 1)) AS TRANS_QTY
		                 FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
		                               INNER JOIN SHPDR SR ON SI.SHPOKY = SR.SHPOKY AND SI.SHPOIT = SR.SHPOIT
		                               INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		        WHERE 1=1
		        AND SH.OWNRKY = #{OWNRKY}
		        AND SH.WAREKY = #{WAREKY}
		        AND SH.PGRC02 !='02'
     
	          <if test="RANGE_SQL != null and RANGE_SQL != ''">
	          	${RANGE_SQL}
	          </if>
		        AND SI.QTSHPD &gt; 0
		        GROUP BY SH.SHPMTY, DECODE(SH.PGRC02, '1', '1', ' '), SUBSTR(SR.CARDAT,1,6)
		        UNION ALL
		        SELECT SUBSTR(RH.DOCDAT,1,6), ' ', RH.RCPTTY,
		               DECODE(#{SRCGUB}, 'T', ROUND(SUM(RI.QTYRCV * SM.NETWGT) / 1000, 1),
		               'B', ROUND(SUM(RI.QTYRCV / SM.QTDUOM), 1))
		                 FROM RECDH RH INNER JOIN RECDI RI ON RH.RECVKY = RI.RECVKY
		                               INNER JOIN SKUMA SM ON RH.OWNRKY = SM.OWNRKY AND RI.SKUKEY = SM.SKUKEY
		        WHERE 1=1
		        AND RH.OWNRKY = #{OWNRKY}
		        AND RH.WAREKY = #{WAREKY}
		        AND RH.RCPTTY IN ('131', '133')
		        AND RI.STATIT &lt;&gt; 'RCN'
       
	          <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
	          	${RANGE_SQL2}
	          </if>
		        GROUP BY RH.RCPTTY, SUBSTR(RH.DOCDAT,1,6)
		        UNION ALL
		        SELECT /*+ INDEX(SR IDX_SHPDR_NEW01) */  SUBSTR(RH.DOCDAT,1,6), ' ', RH.TASOTY, 
		               DECODE(#{SRCGUB}, 'T', ROUND(SUM(TI.QTCOMP * SM.NETWGT) / 1000, 1),
		               'B', ROUND(SUM(TI.QTCOMP / SM.QTDUOM), 1))
		                 FROM TASDH RH INNER JOIN TASDI TI ON RH.TASKKY = TI.TASKKY
		                               INNER JOIN SKUMA SM ON TI.SKUKEY = SM.SKUKEY AND SM.OWNRKY = 'SAJOHP'
		        WHERE 1=1
		        AND RH.WAREKY = #{WAREKY}
		        AND TI.OWNRKY = #{OWNRKY}
		        AND RH.TASOTY = '380'
      
	          <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
	          	${RANGE_SQL2}
	          </if>
		        AND TI.QTTAOR &gt; 0
		        GROUP BY RH.TASOTY, SUBSTR(RH.DOCDAT,1,6)
		        UNION ALL
		        SELECT /*+ INDEX(SR IDX_SHPDR_NEW01) */  SUBSTR(SR.CARDAT,1,6) AS YYYYMM,
		               DECODE(SH.PGRC02, '02', '02', ' ') AS JIKSONG,
		               'FACTORYJIKSONG' AS DELV_ORD_TYPE,
		               DECODE(#{SRCGUB}, 'T', ROUND(SUM((SI.QTSHPD - SI.QTSHPC - SI.QTYREF) * SM.NETWGT) / 1000, 1),
		               'B', ROUND(SUM((SI.QTSHPD - SI.QTSHPC - SI.QTYREF) / SM.QTDUOM), 1)) AS TRANS_QTY
		                 FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
		                               INNER JOIN SHPDR SR ON SI.SHPOKY = SR.SHPOKY AND SI.SHPOIT = SR.SHPOIT
		                               INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		        WHERE 1=1
		        AND SH.OWNRKY = #{OWNRKY}
		        AND SH.WAREKY = #{WAREKY}
		          <if test="RANGE_SQL != null and RANGE_SQL != ''">
		          	${RANGE_SQL}
		          </if>
		        AND SH.PGRC02 = '02'
		        AND SI.QTSHPD > 0
		        GROUP BY DECODE(SH.PGRC02, '02', '02', ' '), SUBSTR(SR.CARDAT,1,6)
		        )
		    GROUP BY YYYYMM
		    )	
		    order by 1
	</select>
	
	<!-- [HP37] 모바일 배송리스트 집계  1-->
	<select id="HP37_1_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT A.OWNRKY AS OWNRKY,
		       C.CENTER AS WAREKY,
		       A.CARDAT AS CARDAT,
		       DECODE(C.CARID1, '', '일별소계', C.CARID1) AS CARNUM,
		       D.DRIVER AS DRIVER,
		       DECODE(COUNT(A.SVBELN), 0, '', COUNT(A.SVBELN)) AS MAXCNT,
		       DECODE(COUNT(B.PRESMS_YN), 0, '', COUNT(B.PRESMS_YN)) AS PRECNT,
		       DECODE(COUNT(B.STSSMS_YN), 0, '', COUNT(B.STSSMS_YN)) AS STSCNT,
		       DECODE(COUNT(B.PRESMS_YN) + COUNT(B.STSSMS_YN), 0, '', COUNT(B.PRESMS_YN) + COUNT(B.STSSMS_YN)) AS TOTCNT,
		       DECODE(ROUND(COUNT(B.PRESMS_YN) / COUNT(A.SVBELN), 2) * 100, 0, '', ROUND(COUNT(B.PRESMS_YN) / COUNT(A.SVBELN), 2) * 100) AS PREAVG,
		       DECODE(ROUND(COUNT(B.STSSMS_YN) / COUNT(A.SVBELN), 2) * 100, 0, '', ROUND(COUNT(B.STSSMS_YN) / COUNT(A.SVBELN), 2) * 100) AS STSAVG,
		       DECODE(ROUND(((COUNT(B.PRESMS_YN) + COUNT(B.STSSMS_YN)) / (COUNT(A.SVBELN) * 2)), 2) * 100, 0, '', 
		              ROUND(((COUNT(B.PRESMS_YN) + COUNT(B.STSSMS_YN)) / (COUNT(A.SVBELN) * 2)), 2) * 100) AS TOTAVG,
		       GROUPING_ID(A.OWNRKY, C.CENTER, A.CARDAT, C.CARID1, D.DRIVER) AS GID
		  FROM HP_CAR_VW A LEFT OUTER JOIN MOMUL1T B ON A.SVBELN1 = B.ORDER_TYPE(+)        
		                                            AND A.SVBELN2 = B.ORDER_DATE(+)        
		                                            AND TO_NUMBER(A.SVBELN3) = B.ORDER_SLIPNO(+) 
		                   INNER JOIN CARUSR C ON A.CARNUM IN (C.CARID1, C.CARID2, C.CARID3)
		                   INNER JOIN CARMA D ON A.CARNUM = D.CARNUM
		 WHERE A.OWNRKY = #{OWNRKY}
		   AND C.CENTER = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
			</if>
			 <if test="CARDAT != null and CARDAT != ''">
		       A.CARDAT = #{CARDAT}
		     </if>
		 GROUP BY ROLLUP(A.OWNRKY, C.CENTER, A.CARDAT, C.CARID1, D.DRIVER)
		HAVING GROUPING_ID(A.OWNRKY, C.CENTER, A.CARDAT, C.CARID1, D.DRIVER) IN (0, 3)
	</select>
	
	<!-- [HP37] 모바일 배송리스트 집계 2 -->
	<select id="HP37_2_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT A.OWNRKY AS OWNRKY,
		       C.CENTER AS WAREKY,
		       SUBSTR(A.CARDAT, 1, 6) AS CARDAT,
		       DECODE(C.CARID1, '', '월별소계', C.CARID1) AS CARNUM,
		       D.DRIVER AS DRIVER,
		       DECODE(COUNT(A.SVBELN), 0, '', COUNT(A.SVBELN)) AS MAXCNT,
		       DECODE(COUNT(B.PRESMS_YN), 0, '', COUNT(B.PRESMS_YN)) AS PRECNT,
		       DECODE(COUNT(B.STSSMS_YN), 0, '', COUNT(B.STSSMS_YN)) AS STSCNT,
		       DECODE(COUNT(B.PRESMS_YN) + COUNT(B.STSSMS_YN), 0, '', COUNT(B.PRESMS_YN) + COUNT(B.STSSMS_YN)) AS TOTCNT,
		       DECODE(ROUND(COUNT(B.PRESMS_YN) / COUNT(A.SVBELN), 2) * 100, 0, '', ROUND(COUNT(B.PRESMS_YN) / COUNT(A.SVBELN), 2) * 100) AS PREAVG,
		       DECODE(ROUND(COUNT(B.STSSMS_YN) / COUNT(A.SVBELN), 2) * 100, 0, '', ROUND(COUNT(B.STSSMS_YN) / COUNT(A.SVBELN), 2) * 100) AS STSAVG,
		       DECODE(ROUND(((COUNT(B.PRESMS_YN) + COUNT(B.STSSMS_YN)) / (COUNT(A.SVBELN) * 2)), 2) * 100, 0, '',
		              ROUND(((COUNT(B.PRESMS_YN) + COUNT(B.STSSMS_YN)) / (COUNT(A.SVBELN) * 2)), 2) * 100) AS TOTAVG,
		       GROUPING_ID(A.OWNRKY, C.CENTER, SUBSTR(A.CARDAT, 1, 6), C.CARID1, D.DRIVER) AS GID
		  FROM HP_CAR_VW A LEFT OUTER JOIN MOMUL1T B ON A.SVBELN1 = B.ORDER_TYPE(+)        
		                                            AND A.SVBELN2 = B.ORDER_DATE(+)        
		                                            AND TO_NUMBER(A.SVBELN3) = B.ORDER_SLIPNO(+) 
		                   INNER JOIN CARUSR C ON A.CARNUM IN (C.CARID1, C.CARID2, C.CARID3)
		                   INNER JOIN CARMA D ON A.CARNUM = D.CARNUM
		 WHERE A.OWNRKY = #{OWNRKY}
		   AND C.CENTER = #{WAREKY}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
				${RANGE_SQL}
			</if>
			 <if test="CARDAT != null and CARDAT != ''">
		       A.CARDAT = #{CARDAT}
		     </if>
		 GROUP BY ROLLUP(A.OWNRKY, C.CENTER, SUBSTR(A.CARDAT, 1, 6), C.CARID1, D.DRIVER)
		HAVING GROUPING_ID(A.OWNRKY, C.CENTER, SUBSTR(A.CARDAT, 1, 6), C.CARID1, D.DRIVER) IN (0, 3)
	</select>
	
	
	<!-- [HP22]   조회 -->
	<select id="HP22_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT DELV_GUBUN AS DELV_GUBUN,
	           DELVDT AS DELVDT,
	           CARID1 AS CARID1,
	           SLIPNO AS SLIPNO, 
	           RMK AS RMK,
	           SALECD AS SALECD,
	           SALNM AS SALNM,
	           TRANS_BOX AS TRANS_BOX,
	           SUBSTR(DECODE(TRANS_PRETIME,' ','0000',TRANS_PRETIME),1,2)||':'||SUBSTR(DECODE(TRANS_PRETIME,' ','0000',TRANS_PRETIME),3,2) AS TRANS_PRETIME,
	           SUBSTR(DECODE(TRANS_AFTTIME,' ','0000',TRANS_AFTTIME),1,2)||':'||SUBSTR(DECODE(TRANS_AFTTIME,' ','0000',TRANS_AFTTIME),3,2) AS TRANS_AFTTIME,
	           SUBSTR(DECODE(TRANS_STRTIME,' ','0000',TRANS_STRTIME),1,2)||':'||SUBSTR(DECODE(TRANS_STRTIME,' ','0000',TRANS_STRTIME),3,2) AS TRANS_STRTIME,
	           TRANS_GUB AS TRANS_GUB,
	           GUB_NAME AS GUB_NAME,
	           TRANS_STS AS TRANS_STS,
	           STS_NAME AS STS_NAME,
	           PRESMS_YN AS PRESMS_YN,
	           AFTSMS_YN AS AFTSMS_YN,
	           STSSMS_YN AS STSSMS_YN,
	           CARGBN AS CARGBN
	
	      FROM (SELECT DISTINCT DELV_GUBUN,
	                   DELV_ORD_TYPE,
	                   DELVDT,
	                   CARNUM AS CARID1,
	                   SLIPNO,
	                   JGUB,
	                   RMK,
	                   X_POS,
	                   Y_POS,
	                   DPTNKY SALECD,
	                   NAME01 SALNM,
	                   BOXQTY TRANS_BOX,
	                   NVL(TRANS_PRETIME, ' ') TRANS_PRETIME,
	                   NVL(TRANS_AFTTIME, ' ') TRANS_AFTTIME,
	                   NVL(TRANS_STRTIME, ' ') TRANS_STRTIME,
	                   '999' TRANS_GUB,
	                   '본주문' GUB_NAME,
	                   NVL(TRANS_STS, '001') AS TRANS_STS,
	                   STS_NAME,
	                   PRESMS_YN,
	                   AFTSMS_YN,
	                   STSSMS_YN
	              FROM (SELECT
	                           CASE
	                             WHEN SVBELN1 = '001' THEN '일반출고'
	                             WHEN SVBELN1 = '003' THEN '위탁점출고'
	                             WHEN SVBELN1 = '004' THEN '이고출고'
	                             WHEN SVBELN1 = '008' THEN '할증출고'
	                             WHEN SVBELN1 = '009' THEN '무상출고'
	                             ELSE '기타'
	                           END AS DELV_GUBUN,
	                           SVBELN1 DELV_ORD_TYPE,
	                           SVBELN2 DELVDT,
	                           CARNUM,
	                           TO_NUMBER(SVBELN3) SLIPNO,
	                           'A' JGUB,
	                           DOCTXT RMK,
	                           DPTNKY,
	                           NAME01,
	                           BOXQTY
	                      FROM HP_CAR_VW
	                     WHERE 1 = 1
	                       AND OWNRKY = 'SAJOHP'
	                       AND WAREKY = #{WAREKY}
						<if test="DELVDT != null and DELVDT != ''">
							AND CARDAT = #{DELVDT}
						</if>
	                           ) A,
	                   MOMUL1T B,
	                   MOSTS1T D,
	                   MOADD E
	             WHERE DELV_ORD_TYPE = B.ORDER_TYPE(+)
	               AND A.DELVDT = B.ORDER_DATE(+)
	               AND A.SLIPNO = B.ORDER_SLIPNO(+)
	               AND A.DPTNKY = E.SALECD(+)
	               AND NVL(TRANS_STS, '001') = STS_CODE
	             UNION ALL
	    /* 추가입력사항 내역 */
	    SELECT '추가',
	                   A.ORDER_TYPE,
	                   A.ORDER_DATE,
	                   CARID1,
	                   A.ORDER_SLIPNO,
	                   'B',
	                   '' AS RMK,
	                   F.X_POS,
	                   F.Y_POS,
	                   A.SALECD,
	                   RTRIM(SF_GET_DIST_TXNNM(A.SALECD, '001')) AS SALNM,
	                   TRANS_BOX,
	                   NVL(TRANS_PRETIME, ' ') TRANS_PRETIME,
	                   NVL(TRANS_AFTTIME, ' ') TRANS_AFTTIME,
	                   NVL(TRANS_STRTIME, ' ') TRANS_STRTIME,
	                   TRANS_GUB,
	                   GUB_NAME,
	                   TRANS_STS,
	                   STS_NAME,
	                   PRESMS_YN,
	                   AFTSMS_YN,
	                   STSSMS_YN
	              FROM MOMUL2T A,
	                   MOMUL1T B,
	                   MOGUB1T D,
	                   MOSTS1T E,
	                   MOADD F
	             WHERE A.ORDER_TYPE = B.ORDER_TYPE(+)
	               AND A.ORDER_DATE = B.ORDER_DATE(+)
	               AND A.ORDER_SLIPNO = B.ORDER_SLIPNO(+)
	               AND TRANS_GUB = GUB_CODE(+)
	               AND A.SALECD = F.SALECD(+)
	               AND NVL(TRANS_STS, '001') = STS_CODE
	               AND A.STCD_CTR = #{WAREKY}
				<if test="DELVDT != null and DELVDT != ''">
					AND A.ORDER_DATE = #{DELVDT}
				</if>
	                ) AAA, CARMA BBB
	     WHERE 1 = 1
	     AND BBB.OWNRKY = 'SAJOHP'
	     AND BBB.WAREKY = #{WAREKY}
	     AND AAA.CARID1 = BBB.CARNUM
		<if test="CARGBN != null and CARGBN != ''">
			AND BBB.CARGBN = #{CARGBN}
		</if>
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
	     ORDER BY DELVDT,
	           BBB.CARGBN,
	           CARID1,
	           TRANS_STS,
	           TRANS_PRETIME,
	           SALNM,
	           DELV_ORD_TYPE
	</select>
	
	
	<!-- [HP26]   조회 -->
	<select id="HP26_1_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		    NVL(SKUKEY, PRODCD) SKUKEY,
		    NVL(DESC01, PRODNM) DESC01,
		    QTSI790 QTSI790,
		    QTSS70 QTSS70,
		    QTSI70 QTSI70,
		    BANP70 BANP70,
		    QTSL70 QTSL70,
		    QTSS76 QTSS76,
		    QTSI76 QTSI76,
		    BANP76 BANP76,
		    QTSL76 QTSL76,
		    QTSI79 QTSI79,
		    BANP79 BANP79,
		    QTSL79 QTSL79,
		    QTSI810 QTSI810,
		    BANP810 BANP810,
		    QTSL810 QTSL810,
		    QTSI101 QTSI101,
		    BANP101 BANP101,
		    QTSL101 QTSL101,
		    QTSI107 QTSI107,
		    BANP107 BANP107,
		    QTSL107 QTSL107,
		    QTSI81F QTSI81F,
		    BANP81F BANP81F,
		    QTSL81F QTSL81F,
		    QTSI87F QTSI87F,
		    BANP87F BANP87F,
		    QTSL87F QTSL87F,
		    QTSI780 QTSI780,
		    BANP780 BANP780,
		    QTSL780 QTSL780,
		    QTSI730 QTSI730,
		    BANP730 BANP730,
		    QTSL730 QTSL730,
		    QTSI800 QTSI800,
		    BANP800 BANP800,
		    QTSL800 QTSL800,
		    QTSI102 QTSI102,
		    BANP102 BANP102,
		    QTSL102 QTSL102,
		    QTSI000 QTSI000,
		    BANP000 BANP000,
		    QTSL000 QTSL000
		FROM
		(SELECT
		SKY.SKUKEY SKUKEY,
		SMA.DESC01,
		SMA.QTDUOM,
		/* 총 / 가용 / 반품 / 보류 / 로케이션 보류 */
		SUM(CASE WHEN SKY.WAREKY = '1H700' THEN SKY.QTSIWH END) QTSS70,
		SUM(CASE WHEN SKY.WAREKY IN ('1H700', '1H760', '1H790', '1H81F') AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI790,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL70,
		SUM(CASE WHEN SKY.WAREKY = '1H760' THEN SKY.QTSIWH END) QTSS76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL76,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI79,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP79,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL79,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI810,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP810,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL810,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI81F,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP81F,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL81F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI87F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP87F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL87F, 
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI730,
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP730,
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL730, 
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI800,
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP800,
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL800
		FROM STKKY SKY INNER JOIN SKUMA SMA ON SKY.SKUKEY = SMA.SKUKEY 
		  AND SMA.OWNRKY = #{OWNRKY}
		WHERE
		  SKY.QTSIWH > 0
		  AND SKY.OWNRKY = #{OWNRKY}
		AND SKY.WAREKY IN ('1H700', '1H730', '1H760', '1H790', '1H800', '1H810', '1H81F', '1H87F')
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		AND SKY.AREAKY NOT IN ('SHP', 'SYS')
		GROUP BY SKY.SKUKEY, SMA.DESC01, SMA.QTDUOM) WMS
		FULL OUTER JOIN
		(SELECT
		    L2T.PRODCD,
		    SF_GET_PRODNM(L2T.PRODCD) PRODNM,
		    Z1T.PACK_QTY_NEW,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI101,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP101,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL101,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI107,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP107,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL107,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI780,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP780,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL780,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI102,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP102,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL102,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI000,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP000,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL000
		FROM 
		LLOLOC2T@WMSTOSALE L2T LEFT OUTER JOIN LLOLOC1T@WMSTOSALE L1T ON L2T.STCD = L1T.STCD AND L2T.LOC_HOUSE = L1T.LOC_HOUSE AND L2T.LOC_ZONE = L1T.LOC_ZONE AND L2T.LOCCD = L1T.LOCCD
		INNER JOIN ZSTPRO1T@WMSTOSALE Z1T ON L2T.PRODCD = Z1T.PRODCD
		WHERE
		    L2T.STCD IN ('1F101','1F107','1C780','1F102','88000')
		AND
		    L2T.CUR_QTY > 0
		<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
			${RANGE_SQL2}
		</if>
		GROUP BY
		    L2T.PRODCD, Z1T.PACK_QTY_NEW) LEC
		ON
		WMS.SKUKEY = LEC.PRODCD
		ORDER BY TO_NUMBER(NVL(SKUKEY, PRODCD))	
	</select>
	
	
	<!-- [HP26_2]   조회 -->
	<select id="HP26_2_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		    NVL(SKUKEY, PRODCD) SKUKEY,
		    NVL(DESC01, PRODNM) DESC01,
		    TRUNC(QTSS70/QTDUOM) QTSS70,
		    TRUNC(QTSI70/QTDUOM) QTSI70,
		    TRUNC(BANP70/QTDUOM) BANP70,
		    TRUNC(QTSL70/QTDUOM) QTSL70,
		    TRUNC(QTSS76/QTDUOM) QTSS76,
		    TRUNC(QTSI76/QTDUOM) QTSI76,
		    TRUNC(BANP76/QTDUOM) BANP76,
		    TRUNC(QTSL76/QTDUOM) QTSL76,
		    TRUNC(QTSI79/QTDUOM) QTSI79,
		    TRUNC(BANP79/QTDUOM) BANP79,
		    TRUNC(QTSL79/QTDUOM) QTSL79,
		    TRUNC(QTSI810/QTDUOM) QTSI810,
		    TRUNC(BANP810/QTDUOM) BANP810,
		    TRUNC(QTSL810/QTDUOM) QTSL810,
		    TRUNC(QTSI101/PACK_QTY_NEW) QTSI101,
		    TRUNC(BANP101/PACK_QTY_NEW) BANP101,
		    TRUNC(QTSL101/PACK_QTY_NEW) QTSL101,
		    TRUNC(QTSI107/PACK_QTY_NEW) QTSI107,
		    TRUNC(BANP107/PACK_QTY_NEW) BANP107,
		    TRUNC(QTSL107/PACK_QTY_NEW) QTSL107,
		    TRUNC(QTSI81F/QTDUOM) QTSI81F,
		    TRUNC(BANP81F/QTDUOM) BANP81F,
		    TRUNC(QTSL81F/QTDUOM) QTSL81F,
		    TRUNC(QTSI87F/QTDUOM) QTSI87F,
		    TRUNC(BANP87F/QTDUOM) BANP87F,
		    TRUNC(QTSL87F/QTDUOM) QTSL87F,
		    TRUNC(QTSI780/PACK_QTY_NEW) QTSI780,
		    TRUNC(BANP780/PACK_QTY_NEW) BANP780,
		    TRUNC(QTSL780/PACK_QTY_NEW) QTSL780,
		    TRUNC(QTSI730/QTDUOM) QTSI730,
		    TRUNC(BANP730/QTDUOM) BANP730,
		    TRUNC(QTSL730/QTDUOM) QTSL730,
		    TRUNC(QTSI800/QTDUOM) QTSI800,
		    TRUNC(BANP800/QTDUOM) BANP800,
		    TRUNC(QTSL800/QTDUOM) QTSL800,
		    TRUNC(QTSI102/PACK_QTY_NEW) QTSI102,
		    TRUNC(BANP102/PACK_QTY_NEW) BANP102,
		    TRUNC(QTSL102/PACK_QTY_NEW) QTSL102,
		    TRUNC(QTSI000/PACK_QTY_NEW) QTSI000,
		    TRUNC(BANP000/PACK_QTY_NEW) BANP000,
		    TRUNC(QTSL000/PACK_QTY_NEW) QTSL000
		FROM
		(SELECT
		SKY.SKUKEY SKUKEY,
		SMA.DESC01,
		SMA.QTDUOM,
		/* 총 / 가용 / 반품 / 보류 / 로케이션 보류 */
		SUM(CASE WHEN SKY.WAREKY = '1H700' THEN SKY.QTSIWH END) QTSS70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL70,
		SUM(CASE WHEN SKY.WAREKY = '1H760' THEN SKY.QTSIWH END) QTSS76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL76,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI79,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP79,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL79,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI810,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP810,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL810,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI81F,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP81F,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL81F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI87F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP87F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL87F, 
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI730,
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP730,
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL730, 
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI800,
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP800,
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL800
		FROM STKKY SKY INNER JOIN SKUMA SMA ON SKY.SKUKEY = SMA.SKUKEY
		  AND SMA.OWNRKY = #{OWNRKY}
		WHERE
		(SKY.QTSIWH > 0 OR QTSBLK > 0)
		  AND SKY.OWNRKY = #{OWNRKY}
		AND SKY.WAREKY IN ('1H700', '1H730', '1H760', '1H790', '1H800', '1H810', '1H81F', '1H87F')
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		AND SKY.AREAKY NOT IN ('SHP', 'SYS')
		GROUP BY SKY.SKUKEY, SMA.DESC01, SMA.QTDUOM) WMS
		FULL OUTER JOIN
		(SELECT
		    L2T.PRODCD,
		    SF_GET_PRODNM(L2T.PRODCD) PRODNM,
		    Z1T.PACK_QTY_NEW,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI101,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP101,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL101,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI107,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP107,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL107,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI780,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP780,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL780,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI102,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP102,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL102,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI000,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP000,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL000
		FROM 
		LLOLOC2T@WMSTOSALE L2T LEFT OUTER JOIN LLOLOC1T@WMSTOSALE L1T ON L2T.STCD = L1T.STCD AND L2T.LOC_HOUSE = L1T.LOC_HOUSE AND L2T.LOC_ZONE = L1T.LOC_ZONE AND L2T.LOCCD = L1T.LOCCD
		INNER JOIN ZSTPRO1T@WMSTOSALE Z1T ON L2T.PRODCD = Z1T.PRODCD
		WHERE
		    L2T.STCD IN ('1F101','1F107','1C780','1F102','88000')
		AND
		    L2T.CUR_QTY > 0
		<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
			${RANGE_SQL2}
		</if>
		GROUP BY
		    L2T.PRODCD, Z1T.PACK_QTY_NEW) LEC
		ON
		WMS.SKUKEY = LEC.PRODCD
		WHERE
		QTSI70||QTSI76||QTSI79||QTSI810||QTSI101||QTSI107||QTSI81F||QTSI87F||QTSI780||QTSI730||QTSI800||QTSI102||QTSI000 != 0
		ORDER BY TO_NUMBER(NVL(SKUKEY, PRODCD))
	</select>
	
	
	<!-- [HP26_3]   조회 -->
	<select id="HP26_3_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		    NVL(SKUKEY, PRODCD) SKUKEY,
		    NVL(DESC01, PRODNM) DESC01,
		    QTSS70 QTSS70,
		    QTSI70 QTSI70,
		    BANP70 BANP70,
		    QTSL70 QTSL70,
		    QTSS76 QTSS76,
		    QTSI76 QTSI76,
		    BANP76 BANP76,
		    QTSL76 QTSL76,
		    QTSI79 QTSI79,
		    BANP79 BANP79,
		    QTSL79 QTSL79,
		    QTSI810 QTSI810,
		    BANP810 BANP810,
		    QTSL810 QTSL810,
		    QTSI101 QTSI101,
		    BANP101 BANP101,
		    QTSL101 QTSL101,
		    QTSI107 QTSI107,
		    BANP107 BANP107,
		    QTSL107 QTSL107,
		    QTSI81F QTSI81F,
		    BANP81F BANP81F,
		    QTSL81F QTSL81F,
		    QTSI87F QTSI87F,
		    BANP87F BANP87F,
		    QTSL87F QTSL87F,
		    QTSI780 QTSI780,
		    BANP780 BANP780,
		    QTSL780 QTSL780,
		    QTSI730 QTSI730,
		    BANP730 BANP730,
		    QTSL730 QTSL730,
		    QTSI800 QTSI800,
		    BANP800 BANP800,
		    QTSL800 QTSL800,
		    QTSI102 QTSI102,
		    BANP102 BANP102,
		    QTSL102 QTSL102,
		    QTSI000 QTSI000,
		    BANP000 BANP000,
		    QTSL000 QTSL000
		FROM
		(SELECT
		SKY.SKUKEY SKUKEY,
		SMA.DESC01,
		SMA.QTDUOM,
		/* 총 / 가용 / 반품 / 보류 / 로케이션 보류 */
		SUM(CASE WHEN SKY.WAREKY = '1H700' THEN SKY.QTSIWH END) QTSS70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL70,
		SUM(CASE WHEN SKY.WAREKY = '1H760' THEN SKY.QTSIWH END) QTSS76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL76,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI79,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP79,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL79,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI810,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP810,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL810,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI81F,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP81F,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL81F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI87F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP87F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL87F, 
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI730,
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP730,
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL730, 
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI800,
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP800,
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL800
		FROM STKKY SKY INNER JOIN SKUMA SMA ON SKY.SKUKEY = SMA.SKUKEY
		  AND SMA.OWNRKY = #{OWNRKY}
		WHERE
		(SKY.QTSIWH > 0 OR QTSBLK > 0)
		  AND SKY.OWNRKY = #{OWNRKY}
		AND SKY.WAREKY IN ('1H700', '1H730', '1H760', '1H790', '1H800', '1H810', '1H81F', '1H87F')
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		AND SKY.AREAKY NOT IN ('SHP', 'SYS')
		GROUP BY SKY.SKUKEY, SMA.DESC01, SMA.QTDUOM) WMS
		FULL OUTER JOIN
		(SELECT
		    L2T.PRODCD,
		    SF_GET_PRODNM(L2T.PRODCD) PRODNM,
		    Z1T.PACK_QTY_NEW,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI101,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP101,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL101,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI107,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP107,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL107,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI780,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP780,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL780,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI102,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP102,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL102,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI000,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP000,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL000
		FROM 
		LLOLOC2T@WMSTOSALE L2T LEFT OUTER JOIN LLOLOC1T@WMSTOSALE L1T ON L2T.STCD = L1T.STCD AND L2T.LOC_HOUSE = L1T.LOC_HOUSE AND L2T.LOC_ZONE = L1T.LOC_ZONE AND L2T.LOCCD = L1T.LOCCD
		INNER JOIN ZSTPRO1T@WMSTOSALE Z1T ON L2T.PRODCD = Z1T.PRODCD
		WHERE
		    L2T.STCD IN ('1F101','1F107','1C780','1F102','88000')
		AND
		    L2T.CUR_QTY > 0
		<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
			${RANGE_SQL2}
		</if>
		GROUP BY
		    L2T.PRODCD, Z1T.PACK_QTY_NEW) LEC
		ON
		WMS.SKUKEY = LEC.PRODCD
		WHERE
		BANP70||BANP76||BANP79||BANP810||BANP101||BANP107||BANP81F||BANP87F||BANP780||BANP730||BANP800||BANP102||BANP000 != 0
		ORDER BY TO_NUMBER(NVL(SKUKEY, PRODCD))
	</select>
	
	<!-- [HP26_4]   조회 -->
	<select id="HP26_4_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		    NVL(SKUKEY, PRODCD) SKUKEY,
		    NVL(DESC01, PRODNM) DESC01,
		    QTSS70 QTSS70,
		    QTSI70 QTSI70,
		    BANP70 BANP70,
		    QTSL70 QTSL70,
		    QTSS76 QTSS76,
		    QTSI76 QTSI76,
		    BANP76 BANP76,
		    QTSL76 QTSL76,
		    QTSI79 QTSI79,
		    BANP79 BANP79,
		    QTSL79 QTSL79,
		    QTSI810 QTSI810,
		    BANP810 BANP810,
		    QTSL810 QTSL810,
		    QTSI101 QTSI101,
		    BANP101 BANP101,
		    QTSL101 QTSL101,
		    QTSI107 QTSI107,
		    BANP107 BANP107,
		    QTSL107 QTSL107,
		    QTSI81F QTSI81F,
		    BANP81F BANP81F,
		    QTSL81F QTSL81F,
		    QTSI87F QTSI87F,
		    BANP87F BANP87F,
		    QTSL87F QTSL87F,
		    QTSI780 QTSI780,
		    BANP780 BANP780,
		    QTSL780 QTSL780,
		    QTSI730 QTSI730,
		    BANP730 BANP730,
		    QTSL730 QTSL730,
		    QTSI800 QTSI800,
		    BANP800 BANP800,
		    QTSL800 QTSL800,
		    QTSI102 QTSI102,
		    BANP102 BANP102,
		    QTSL102 QTSL102,
		    QTSI000 QTSI000,
		    BANP000 BANP000,
		    QTSL000 QTSL000
		FROM
		(SELECT
		SKY.SKUKEY SKUKEY,
		SMA.DESC01,
		SMA.QTDUOM,
		/* 총 / 가용 / 반품 / 보류 / 로케이션 보류 */
		SUM(CASE WHEN SKY.WAREKY = '1H700' THEN SKY.QTSIWH END) QTSS70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP70,
		SUM(CASE WHEN SKY.WAREKY = '1H700' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL70,
		SUM(CASE WHEN SKY.WAREKY = '1H760' THEN SKY.QTSIWH END) QTSS76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP76,
		SUM(CASE WHEN SKY.WAREKY = '1H760' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL76,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI79,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP79,
		SUM(CASE WHEN SKY.WAREKY = '1H790' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL79,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI810,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP810,
		SUM(CASE WHEN SKY.WAREKY = '1H810' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL810,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI81F,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP81F,
		SUM(CASE WHEN SKY.WAREKY = '1H81F' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL81F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI87F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP87F,
		SUM(CASE WHEN SKY.WAREKY = '1H87F' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL87F, 
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI730,
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP730,
		SUM(CASE WHEN SKY.WAREKY = '1H730' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL730, 
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 = '00' THEN SKY.QTSIWH - SKY.QTSBLK - GREATEST(SKY.QTSALO, SKY.QTSPMO) END) QTSI800,
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 = '20' THEN SKY.QTSIWH END) BANP800,
		SUM(CASE WHEN SKY.WAREKY = '1H800' AND SKY.LOTA06 NOT IN('00', '20') THEN SKY.QTSIWH END) QTSL800
		FROM STKKY SKY INNER JOIN SKUMA SMA ON SKY.SKUKEY = SMA.SKUKEY
		  AND SMA.OWNRKY = #{OWNRKY}
		WHERE
		(SKY.QTSIWH > 0 OR QTSBLK > 0)
		AND SKY.OWNRKY = #{OWNRKY}
		AND SKY.WAREKY IN ('1H700', '1H730', '1H760', '1H790', '1H800', '1H810', '1H81F', '1H87F')
		<if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
		AND SKY.AREAKY NOT IN ('SHP', 'SYS')
		GROUP BY SKY.SKUKEY, SMA.DESC01, SMA.QTDUOM) WMS
		FULL OUTER JOIN
		(SELECT
		    L2T.PRODCD,
		    SF_GET_PRODNM(L2T.PRODCD) PRODNM,
		    Z1T.PACK_QTY_NEW,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI101,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP101,
		SUM(CASE WHEN L2T.STCD = '1F101' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL101,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI107,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP107,
		SUM(CASE WHEN L2T.STCD = '1F107' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL107,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI780,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP780,
		SUM(CASE WHEN L2T.STCD = '1C780' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL780,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI102,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP102,
		SUM(CASE WHEN L2T.STCD = '1F102' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL102,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (1,2,5) THEN CUR_QTY END) QTSI000,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (  3  ) THEN CUR_QTY END) BANP000,
		SUM(CASE WHEN L2T.STCD = '88000' AND L1T.LOC_TYPE IN (  4  ) THEN CUR_QTY END) QTSL000
		FROM 
		LLOLOC2T@WMSTOSALE L2T LEFT OUTER JOIN LLOLOC1T@WMSTOSALE L1T ON L2T.STCD = L1T.STCD AND L2T.LOC_HOUSE = L1T.LOC_HOUSE AND L2T.LOC_ZONE = L1T.LOC_ZONE AND L2T.LOCCD = L1T.LOCCD
		INNER JOIN ZSTPRO1T@WMSTOSALE Z1T ON L2T.PRODCD = Z1T.PRODCD
		WHERE
		    L2T.STCD IN ('1F101','1F107','1C780','1F102','88000')
		AND
		    L2T.CUR_QTY > 0
		<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
			${RANGE_SQL2}
		</if>
		GROUP BY
		    L2T.PRODCD, Z1T.PACK_QTY_NEW) LEC
		ON
		WMS.SKUKEY = LEC.PRODCD
		WHERE
		QTSL70||QTSL76||QTSL79||QTSL810||QTSL101||QTSL107||QTSL81F||QTSL87F||QTSL780||QTSL730||QTSL800||QTSL102||QTSL000 != 0
		ORDER BY TO_NUMBER(NVL(SKUKEY, PRODCD))
	</select>
	
	<!-- [HP34]조회 -->
	<select id="HP34_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT SAMPKY AS KEY,
	           SAMPKY AS SAMPKY,
	           SAMSEQ AS SAMSEQ,
	           WAREKY AS WAREKY,
	           DPTNNM AS DPTNNM,
	           ADDR01 AS ADDR01,
	           TELN01 AS TELN01,
	           CARDAT AS CARDAT,
	           CARNUM AS CARNUM,
	           DESC01 AS DESC01,
	           DESC02 AS DESC02,
	           BOXQTY AS BOXQTY,
	           SAMQTY AS SAMQTY,
	           TEXT01 AS TEXT01,
	           CREDAT AS CREDAT,
	           CREUSR AS CREUSR,
	           LMODAT AS LMODAT,
	           LMOUSR AS LMOUSR
	      FROM SAMPLE
	     WHERE 1 = 1
		<if test="WAREKY != null and WAREKY != ''">
			AND WAREKY = #{WAREKY}
		</if>
	    <if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
	     ORDER BY SAMPKY, SAMSEQ
	</select>

	<!-- HP34 INSERT -->
	<insert id="HP34_INSERT"  parameterType="hashmap">
		      INSERT INTO SAMPLE
            (
               SAMPKY,
               SAMSEQ,
               WAREKY,
               DPTNNM,
               ADDR01,
               TELN01,
               CARDAT,
               CARNUM,
               DESC01,
               DESC02,
               BOXQTY,
               SAMQTY,
               TEXT01,
               CREDAT,
               CREUSR,
               LMODAT,
               LMOUSR
            )
            VALUES(
               NVL(TRIM(#{SAMPKY}), ' '),
               #{SAMSEQ},
               NVL(#{WAREKY}, ' '),
               NVL(TRIM(#{DPTNNM}), ' '),
               NVL(TRIM(#{ADDR01}), ' '),
               NVL(TRIM(#{TELN01}), ' '),
               NVL(TRIM(#{CARDAT}), ' '),
               NVL(TRIM(#{CARNUM}), ' '),
               NVL(#{DESC01}, ' '),
               NVL(#{DESC02}, ' '),
               NVL(#{BOXQTY}, 0),
               NVL(#{SAMQTY}, 0),
               NVL(#{TEXT01}, ' '),
               TO_CHAR(SYSDATE, 'YYYYMMDD'),
               #{SES_USER_ID},
               TO_CHAR(SYSDATE, 'YYYYMMDD'), 
               #{SES_USER_ID}
            )
	</insert>
	
	<!-- HP34 UPDATE -->
	<update id="HP34_UPDATE"  parameterType="hashmap">
		UPDATE  SAMPLE
		   SET
				WAREKY = #{WAREKY},
				DPTNNM = #{DPTNNM},
				ADDR01 = #{ADDR01},
				TELN01 = #{TELN01},
				CARDAT = #{CARDAT},
				CARNUM = #{CARNUM},
				DESC01 = #{DESC01},
				DESC02 = #{DESC02},
				BOXQTY = #{BOXQTY},
				SAMQTY = #{SAMQTY},
				TEXT01 = #{TEXT01},
				LMODAT = TO_CHAR(SYSDATE, 'YYYYMMDD'),
				LMOUSR = #{SES_USER_ID}
			WHERE 1 = 1
				AND SAMPKY = #{SAMPKY}
				AND SAMSEQ = #{SAMSEQ}
	</update>
	
	<!-- HP34 DELETE -->
	<delete id="HP34_DELETE"  parameterType="hashmap">
		DELETE FROM SAMPLE
			WHERE SAMPKY = #{SAMPKY}
			  AND SAMSEQ = #{SAMSEQ}
	</delete>
	
	<!-- HP34 SZF_GETSAMSEQ -->
	<select id="GETSAMSEQ_MAP" parameterType="hashmap" resultType="DataMap">
		SELECT SZF_GETSAMSEQ(#{SAMPKY}) AS SAMSEQ FROM DUAL
	</select>
	
</mapper>