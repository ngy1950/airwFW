<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Outbound">
  
  <!-- [DL00] 영업오더관리 : 헤더 조회 -->
  <select id="DL00_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT I.OWNRKY AS OWNRKY,
	       MAX(I.SKUG05) AS SKUG05,
	       I.WAREKY AS WAREKY,
	       I.WAREKY AS WAREKY2,
	       I.WARESR AS WARESR,
	       I.DOCUTY AS DOCUTY,
	       D.SHORTX AS DOCUTYNM,
	       I.ORDTYP AS ORDTYP,
	       I.ORDDAT AS ORDDAT,
	       I.ERPCDT AS ERPCDT,
	       I.SVBELN AS SVBELN,
	       I.OTRQDT AS OTRQDT,
	       I.OTRQDT AS OTRQDT2,
	       I.PTNRTO AS PTNRTO,
	       B.NAME01 AS PTNRTONM,
	       I.PTNROD AS PTNROD,
	       B2.NAME01 AS PTNRODNM,
	       I.DIRDVY AS DIRDVY,
	       I.DIRSUP AS DIRSUP,
	       NVL(I.CUSRID,' ') AS CUSRID,
	       NVL(I.CUNAME,' ') AS CUNAME,
	       NVL(I.CUPOST,' ') AS CUPOST,
	       NVL(I.CUNATN,' ') AS CUNATN,
	       NVL(I.CUTEL1,' ') AS CUTEL1,
	       NVL(I.CUTEL2,' ') AS CUTEL2,
	       NVL(I.CUMAIL,' ') AS CUMAIL,
	       NVL(I.CUADDR,' ') AS CUADDR,
	       NVL(I.CTNAME,' ') AS CTNAME,
	       NVL(I.CTTEL1,' ') AS CTTEL1,
	       NVL(I.SALENM,' ') AS SALENM,
	       NVL(I.SALTEL,' ') AS SALTEL,
	       NVL(MAX(I.TEXT01),' ') AS TEXT01,
	       SUM(OBOXQTY) AS DLBOX,
	       SUM(RBOXQTY) AS DLBIX,
	       SP.REGNKY AS REGNKY,
	       SP.REGNNM AS REGNNM,
	       SF_GET_WAHNM(B.NAME03) AS NAME03B,
	       ' ' AS CARNUM,
	       I.C00102 AS C00102,
	       MAX(I.CRETIM) AS ERPCTM,
	       MAX(I.CREDAT) AS CREDAT,
	       MAX(I.XDATS) AS XDATS,
	       MAX(I.XTIMS) AS XTIMS,
	       SUM(NETWGT)  AS GRSWGT,
	       ROUND(SUM((QTYREQ - QTALOC) / QTYSTD), 3) AS PLTQTY,
	       (SELECT COUNT(DISTINCT ISUB.SKUKEY) FROM IFWMS113 ISUB WHERE ISUB.SVBELN = I.SVBELN AND ISUB.XSTAT IN ('R') AND (ISUB.QTYREQ - ISUB.WMSMGT - ISUB.QTSHPD) > 0  ) AS SKUCNT
	  FROM (
	        SELECT SM.SKUG05,
	               SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) ORDTOT,
	               NVL(CASE WHEN NVL(S.USEQTY, 0) >= SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN)
	                        THEN SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN)
	                         END, 0) STKTOT,
	               I.MANDT,
	               I.SEQNO,
	               I.ORDTYP,
	               I.ORDDAT,
	               I.CHKSEQ,
	               I.ORDSEQ,
	               I.SVBELN,
	               I.SPOSNR,
	               I.DOCUTY,
	               I.ERPCDT,
	               I.ERPCTM,
	               I.ERPMDT,
	               I.OTRQDT,
	               I.PTNRTO,
	               I.PTNROD,
	               I.OWNRKY,
	               I.WAREKY,
	               I.WARESR,
	               I.WARETG,
	               I.SKUKEY,
	               I.QTYORG,
	               I.QTYREQ,
	               I.WMSMGT,
	               I.QTSHPD,
	               I.DUOMKY,
	               I.NETPR,
	               I.SALDPT,
	               I.REFDKY,
	               I.REDKIT,
	               I.REDDAT,
	               I.STKNUM,
	               I.SDATBG,
	               I.DIRDVY,
	               I.DIRSUP,
	               I.SALEPR,
	               I.DISRAT,
	               I.SELLPR,
	               I.SELAMT,
	               I.VATAMT,
	               I.CUSRID,
	               I.CUNAME,
	               I.CUPOST,
	               I.CUNATN,
	               I.CUTEL1,
	               I.CUTEL2,
	               I.CUMAIL,
	               I.CUADDR,
	               I.CTNAME,
	               I.CTTEL1,
	               I.SALENM,
	               I.SALTEL,
	               I.TEXT01,
	               I.TEXT02,
	               I.TEXT03,
	               I.C00101,
	               I.C00102,
	               I.C00103,
	               I.C00104,
	               I.C00105,
	               I.C00106,
	               I.C00107,
	               I.C00108,
	               I.C00109,
	               I.C00110,
	               I.N00101,
	               I.N00102,
	               I.N00103,
	               I.N00104,
	               I.N00105,
	               I.N00106,
	               I.N00107,
	               I.N00108,
	               I.N00109,
	               I.N00110,
	               I.USRID1,
	               I.DEPTID1 ,
	               I.USRID2,
	               I.DEPTID2,
	               I.USRID3,
	               I.DEPTID3 ,
	               I.USRID4,
	               I.DEPTID4,
	               I.CREDAT,
	               I.CRETIM,
	               I.LMODAT,
	               I.LMOTIM,
	               I.STATUS,
	               I.TDATE,
	               I.XDATS ,
	               I.XSTAT,
	               I.XTIMS,
	               I.ERTXT ,
	               SM.DESC01,
	               TRUNC(I.QTYORG / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) OBOXQTY ,
	               TRUNC((I.QTYREQ - NVL(SI.QTALOC,0)) / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) RBOXQTY,
	               NVL(SI.QTALOC,0) AS QTALOC,
			       SM.NETWGT,
			       SM.QTYSTD
	        FROM IFWMS113 I INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
	                   LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
	                                      FROM STKKY WHERE OWNRKY = #{OWNRKY} AND WAREKY = #{WAREKY} AND LOTA06 = '00' AND QTSIWH > 0
	                                     GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
	                   LEFT OUTER JOIN SHPDI SI ON I.SVBELN = SI.SVBELN AND I.SKUKEY = SI.SKUKEY
	        WHERE I.DOCUTY IN ('211','212','213','214','215','216', '266', '267')
	          AND I.XSTAT = 'R'
	          AND I.CHKSEQ != ' '
	          AND I.QTYORG &gt; 0
	          
	          <choose>
	            <when test="C00102 == 'ALL'">
	              AND I.C00102 IN ('N', 'Y')
	            </when>
	            <otherwise>
	              AND I.C00102 = #{C00102}
	            </otherwise>
	         </choose>

	         <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>
	
		     ) I LEFT OUTER JOIN (SELECT DISTINCT OWNRKY, REGNKY, POSTCD, REGNNM
	                            FROM SHPMA) SP ON I.CUPOST = SP.POSTCD AND I.OWNRKY = SP.OWNRKY
	         INNER JOIN SKUMA SM2 ON SM2.OWNRKY = I.OWNRKY AND SM2.SKUKEY = I.SKUKEY
	         LEFT OUTER JOIN SKUWC SW ON SW.OWNRKY = I.OWNRKY AND SW.WAREKY = I.WAREKY AND SW.SKUKEY = I.SKUKEY
	         INNER JOIN DOCTM D ON D.DOCUTY = I.DOCUTY
	         LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY IN ('0007', '0004')
	         LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY IN ('0001', '0004')
	         LEFT OUTER JOIN WAHMA W ON W.WAREKY = I.PTNRTO
	         <!-- 
	         LEFT OUTER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                          FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                          WHERE 1 = 1
	                          AND F.OWNRKY = #OWNRKY#
	                          AND F.WAREKY = #WAREHOUSE#
	                            <STATEMENT PROPERTY=RANGECAR PREFIX=AND/>
	                          ) C ON I.OWNRKY = C.OWNRKY AND I.PTNROD = C.PTNRKY
	         -->
	 WHERE 1 = 1
	 AND I.OWNRKY = #{OWNRKY}
     AND I.WAREKY = #{WAREKY}
	 <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
	   
	 GROUP BY I.MANDT, I.OWNRKY, I.WAREKY, I.WARESR, I.DOCUTY, D.SHORTX, I.ORDTYP, I.ORDDAT, I.ERPCDT, I.SVBELN,
	          I.OTRQDT, I.PTNRTO, W.NAME01, I.PTNROD, B2.NAME01, B.NAME01, DIRDVY, DIRSUP, CUSRID, CUNAME, CUPOST,
	          CUNATN, CUTEL1, CUTEL2, CUMAIL, CUADDR, CTNAME, CTTEL1, SALENM, SALTEL, REGNKY, REGNNM, B.NAME03,  I.C00102
    <if test='ORDTYPE == "NO"'>
     HAVING (SUM(I.STKTOT) >= SUM(I.ORDTOT))
    </if>
    <if test='ORDTYPE == "ONE"'>
     HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
    </if>
    <if test='ORDTYPE == "MORE"'>
     HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
    </if>
    <if test='ORDTYPE == "POOR"'>
     HAVING (SUM(I.STKTOT) = 0)
    </if>
 
	 ORDER BY SVBELN

  </select>
  
  
  
  <!-- [DL00] 영업오더관리 : 헤더 조회  저장후-->
  <select id="DL00_HEAD_SAVE_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT I.OWNRKY AS OWNRKY,
	       MAX(I.SKUG05) AS SKUG05,
	       I.WAREKY AS WAREKY,
	       I.WAREKY AS WAREKY2,
	       I.WARESR AS WARESR,
	       I.DOCUTY AS DOCUTY,
	       D.SHORTX AS DOCUTYNM,
	       I.ORDTYP AS ORDTYP,
	       I.ORDDAT AS ORDDAT,
	       I.ERPCDT AS ERPCDT,
	       I.SVBELN AS SVBELN,
	       I.OTRQDT AS OTRQDT,
	       I.OTRQDT AS OTRQDT2,
	       I.PTNRTO AS PTNRTO,
	       B.NAME01 AS PTNRTONM,
	       I.PTNROD AS PTNROD,
	       B2.NAME01 AS PTNRODNM,
	       I.DIRDVY AS DIRDVY,
	       I.DIRSUP AS DIRSUP,
	       NVL(I.CUSRID,' ') AS CUSRID,
	       NVL(I.CUNAME,' ') AS CUNAME,
	       NVL(I.CUPOST,' ') AS CUPOST,
	       NVL(I.CUNATN,' ') AS CUNATN,
	       NVL(I.CUTEL1,' ') AS CUTEL1,
	       NVL(I.CUTEL2,' ') AS CUTEL2,
	       NVL(I.CUMAIL,' ') AS CUMAIL,
	       NVL(I.CUADDR,' ') AS CUADDR,
	       NVL(I.CTNAME,' ') AS CTNAME,
	       NVL(I.CTTEL1,' ') AS CTTEL1,
	       NVL(I.SALENM,' ') AS SALENM,
	       NVL(I.SALTEL,' ') AS SALTEL,
	       NVL(MAX(I.TEXT01),' ') AS TEXT01,
	       SUM(OBOXQTY) AS DLBOX,
	       SUM(RBOXQTY) AS DLBIX,
	       SP.REGNKY AS REGNKY,
	       SP.REGNNM AS REGNNM,
	       SF_GET_WAHNM(B.NAME03) AS NAME03B,
	       ' ' AS CARNUM,
	       I.C00102 AS C00102,
	       MAX(I.CRETIM) AS ERPCTM,
	       MAX(I.CREDAT) AS CREDAT,
	       MAX(I.XDATS) AS XDATS,
	       MAX(I.XTIMS) AS XTIMS,
	       SUM(NETWGT)  AS GRSWGT,
	       ROUND(SUM(QTYREQ / QTYSTD), 3) AS PLTQTY,
	       (SELECT COUNT(DISTINCT ISUB.SKUKEY) FROM IFWMS113 ISUB WHERE ISUB.SVBELN = I.SVBELN AND ISUB.XSTAT IN ('R') AND (ISUB.QTYREQ - ISUB.WMSMGT - ISUB.QTSHPD) > 0  ) AS SKUCNT
	  FROM (
	        SELECT SM.SKUG05,
	               SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) ORDTOT,
	               NVL(CASE WHEN NVL(S.USEQTY, 0) >= SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN)
	                        THEN SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN)
	                         END, 0) STKTOT,
	               I.MANDT,
	               I.SEQNO,
	               I.ORDTYP,
	               I.ORDDAT,
	               I.CHKSEQ,
	               I.ORDSEQ,
	               I.SVBELN,
	               I.SPOSNR,
	               I.DOCUTY,
	               I.ERPCDT,
	               I.ERPCTM,
	               I.ERPMDT,
	               I.OTRQDT,
	               I.PTNRTO,
	               I.PTNROD,
	               I.OWNRKY,
	               I.WAREKY,
	               I.WARESR,
	               I.WARETG,
	               I.SKUKEY,
	               I.QTYORG,
	               I.QTYREQ,
	               I.WMSMGT,
	               I.QTSHPD,
	               I.DUOMKY,
	               I.NETPR,
	               I.SALDPT,
	               I.REFDKY,
	               I.REDKIT,
	               I.REDDAT,
	               I.STKNUM,
	               I.SDATBG,
	               I.DIRDVY,
	               I.DIRSUP,
	               I.SALEPR,
	               I.DISRAT,
	               I.SELLPR,
	               I.SELAMT,
	               I.VATAMT,
	               I.CUSRID,
	               I.CUNAME,
	               I.CUPOST,
	               I.CUNATN,
	               I.CUTEL1,
	               I.CUTEL2,
	               I.CUMAIL,
	               I.CUADDR,
	               I.CTNAME,
	               I.CTTEL1,
	               I.SALENM,
	               I.SALTEL,
	               I.TEXT01,
	               I.TEXT02,
	               I.TEXT03,
	               I.C00101,
	               I.C00102,
	               I.C00103,
	               I.C00104,
	               I.C00105,
	               I.C00106,
	               I.C00107,
	               I.C00108,
	               I.C00109,
	               I.C00110,
	               I.N00101,
	               I.N00102,
	               I.N00103,
	               I.N00104,
	               I.N00105,
	               I.N00106, 
	               I.N00107,
	               I.N00108,
	               I.N00109,
	               I.N00110,
	               I.USRID1,
	               I.DEPTID1 ,
	               I.USRID2,
	               I.DEPTID2,
	               I.USRID3,
	               I.DEPTID3 ,
	               I.USRID4,
	               I.DEPTID4,
	               I.CREDAT,
	               I.CRETIM,
	               I.LMODAT,
	               I.LMOTIM,
	               I.STATUS,
	               I.TDATE,
	               I.XDATS ,
	               I.XSTAT,
	               I.XTIMS,
	               I.ERTXT ,
	               SM.DESC01,
	               TRUNC(I.QTYORG / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) OBOXQTY ,
	               TRUNC(I.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) RBOXQTY,
	       SM.NETWGT,
	        SM.QTYSTD
	        FROM IFWMS113 I INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
	                   LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
	                                      FROM STKKY
	                                     WHERE OWNRKY = #{OWNRKY}   
										 <if test="WAREKY != ''">
										    AND WAREKY IN (${WAREKY})
										 </if> 
	                                       AND LOTA06 = '00' 
	                                       AND QTSIWH > 0
	                                     GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
	        WHERE I.DOCUTY IN ('211','212','213','214','215','216', '266', '267')
	          AND I.XSTAT = 'R'
	          AND I.CHKSEQ != ' '
	          AND I.QTYORG &gt; 0
	          
			 <if test="SVBELNS != ''">
			    AND I.SVBELN IN (${SVBELNS})
			 </if> 
			 
			 <if test="WAREKY != ''">
			    AND I.WAREKY IN (${WAREKY})
			 </if> 
	              AND I.C00102 IN ('N', 'Y')

	         <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>
	
		     ) I LEFT OUTER JOIN (SELECT DISTINCT OWNRKY, REGNKY, POSTCD, REGNNM
	                            FROM SHPMA) SP ON I.CUPOST = SP.POSTCD AND I.OWNRKY = SP.OWNRKY
	         INNER JOIN SKUMA SM2 ON SM2.OWNRKY = I.OWNRKY AND SM2.SKUKEY = I.SKUKEY
	         LEFT OUTER JOIN SKUWC SW ON SW.OWNRKY = I.OWNRKY AND SW.WAREKY = I.WAREKY AND SW.SKUKEY = I.SKUKEY
	         INNER JOIN DOCTM D ON D.DOCUTY = I.DOCUTY
	         LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY IN ('0007', '0004')
	         LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY IN ('0001', '0004')
	         LEFT OUTER JOIN WAHMA W ON W.WAREKY = I.PTNRTO
	         <!-- 
	         LEFT OUTER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                          FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                          WHERE 1 = 1
	                          AND F.OWNRKY = #OWNRKY#
	                          AND F.WAREKY = #WAREHOUSE#
	                            <STATEMENT PROPERTY=RANGECAR PREFIX=AND/>
	                          ) C ON I.OWNRKY = C.OWNRKY AND I.PTNROD = C.PTNRKY
	         -->
	 WHERE 1 = 1
	 <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
	   
	 GROUP BY I.MANDT, I.OWNRKY, I.WAREKY, I.WARESR, I.DOCUTY, D.SHORTX, I.ORDTYP, I.ORDDAT, I.ERPCDT, I.SVBELN,
	          I.OTRQDT, I.PTNRTO, W.NAME01, I.PTNROD, B2.NAME01, B.NAME01, DIRDVY, DIRSUP, CUSRID, CUNAME, CUPOST,
	          CUNATN, CUTEL1, CUTEL2, CUMAIL, CUADDR, CTNAME, CTTEL1, SALENM, SALTEL, REGNKY, REGNNM, B.NAME03,  I.C00102
    <if test='ORDTYPE == "NO"'>
     HAVING (SUM(I.STKTOT) >= SUM(I.ORDTOT))
    </if>
    <if test='ORDTYPE == "ONE"'>
     HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
    </if>
    <if test='ORDTYPE == "MORE"'>
     HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
    </if>
    <if test='ORDTYPE == "POOR"'>
     HAVING (SUM(I.STKTOT) = 0)
    </if>
 
	 ORDER BY SVBELN

  </select>

  <!-- [DL00] 영업오더관리 : 아이템 조회 -->
  <select id="DL00_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT TO_NUMBER(I.ORDTOT) ORDTOT,
           TO_NUMBER(NVL(I.USEQTY, 0)) USEQTY,
           I.MANDT MANDT,
           I.SEQNO SEQNO,
           I.ORDTYP ORDTYP,
           I.ORDDAT ORDDAT,
           I.CHKSEQ CHKSEQ,
           I.ORDSEQ ORDSEQ,
           I.SVBELN SVBELN,
           I.SPOSNR SPOSNR,
           I.DOCUTY DOCUTY,
           I.ERPCDT ERPCDT,
           I.ERPCTM ERPCTM,
           I.ERPMDT ERPMDT,
           I.OTRQDT OTRQDT,
           I.PTNRTO PTNRTO,
           I.PTNROD PTNROD,
           I.OWNRKY OWNRKY,
           I.WAREKY WAREKY,
           I.WARESR WARESR,
           I.WARETG WARETG,
           I.SKUKEY SKUKEY,
           I.QTYORG QTYORG,
           I.QTYREQ - QTALOC QTYREQ,
           I.QTYREQ - QTALOC QTYREQ2,
           I.WMSMGT WMSMGT,
           I.QTSHPD QTSHPD,
           I.QTYREQ - QTALOC SHPQTY,
           I.QTYREQ TOTSHP,
           I.DUOMKY DUOMKY,
           I.NETPR NETPR,
           I.SALDPT SALDPT,
           I.REFDKY REFDKY,
           I.REDKIT REDKIT,
           I.REDDAT REDDAT,
           I.STKNUM STKNUM,
           I.SDATBG SDATBG,
           I.DIRDVY DIRDVY,
           I.DIRSUP DIRSUP,
           I.SALEPR SALEPR,
           I.DISRAT DISRAT,
           I.SELLPR SELLPR,
           I.SELAMT SELAMT,
           I.VATAMT VATAMT,
           I.CUSRID CUSRID,
           I.CUNAME CUNAME,
           I.CUPOST CUPOST,
           I.CUNATN CUNATN,
           I.CUTEL1 CUTEL1,
           I.CUTEL2 CUTEL2,
           I.CUMAIL CUMAIL,
           I.CUADDR CUADDR,
           I.CTNAME CTNAME,
           I.CTTEL1 CTTEL1,
           I.SALENM SALENM,
           I.SALTEL SALTEL,
           I.TEXT01 TEXT01,
           I.TEXT02 TEXT02,
           I.TEXT03 TEXT03,
           I.C00101 C00101,
           I.C00102 C00102,
           I.C00103 C00103,
           I.C00104 C00104,
           I.C00105 C00105,
           I.C00106 C00106,
           I.C00107 C00107,
           I.C00108 C00108,
           I.C00109 C00109,
           I.C00110 C00110,
           I.N00101 N00101,
           I.N00102 N00102,
           I.N00103 N00103,
           I.N00104 N00104,
           I.N00105 N00105,
           I.N00106 N00106,
           I.N00107 N00107,
           I.N00108 N00108,
           I.N00109 N00109,
           I.N00110 N00110,
           I.USRID1 USRID1,
           I.DEPTID1 DEPTID1,
           I.USRID2 USRID2,
           I.DEPTID2 DEPTID2,
           I.USRID3 USRID3,
           I.DEPTID3 DEPTID3,
           I.USRID4 USRID4,
           I.DEPTID4 DEPTID4,
           I.CREDAT CREDAT,
           I.CRETIM CRETIM,
           I.LMODAT LMODAT,
           I.LMOTIM LMOTIM,
           I.STATUS STATUS,
           I.TDATE TDATE,
           I.XDATS CDATE,
           I.XSTAT IFFLG,
           I.ERTXT ERTXT,
           I.DESC01 DESC01,
           I.PLIQTY PLIQTY,
           I.BXIQTY BXIQTY,
           I.BOXQTY BOXQTY,
           I.PLTQTY PLTQTY,
           I.REMQTY REMQTY,
           I.PLBQTY PLBQTY, 
           NVL(I.PLIQTY, 0) / NVL(I.BXIQTY, 0) PLTBOX
      FROM (SELECT SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) AS ORDTOT,
                   S.USEQTY USEQTY,
                   I.MANDT MANDT,
                   I.SEQNO SEQNO,
                   I.ORDTYP ORDTYP,
                   I.ORDDAT ORDDAT,
                   I.CHKSEQ CHKSEQ,
                   I.ORDSEQ ORDSEQ,
                   I.SVBELN SVBELN,
                   I.SPOSNR SPOSNR,
                   I.DOCUTY DOCUTY,
                   I.ERPCDT ERPCDT,
                   I.ERPCTM ERPCTM,
                   I.ERPMDT ERPMDT,
                   I.OTRQDT OTRQDT,
                   I.PTNRTO PTNRTO,
                   I.PTNROD PTNROD,
                   I.OWNRKY OWNRKY,
                   I.WAREKY WAREKY,
                   I.WARESR WARESR,
                   I.WARETG WARETG,
                   I.SKUKEY SKUKEY,
                   I.QTYORG QTYORG,
                   I.QTYREQ QTYREQ,
                   I.WMSMGT WMSMGT,
                   I.QTSHPD QTSHPD,
                   I.DUOMKY DUOMKY,
                   I.NETPR NETPR,
                   I.SALDPT SALDPT,
                   I.REFDKY REFDKY,
                   I.REDKIT REDKIT,
                   I.REDDAT REDDAT,
                   I.STKNUM STKNUM,
                   I.SDATBG SDATBG,
                   I.DIRDVY DIRDVY,
                   I.DIRSUP DIRSUP,
                   I.SALEPR SALEPR,
                   I.DISRAT DISRAT,
                   I.SELLPR SELLPR,
                   I.SELAMT SELAMT,
                   I.VATAMT VATAMT,
                   I.CUSRID CUSRID,
                   I.CUNAME CUNAME,
                   I.CUPOST CUPOST,
                   I.CUNATN CUNATN,
                   I.CUTEL1 CUTEL1,
                   I.CUTEL2 CUTEL2,
                   I.CUMAIL CUMAIL,
                   I.CUADDR CUADDR,
                   I.CTNAME CTNAME,
                   I.CTTEL1 CTTEL1,
                   I.SALENM SALENM,
                   I.SALTEL SALTEL,
                   I.TEXT01 TEXT01,
                   I.TEXT02 TEXT02,
                   I.TEXT03 TEXT03,
                   I.C00101 C00101,
                   I.C00102 C00102,
                   I.C00103 C00103,
                   I.C00104 C00104,
                   I.C00105 C00105,
                   I.C00106 C00106,
                   I.C00107 C00107,
                   I.C00108 C00108,
                   I.C00109 C00109,
                   I.C00110 C00110,
                   I.N00101 N00101,
                   I.N00102 N00102,
                   I.N00103 N00103,
                   I.N00104 N00104,
                   I.N00105 N00105,
                   I.N00106 N00106,
                   I.N00107 N00107,
                   I.N00108 N00108,
                   I.N00109 N00109,
                   I.N00110 N00110,
                   I.USRID1 USRID1,
                   I.DEPTID1 DEPTID1,
                   I.USRID2 USRID2,
                   I.DEPTID2 DEPTID2,
                   I.USRID3 USRID3,
                   I.DEPTID3 DEPTID3,
                   I.USRID4 USRID4,
                   I.DEPTID4 DEPTID4,
                   I.CREDAT CREDAT,
                   I.CRETIM CRETIM,
                   I.LMODAT LMODAT,
                   I.LMOTIM LMOTIM,
                   I.STATUS STATUS,
                   I.TDATE TDATE,
                   I.XDATS XDATS,
                   I.XSTAT XSTAT,
                   I.ERTXT ERTXT,
                   SM.DESC01 DESC01,
                   NVL(SM.QTYSTD, 0) PLIQTY,
                   NVL(SM.QTDUOM, 0) BXIQTY,
                   NVL( ROUND((I.QTYREQ - NVL(SI.QTALOC,0)) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM), 1 ), 0) AS BOXQTY,
                   NVL( ROUND((I.QTYREQ - NVL(SI.QTALOC,0)) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD), 2 ), 0) AS PLTQTY,
                   NVL(MOD(I.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)), 0) AS REMQTY,
                   NVL(SM.QTYSTD,0) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) AS PLBQTY,
                   NVL(SI.QTALOC,0) AS QTALOC
              FROM IFWMS113 I LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO, QTSPMO)) AS USEQTY
                                                 FROM STKKY 
                                                WHERE OWNRKY = #{OWNRKY}
                                                  AND WAREKY = #{WAREKY}
                                                  AND AREAKY NOT IN ('SHP', 'SYS')
                                                  AND LOCAKY != 'SETLOC'
                                                  AND LOTA06 = '00'
                                                  AND QTSIWH > 0
                                                  
                                                GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY 
                                                                                  AND I.SKUKEY = S.SKUKEY 
                              INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
                              LEFT OUTER JOIN SKUWC SW ON SW.OWNRKY = I.OWNRKY AND SW.WAREKY = I.WAREKY AND SW.SKUKEY = I.SKUKEY
                              LEFT OUTER JOIN SHPDI SI ON I.SVBELN = SI.SVBELN AND I.SKUKEY = SI.SKUKEY
             WHERE 1=1
               AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267') 
               AND I.C00102 IN ('N', 'Y')
               AND I.XSTAT = 'R'
               AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0 
               AND I.SVBELN = #{SVBELN}
               AND I.WAREKY = #{WAREKY}
               AND I.OWNRKY = #{OWNRKY}
               <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
		         ${RANGE_SQL2}
		       </if>
               <if test="RANGE_SQL4 != null and RANGE_SQL4 != ''">
		         ${RANGE_SQL4}
		       </if>        
    ) I

  </select>

  <!-- [DL00] 영업오더관리 : 아이템 조회 -->
  <select id="DL00_ITEM_SAVE_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT TO_NUMBER(I.ORDTOT) ORDTOT,
           TO_NUMBER(NVL(I.USEQTY, 0)) USEQTY,
           I.MANDT MANDT,
           I.SEQNO SEQNO,
           I.ORDTYP ORDTYP,
           I.ORDDAT ORDDAT,
           I.CHKSEQ CHKSEQ,
           I.ORDSEQ ORDSEQ,
           I.SVBELN SVBELN,
           I.SPOSNR SPOSNR,
           I.DOCUTY DOCUTY,
           I.ERPCDT ERPCDT,
           I.ERPCTM ERPCTM,
           I.ERPMDT ERPMDT,
           I.OTRQDT OTRQDT,
           I.PTNRTO PTNRTO,
           I.PTNROD PTNROD,
           I.OWNRKY OWNRKY,
           I.WAREKY WAREKY,
           I.WARESR WARESR,
           I.WARETG WARETG,
           I.SKUKEY SKUKEY,
           I.QTYORG QTYORG,
           I.QTYREQ QTYREQ,
           I.QTYREQ - I.QTSHPD QTYREQ2,
           I.WMSMGT WMSMGT,
           I.QTSHPD QTSHPD,
           I.QTYREQ - I.QTSHPD SHPQTY,
           I.QTYREQ TOTSHP,
           I.DUOMKY DUOMKY,
           I.NETPR NETPR,
           I.SALDPT SALDPT,
           I.REFDKY REFDKY,
           I.REDKIT REDKIT,
           I.REDDAT REDDAT,
           I.STKNUM STKNUM,
           I.SDATBG SDATBG,
           I.DIRDVY DIRDVY,
           I.DIRSUP DIRSUP,
           I.SALEPR SALEPR,
           I.DISRAT DISRAT,
           I.SELLPR SELLPR,
           I.SELAMT SELAMT,
           I.VATAMT VATAMT,
           I.CUSRID CUSRID,
           I.CUNAME CUNAME,
           I.CUPOST CUPOST,
           I.CUNATN CUNATN,
           I.CUTEL1 CUTEL1,
           I.CUTEL2 CUTEL2,
           I.CUMAIL CUMAIL,
           I.CUADDR CUADDR,
           I.CTNAME CTNAME,
           I.CTTEL1 CTTEL1,
           I.SALENM SALENM,
           I.SALTEL SALTEL,
           I.TEXT01 TEXT01,
           I.TEXT02 TEXT02,
           I.TEXT03 TEXT03,
           I.C00101 C00101,
           I.C00102 C00102,
           I.C00103 C00103,
           I.C00104 C00104,
           I.C00105 C00105,
           I.C00106 C00106,
           I.C00107 C00107,
           I.C00108 C00108,
           I.C00109 C00109,
           I.C00110 C00110,
           I.N00101 N00101,
           I.N00102 N00102,
           I.N00103 N00103,
           I.N00104 N00104,
           I.N00105 N00105,
           I.N00106 N00106,
           I.N00107 N00107,
           I.N00108 N00108,
           I.N00109 N00109,
           I.N00110 N00110,
           I.USRID1 USRID1,
           I.DEPTID1 DEPTID1,
           I.USRID2 USRID2,
           I.DEPTID2 DEPTID2,
           I.USRID3 USRID3,
           I.DEPTID3 DEPTID3,
           I.USRID4 USRID4,
           I.DEPTID4 DEPTID4,
           I.CREDAT CREDAT,
           I.CRETIM CRETIM,
           I.LMODAT LMODAT,
           I.LMOTIM LMOTIM,
           I.STATUS STATUS,
           I.TDATE TDATE,
           I.XDATS CDATE,
           I.XSTAT IFFLG,
           I.ERTXT ERTXT,
           I.DESC01 DESC01,
           I.PLIQTY PLIQTY,
           I.BXIQTY BXIQTY,
           I.BOXQTY BOXQTY,
           I.PLTQTY PLTQTY,
           I.REMQTY REMQTY,
           I.PLBQTY PLBQTY, 
           NVL(I.PLIQTY, 0) / NVL(I.BXIQTY, 0) PLTBOX
      FROM (SELECT SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) AS ORDTOT,
                   S.USEQTY USEQTY,
                   I.MANDT MANDT,
                   I.SEQNO SEQNO,
                   I.ORDTYP ORDTYP,
                   I.ORDDAT ORDDAT,
                   I.CHKSEQ CHKSEQ,
                   I.ORDSEQ ORDSEQ,
                   I.SVBELN SVBELN,
                   I.SPOSNR SPOSNR,
                   I.DOCUTY DOCUTY,
                   I.ERPCDT ERPCDT,
                   I.ERPCTM ERPCTM,
                   I.ERPMDT ERPMDT,
                   I.OTRQDT OTRQDT,
                   I.PTNRTO PTNRTO,
                   I.PTNROD PTNROD,
                   I.OWNRKY OWNRKY,
                   I.WAREKY WAREKY,
                   I.WARESR WARESR,
                   I.WARETG WARETG,
                   I.SKUKEY SKUKEY,
                   I.QTYORG QTYORG,
                   I.QTYREQ QTYREQ,
                   I.WMSMGT WMSMGT,
                   I.QTSHPD QTSHPD,
                   I.DUOMKY DUOMKY,
                   I.NETPR NETPR,
                   I.SALDPT SALDPT,
                   I.REFDKY REFDKY,
                   I.REDKIT REDKIT,
                   I.REDDAT REDDAT,
                   I.STKNUM STKNUM,
                   I.SDATBG SDATBG,
                   I.DIRDVY DIRDVY,
                   I.DIRSUP DIRSUP,
                   I.SALEPR SALEPR,
                   I.DISRAT DISRAT,
                   I.SELLPR SELLPR,
                   I.SELAMT SELAMT,
                   I.VATAMT VATAMT,
                   I.CUSRID CUSRID,
                   I.CUNAME CUNAME,
                   I.CUPOST CUPOST,
                   I.CUNATN CUNATN,
                   I.CUTEL1 CUTEL1,
                   I.CUTEL2 CUTEL2,
                   I.CUMAIL CUMAIL,
                   I.CUADDR CUADDR,
                   I.CTNAME CTNAME,
                   I.CTTEL1 CTTEL1,
                   I.SALENM SALENM,
                   I.SALTEL SALTEL,
                   I.TEXT01 TEXT01,
                   I.TEXT02 TEXT02,
                   I.TEXT03 TEXT03,
                   I.C00101 C00101,
                   I.C00102 C00102,
                   I.C00103 C00103,
                   I.C00104 C00104,
                   I.C00105 C00105,
                   I.C00106 C00106,
                   I.C00107 C00107,
                   I.C00108 C00108,
                   I.C00109 C00109,
                   I.C00110 C00110,
                   I.N00101 N00101,
                   I.N00102 N00102,
                   I.N00103 N00103,
                   I.N00104 N00104,
                   I.N00105 N00105,
                   I.N00106 N00106,
                   I.N00107 N00107,
                   I.N00108 N00108,
                   I.N00109 N00109,
                   I.N00110 N00110,
                   I.USRID1 USRID1,
                   I.DEPTID1 DEPTID1,
                   I.USRID2 USRID2,
                   I.DEPTID2 DEPTID2,
                   I.USRID3 USRID3,
                   I.DEPTID3 DEPTID3,
                   I.USRID4 USRID4,
                   I.DEPTID4 DEPTID4,
                   I.CREDAT CREDAT,
                   I.CRETIM CRETIM,
                   I.LMODAT LMODAT,
                   I.LMOTIM LMOTIM,
                   I.STATUS STATUS,
                   I.TDATE TDATE,
                   I.XDATS XDATS,
                   I.XSTAT XSTAT,
                   I.ERTXT ERTXT,
                   SM.DESC01 DESC01,
                   NVL(SM.QTYSTD, 0) PLIQTY,
                   NVL(SM.QTDUOM, 0) BXIQTY,
                   NVL( ROUND((I.QTYREQ - I.QTSHPD) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM), 1 ), 0) AS BOXQTY,
                   NVL( ROUND((I.QTYREQ - I.QTSHPD) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD), 2 ), 0) AS PLTQTY,
                   NVL(MOD(I.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)), 0) AS REMQTY,
                   NVL(SM.QTYSTD,0) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) AS PLBQTY
              FROM IFWMS113 I LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO, QTSPMO)) AS USEQTY
                                                 FROM STKKY 
                                                WHERE OWNRKY = #{OWNRKY}
                                                  AND WAREKY = #{WAREKY}
                                                  AND AREAKY NOT IN ('SHP', 'SYS')
                                                  AND LOCAKY != 'SETLOC'
                                                  AND LOTA06 = '00'
                                                  AND QTSIWH > 0
                                                  
                                                GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY 
                                                                                  AND I.SKUKEY = S.SKUKEY 
                              INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
                              LEFT OUTER JOIN SKUWC SW ON SW.OWNRKY = I.OWNRKY AND SW.WAREKY = I.WAREKY AND SW.SKUKEY = I.SKUKEY
             WHERE 1=1
               AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267') 
               AND I.C00102 IN ('N', 'Y')
               AND I.XSTAT = 'R'
               AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0 
               AND I.SVBELN = #{SVBELN}
               AND I.WAREKY = #{WAREKY}
               AND I.OWNRKY = #{OWNRKY}
               <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
		         ${RANGE_SQL2}
		       </if>
               <if test="RANGE_SQL4 != null and RANGE_SQL4 != ''">
		         ${RANGE_SQL4}
		       </if>        
    ) I

  </select>
  
  <!-- [DL00] 영업오더관리 : qtyreq = 0 인거 있는지, 출고한 것인지 check  -->
  <select id="DL00_HEAD_VALID_LIST" parameterType="hashmap" resultType="DataMap">

    SELECT SVBELN AS SVBELN,
           SPOSNR AS SPOSNR,
           C00102 AS C00102,
           XSTAT AS XSTAT
      FROM IFWMS113
     WHERE SVBELN = #{SVBELN}
       AND QTYREQ != 0
       AND XSTAT = 'R'
       
  </select>
  
  <!-- [DL00] 영업오더관리 : 출고 가능 재고가 있는지 Check -->
  <select id="DL00_ITEM_VALID_MAP" parameterType="hashmap" resultType="DataMap">

    SELECT DECODE(ASKU02, '2', '04', ASKU02) AS ITEM_VALID
      FROM SKUMA SM LEFT OUTER JOIN (
                                    SELECT  #{SKUKEY} AS SKUKEY, SF_GET_WMS_SET_STOCK_TOSS(#{OWNRKY}, #{WAREKY}, #{SKUKEY}) AS QTSIWH FROM DUAL
                                  ) SY ON SM.SKUKEY = SY.SKUKEY
     WHERE 1=1
       AND SM.OWNRKY = #{OWNRKY}
       AND SM.SKUKEY = #{SKUKEY}
       AND (SY.QTSIWH &lt; #{QTYREQ} OR SY.QTSIWH IS NULL)
     
  </select>
  
  <!-- [DL00] 영업오더 : 헤더 수정 -->
  <update id="DL00_HEAD_UPDATE"  parameterType="hashmap">
    UPDATE IFWMS113
		SET 
		   OTRQDT = #{OTRQDT},
		   DIRSUP= #{DIRSUP},
		   DIRDVY= #{DIRDVY},
		<if test='DIRDVY == "03"'>
		     <!-- WAREKY = #{OWNRKY}, -->
		</if>     		
		   C00101 = 'IF',
		   LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
		   LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'),
		   USRID2 = NVL(#{SES_USER_ID}, ' ')
		WHERE SVBELN = #{SVBELN} 
		  AND XSTAT = 'R'
  
  </update>
  
  <!-- [DL00] 영업오더 : 아이템 수정 -->
  <update id="DL00_ITEM_UPDATE"  parameterType="hashmap">
      UPDATE IFWMS113
      SET  QTYREQ = NVL(#{QTYREQ},0),
           WAREKY = NVL(#{WAREKY},' '),     
           <if test='DIRDVY == "02"'>
		     OTRQDT = NVL(#{OTRQDT},' '), 
		   </if>        
           C00103 = NVL(#{C00103},' '),
           DIRSUP= NVL(#{DIRSUP},' '),
           DIRDVY= NVL(#{DIRDVY},' '),
           N00101 = NVL(#{N00101},0),
           C00101 = 'IF',
		   LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
		   LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'),
		   USRID2 = NVL(#{SES_USER_ID}, ' ')
      WHERE SVBELN = #{SVBELN}
        AND SPOSNR = #{SPOSNR}  
        AND XSTAT = 'R'
        AND C00102 = 'Y'        
  </update>
  

    <!-- [DL00] 영업오더 : 입력 -->
  <insert id="ORDER_INSERT"  parameterType="hashmap">

    INSERT INTO OWNER (
          OWNRKY
      , DELMAK
      , NAME01
      , NAME02
      , NAME03
      , ADDR01
      , POSTCD
      , NATNKY
      , TELN01
      , FAXTL1
      , EMAIL1
      , PTNG01
      , PTNG02
      , PTNG03
      , PTNG04
      , CREDAT, CRETIM, CREUSR
      , LMODAT, LMOTIM, LMOUSR
    )
    VALUES(
          NVL(#{OWNRKY}, ' ')
      , NVL(#{DELMAK}, 0)
      , NVL(#{NAME01}, ' ')
      , NVL(#{NAME02}, ' ')
      , NVL(#{NAME03}, ' ')
      , NVL(#{ADDR01}, ' ')
      , NVL(#{POSTCD}, ' ')
      , NVL(#{NATNKY}, ' ')
      , NVL(#{TELN01}, ' ')
      , NVL(#{FAXTL1}, ' ')
      , NVL(#{EMAIL1}, ' ')
      , NVL(#{PTNG01}, ' ')
      , NVL(#{PTNG02}, ' ')
      , NVL(#{PTNG03}, ' ')
      , NVL(#{PTNG04}, ' ')   
      , TO_CHAR(SYSDATE,'YYYYMMDD'), TO_CHAR(SYSDATE,'HH24MISS'), #{SES_USER_ID}
      , TO_CHAR(SYSDATE,'YYYYMMDD'), TO_CHAR(SYSDATE,'HH24MISS'), #{SES_USER_ID}
    )
  </insert>
  
    <!-- [DL00] 영업오더 : 수정 -->
  <update id="ORDER_UPDATE"  parameterType="hashmap">
    UPDATE OWNER 
    SET 
        DELMAK = NVL(#{DELMAK},' '),
        NAME01 = NVL(#{NAME01},' '),
        NAME02 = NVL(#{NAME02},' '),
        NAME03 = NVL(#{NAME03},' '),
        ADDR01 = NVL(#{ADDR01},' '),
        POSTCD = NVL(#{POSTCD},' '),
        NATNKY = NVL(#{NATNKY},' '),
        TELN01 = NVL(#{TELN01},' '),
        FAXTL1 = NVL(#{FAXTL1},' '),
        EMAIL1 = NVL(#{EMAIL1},' '),
        PTNG01 = NVL(#{PTNG01},' '),
        PTNG02 = NVL(#{PTNG02},' '),
        PTNG03 = NVL(#{PTNG03},' '),
        PTNG04 = NVL(#{PTNG04},' '),
        LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
        LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'),
        LMOUSR = #{SES_USER_ID}
    WHERE OWNRKY = #{OWNRKY}
  
  </update>
  
    <!-- [DL00] 영업오더 : 삭제 -->
  <delete id="ORDER_DELETE"  parameterType="hashmap">
    UPDATE OWNER 
    SET 
        DELMAK = 'Y'
    WHERE  OWNRKY = #{OWNRKY}
  </delete>
  
  <!-- [DL52] 송장발행 : 조회 -->
  <select id="INVOICE_ISSUE_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT /*+ INDEX(SR IDX_SHPDR_NEW01)*/ DISTINCT (SH.SHPOKY||NVL(SR.CARNUM,' ')||NVL(SR.SHIPSQ,0)||NVL(SR.CARDAT,' ')) AS KEY,
	       SH.SHPOKY AS SHPOKY,
	       SH.WAREKY AS WAREKY,
	       WH.NAME01 AS WAREKYNM,
	       NVL(SR.CARNUM,' ') AS CARNUM,
	       NVL(SR.SHIPSQ,0) AS SHIPSQ,
	       NVL(SR.CARDAT,' ') AS CARDAT,
	       NVL(SR.DOCSEQ,' ') AS DOCSEQ,
	       SH.STATDO AS STATDO,
	       CV.CDESC1 AS STATDONM,
	       SH.DRELIN AS DRELIN,
	       DECODE(SH.DRELIN,'V','YES','NO') AS DRELINNM,
	       SH.INDDCL AS INDDCL,
	       SH.ALSTKY AS ALSTKY,
	       SH.DPTNKY AS DPTNKY,
	       ( DECODE( SH.SHPMTY, '266', (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.DPTNKY),
	                            '267', (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.DPTNKY),
	                            '270', RBP.NAME01,
	                             BP.NAME01)) AS DPTNKYNM,
	       SH.PTRCVR AS PTRCVR,
	       ( DECODE( SH.SHPMTY, '266', (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.PTRCVR), 
	                            '267', (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.PTRCVR),
	                            '270', RBP.NAME01,
	                             BT.NAME01)) AS PTRCVRNM,
	       SH.PGRC01 AS PGRC01,
	       SH.PGRC02 AS PGRC02,
	       SH.PGRC03 AS PGRC03,
	       SH.PGRC04 AS PGRC04,
	       SH.PGRC05 AS PGRC05,
	       ' ' AS PTNBLK,
	       SH.OWNRKY AS OWNRKY,
	       SH.DOCDAT AS DOCDAT,
	       SH.DOCCAT AS DOCCAT,
	       DC.SHORTX AS DOCCATNM,
	       SH.SHPMTY AS SHPMTY,
	       DT.SHORTX AS SHPMTYNM,
	       SH.SHPMTY AS DOCUTY,
	       SH.RQSHPD AS RQSHPD,
	       SH.RQARRD AS RQARRD,
	       SH.RQARRT AS RQARRT,
	       SH.OPURKY AS OPURKY,
	       DECODE(SH.SHPMTY, '299', ' ', SUBSTR(SI.SVBELN,1,13)) AS SOBELN,
	       DECODE(SH.SHPMTY, '299', ' ', SI.SVBELN) AS SVBELN,
	       SH.QTAPPO AS QTAPPO,
	       SH.LOCADT AS LOCADT,
	       SH.LOCADK AS LOCADK,
	       SH.USRID1 AS USRID1,
	       SH.UNAME1 AS UNAME1,
	       SH.DEPTID1 AS DEPTID1,
	       SH.DNAME1 AS DNAME1,
	       SH.USRID2 AS USRID2,
	       SH.UNAME2 AS UNAME2,
	       SH.DEPTID2 AS DEPTID2,
	       SH.DNAME2 AS DNAME2,
	       SH.USRID3 AS USRID3,
	       SH.UNAME3 AS UNAME3,
	       SH.DEPTID3 AS DEPTID3,
	       SH.DNAME3 AS DNAME3,
	       SH.USRID4 AS USRID4,
	       SH.UNAME4 AS UNAME4,
	       SH.DEPTID4 AS DEPTID4,
	       SH.DNAME4 AS DNAME4,
	       SH.DOCTXT AS DOCTXT,
	       SH.CREDAT AS CREDAT,
	       SH.CRETIM AS CRETIM,
	       SH.CREUSR AS CREUSR,
	       (SELECT NMLAST FROM USRMA WHERE USERID = SH.CREUSR) AS CUSRNM,
	       SH.LMODAT AS LMODAT,
	       SH.LMOTIM AS LMOTIM,
	       SH.LMOUSR AS LMOUSR,
	       (SELECT NMLAST FROM USRMA WHERE USERID = SH.LMOUSR) AS LUSRNM,
	       DECODE(SR.PRITYN,'Y','V',' ') AS PRITYN,
	       DECODE(SR.PRITYN,'Y','FF0000','000000') AS PRINTCHK,
	       SR.DOCSEQ DOCSEQ,
	       SH.DOCTXT AS NAME01,
	       (SELECT SUM(ROUND(QTJCMP / DECODE(QTDUOM,0,NULL,QTDUOM), 1)) FROM SHPDI WHERE SHPOKY = SH.SHPOKY) AS BOXQTY2,
	       (SELECT SUM(ROUND(QTSHPD / DECODE(QTDUOM,0,NULL,QTDUOM), 1)) FROM SHPDI WHERE SHPOKY = SH.SHPOKY) AS BOXQTY3,
	       ' ' AS FILEDN,
	       SR.RECNUM AS RECNUM,
	       SR.RECNUM AS RECNUM2,
	       ' ' AS STKNUM,
	       DECODE(SR.DCNDTN,' ',' ',SR.DCNDTN) AS DCNDTN,
	       DECODE(SR.CARNBR,' ',' ',SR.CARNBR) AS CARNBR
	  FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
	           LEFT OUTER JOIN (SELECT DISTINCT SHPOKY, SHPOIT, CARDAT, CARNUM, SHIPSQ, DOCSEQ, RECAYN, TASKKY, PRITYN,RECNUM, DCNDTN, CARNBR
	                              FROM SHPDR) SR ON SR.SHPOKY = SI.SHPOKY
	                INNER JOIN WAHMA WH ON SH.WAREKY = WH.WAREKY
	           LEFT OUTER JOIN BZPTN BP ON BP.PTNRKY = SH.DPTNKY AND BP.OWNRKY = SH.OWNRKY AND BP.PTNRTY = '0001'
	           LEFT OUTER JOIN BZPTN BT ON BT.PTNRKY = SH.PTRCVR AND BT.OWNRKY = SH.OWNRKY AND BT.PTNRTY = '0007'
	           LEFT OUTER JOIN BZPTN RBP ON RBP.PTNRKY = SH.DPTNKY AND RBP.OWNRKY = SH.OWNRKY AND RBP.PTNRTY = '0002'
	                INNER JOIN CMCDV CV ON SH.STATDO = CV.CMCDVL AND CV.CMCDKY = 'STATDO'
	                INNER JOIN DOCCM DC ON SH.DOCCAT = DC.DOCCAT 
	                INNER JOIN DOCTM DT ON SH.SHPMTY = DT.DOCUTY
     WHERE SH.DRELIN LIKE #{DRELIN}||'%'
       AND SH.STATDO NOT IN (DECODE(SH.WAREKY, '1H700', 'PAL', 'NEW'), DECODE(SH.WAREKY, '1H700', 'FAL', 'NEW'))
       AND SH.OWNRKY = #{OWNRKY}
       AND SH.WAREKY = #{WAREKY}
       
    <if test='GRPRL == "ERPSO"'>
     AND SH.SHPMTY IN ('211','212','213','214','267' )
    </if>
    <if test='GRPRL == "TOTAL"'>
     AND SH.SHPMTY IN ('299')
    </if>
    <if test='GRPRL == "TOTAL"'>
     AND SH.SHPMTY IN ('299')
    </if>
    <if test='GRPRL == "MOVE"'>
     AND SH.SHPMTY IN ('266')
    </if>   
    <if test='GRPRL == "RTNPUR"'>
     AND SH.SHPMTY IN ('270')
    </if>  
    <if test="RANGE_SQL != null and RANGE_SQL != ''">
      ${RANGE_SQL}
    </if>
     ORDER BY SH.SHPOKY
  </select>
  
  <!-- [DL80] 출발차량관리 : 헤더 조회 -->
  <select id="CAR_STATUS_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
SELECT 
  H.OWNRKY || H.WAREKY || R.DEPART || R.CARDAT || R.SHIPSQ || R.CARNUM AS  SEARCHKEY,
  H.OWNRKY OWNRKY,
  H.WAREKY WAREKY,
  W.NAME01 WAREKYNM,
  R.DEPART DEPART,
  R.CARDAT CARDAT,
  R.SHIPSQ SHIPSQ,
  R.CARNUM CARNUM,
  C.DESC01 CARNUMNM,
  C.DRIVER DRIVER,
  C.PERHNO PERHNO,
  C.CARTYP CARTYP,
  R.CASTYN CASTYN,
  R.CASTDT CASTDT,
  R.CASTIM CASTIM,
  MAX(R.PERHNO) PERHNO,
  MAX(R.RECNUM) RECNUM
FROM SHPDR R 
     INNER JOIN SHPDI I 
             ON I.SHPOKY = R.SHPOKY
            AND I.SHPOIT = R.SHPOIT 
     INNER JOIN SHPDH H 
             ON H.SHPOKY = I.SHPOKY 
     LEFT OUTER JOIN CARMA C 
                  ON C.OWNRKY = H.OWNRKY
                 AND C.WAREKY = H.WAREKY
                 AND C.CARNUM = R.CARNUM
     INNER JOIN WAHMA W
                   ON W.WAREKY = H.WAREKY
WHERE R.RECAYN = 'N'
 AND H.DRELIN = 'V'
 AND I.QTJCMP != 0 
 AND H.OWNRKY = #{OWNRKY}
 AND H.WAREKY = #{WAREKY}
    <if test="RANGE_SQL != null and RANGE_SQL != ''">
			${RANGE_SQL}
		</if>
<if test="CASTYN != null and CASTYN != ''">
   AND R.CASTYN LIKE DECODE(#{CASTYN},'ALL','',#{CASTYN})||'%'
</if>
GROUP BY H.OWNRKY, H.WAREKY, R.DEPART, R.CARDAT, 
         R.SHIPSQ, R.CARNUM, C.DESC01, C.DRIVER, 
         C.PERHNO, C.CARTYP, R.CASTYN, R.CASTDT,
         W.NAME01,  R.CASTIM
    
  </select>
  
  <!-- [DL80] 출발차량관리 : 아이템 조회 -->
  <select id="CAR_STATUS_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT
		  H.OWNRKY || H.WAREKY || R.DEPART || R.CARDAT || R.SHIPSQ || R.CARNUM AS  SEARCHKEY,
		  H.OWNRKY OWNRKY,
		  H.WAREKY WAREKY,
		  R.DEPART DEPART,
		  R.SHIPSQ SHIPSQ,
		  R.CARDAT CARDAT,
		  R.CARNUM CARNUM,
		  H.DPTNKY DPTNKY,
		  B.NAME01 DPTNKYNM,
		  I.SKUKEY SKUKEY,
		  I.DESC01 DESC01,
		  I.DESC02 DESC02,
		  I.UOMKEY UOMKEY,
		  SUM(I.QTJCMP)  QTSIWH,
		  R.CASTYN CASTYN,
		       NVL(SM.QTYSTD,0) AS PLIQTY,
		       NVL(SM.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC( SUM(I.QTJCMP) / DECODE(SM.QTDUOM, 0, NULL,SM.QTDUOM) ) ,0) AS BOXQTY,       
		       NVL(  TRUNC( SUM(I.QTJCMP) / DECODE(SM.QTYSTD, 0, NULL,SM.QTYSTD) ) ,0) AS PLTQTY,       
		       NVL(MOD( SUM(I.QTJCMP) , DECODE(SM.QTDUOM, 0,NULL, SM.QTDUOM)),0) AS REMQTY,
		       NVL(SM.GRSWGT,0) * (SUM(I.QTJCMP))  AS GRSWGT,
		       NVL(SM.GRSWGT,0)   AS GRSWGTCNT
		FROM SHPDR R 
		     INNER JOIN SHPDI I 
		             ON I.SHPOKY = R.SHPOKY
		            AND I.SHPOIT = R.SHPOIT 
		     INNER JOIN SHPDH H 
		             ON H.SHPOKY = I.SHPOKY 
		     INNER JOIN SKUMA SM
		             ON SM.OWNRKY = H.OWNRKY
		            AND SM.SKUKEY = I.SKUKEY
		     LEFT OUTER JOIN CARMA C 
		                  ON C.OWNRKY = H.OWNRKY
		                 AND C.WAREKY = H.WAREKY
		                 AND C.CARNUM = R.CARNUM 
		     LEFT OUTER JOIN BZPTN B 
		                  ON B.OWNRKY = H.OWNRKY
		                 AND B.PTNRKY = H.DPTNKY
		                 AND B.PTNRTY = '0001'
		WHERE R.RECAYN = 'N'
		  AND H.DRELIN = 'V'
		AND I.QTJCMP != 0 
		 AND H.OWNRKY = #{OWNRKY}
		 AND H.WAREKY = #{WAREKY}
		    <if test="RANGE_SQL != null and RANGE_SQL != ''">
					${RANGE_SQL}
				</if>
		<if test="CASTYN != null and CASTYN != ''">
		   AND R.CASTYN LIKE DECODE(#{CASTYN},'ALL','',#{CASTYN})||'%'
		</if>
		GROUP BY H.OWNRKY, H.WAREKY, R.DEPART, R.SHIPSQ, 
		         R.CARNUM, H.DPTNKY, B.NAME01, I.SKUKEY, 
		         I.DESC01, I.DESC02, I.UOMKEY, R.CARDAT,
		         R.CASTYN, SM.QTYSTD, SM.QTDUOM, SM.GRSWGT

  </select>
  
  <!-- [DL80] 출발차량관리 : 아이템 재 조회 -->
  <select id="CAR_STATUS_REFINDITEM_LIST" parameterType="hashmap" resultType="DataMap">
	SELECT
		  H.OWNRKY || H.WAREKY || R.DEPART || R.CARDAT || R.SHIPSQ || R.CARNUM AS  SEARCHKEY,
		  R.SHPOKY SHPOKY, 
		  R.SHPOIT SHPOIT, 
		  R.SHPOIR SHPOIR
		
		FROM SHPDR R 
		     INNER JOIN SHPDI I 
		             ON I.SHPOKY = R.SHPOKY
		            AND I.SHPOIT = R.SHPOIT 
		     INNER JOIN SHPDH H 
		             ON H.SHPOKY = I.SHPOKY 
		     LEFT OUTER JOIN CARMA C 
		                  ON C.OWNRKY = H.OWNRKY
		                 AND C.WAREKY = H.WAREKY
		                 AND C.CARNUM = R.CARNUM 
		     LEFT OUTER JOIN BZPTN B 
		                  ON B.OWNRKY = H.OWNRKY
		                 AND B.PTNRKY = H.DPTNKY
		                 AND B.PTNRTY = '0001'
		WHERE 1=1
		  AND R.TASKKY != ' '
		  AND R.RECAYN = 'N'
		  AND H.DRELIN = 'V'
		  AND H.OWNRKY = #{OWNRKY}
		  AND H.WAREKY = #{WAREKY}
		    <if test="RANGE_SQL != null and RANGE_SQL != ''">
		      ${RANGE_SQL}
		    </if>
		    <if test="CASTYN != null and CASTYN != ''">
		        AND R.CASTYN LIKE DECODE(#{CASTYN},'ALL','',#{CASTYN})||'%'
		    </if>
		
		  AND H.OWNRKY || H.WAREKY || R.DEPART || R.CARDAT || R.SHIPSQ || R.CARNUM  = #{SEARCHKEY}
		GROUP BY H.OWNRKY, H.WAREKY, R.DEPART, R.SHIPSQ, 
		         R.CARNUM, H.DPTNKY, B.NAME01, I.SKUKEY, 
		         I.DESC01, I.DESC02, I.UOMKEY, R.CARDAT,
		         R.SHPOKY, R.SHPOIT, R.SHPOIR
  </select>
  
  <!-- [DL80] 출발차량관리 : SHPDR 저장 -->
  <update id="CAR_STATUS_SHPDR_UPDATE"  parameterType="hashmap">
    UPDATE SHPDR
       SET CASTYN = #{CASTYN},
           CASTDT = #{CASTDT},
           CASTIM = #{CASTIM},
           RECNUM = #{RECNUM},
           PERHNO = #{PERHNO}
    
     WHERE SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
       AND SHPOIR = #{SHPOIR}
  </update>
  
  <!-- [DL84] 주문집계표(미마감) : 헤더 조회 -->
  <select id="ORDER_NOT_CLOSED_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT I.SVBELN AS KEY,
           I.OWNRKY AS OWNRKY,
           MAX(I.SKUG05) AS SKUG05,
           I.WAREKY AS WAREKY,
           I.WARESR AS WARESR,
           I.DOCUTY AS DOCUTY,
           D.SHORTX AS DOCUTYNM,
           I.ORDTYP AS ORDTYP,
           I.ORDDAT AS ORDDAT,
           I.ERPCDT AS ERPCDT,
           I.SVBELN AS SVBELN,
           I.OTRQDT AS OTRQDT,
           I.PTNRTO AS PTNRTO,
           DECODE(I.DOCUTY, '266', W.NAME01, B.NAME01) AS PTNRTONM,
           I.PTNROD AS PTNROD,
           B2.NAME01 AS PTNRODNM,
           I.DIRDVY AS DIRDVY,
           I.DIRSUP AS DIRSUP,
           I.CUSRID AS CUSRID,
           I.CUNAME AS CUNAME,
           I.CUPOST AS CUPOST,
           I.CUNATN AS CUNATN,
           I.CUTEL1 AS CUTEL1,
           I.CUTEL2 AS CUTEL2,
           I.CUMAIL AS CUMAIL,
           I.CUADDR AS CUADDR,
           I.CTNAME AS CTNAME,
           I.CTTEL1 AS CTTEL1,
           I.SALENM AS SALENM,
           I.SALTEL AS SALTEL,
           MAX(I.TEXT01) AS TEXT01,
           SUM(OBOXQTY) AS BOXQTY,
           SUM(RBOXQTY) AS BXIQTY,
           SP.REGNKY AS REGNKY,
           SP.REGNNM AS REGNNM,
           SF_GET_WAHNM(B.NAME03) AS NAME03B,
           C.CARNUM AS CARNUM,
           I.C00102 AS C00102,
           MAX(I.CRETIM) AS ERPCTM,
           MAX(I.CREDAT) AS CREDAT,
           ' ' AS FILEDN,
           B2.PTNG08 AS PTNG08
     FROM (
            SELECT SM.SKUG05, 
                   SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) ORDTOT,
                   NVL(CASE WHEN NVL(S.USEQTY, 0) >= SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) 
                                THEN SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) END, 0) STKTOT,
                   I.MANDT, I.SEQNO, I.ORDTYP, I.ORDDAT, I.CHKSEQ, I.ORDSEQ, I.SVBELN, I.SPOSNR, I.DOCUTY, I.ERPCDT, I.ERPCTM, I.ERPMDT, I.OTRQDT,
                   I.PTNRTO, I.PTNROD, I.OWNRKY, I.WAREKY, I.WARESR, I.WARETG, I.SKUKEY, I.QTYORG, I.QTYREQ, I.WMSMGT, I.QTSHPD, I.DUOMKY, I.NETPR,
                   I.SALDPT, I.REFDKY, I.REDKIT, I.REDDAT, I.STKNUM, I.SDATBG, I.DIRDVY, I.DIRSUP, I.SALEPR, I.DISRAT, I.SELLPR, I.SELAMT, I.VATAMT,
                   I.CUSRID, I.CUNAME, I.CUPOST, I.CUNATN, I.CUTEL1, I.CUTEL2, I.CUMAIL, I.CUADDR, I.CTNAME, I.CTTEL1, I.SALENM, I.SALTEL, I.TEXT01,
                   I.TEXT02, I.TEXT03, I.C00101, I.C00102, I.C00103, I.C00104, I.C00105, I.C00106, I.C00107, I.C00108, I.C00109, I.C00110, I.N00101,
                   I.N00102, I.N00103, I.N00104, I.N00105, I.N00106, I.N00107, I.N00108, I.N00109, I.N00110, I.USRID1, I.DEPTID1, I.USRID2, I.DEPTID2,
                   I.USRID3, I.DEPTID3, I.USRID4, I.DEPTID4, I.CREDAT, I.CRETIM, I.LMODAT, I.LMOTIM, I.STATUS, I.TDATE, I.XDATS, I.XSTAT, I.ERTXT, SM.DESC01,SM.SKUG02,SM.SKUG03, 
                   TRUNC(I.QTYORG / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1) OBOXQTY,
                   TRUNC(I.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1) RBOXQTY
              FROM IFWMS113 I INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
                         LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
                                            FROM STKKY 
                                           WHERE OWNRKY = #{OWNRKY} AND LOTA06 = '00' AND QTSIWH > 0 
                                           GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
             WHERE I.DOCUTY IN ('211','212','213','214','215','216')
               AND I.XSTAT = 'R'
               AND I.CHKSEQ != ' '
               AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0
               AND I.C00102 = 'X'
               AND I.OWNRKY = #{OWNRKY}
               AND I.WAREKY = #{WAREKY}
               <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
            ${RANGE_SQL2}
          </if>
                   ) I LEFT OUTER JOIN (SELECT DISTINCT OWNRKY, REGNKY, POSTCD, REGNNM 
                                          FROM SHPMA) SP ON I.CUPOST = SP.POSTCD AND I.OWNRKY = SP.OWNRKY
               INNER JOIN SKUMA SM2 ON SM2.OWNRKY = I.OWNRKY AND SM2.SKUKEY = I.SKUKEY
               INNER JOIN DOCTM D ON D.DOCUTY = I.DOCUTY 
               LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY = '0007'
               LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
               LEFT OUTER JOIN WAHMA W ON W.WAREKY = I.PTNRTO
               LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM 
                                  FROM CARFX 
                                 GROUP BY OWNRKY, WAREKY, PTNRKY) C ON I.OWNRKY = C.OWNRKY AND I.WAREKY = C.WAREKY AND I.PTNRTO = C.PTNRKY
     WHERE 1 = 1
       AND I.OWNRKY = #{OWNRKY}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">
            ${RANGE_SQL}
     </if>
     GROUP BY I.MANDT, I.OWNRKY, I.WAREKY, I.WARESR, I.DOCUTY, D.SHORTX, I.ORDTYP, I.ORDDAT, I.ERPCDT, I.SVBELN, I.OTRQDT, 
              I.PTNRTO, W.NAME01, I.PTNROD, B2.NAME01, B.NAME01, DIRDVY, DIRSUP, CUSRID, CUNAME, CUPOST, CUNATN, CUTEL1, 
              CUTEL2, CUMAIL, CUADDR, CTNAME, CTTEL1, SALENM, SALTEL, REGNKY, REGNNM, B.NAME03, C.CARNUM, I.C00102, B2.PTNG08
    <if test="ORDTYPE == 'NO'">
        HAVING (SUM(I.STKTOT) >= SUM(I.ORDTOT))
    </if>
    <if test="ORDTYPE == 'ONE'">
        HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
    </if>
    <if test="ORDTYPE == 'MORE'">
        HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
    </if>
    <if test="ORDTYPE == 'POOR'">
        HAVING (SUM(I.STKTOT) = 0)
    </if>
    ORDER BY SVBELN
    
  </select> 
  
    <!-- [DL84] 주문집계표(미마감) : 아이템 조회 -->
  <select id="ORDER_NOT_CLOSED_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT I.SVBELN KEY,
           TO_NUMBER(I.ORDTOT) ORDTOT,
           TO_NUMBER(NVL(I.USEQTY, 0)) USEQTY,
           I.MANDT MANDT,
           I.SEQNO SEQNO,
           I.ORDTYP ORDTYP,
           I.ORDDAT ORDDAT,
           I.CHKSEQ CHKSEQ,
           I.ORDSEQ ORDSEQ,
           I.SVBELN SVBELN,
           I.SPOSNR SPOSNR,
           I.DOCUTY DOCUTY,
           I.ERPCDT ERPCDT,
           I.ERPCTM ERPCTM,
           I.ERPMDT ERPMDT,
           I.OTRQDT OTRQDT,
           I.PTNRTO PTNRTO,
           I.PTNROD PTNROD,
           I.OWNRKY OWNRKY,
           I.WAREKY WAREKY,
           I.WARESR WARESR,
           I.WARETG WARETG,
           I.SKUKEY SKUKEY,
           I.QTYORG QTYORG,
           I.QTYREQ QTYREQ,
           I.WMSMGT WMSMGT,
           I.QTSHPD QTSHPD,
           I.DUOMKY DUOMKY,
           I.NETPR NETPR,
           I.SALDPT SALDPT,
           I.REFDKY REFDKY,
           I.REDKIT REDKIT,
           I.REDDAT REDDAT,
           I.STKNUM STKNUM,
           I.SDATBG SDATBG,
           I.DIRDVY DIRDVY,
           I.DIRSUP DIRSUP,
           I.SALEPR SALEPR,
           I.DISRAT DISRAT,
           I.SELLPR SELLPR,
           I.SELAMT SELAMT,
           I.VATAMT VATAMT,
           I.CUSRID CUSRID,
           I.CUNAME CUNAME,
           I.CUPOST CUPOST,
           I.CUNATN CUNATN,
           I.CUTEL1 CUTEL1,
           I.CUTEL2 CUTEL2,
           I.CUMAIL CUMAIL,
           I.CUADDR CUADDR,
           I.CTNAME CTNAME,
           I.CTTEL1 CTTEL1,
           I.SALENM SALENM,
           I.SALTEL SALTEL,
           I.TEXT01 TEXT01,
           I.TEXT02 TEXT02,
           I.TEXT03 TEXT03,
           I.C00101 C00101,
           I.C00102 C00102,
           I.C00103 C00103,
           I.C00104 C00104,
           I.C00105 C00105,
           I.C00106 C00106,
           I.C00107 C00107,
           I.C00108 C00108,
           I.C00109 C00109,
           I.C00110 C00110,
           I.N00101 N00101,
           I.N00102 N00102,
           I.N00103 N00103,
           I.N00104 N00104,
           I.N00105 N00105,
           I.N00106 N00106,
           I.N00107 N00107,
           I.N00108 N00108,
           I.N00109 N00109,
           I.N00110 N00110,
           I.USRID1 USRID1,
           I.DEPTID1 DEPTID1,
           I.USRID2 USRID2,
           I.DEPTID2 DEPTID2,
           I.USRID3 USRID3,
           I.DEPTID3 DEPTID3,
           I.USRID4 USRID4,
           I.DEPTID4 DEPTID4,
           I.CREDAT CREDAT,
           I.CRETIM CRETIM,
           I.LMODAT LMODAT,
           I.LMOTIM LMOTIM,
           I.STATUS STATUS,
           I.TDATE TDATE ,
           '' CDATE,
           I.XSTAT XSTAT ,
           I.ERTXT ERTXT ,
           I.DESC01 DESC01,
           I.PLIQTY PLIQTY,
           I.BXIQTY BXIQTY,
           I.BOXQTY BOXQTY,
           I.PLTQTY PLTQTY,
           I.REMQTY REMQTY
      FROM
           (SELECT SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) AS ORDTOT,
                   S.USEQTY USEQTY,
                   I.MANDT MANDT ,
                   I.SEQNO SEQNO ,
                   I.ORDTYP ORDTYP ,
                   I.ORDDAT ORDDAT ,
                   I.CHKSEQ CHKSEQ ,
                   I.ORDSEQ ORDSEQ ,
                   I.SVBELN SVBELN ,
                   I.SPOSNR SPOSNR ,
                   I.DOCUTY DOCUTY ,
                   I.ERPCDT ERPCDT ,
                   I.ERPCTM ERPCTM ,
                   I.ERPMDT ERPMDT ,
                   I.OTRQDT OTRQDT ,
                   I.PTNRTO PTNRTO ,
                   I.PTNROD PTNROD ,
                   I.OWNRKY OWNRKY ,
                   I.WAREKY WAREKY ,
                   I.WARESR WARESR ,
                   I.WARETG WARETG ,
                   I.SKUKEY SKUKEY ,
                   I.QTYORG QTYORG ,
                   I.QTYREQ QTYREQ ,
                   I.WMSMGT WMSMGT ,
                   I.QTSHPD QTSHPD ,
                   I.DUOMKY DUOMKY ,
                   I.NETPR NETPR ,
                   I.SALDPT SALDPT ,
                   I.REFDKY REFDKY ,
                   I.REDKIT REDKIT ,
                   I.REDDAT REDDAT ,
                   I.STKNUM STKNUM ,
                   I.SDATBG SDATBG ,
                   I.DIRDVY DIRDVY ,
                   I.DIRSUP DIRSUP ,
                   I.SALEPR SALEPR ,
                   I.DISRAT DISRAT ,
                   I.SELLPR SELLPR ,
                   I.SELAMT SELAMT ,
                   I.VATAMT VATAMT ,
                   I.CUSRID CUSRID ,
                   I.CUNAME CUNAME ,
                   I.CUPOST CUPOST ,
                   I.CUNATN CUNATN ,
                   I.CUTEL1 CUTEL1 ,
                   I.CUTEL2 CUTEL2 ,
                   I.CUMAIL CUMAIL ,
                   I.CUADDR CUADDR ,
                   I.CTNAME CTNAME ,
                   I.CTTEL1 CTTEL1 ,
                   I.SALENM SALENM ,
                   I.SALTEL SALTEL ,
                   I.TEXT01 TEXT01 ,
                   I.TEXT02 TEXT02 ,
                   I.TEXT03 TEXT03 ,
                   I.C00101 C00101 ,
                   I.C00102 C00102 ,
                   I.C00103 C00103 ,
                   I.C00104 C00104 ,
                   I.C00105 C00105 ,
                   I.C00106 C00106 ,
                   I.C00107 C00107 ,
                   I.C00108 C00108 ,
                   I.C00109 C00109 ,
                   I.C00110 C00110 ,
                   I.N00101 N00101 ,
                   I.N00102 N00102 ,
                   I.N00103 N00103 ,
                   I.N00104 N00104 ,
                   I.N00105 N00105 ,
                   I.N00106 N00106 ,
                   I.N00107 N00107 ,
                   I.N00108 N00108 ,
                   I.N00109 N00109 ,
                   I.N00110 N00110 ,
                   I.USRID1 USRID1 ,
                   I.DEPTID1 DEPTID1 ,
                   I.USRID2 USRID2 ,
                   I.DEPTID2 DEPTID2 ,
                   I.USRID3 USRID3 ,
                   I.DEPTID3 DEPTID3 ,
                   I.USRID4 USRID4 ,
                   I.DEPTID4 DEPTID4 ,
                   I.CREDAT CREDAT ,
                   I.CRETIM CRETIM ,
                   I.LMODAT LMODAT ,
                   I.LMOTIM LMOTIM ,
                   I.STATUS STATUS ,
                   I.TDATE TDATE ,
                   I.XSTAT XSTAT ,
                   I.ERTXT ERTXT ,
                   SM.DESC01 DESC01 ,
                   SM.ASKU05,
                   NVL(SM.QTYSTD, 0) PLIQTY ,
                   NVL(SM.QTDUOM, 0) BXIQTY ,
                   NVL( TRUNC((I.QTYREQ) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) , 0) AS BOXQTY ,
                   NVL( TRUNC((I.QTYREQ) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) , 0) AS PLTQTY ,
                   NVL(MOD(I.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)), 0) AS REMQTY,
                   SM.QTDUOM
              FROM IFWMS113 I LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
                                                 FROM STKKY 
                                                WHERE OWNRKY = #{OWNRKY} AND LOTA06 = '00' AND QTSIWH > 0 
                                                GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
                              INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
             WHERE I.XSTAT = 'R'
               AND I.OWNRKY = #{OWNRKY}
              <if test="SVBELN != null and SVBELN != ''">
               AND I.SVBELN = #{SVBELN}
              </if>
            ) I
     WHERE 1=1
       AND I.DOCUTY IN ('211','212','213','214','215','216')
       AND I.XSTAT = 'R'
       AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0
       AND I.C00102 = 'X'
       AND I.OWNRKY = #{OWNRKY}
       AND I.WAREKY = #{WAREKY}
    <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">
      ${RANGE_SQL2}
    </if>
    ORDER BY I.SVBELN, I.ORDSEQ, I.SKUKEY

    
  </select> 
  
  <!-- [DL99] 주문집계표(영업) : 헤더 조회 -->
  <select id="ORDER_SALES_HEAD_LIST" parameterType="hashmap" resultType="DataMap">

SELECT /*+ ORDERED FIRST_ROWS */ORD.OWNRKY OWNRKY,
       ORD.WAREKY WAREKY,
       ORD.SKUKEY SKUKEY ,
       ORD.DESC01 DESC01,
       ORD.DESC04 DESC04,
       NVL(MAX(ORD.PLIQTY), 0) / NVL(MAX(ORD.BXIQTY), 0) PLTBOX ,
       NVL(MAX(ORD.PLIQTY), 0) PLIQTY ,
       NVL(MAX(ORD.BXIQTY), 0) BXIQTY ,
       NVL(MAX(ORD.BOXQTY1), 0) BOXQTY1 ,
       NVL(MAX(ORD.QTSIWH1), 0) QTSIWH1 ,
       NVL(MAX(STK.BOXQTY2), 0) BOXQTY2 ,
       NVL(MAX(STK.QTSIWH2), 0) QTSIWH2 ,
       CASE WHEN MAX(NVL(STK.BOXQTY2, 0) - NVL(ORD.BOXQTY1, 0)) > 0 THEN 0  ELSE MAX(NVL(STK.BOXQTY2, 0) - NVL(ORD.BOXQTY1, 0)) END BOXQTY3 ,
       CASE WHEN MAX(NVL(STK.QTSIWH2, 0) - NVL(ORD.QTSIWH1, 0)) > 0 THEN 0  ELSE MAX(NVL(STK.QTSIWH2, 0) - NVL(ORD.QTSIWH1, 0)) END QTSIWH3 ,
       NVL(MAX(ASN.BOXQTY4), 0) BOXQTY4 ,
       NVL(MAX(ASN.QTSIWH4), 0) QTSIWH4 ,
       NVL(MAX(TRF.BOXQTY5), 0) BOXQTY5 ,
       NVL(MAX(TRF.QTSIWH5), 0) QTSIWH5 ,
       NVL(MAX(BLK.BOXQTY6), 0) BOXQTY6 ,
       NVL(MAX(BLK.QTSIWH6), 0) QTSIWH6 ,
       NVL(MAX(RCV.BOXQTY7), 0) BOXQTY7 ,
       NVL(MAX(RCV.QTSIWH7), 0) QTSIWH7 ,
       NVL(MAX(REQ.BOXQTY8), 0) BOXQTY8 ,
       NVL(MAX(REQ.QTSIWH8), 0) QTSIWH8 ,
       NVL(MAX(PRD.BOXQTY9), 0) BOXQTY9 ,
       NVL(MAX(PRD.QTSIWH9), 0) QTSIWH9 ,
       NVL(MAX(PRE.QTYPRE) / MAX(ORD.BXIQTY), 0) AS QTYPRE,
       NVL(TRUNC(MAX(PRE.QTYPRE2) / MAX(ORD.BXIQTY), 1), 0) AS BOXPRE2,
       NVL(MAX(PRE.QTYPRE2), 0) AS QTYPRE2,
       NVL(MAX(WH.QTY1), 0) AS QTYWH1,
       NVL(TRUNC(MAX(WH.QTY1) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH1,
       NVL(MAX(WH.QTY2), 0) AS QTYWH2,
       NVL(TRUNC(MAX(WH.QTY2) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH2,
       NVL(MAX(WH.QTY3), 0) AS QTYWH3,
       NVL(TRUNC(MAX(WH.QTY3) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH3,
       NVL(MAX(WH.QTY4), 0) AS QTYWH4,
       NVL(TRUNC(MAX(WH.QTY4) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH4,
       NVL(MAX(WH.QTY5), 0) AS QTYWH5,
       NVL(TRUNC(MAX(WH.QTY5) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH5,
       NVL(MAX(WH.QTY6), 0) AS QTYWH6,
       NVL(TRUNC(MAX(WH.QTY6) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH6,
       NVL(MAX(WH.WH4_1QTY), 0) AS QTYWH4_1,
       NVL(TRUNC(MAX(WH.WH4_1QTY) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH4_1,
       NVL(MAX(WH.NUM01), 0) AS NUM01,
       NVL(TRUNC(MAX(WH.NUM01) / MAX(ORD.BXIQTY), 1), 0) AS NUM01_BOX,
       NVL(MAX(TOS.ORD_QTY), 0) AS QTYWH4_2,
       NVL(TRUNC(MAX(TOS.ORD_QTY) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH4_2,
       NVL(MAX(ORD.QTSIWH1), 0) + NVL(MAX(TOS.ORD_QTY), 0) AS QTYORD,
       NVL(MAX(ORD.BOXQTY1), 0) + NVL(TRUNC(MAX(TOS.ORD_QTY) / MAX(ORD.BXIQTY), 1), 0) AS BOXORD,
       NVL(SUM(PRE.QTYSTK30), 0) AS QTYS30,
       NVL(TRUNC(SUM(PRE.QTYSTK30) / MAX(ORD.BXIQTY), 1), 0) AS BOXS30,
       ORD.SLCPDI AS SHPQTY
  FROM (SELECT S.OWNRKY OWNRKY ,
               W.WAREKY WAREKY ,
               S.SKUKEY SKUKEY ,
               S.DESC01 DESC01 ,
               S.DESC04 DESC04 ,
               NVL(S.QTDUOM, 0) AS BXIQTY ,
               NVL(S.QTYSTD, 0) AS PLIQTY ,
               NVL(TRUNC((SUM(I.QTYREQ-I.WMSMGT-I.QTSHPD) / DECODE(S.QTDUOM, 0, NULL, S.QTDUOM)), 1 ) , 0) AS BOXQTY1 ,
               NVL(SUM(I.QTYREQ-I.WMSMGT-I.QTSHPD), 0 ) AS QTSIWH1,
               W.SLCPDI AS SLCPDI
          FROM SKUMA S INNER JOIN SKUWC W ON S.OWNRKY = W.OWNRKY AND S.SKUKEY = W.SKUKEY 
                       LEFT OUTER JOIN (SELECT I.SVBELN, I.OWNRKY, I.WAREKY, I.SKUKEY, SUM(I.QTYREQ) AS QTYREQ, SUM(I.WMSMGT) AS WMSMGT, SUM(I.QTSHPD) AS QTSHPD
                                               ,I.PTNRTO, I.PTNROD
                                          FROM IFWMS113 I 
                                         WHERE 1=1 AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267' ) 
                                           AND I.XSTAT = 'R'
                                           AND I.MANDT = 'SAP'
                                           AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0 
                                           AND I.CHKSEQ != ' '
                                           AND I.QTYORG > 0
                                           AND I.C00102 IN ('N', 'Y') 
<if test="RANGESEARCH1 != null and RANGESEARCH1 != ''">
  ${RANGESEARCH1}
</if>           
                                         GROUP BY I.OWNRKY, I.WAREKY, I.SKUKEY, I.SVBELN, I.PTNRTO, I.PTNROD ) I ON S.OWNRKY = I.OWNRKY AND W.WAREKY = I.WAREKY AND S.SKUKEY = I.SKUKEY
                       LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY='0007'
                       LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
         WHERE 1 = 1
           AND S.SKUG01 != 'Z' 
<if test="RANGEITEM3 != null and RANGEITEM3 != ''">
  ${RANGEITEM3}
</if>           
<if test="SKUG05 != ''">
 AND S.ASKU02 = #{SKUG05} 
</if>       
<if test="RANGEITEM2 != null and RANGEITEM2 != ''">
  ${RANGEITEM2}
</if>           
 <if test="RANGEITEM != ''">
AND I.SVBELN 
   <if test="FLAG == 'NOT'">
    NOT IN   
  </if>   
   <if test="FLAG == 'IN'">
    IN   
  </if>   
    (SELECT SVBELN
           FROM IFWMS113 I 
          WHERE I.MANDT = 'SAP'
            AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267' )
            AND I.XSTAT = 'R'
            AND I.C00102 IN ('N','Y')
            AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0 
      <if test="RANGESEARCH1 != null and RANGESEARCH1 != ''">
        ${RANGESEARCH1}
      </if> 
      <if test="RANGEITEM != null and RANGEITEM != ''">
        ${RANGEITEM}
      </if> 
 
                                )      
</if>       
 
 
         GROUP BY S.OWNRKY , W.WAREKY , S.SKUKEY , S.DESC01 , S.DESC04 , S.QTDUOM, S.QTYSTD, W.SLCPDI ) ORD 
       LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , M.DESC01 DESC01, 
                               NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY2 , 
                               SUM(S.QTSIWH) QTSIWH2 
                          FROM SKUMA M INNER JOIN STKKY S ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                       INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                         WHERE 1 = 1
                           AND S.OWNRKY = #{OWNRKY}
                           AND S.AREAKY NOT IN ('SYS', 'SHP')
                           AND S.LOCAKY NOT IN ('SETLOC', '1J01101')
                           AND S.QTSIWH > 0
                           AND S.QTSALO = 0
                           AND S.QTSPMO = 0
                           AND S.QTSPMI = 0
                           AND S.QTSBLK = 0 
                         GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, M.DESC01 ) STK ON ORD.OWNRKY = STK.OWNRKY AND ORD.WAREKY = STK.WAREKY AND ORD.SKUKEY = STK.SKUKEY 
       LEFT OUTER JOIN (SELECT H.OWNRKY AS OWNRKY , H.WAREKY AS WAREKY , I.SKUKEY AS SKUKEY , I.DESC01 AS DESC01, 
                               NVL( SUM(TRUNC( (I.QTYASN / DECODE(I.QTDUOM, 0, NULL, I.QTDUOM )), 1 )) , 0) AS BOXQTY4 , SUM(I.QTYASN) AS QTSIWH4
                          FROM ASNDH H INNER JOIN ASNDI I ON H.ASNDKY = I.ASNDKY
                         WHERE 1 = 1
                           AND I.STATIT = 'NEW'
                           AND H.STATDO NOT IN ('RCN')
                           AND H.DOCDAT > '20170301'
                         GROUP BY H.OWNRKY, H.WAREKY, I.SKUKEY, I.DESC01) ASN ON ORD.OWNRKY = ASN.OWNRKY AND ORD.WAREKY = ASN.WAREKY AND ORD.SKUKEY = ASN.SKUKEY 
       LEFT OUTER JOIN (SELECT I.OWNRKY OWNRKY , I.WARETG WAREKY , I.SKUKEY SKUKEY , I.DESC01 DESC01 , 
                               NVL( TRUNC( SUM((I.QTYTRF / DECODE(M.QTDUOM, 0, NULL, M.QTDUOM )) ) , 1 ) , 0) AS BOXQTY5 , SUM(I.QTYTRF) AS QTSIWH5
                          FROM TRFIT I INNER JOIN SKUMA M ON M.OWNRKY = I.OWNRKY
                           AND M.SKUKEY = I.SKUKEY
                         WHERE 1 = 1
                           AND M.OWNRKY = #{OWNRKY}
                           AND I.STATIT = 'NEW'
                         GROUP BY I.OWNRKY, I.WARETG, I.SKUKEY, I.DESC01 ) TRF ON ORD.OWNRKY = TRF.OWNRKY AND ORD.WAREKY = TRF.WAREKY AND ORD.SKUKEY = TRF.SKUKEY 
       LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , S.DESC01 DESC01 , 
                               NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY6 , SUM(S.QTSIWH) QTSIWH6
                          FROM SKUMA M INNER JOIN STKKY S ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                       INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                         WHERE 1 = 1
                           AND S.OWNRKY = #{OWNRKY}
                           AND S.AREAKY NOT IN ('SYS', 'SHP')
                           AND S.LOCAKY NOT IN ('SETLOC', '1J01101')
                           AND S.QTSIWH > 0
                           AND S.QTSBLK > 0
                           AND S.LOTA06 = '00'
                         GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, S.DESC01 ) BLK ON ORD.OWNRKY = BLK.OWNRKY AND ORD.WAREKY = BLK.WAREKY AND ORD.SKUKEY = BLK.SKUKEY 
       LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , S.DESC01 DESC01 , 
                               NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY7 , SUM(S.QTSIWH) QTSIWH7
                          FROM SKUMA M INNER JOIN STKKY S ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                       INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                         WHERE 1 = 1
                           AND M.OWNRKY = #{OWNRKY}
                           AND S.AREAKY NOT IN ('SYS', 'SHP')
                           AND S.QTSIWH > 0
                           AND S.QTSALO = 0
                           AND S.QTSPMO = 0
                           AND S.QTSPMI = 0
                           AND S.QTSBLK = 0
                           AND S.LOTA06 = '00'
                           /*AND S.LOCAKY = 'RCVLOC'*/
                           /* 생산 입고 자동으로 RCVFAC 로케이션도 미적치 수량에 포함*/
                           AND S.LOCAKY IN('RCVLOC','RCVFAC')
                         GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, S.DESC01 ) RCV ON ORD.OWNRKY = RCV.OWNRKY AND ORD.WAREKY = RCV.WAREKY AND ORD.SKUKEY = RCV.SKUKEY 
       LEFT OUTER JOIN (SELECT SKUMA.OWNRKY, WAREKY, SKUMA.SKUKEY, SKUMA.DESC01 , 
                               NVL( TRUNC( (SUM(ORDQTY - ASNQTY - INNQTY) / DECODE(MAX(SKUMA.QTDUOM), 0, NULL, MAX(SKUMA.QTDUOM))), 1 ) , 0) AS BOXQTY8 , 
                               SUM(ORDQTY - ASNQTY - INNQTY) QTSIWH8
                          FROM IFWMS103 INNER JOIN SKUMA ON IFWMS103.OWNRKY = SKUMA.OWNRKY AND IFWMS103.SKUKEY = SKUMA.SKUKEY
                         WHERE 1 = 1
                           AND XSTAT = 'R'
                           AND IFWMS103.OWNRKY = #{OWNRKY}
                           AND MANDT = 'SAP'
                           AND ORDTYP !='002'
                           AND POCLOS = ' '
                           AND ORDQTY - ASNQTY - INNQTY > 0
                         GROUP BY SKUMA.OWNRKY, WAREKY, SKUMA.SKUKEY, SKUMA.DESC01 ) REQ ON ORD.OWNRKY = REQ.OWNRKY AND ORD.WAREKY = REQ.WAREKY AND ORD.SKUKEY = REQ.SKUKEY 
       LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, DECODE(LOCAKY, 'DOCLOC', SUM(QTSIWH)-SUM(QTSALO), 0) AS QTYPRE,
                                                       DECODE(LOTA05, '29', SUM(QTSIWH) -SUM(QTSALO), 0) AS QTYPRE2,
                                                       DECODE(LOTA06, '30', SUM(NVL(QTSIWH, 0)), 0) AS QTYSTK30,
                                                       DECODE(LOTA06, '00', DECODE(WAREKY, '2117', DECODE(LOCAKY, '1Y01101', SUM(QTSIWH - QTSBLK - GREATEST(QTSALO , QTSPMO)), 0)
                                                                                         , '2257', DECODE(LOCAKY, '1Y01101', SUM(QTSIWH - QTSBLK - GREATEST(QTSALO , QTSPMO)), 0), 0), 0) AS BAKARM
                          FROM STKKY
                         WHERE OWNRKY = #{OWNRKY}
                           AND QTSIWH > 0
                           AND AREAKY NOT IN ('SHP', 'SYS')
                           AND LOCAKY NOT IN ('SETLOC', '1J01101')
                         GROUP BY OWNRKY, WAREKY, SKUKEY, LOCAKY, LOTA05, LOTA06 ) PRE ON ORD.OWNRKY = PRE.OWNRKY AND ORD.WAREKY = PRE.WAREKY AND ORD.SKUKEY = PRE.SKUKEY
       LEFT OUTER JOIN (SELECT SKUKEY, SUM(QTY1) AS QTY1, SUM(QTY2) AS QTY2, SUM(QTY3) AS QTY3, SUM(QTY4) AS QTY4, SUM(QTY5) AS QTY5, SUM(QTY6) AS QTY6,
                                       SUM(WH4_1QTY) AS WH4_1QTY, SUM(NUM01) AS NUM01
                          FROM (SELECT STK.SKUKEY,
                                       DECODE(STK.WAREKY, '2116', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                        , '2256', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY1,
                                       DECODE(STK.WAREKY, '2115', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                        , '2255', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY2,
                                       DECODE(STK.WAREKY, '2114', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                        , '2254', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY3,
                                       DECODE(STK.WAREKY, '2117', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                        , '2257', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY4,
                                       DECODE(STK.WAREKY, '2118', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                        , '2258', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY5,
                                       DECODE(STK.WAREKY, '2121', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                        , '2259', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY6,
                             DECODE(STK.WAREKY, '2120', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                        , '2261', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS WH4_1QTY,
                                       DECODE(STK.WAREKY, '2101', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                        , '2263', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS NUM01
                                  FROM (SELECT WAREKY, SKUKEY, SUM(QTSIWH - QTSBLK - GREATEST(QTSALO, QTSPMO)) AS STKQTY
                                                     FROM STKKY
                                                    WHERE LOTA06 = '00'
                                                      AND (QTSIWH > 0 OR QTSPMI > 0)
                                                      AND AREAKY NOT IN ('SHP', 'SYS')
                                                      AND LOCAKY NOT IN ('SETLOC', '1J01101')
                                                      AND OWNRKY = #{OWNRKY}
                                                    GROUP BY OWNRKY, WAREKY, SKUKEY) STK
                                  LEFT OUTER JOIN (SELECT H.WAREKY, I.SKUKEY, SUM(I.QTYASN) AS ASNQTY
                                                     FROM ASNDH H, ASNDI I
                                                    WHERE 1 = 1
                                                      AND H.ASNDKY = I.ASNDKY
                                                      AND H.STATDO != 'RCN'
                                                      AND I.STATIT = 'NEW'
                                                      AND H.OWNRKY = #{OWNRKY}
                                                      AND H.DOCDAT BETWEEN TO_CHAR(SYSDATE-30, 'YYYYMMDD') AND TO_CHAR(SYSDATE+30, 'YYYYMMDD')
                                                    GROUP BY H.OWNRKY, H.WAREKY, I.SKUKEY) ASN ON STK.WAREKY = ASN.WAREKY AND STK.SKUKEY = ASN.SKUKEY
                                  LEFT OUTER JOIN (SELECT WARETG, SKUKEY, SUM(QTYTRF) AS TRFQTY
                                                     FROM TRFIT
                                                    WHERE OWNRKY = #{OWNRKY}
                                                      AND STATIT = 'NEW'
                                                      AND TRFOTY = '121'
                                                      AND QTYTRF > 0
                                                      AND DOCDAT BETWEEN TO_CHAR(SYSDATE-30, 'YYYYMMDD') AND TO_CHAR(SYSDATE+30, 'YYYYMMDD')
                                                    GROUP BY WARETG, SKUKEY) TRF ON STK.WAREKY = TRF.WARETG AND STK.SKUKEY = TRF.SKUKEY
                                  LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, SUM(QTYREQ - WMSMGT - QTSHPD) AS OUTQTY
                                                     FROM IFWMS113
                                                    WHERE XSTAT = 'R'
                                                      AND MANDT = 'SAP'
                                                      AND C00102 IN ('N', 'Y')
                                                      AND DOCUTY IN ('211', '212', '213', '214', '215', '216', '266')
                                                      AND OWNRKY = #{OWNRKY}
                                                    GROUP BY OWNRKY, WAREKY, SKUKEY) IFT ON STK.WAREKY = IFT.WAREKY AND STK.SKUKEY = IFT.SKUKEY)
                        GROUP BY SKUKEY ) WH ON ORD.SKUKEY = WH.SKUKEY 
                        LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, SUM(QTYREQ) AS ORD_QTY
                                           FROM IFWMS113
                                          WHERE MANDT = 'SAP'
                                            AND OWNRKY = #{OWNRKY}
                                            AND WAREKY = #{OWNRKY}
                                            AND C00102 = 'X'
                                            AND XSTAT  = 'R'
                                            AND DOCUTY IN ('211','212','213','214','215','216')
                                          GROUP BY WAREKY, SKUKEY) TOS ON ORD.WAREKY = TOS.WAREKY AND ORD.SKUKEY = TOS.SKUKEY
                        LEFT OUTER JOIN (SELECT IT.WARETG, IT.SKUKEY, TRUNC(NVL(SUM(NVL(IT.QTYRCV, 0)), 0) /  M.QTDUOM,0) AS BOXQTY9,
                                                 NVL(SUM(NVL(IT.QTYRCV, 0)), 0) AS QTSIWH9 
                                           FROM IFWMS403 IT INNER JOIN SKUMA M ON M.OWNRKY = IT.OWNRKY AND M.SKUKEY = IT.SKUKEY 
                                          WHERE (IT.OWNRKY = '2100' OR IT.OWNRKY = '2500')
                                            AND IT.MANDT = 'POP'
                                            AND IT.XSTAT = 'R'
                                            AND IT.WARETG = #{OWNRKY}
                                          GROUP BY IT.WARETG, IT.SKUKEY, M.QTDUOM) PRD ON PRD.WARETG = ORD.WAREKY AND PRD.SKUKEY = ORD.SKUKEY
 WHERE 1 = 1
 GROUP BY ORD.OWNRKY , ORD.WAREKY , ORD.SKUKEY , ORD.DESC01 , ORD.DESC04, ORD.SLCPDI 

<if test="CHKMAK != '1'">
HAVING SUM(ORD.QTSIWH1) > 0
</if>
<if test="CHKMAK == '1'">
HAVING ( SUM(STK.QTSIWH2) > 0 OR SUM(ASN.QTSIWH4) > 0  OR SUM(TRF.QTSIWH5) > 0 
         OR SUM(BLK.QTSIWH6) > 0  OR SUM(RCV.QTSIWH7) > 0  OR SUM(ORD.QTSIWH1) > 0 
         OR SUM(PRE.QTYPRE) > 0 OR SUM(TOS.ORD_QTY) > 0 OR NVL(MAX(WH.QTY1), 0) > 0 OR NVL(MAX(WH.QTY2), 0) > 0 OR NVL(MAX(WH.QTY3), 0) > 0
         OR NVL(MAX(WH.QTY4), 0) > 0  OR NVL(MAX(WH.QTY5), 0) > 0 OR NVL(MAX(WH.QTY6), 0) > 0 OR NVL(MAX(WH.WH4_1QTY), 0) > 0
         OR NVL(MAX(WH.NUM01), 0) > 0  )
</if>

 ORDER BY ORD.SKUKEY


     
  </select> 
  
    <!-- [DL99] 주문집계표(영업) : 헤더 조회2 -->
  <select id="ORDER_SALES_HEAD2_LIST" parameterType="hashmap" resultType="DataMap">

SELECT /*+ ORDERED FIRST_ROWS */ORD.OWNRKY OWNRKY,
       ORD.WAREKY WAREKY,
       ORD.SKUKEY SKUKEY ,
       ORD.DESC01 DESC01,
       ORD.DESC04 DESC04,
       NVL(MAX(ORD.PLIQTY), 0) / NVL(MAX(ORD.BXIQTY), 0) PLTBOX ,
       NVL(MAX(ORD.PLIQTY), 0) PLIQTY ,
       NVL(MAX(ORD.BXIQTY), 0) BXIQTY ,
       NVL(MAX(ORD.BOXQTY1), 0) BOXQTY1 ,
       NVL(MAX(ORD.QTSIWH1), 0) QTSIWH1 ,
       NVL(MAX(STK.BOXQTY2), 0) + NVL(MAX(PRD.BOXQTY9), 0) BOXQTY2 ,
       NVL(MAX(STK.QTSIWH2), 0) + NVL(MAX(PRD.QTSIWH9), 0) QTSIWH2 ,
       CASE WHEN MAX(NVL(STK.BOXQTY2, 0) + NVL(PRD.QTSIWH9, 0) - NVL(ORD.BOXQTY1, 0)) > 0 THEN 0  ELSE MAX(NVL(STK.BOXQTY2, 0) + NVL(PRD.QTSIWH9, 0) - NVL(ORD.BOXQTY1, 0)) END BOXQTY3 ,
       CASE WHEN MAX(NVL(STK.QTSIWH2, 0) + NVL(PRD.QTSIWH9, 0) - NVL(ORD.QTSIWH1, 0)) > 0 THEN 0  ELSE MAX(NVL(STK.QTSIWH2, 0) + NVL(PRD.QTSIWH9, 0) - NVL(ORD.QTSIWH1, 0)) END QTSIWH3 ,
       NVL(MAX(ASN.BOXQTY4), 0) BOXQTY4 ,
       NVL(MAX(ASN.QTSIWH4), 0) QTSIWH4 ,
       NVL(MAX(TRF.BOXQTY5), 0) BOXQTY5 ,
       NVL(MAX(TRF.QTSIWH5), 0) QTSIWH5 ,
       NVL(MAX(BLK.BOXQTY6), 0) BOXQTY6 ,
       NVL(MAX(BLK.QTSIWH6), 0) QTSIWH6 ,
       NVL(MAX(RCV.BOXQTY7), 0) BOXQTY7 ,
       NVL(MAX(RCV.QTSIWH7), 0) QTSIWH7 ,
       NVL(MAX(REQ.BOXQTY8), 0) BOXQTY8 ,
       NVL(MAX(REQ.QTSIWH8), 0) QTSIWH8 ,
       NVL(MAX(PRD.BOXQTY9), 0) BOXQTY9 ,
       NVL(MAX(PRD.QTSIWH9), 0) QTSIWH9 ,
       NVL(MAX(TOS.ORD_QTY), 0) AS QTYWH4_2,
       NVL(TRUNC(MAX(TOS.ORD_QTY) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH4_2,
       NVL(MAX(ORD.QTSIWH1), 0) + NVL(MAX(TOS.ORD_QTY), 0) AS QTYORD,
       NVL(MAX(ORD.BOXQTY1), 0) + NVL(TRUNC(MAX(TOS.ORD_QTY) / MAX(ORD.BXIQTY), 1), 0) AS BOXORD
  FROM (SELECT S.OWNRKY OWNRKY ,
               W.WAREKY WAREKY ,
               S.SKUKEY SKUKEY ,
               S.DESC01 DESC01 ,
               S.DESC04 DESC04 ,
               NVL(S.QTDUOM, 0) AS BXIQTY ,
               NVL(S.QTYSTD, 0) AS PLIQTY ,
               NVL(TRUNC((SUM(I.QTYREQ-I.WMSMGT-I.QTSHPD) / DECODE(S.QTDUOM, 0, NULL, S.QTDUOM)), 1 ) , 0) AS BOXQTY1 ,
               NVL(SUM(I.QTYREQ-I.WMSMGT-I.QTSHPD), 0 ) AS QTSIWH1
          FROM SKUMA S INNER JOIN SKUWC W ON S.OWNRKY = W.OWNRKY AND S.SKUKEY = W.SKUKEY 
                       LEFT OUTER JOIN (SELECT I.SVBELN, I.OWNRKY, I.WAREKY, I.SKUKEY, SUM(I.QTYREQ) AS QTYREQ, SUM(I.WMSMGT) AS WMSMGT, SUM(I.QTSHPD) AS QTSHPD
                                               ,I.PTNRTO, I.PTNROD
                                          FROM IFWMS113 I 
                                         WHERE 1=1 
                                           AND I.MANDT = 'SAP'
<if test="RANGESEARCH1 != null and RANGESEARCH1 != ''">
  ${RANGESEARCH1}
</if>
                                       
                                           
                                           AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267' ) 
                                           AND I.XSTAT = 'R'
                                           AND I.C00102 IN ('N', 'Y') 
                                         GROUP BY I.OWNRKY, I.WAREKY, I.SKUKEY, I.SVBELN, I.PTNRTO, I.PTNROD ) I ON S.OWNRKY = I.OWNRKY AND W.WAREKY = I.WAREKY AND S.SKUKEY = I.SKUKEY
                       LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY='0007'
                       LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
         WHERE 1 = 1
           AND S.SKUG01 != 'Z' 
<if test="RANGEITEM3 != null and RANGEITEM3 != ''">
  ${RANGEITEM3}
</if>
<if test="SKUG05 != ''">
   AND S.ASKU02 = #{SKUG05} 
</if>           
<if test="RANGEITEM2 != null and RANGEITEM2 != ''">
  ${RANGEITEM3}
</if>
<if test="RANGEITEM != ''">
   AND I.SVBELN 
   <if test="FLAG == 'NOT'">
    NOT IN   
  </if>   
   <if test="FLAG == 'IN'">
    IN   
  </if>   
    (SELECT SVBELN
           FROM IFWMS113 I 
          WHERE I.MANDT = 'SAP'
            AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267' )
            AND I.XSTAT = 'R'
            AND I.C00102 IN ('N','Y')
            AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0 
      <if test="RANGESEARCH1 != null and RANGESEARCH1 != ''">
        ${RANGESEARCH1}
      </if> 
      <if test="RANGEITEM != null and RANGEITEM != ''">
        ${RANGEITEM}
      </if> 
 
                                )      
   
</if>              

          
         GROUP BY S.OWNRKY , W.WAREKY , S.SKUKEY , S.DESC01 , S.DESC04 , S.QTDUOM, S.QTYSTD ) ORD 
       LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , M.DESC01 DESC01, 
                               NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY2 , 
                               SUM(S.QTSIWH) QTSIWH2 
                          FROM STKKY S INNER JOIN SKUMA M ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                       INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                         WHERE S.OWNRKY = #{OWNRKY}
                           AND S.AREAKY NOT IN ('SYS', 'SHP')
                           AND S.LOCAKY NOT IN ('SETLOC', '1J01101')
                           AND S.QTSIWH > 0
                           AND S.QTSALO = 0
                           AND S.QTSPMO = 0
                           AND S.QTSPMI = 0
                           AND S.QTSBLK = 0 
<if test="RANGE != null and RANGE != ''">
        ${RANGE}
</if>                           
                         GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, M.DESC01 ) STK ON ORD.OWNRKY = STK.OWNRKY AND ORD.WAREKY = STK.WAREKY AND ORD.SKUKEY = STK.SKUKEY 
       LEFT OUTER JOIN (SELECT H.OWNRKY AS OWNRKY , H.WAREKY AS WAREKY , I.SKUKEY AS SKUKEY , I.DESC01 AS DESC01, 
                               NVL( SUM(TRUNC( (I.QTYASN / DECODE(I.QTDUOM, 0, NULL, I.QTDUOM )), 1 )) , 0) AS BOXQTY4 , SUM(I.QTYASN) AS QTSIWH4
                          FROM ASNDH H INNER JOIN ASNDI I ON H.ASNDKY = I.ASNDKY
                         WHERE 1 = 1
                           AND I.STATIT = 'NEW'
                           AND H.STATDO NOT IN ('RCN')
                           AND H.DOCDAT > '20170401'
                         GROUP BY H.OWNRKY, H.WAREKY, I.SKUKEY, I.DESC01) ASN ON ORD.OWNRKY = ASN.OWNRKY AND ORD.WAREKY = ASN.WAREKY AND ORD.SKUKEY = ASN.SKUKEY 
       LEFT OUTER JOIN (SELECT I.OWNRKY OWNRKY , I.WARETG WAREKY , I.SKUKEY SKUKEY , I.DESC01 DESC01 , 
                               NVL( TRUNC( SUM((I.QTYTRF / DECODE(M.QTDUOM, 0, NULL, M.QTDUOM )) ) , 1 ) , 0) AS BOXQTY5 , SUM(I.QTYTRF) AS QTSIWH5
                          FROM TRFIT I INNER JOIN SKUMA M ON M.OWNRKY = I.OWNRKY
                           AND M.SKUKEY = I.SKUKEY
                         WHERE I.OWNRKY = #{OWNRKY}
                           AND I.STATIT = 'NEW'
                         GROUP BY I.OWNRKY, I.WARETG, I.SKUKEY, I.DESC01 ) TRF ON ORD.OWNRKY = TRF.OWNRKY AND ORD.WAREKY = TRF.WAREKY AND ORD.SKUKEY = TRF.SKUKEY 
       LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , S.DESC01 DESC01 , 
                               NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY6 , SUM(S.QTSIWH) QTSIWH6
                          FROM STKKY S INNER JOIN SKUMA M ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                       INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                         WHERE S.OWNRKY = #{OWNRKY}
                           AND S.AREAKY NOT IN ('SYS', 'SHP')
                           AND S.LOCAKY NOT IN ('SETLOC')
                           AND S.QTSIWH > 0
                           AND S.QTSBLK > 0
                           AND S.LOTA06 = '00'
                         GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, S.DESC01 ) BLK ON ORD.OWNRKY = BLK.OWNRKY AND ORD.WAREKY = BLK.WAREKY AND ORD.SKUKEY = BLK.SKUKEY 
       LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , S.DESC01 DESC01 , 
                               NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY7 , SUM(S.QTSIWH) QTSIWH7
                          FROM STKKY S INNER JOIN SKUMA M ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                       INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                         WHERE S.OWNRKY = #{OWNRKY}
                           AND S.AREAKY NOT IN ('SYS', 'SHP')
                           AND S.QTSIWH > 0
                           AND S.QTSALO = 0
                           AND S.QTSPMO = 0
                           AND S.QTSPMI = 0
                           AND S.QTSBLK = 0
                           AND S.LOTA06 = '00'
                           AND S.LOCAKY = 'RCVLOC'
                         GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, S.DESC01 ) RCV ON ORD.OWNRKY = RCV.OWNRKY AND ORD.WAREKY = RCV.WAREKY AND ORD.SKUKEY = RCV.SKUKEY 
       LEFT OUTER JOIN (SELECT SKUMA.OWNRKY, WAREKY, SKUMA.SKUKEY, SKUMA.DESC01 , 
                               NVL( TRUNC( (SUM(ORDQTY - ASNQTY - INNQTY) / DECODE(MAX(SKUMA.QTDUOM), 0, NULL, MAX(SKUMA.QTDUOM))), 1 ) , 0) AS BOXQTY8 , 
                               SUM(ORDQTY - ASNQTY - INNQTY) QTSIWH8
                          FROM IFWMS103 INNER JOIN SKUMA ON IFWMS103.OWNRKY = SKUMA.OWNRKY AND IFWMS103.SKUKEY = SKUMA.SKUKEY
                         WHERE 1 = 1
                           AND MANDT = 'SAP'
                           AND XSTAT = 'R'
                           AND ORDTYP !='002'
                           AND POCLOS = ' '
                           AND ORDQTY - ASNQTY - INNQTY > 0
                         GROUP BY SKUMA.OWNRKY, WAREKY, SKUMA.SKUKEY, SKUMA.DESC01 ) REQ ON ORD.OWNRKY = REQ.OWNRKY AND ORD.WAREKY = REQ.WAREKY AND ORD.SKUKEY = REQ.SKUKEY 
                        LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, SUM(QTYREQ) AS ORD_QTY
                                           FROM IFWMS113
                                          WHERE MANDT = 'SAP'
                                            AND OWNRKY = #{OWNRKY}
                                            AND WAREKY = #{WAREKY}
                                            AND C00102 = 'X'
                                            AND XSTAT  = 'R'
                                            AND DOCUTY IN ('211','212','213','214','215','216')
                                          GROUP BY WAREKY, SKUKEY) TOS ON ORD.WAREKY = TOS.WAREKY AND ORD.SKUKEY = TOS.SKUKEY
                        LEFT OUTER JOIN (SELECT IT.WARETG, IT.SKUKEY, TRUNC(NVL(SUM(NVL(IT.QTYRCV, 0)), 0) /  M.QTDUOM,0) AS BOXQTY9,
                                                 NVL(SUM(NVL(IT.QTYRCV, 0)), 0) AS QTSIWH9 
                                           FROM IFWMS403 IT INNER JOIN SKUMA M ON M.OWNRKY = IT.OWNRKY AND M.SKUKEY = IT.SKUKEY 
                                          WHERE IT.MANDT = 'POP'
                                            AND IT.OWNRKY = #{OWNRKY}
                                            AND IT.XSTAT  = 'R'
                                          GROUP BY IT.WARETG, IT.SKUKEY, M.QTDUOM) PRD ON PRD.WARETG = ORD.WAREKY AND PRD.SKUKEY = ORD.SKUKEY
 WHERE 1 = 1
 GROUP BY ORD.OWNRKY , ORD.WAREKY , ORD.SKUKEY , ORD.DESC01 , ORD.DESC04 
<if test="CHKMAK != '1'">
HAVING SUM(ORD.QTSIWH1) > 0 
</if>
<if test="CHKMAK == '1'">
HAVING ( SUM(STK.QTSIWH2) > 0 OR SUM(ASN.QTSIWH4) > 0  OR SUM(TRF.QTSIWH5) > 0 
         OR SUM(BLK.QTSIWH6) > 0  OR SUM(RCV.QTSIWH7) > 0  OR SUM(ORD.QTSIWH1) > 0 
         OR SUM(PRE.QTYPRE) > 0 OR SUM(TOS.ORD_QTY) > 0
</if>

 ORDER BY ORD.SKUKEY
  </select> 
    <!-- [DL99] 주문집계표(영업) : 아이템 조회 -->
  <select id="ORDER_SALES_ITEM_LIST" parameterType="hashmap" resultType="DataMap">

SELECT I.OWNRKY OWNRKY,
       I.WAREKY WAREKY,
       I.WARESR WARESR,
       I.WARESR WARESRNM,
       I.DOCUTY DOCUTY,
       DM.SHORTX DOCUTYNM,
       I.ORDTYP ORDTYP,
       I.ORDDAT ORDDAT,
       I.ERPCDT ERPCDT,
       I.SVBELN SVBELN,
       I.OTRQDT OTRQDT,
       I.PTNRTO PTNRTO,
       B.NAME01 PTNRTONM ,
       I.PTNROD PTNROD,
       B2.NAME01 PTNRODNM ,
       I.DIRDVY DIRDVY,
       I.DIRSUP DIRSUP,
       I.CUSRID CUSRID,
       I.CUNAME CUNAME,
       I.CUPOST CUPOST,
       I.CUNATN CUNATN,
       I.CUTEL1 CUTEL1,
       I.CUTEL2 CUTEL2,
       I.CUMAIL CUMAIL,
       I.CUADDR CUADDR,
       I.CTNAME CTNAME,
       I.CTTEL1 CTTEL1,
       I.SALENM SALENM,
       I.SALTEL SALTEL,
       I.TEXT01 TEXT01,
       I.MANDT  MANDT,
       I.SEQNO  SEQNO,
       I.CHKSEQ CHKSEQ,
       I.ORDSEQ ORDSEQ,
       I.SPOSNR SPOSNR,
       I.ERPCDT ERPCDT,
       I.ERPCTM ERPCTM,
       I.ERPMDT ERPMDT,
       I.WARETG WARETG,
       I.SKUKEY SKUKEY,
       SM.DESC01 DESC01,
       I.QTYORG QTYORG,
       I.QTYREQ QTYREQ,
       I.WMSMGT WMSMGT,
       I.QTSHPD QTSHPD,
       I.DUOMKY DUOMKY,
       NVL(SM.QTYSTD, 0) AS PLIQTY,
       NVL(SM.QTDUOM, 0) AS BXIQTY,
       NVL( TRUNC((I.QTYREQ) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) , 0) AS BOXQTY,
       NVL( TRUNC((I.QTYREQ) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) , 0) AS PLTQTY,
       NVL(MOD(I.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)), 0) AS REMQTY,
       I.NETPR  NETPR,
       I.SALDPT SALDPT,
       I.REFDKY REFDKY,
       I.REDKIT REDKIT,
       I.REDDAT REDDAT,
       I.STKNUM STKNUM,
       I.SDATBG SDATBG,
       I.SALEPR SALEPR,
       I.DISRAT DISRAT,
       I.SELLPR SELLPR,
       I.SELAMT SELAMT,
       I.VATAMT VATAMT,
       I.TEXT02 TEXT02,
       I.TEXT03 TEXT03,
       I.C00101 C00101,
       I.C00102 C00102,
       I.C00103 C00103,
       I.C00104 C00104,
       I.C00105 C00105,
       I.C00106 C00106,
       I.C00107 C00107,
       I.C00108 C00108,
       I.C00109 C00109,
       I.C00110 C00110,
       I.N00101 N00101,
       I.N00102 N00102,
       I.N00103 N00103,
       I.N00104 N00104,
       I.N00105 N00105,
       I.N00106 N00106,
       I.N00107 N00107,
       I.N00108 N00108,
       I.N00109 N00109,
       I.N00110 N00110,
       I.USRID1 USRID1,
       I.DEPTID1 DEPTID1,
       I.USRID2 USRID2,
       I.DEPTID2 DEPTID2,
       I.USRID3 USRID3,
       I.DEPTID3 DEPTID3,
       I.USRID4 USRID4,
       I.DEPTID4 DEPTID4,
       I.CREDAT CREDAT,
       I.CRETIM CRETIM,
       I.LMODAT LMODAT,
       I.LMOTIM LMOTIM,
       I.STATUS STATUS,
       I.TDATE TDATE,
       I.XSTAT XSTAT,
       I.ERTXT ERTXT
  FROM (SELECT I.* 
          FROM IFWMS113 I LEFT OUTER JOIN (
            SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
                             FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
                             WHERE 1 = 1
                             AND F.OWNRKY = #{OWNRKY}
                             AND F.WAREKY = #{WAREHOUSE}
<if test="RANGECAR != null and RANGECAR != ''">
  ${RANGECAR}
</if> 
                               
          ) C ON I.OWNRKY = C.OWNRKY AND I.PTNROD = C.PTNRKY
                          LEFT OUTER JOIN WAHMA WH ON WH.WAREKY = I.PTNRTO
          WHERE 1=1 
<if test="RANGESEARCH1 != null and RANGESEARCH1 != ''">
  ${RANGESEARCH1}
</if>
<if test="RANGEITEM != ''">
            AND I.SVBELN  
<if test="FLAG == 'NOT'">
NOT IN
</if>
<if test="FLAG == 'IN'">
IN
</if>
                          (SELECT SVBELN 
                             FROM IFWMS113 I INNER JOIN BZPTN B ON I.OWNRKY = B.OWNRKY AND I.PTNRTO = B.PTNRKY 
                                                               AND B.PTNRTY IN ('0001','0004')
                            WHERE I.STKNUM = ' '
                              AND I.DOCUTY IN ('211', '212', '213', '214', '216', '266', '267' )
                              AND I.XSTAT = 'R'
                              AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0   
<if test="RANGESEARCH1 != null and RANGESEARCH1 != ''">
  ${RANGESEARCH1}
</if>                              
<if test="RANGEITEM != null and RANGEITEM != ''">
  ${RANGESEARCH1}
</if>                              
                          )
</if>
 
            
       ) I INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
           INNER JOIN DOCTM DM ON DM.DOCUTY = I.DOCUTY 
           LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY = '0007'
           LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
           LEFT OUTER JOIN WAHMA W ON W.WAREKY = I.PTNRTO
 WHERE I.SKUKEY = #{SKUKEY}
   AND I.DOCUTY IN ('211','212','213','214','215','216','266','267')
   AND I.XSTAT = 'R'
   AND I.C00102 IN ('N','Y')
   AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0   
   
<if test="FLAG != ''">
 AND S.SKUG05 = #{SKUG05}
</if>  
 
  </select>   
  
    <!-- [DL19] 영업오더할당 : 헤더 조회 : Group Type = ERPSO -->
  <select id="DL19_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
      
      SELECT  A.KEY AS KEY     
            , A.SHPOKY  AS SHPOKY  
            , A.WAREKY  AS WAREKY  
            , A.WAREKYNM  AS WAREKYNM
            , A.STATDO  AS STATDO  
            , A.STATDONM  AS STATDONM
            , A.ALSTKY  AS ALSTKY  
            , A.DPTNKY  AS DPTNKY  
            , A.DPTNKYNM  AS DPTNKYNM
            , A.PTRCVR  AS PTRCVR  
            , A.PTRCVRNM  AS PTRCVRNM
            , A.PGRC01  AS PGRC01  
            , A.PGRC05  AS PGRC05  
            , A.PTNBLK  AS PTNBLK  
            , A.DOCDAT  AS DOCDAT  
            , A.DOCCAT  AS DOCCAT  
            , A.DOCCATNM  AS DOCCATNM
            , A.SHPMTY  AS SHPMTY  
            , A.SHPMTYNM  AS SHPMTYNM
            , A.DOCUTY  AS DOCUTY  
            , MAX(A.RQSHPD)  AS RQSHPD  
            , MAX(A.RQARRD)  AS RQARRD  
            , MAX(A.RQARRT)  AS RQARRT  
            , A.SVBELN  AS SVBELN  
            , A.OWNRKY  AS OWNRKY  
            , A.WARESR  AS WARESR  
            , MAX(A.WARETG) AS WARETG  
            , MAX(A.DOCTXT)  AS DOCTXT  
            , A.USRID1  AS USRID1  
            , A.UNAME1  AS UNAME1  
            , A.DEPTID1 AS DEPTID1 
            , A.DNAME1  AS DNAME1  
            , A.USRID2  AS USRID2  
            , A.UNAME2  AS UNAME2  
            , A.UNAME4  AS UNAME4  
            , A.DNAME4  AS DNAME4  
            , A.PGRC02  AS DIRDVY  
            , A.PGRC03  AS DIRSUP   
            , A.PGRC02  AS PGRC02  
            , A.PGRC03  AS PGRC03 
            , A.PGRC04  AS PGRC04  
            , SUM(A.ITEMCOUNT)  AS ITEMCOUNT  
            , SUM(A.QTAPPO) AS QTAPPO     
            , A.CARNUM  AS CARNUM   
            , MAX(A.XDATS)  AS XDATS   
            , MAX(A.XTIMS) AS XTIMS    
            , MAX(A.C00104) AS C00104   
            , MAX(A.CREUSR) AS CREUSR
            , A.C00107  AS C00107  
            , SUM(A.QTJWGT) AS QTJWGT
            , SUM(A.PLTQTY) AS PLTQTY    
            , A.WARETG AS WARETG 
            , A.FILEDN AS FILEDN
<!--             , ROUND(SUM(QTYORG / QTYSTD), 3) AS PLTQTY -->
<!-- 	       	, SUM(OBOXQTY) AS DLBOX -->
<!-- 	       	, SUM(RBOXQTY) AS DLBIX -->
<!-- 	       	, ROUND(SUM(A.QTYORG / A.QTYSTD), 3) AS PLTQTY -->
	       	, SUM(OBOXQTY) AS DLBOX
	       	, SUM(RBOXQTY) AS DLBIX
        FROM (
               SELECT /*+ ORDERED */ IF.SVBELN AS KEY,
                      ' ' AS SHPOKY,
                      IF.WAREKY AS WAREKY,
                      WH.NAME01 AS WAREKYNM,
                      'NEW' AS STATDO,
                      ST.CDESC1 AS STATDONM,
                      ' ' AS ALSTKY,
                      DECODE(IF.DOCUTY, '266', IF.WARETG, IF.PTNROD) AS DPTNKY,
                      DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = IF.WARETG), ' '), BZ2.NAME01) AS DPTNKYNM,
                      IF.PTNRTO AS PTRCVR,
                      DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = IF.PTNRTO), ' '), BZ.NAME01) AS PTRCVRNM,
               
                      NVL(SP.REGNKY, ' ') AS PGRC01,
                      ' ' AS PGRC05,
                      ' ' AS PTNBLK,
                      DECODE(IF.OWNRKY, '2200', IF.ORDDAT, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS DOCDAT,
                      '200' AS DOCCAT,
                      DC.SHORTX AS DOCCATNM,
                      IF.DOCUTY AS SHPMTY,
                      D.SHORTX AS SHPMTYNM,
                      IF.DOCUTY AS DOCUTY,
                      IF.OTRQDT AS RQSHPD,
                      MAX(IF.ERPCDT) AS RQARRD,
                      MAX(IF.ERPCTM) AS RQARRT,
                      IF.SVBELN AS SVBELN,
                      IF.OWNRKY AS OWNRKY,
                      IF.WARESR AS WARESR,
                      CASE WHEN IF.DOCUTY = '266' THEN  IF.WARETG
                           WHEN IF.DOCUTY = '267' THEN  IF.WARETG
                           ELSE IF.WAREKY
                       END AS WARETG,
                      MAX(TEXT01) AS DOCTXT,
                      NVL(MAX(IF.CUPOST), ' ') AS USRID1,
                      NVL(MAX(IF.CUADDR), ' ') AS UNAME1,
                      NVL(MAX(IF.CTNAME), ' ') AS DEPTID1,
                      NVL(MAX(IF.CTTEL1), ' ') AS DNAME1,
                      NVL(MAX(IF.CUTEL2), ' ') AS USRID2,
                      NVL(MAX(IF.CUNAME), ' ') AS UNAME2,
                      NVL(MAX(IF.SALENM), ' ') AS UNAME4,
                      NVL(MAX(IF.SALTEL), ' ') AS DNAME4,
                      NVL(MAX(DIRDVY), ' ') AS PGRC02,
                      NVL(MAX(DIRSUP), ' ') AS PGRC03,
                      NVL(MAX(IF.WARESR), ' ') AS PGRC04,
                      SUM(TRUNC(IF.QTYORG/ DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1)) ITEMCOUNT,
                      SUM(TRUNC(IF.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1)) QTAPPO,
                      NVL(C.CARNUM, ' ') AS CARNUM,
               /*
                      MAX(IF.XDATS)           AS XDATS,
                      MAX(IF.XTIMS)           AS XTIMS,
               */
                      CASE WHEN (MAX(IF.XDATS) IS NULL OR MAX(IF.XDATS) = '' OR MAX(IF.XDATS) = ' ') THEN MAX(IF.CREDAT) ELSE MAX(IF.XDATS) END AS XDATS,
                      CASE WHEN (MAX(IF.XTIMS) IS NULL OR MAX(IF.XTIMS) = '' OR MAX(IF.XTIMS) = ' ') THEN MAX(IF.CRETIM) ELSE MAX(IF.XTIMS) END AS XTIMS,
                      MAX(IF.C00104)          AS C00104,
                      MAX(IF.USRID1) AS CREUSR,
                      MAX(IF.C00107)          AS C00107,
                      SUM(SM.NETWGT)  AS QTJWGT,
                      ROUND(SUM(IF.QTYORG / SM.QTYSTD), 3) AS PLTQTY,                     
                     (CASE WHEN NVL(OM.XLS_REAL_PATH,'**') LIKE 'S%' THEN '다운로드' ELSE ' ' END) AS FILEDN,
                      IF.QTYORG AS QTYORG,
                     SM.QTYSTD AS QTYSTD,
                     TRUNC(IF.QTYORG / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) OBOXQTY,
	               	 TRUNC(IF.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) RBOXQTY
              
                FROM IFWMS113 IF INNER JOIN SKUMA SM ON SM.OWNRKY = IF.OWNRKY AND SM.SKUKEY = IF.SKUKEY
                     INNER JOIN DOCTM D ON D.DOCUTY = IF.DOCUTY 
                     LEFT OUTER JOIN WAHMA WH ON WH.WAREKY = IF.WAREKY
                     LEFT OUTER JOIN CMCDV ST ON ST.CMCDKY = 'STATDO' AND ST.CMCDVL = 'NEW'
                     LEFT OUTER JOIN BZPTN BZ ON BZ.OWNRKY = IF.OWNRKY AND BZ.PTNRKY = IF.PTNRTO AND BZ.PTNRTY = '0007'
                     LEFT OUTER JOIN BZPTN BZ2 ON BZ2.OWNRKY = IF.OWNRKY AND BZ2.PTNRKY = IF.PTNROD AND BZ2.PTNRTY = '0001'
                     LEFT OUTER JOIN SHPMA SP ON SP.OWNRKY = IF.OWNRKY AND SP.POSTCD=IF.CUPOST
                     LEFT OUTER JOIN WAHMA W ON W.WAREKY = IF.PTNRTO
                     LEFT OUTER JOIN DOCCM DC ON DC.DOCCAT = '200'
                     LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
                                  ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
                     LEFT OUTER JOIN SA_ORDER_MST@WMSTOTOS OM ON OM.COMP_CD = IF.USRID3 AND OM.ORD_NO = IF.SVBELN
               WHERE IF.XSTAT = 'R'
               AND IF.STKNUM = ' '
               AND IF.OWNRKY = #{OWNRKY}
               AND IF.WAREKY = #{WAREKY}
               AND IF.C00102 = 'Y'
               AND IF.QTYREQ > IF.WMSMGT + IF.QTSHPD
        <if test="GRPRL == 'ERPSO'">
          AND IF.DOCUTY IN ('211','212','213','214','215','216','270')
        </if>           
        <if test="GRPRL == 'TOTAL'">
          AND IF.DOCUTY IN ('299')
        </if>           
        <if test="GRPRL == 'MOVE'">
          AND IF.DOCUTY IN ('266','267')
            AND IF.CHKSEQ != ' ' 
            AND IF.QTYREQ-IF.WMSMGT-IF.QTSHPD > 0
        </if>           
            AND IF.C00102 ='Y'
        <if test="RANGE_SQL != null and RANGE_SQL != ''">
          ${RANGE_SQL}
        </if>             
        <if test="RANGEITEM != ''">
          AND IF.SVBELN  <if test="FLAG == 'NOT'"> NOT IN </if>  
                         <if test="FLAG == 'IN'">  IN </if>  
                 (SELECT IF.SVBELN FROM IFWMS113 IF WHERE IF.XSTAT = 'R' AND IF.STKNUM = ' '
                                                      AND IF.OWNRKY = #{OWNRKY} AND IF.WAREKY = #{WAREKY}
        
            <if test="RANGEITEM != null and RANGEITEM != ''">
              ${RANGEITEM}
            </if>  
             )
        </if>                  
                GROUP BY IF.SVBELN, IF.WAREKY, WH.NAME01, ST.CDESC1, IF.DOCUTY, IF.PTNRTO, BZ.NAME01, IF.PTNROD, BZ2.NAME01, IF.ORDDAT,
                         SP.REGNKY, DC.SHORTX, D.SHORTX, IF.OTRQDT, IF.C00102,  IF.OWNRKY, IF.WARETG, BZ.NATNKY, IF.WARESR, IF.WARETG, 
                         C.CARNUM, OM.XLS_REAL_PATH, IF.QTYORG, SM.QTYSTD, SM.QTDUOM, IF.QTYREQ
                ORDER BY IF.SVBELN
              ) A
          GROUP BY A.KEY
                 , A.SHPOKY
                 , A.WAREKY
                 , A.WAREKYNM
                 , A.STATDO
                 , A.STATDONM
                 , A.ALSTKY
                 , A.DPTNKY
                 , A.DPTNKYNM
                 , A.PTRCVR
                 , A.PTRCVRNM
                 , A.PGRC01
                 , A.PGRC05
                 , A.PTNBLK
                 , A.DOCDAT
                 , A.DOCCAT
                 , A.DOCCATNM
                 , A.SHPMTY
                 , A.SHPMTYNM
                 , A.DOCUTY
                 , A.SVBELN
                 , A.OWNRKY
                 , A.WARESR
                 , A.USRID1
                 , A.UNAME1
                 , A.DEPTID1
                 , A.DNAME1
                 , A.USRID2
                 , A.UNAME2
                 , A.UNAME4
                 , A.DNAME4
                 , A.PGRC02
                 , A.PGRC03
                 , A.PGRC04
                 , A.C00104
                 , A.CREUSR
                 , A.C00107
                 , A.WARETG
                 , A.FILEDN
  </select> 
  
    <!-- [DL01] 영업오더할당 : 헤더 조회 : Group Type = ERPSO -->
  <select id="DL01_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
      
      SELECT  A.KEY AS KEY     
            , A.SHPOKY  AS SHPOKY  
            , A.WAREKY  AS WAREKY  
            , A.WAREKYNM  AS WAREKYNM
            , A.STATDO  AS STATDO  
            , A.STATDONM  AS STATDONM
            , A.ALSTKY  AS ALSTKY  
            , A.DPTNKY  AS DPTNKY  
            , A.DPTNKYNM  AS DPTNKYNM
            , A.PTRCVR  AS PTRCVR  
            , A.PTRCVRNM  AS PTRCVRNM
            , A.PGRC01  AS PGRC01  
            , A.PGRC05  AS PGRC05  
            , A.PTNBLK  AS PTNBLK  
            , A.DOCDAT  AS DOCDAT  
            , A.DOCCAT  AS DOCCAT  
            , A.DOCCATNM  AS DOCCATNM
            , A.SHPMTY  AS SHPMTY  
            , A.SHPMTYNM  AS SHPMTYNM
            , A.DOCUTY  AS DOCUTY  
            , MAX(A.RQSHPD)  AS RQSHPD  
            , MAX(A.RQARRD)  AS RQARRD  
            , MAX(A.RQARRT)  AS RQARRT  
            , A.SVBELN  AS SVBELN  
            , A.OWNRKY  AS OWNRKY  
            , A.WARESR  AS WARESR  
            , MAX(A.WARETG) AS WARETG  
            , MAX(A.DOCTXT)  AS DOCTXT  
            , A.USRID1  AS USRID1  
            , A.UNAME1  AS UNAME1  
            , A.DEPTID1 AS DEPTID1 
            , A.DNAME1  AS DNAME1  
            , A.USRID2  AS USRID2  
            , A.UNAME2  AS UNAME2  
            , A.UNAME4  AS UNAME4  
            , A.DNAME4  AS DNAME4  
            , A.PGRC02  AS DIRDVY  
            , A.PGRC03  AS DIRSUP   
            , A.PGRC02  AS PGRC02  
            , A.PGRC03  AS PGRC03 
            , A.PGRC04  AS PGRC04  
            , SUM(A.ITEMCOUNT)  AS ITEMCOUNT  
            , SUM(A.QTAPPO) AS QTAPPO     
            , A.CARNUM  AS CARNUM   
            , MAX(A.XDATS)  AS XDATS   
            , MAX(A.XTIMS) AS XTIMS    
            , MAX(A.C00104) AS C00104   
            , MAX(A.CREUSR) AS CREUSR
            , A.C00107  AS C00107  
            , SUM(A.QTJWGT) AS QTJWGT
            , SUM(A.PLTQTY) AS PLTQTY    
            , A.WARETG AS WARETG 
            , A.FILEDN AS FILEDN
<!--             , ROUND(SUM(QTYORG / QTYSTD), 3) AS PLTQTY -->
<!-- 	       	, SUM(OBOXQTY) AS DLBOX -->
<!-- 	       	, SUM(RBOXQTY) AS DLBIX -->
<!-- 	       	, ROUND(SUM(A.QTYORG / A.QTYSTD), 3) AS PLTQTY -->
	       	, SUM(OBOXQTY) AS DLBOX
	       	, SUM(RBOXQTY) AS DLBIX
        FROM (
               SELECT /*+ ORDERED */ IF.SVBELN AS KEY,
                      ' ' AS SHPOKY,
                      IF.WAREKY AS WAREKY,
                      IF.SKUKEY AS SKUKEY,
                      WH.NAME01 AS WAREKYNM,
                      'NEW' AS STATDO,
                      ST.CDESC1 AS STATDONM,
                      ' ' AS ALSTKY,
                      DECODE(IF.DOCUTY, '266', IF.WARETG, IF.PTNROD) AS DPTNKY,
                      DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = IF.WARETG), ' '), BZ2.NAME01) AS DPTNKYNM,
                      IF.PTNRTO AS PTRCVR,
                      DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = IF.PTNRTO), ' '), BZ.NAME01) AS PTRCVRNM,
               
                      NVL(SP.REGNKY, ' ') AS PGRC01,
                      ' ' AS PGRC05,
                      ' ' AS PTNBLK,
                      DECODE(IF.OWNRKY, '2200', IF.ORDDAT, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS DOCDAT,
                      '200' AS DOCCAT,
                      DC.SHORTX AS DOCCATNM,
                      IF.DOCUTY AS SHPMTY,
                      D.SHORTX AS SHPMTYNM,
                      IF.DOCUTY AS DOCUTY,
                      IF.OTRQDT AS RQSHPD,
                      MAX(IF.ERPCDT) AS RQARRD,
                      MAX(IF.ERPCTM) AS RQARRT,
                      IF.SVBELN AS SVBELN,
                      IF.OWNRKY AS OWNRKY,
                      IF.WARESR AS WARESR,
                      CASE WHEN IF.DOCUTY = '266' THEN  IF.WARETG
                           WHEN IF.DOCUTY = '267' THEN  IF.WARETG
                           ELSE IF.WAREKY
                       END AS WARETG,
                      MAX(TEXT01) AS DOCTXT,
                      NVL(MAX(IF.CUPOST), ' ') AS USRID1,
                      NVL(MAX(IF.CUADDR), ' ') AS UNAME1,
                      NVL(MAX(IF.CTNAME), ' ') AS DEPTID1,
                      NVL(MAX(IF.CTTEL1), ' ') AS DNAME1,
                      NVL(MAX(IF.CUTEL2), ' ') AS USRID2,
                      NVL(MAX(IF.CUNAME), ' ') AS UNAME2,
                      NVL(MAX(IF.SALENM), ' ') AS UNAME4,
                      NVL(MAX(IF.SALTEL), ' ') AS DNAME4,
                      NVL(MAX(DIRDVY), ' ') AS PGRC02,
                      NVL(MAX(DIRSUP), ' ') AS PGRC03,
                      NVL(MAX(IF.WARESR), ' ') AS PGRC04,
                      SUM(TRUNC(IF.QTYORG/ DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1)) ITEMCOUNT,
                      SUM(TRUNC(IF.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1)) QTAPPO,
                      NVL(C.CARNUM, ' ') AS CARNUM,
               /*
                      MAX(IF.XDATS)           AS XDATS,
                      MAX(IF.XTIMS)           AS XTIMS,
               */
                      CASE WHEN (MAX(IF.XDATS) IS NULL OR MAX(IF.XDATS) = '' OR MAX(IF.XDATS) = ' ') THEN MAX(IF.CREDAT) ELSE MAX(IF.XDATS) END AS XDATS,
                      CASE WHEN (MAX(IF.XTIMS) IS NULL OR MAX(IF.XTIMS) = '' OR MAX(IF.XTIMS) = ' ') THEN MAX(IF.CRETIM) ELSE MAX(IF.XTIMS) END AS XTIMS,
                      MAX(IF.C00104)          AS C00104,
                      MAX(IF.USRID1) AS CREUSR,
                      MAX(IF.C00107)          AS C00107,
                      SUM(SM.NETWGT)  AS QTJWGT,
                      ROUND(SUM(IF.QTYORG / SM.QTYSTD), 3) AS PLTQTY,                     
                     (CASE WHEN NVL(OM.XLS_REAL_PATH,'**') LIKE 'S%' THEN '다운로드' ELSE ' ' END) AS FILEDN,
                      IF.QTYORG AS QTYORG,
                     SM.QTYSTD AS QTYSTD,
                     TRUNC(IF.QTYORG / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) OBOXQTY,
	               	 TRUNC(IF.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) RBOXQTY
              
                FROM IFWMS113 IF INNER JOIN SKUMA SM ON SM.OWNRKY = IF.OWNRKY AND SM.SKUKEY = IF.SKUKEY
                     INNER JOIN DOCTM D ON D.DOCUTY = IF.DOCUTY 
                     LEFT OUTER JOIN WAHMA WH ON WH.WAREKY = IF.WAREKY
                     LEFT OUTER JOIN CMCDV ST ON ST.CMCDKY = 'STATDO' AND ST.CMCDVL = 'NEW'
                     LEFT OUTER JOIN BZPTN BZ ON BZ.OWNRKY = IF.OWNRKY AND BZ.PTNRKY = IF.PTNRTO AND BZ.PTNRTY = '0007'
                     LEFT OUTER JOIN BZPTN BZ2 ON BZ2.OWNRKY = IF.OWNRKY AND BZ2.PTNRKY = IF.PTNROD AND BZ2.PTNRTY = '0001'
                     LEFT OUTER JOIN SHPMA SP ON SP.OWNRKY = IF.OWNRKY AND SP.POSTCD=IF.CUPOST
                     LEFT OUTER JOIN WAHMA W ON W.WAREKY = IF.PTNRTO
                     LEFT OUTER JOIN DOCCM DC ON DC.DOCCAT = '200'
                     LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
                                  ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
                     LEFT OUTER JOIN SA_ORDER_MST@WMSTOTOS OM ON OM.COMP_CD = IF.USRID3 AND OM.ORD_NO = IF.SVBELN
               WHERE IF.XSTAT = 'R'
               AND IF.STKNUM = ' '
               AND IF.OWNRKY = #{OWNRKY}
               AND IF.WAREKY = #{WAREKY}
               AND IF.C00102 = 'Y'
               AND IF.QTYREQ > IF.WMSMGT + IF.QTSHPD
        <if test="GRPRL == 'ERPSO'">
          AND IF.DOCUTY IN ('211','212','213','214','215','216','270')
        </if>           
        <if test="GRPRL == 'TOTAL'">
          AND IF.DOCUTY IN ('299')
        </if>           
        <if test="GRPRL == 'MOVE'">
          AND IF.DOCUTY IN ('266','267')
            AND IF.CHKSEQ != ' ' 
            AND IF.QTYREQ-IF.WMSMGT-IF.QTSHPD > 0
        </if>           
            AND IF.C00102 ='Y'
        <if test="RANGE_SQL != null and RANGE_SQL != ''">
          ${RANGE_SQL}
        </if>             
        <if test="RANGEITEM != ''">
          AND IF.SVBELN  <if test="FLAG == 'NOT'"> NOT IN </if>  
                         <if test="FLAG == 'IN'">  IN </if>  
                 (SELECT IF.SVBELN FROM IFWMS113 IF WHERE IF.XSTAT = 'R' AND IF.STKNUM = ' '
                                                      AND IF.OWNRKY = #{OWNRKY} AND IF.WAREKY = #{WAREKY}
        
            <if test="RANGEITEM != null and RANGEITEM != ''">
              ${RANGEITEM}
            </if>  
             )
        </if>                  
                GROUP BY IF.SVBELN, IF.WAREKY, WH.NAME01, ST.CDESC1, IF.DOCUTY, IF.PTNRTO, BZ.NAME01, IF.PTNROD, BZ2.NAME01, IF.ORDDAT,
                         SP.REGNKY, DC.SHORTX, D.SHORTX, IF.OTRQDT, IF.C00102,  IF.OWNRKY, IF.WARETG, BZ.NATNKY, IF.WARESR, IF.WARETG, 
                         C.CARNUM, OM.XLS_REAL_PATH, IF.QTYORG, SM.QTYSTD, SM.QTDUOM, IF.QTYREQ, IF.SKUKEY
                ORDER BY IF.SVBELN
              ) A
          GROUP BY A.KEY
                 , A.SHPOKY
                 , A.WAREKY
                 , A.WAREKYNM
                 , A.STATDO
                 , A.STATDONM
                 , A.ALSTKY
                 , A.DPTNKY
                 , A.DPTNKYNM
                 , A.PTRCVR
                 , A.PTRCVRNM
                 , A.PGRC01
                 , A.PGRC05
                 , A.PTNBLK
                 , A.DOCDAT
                 , A.DOCCAT
                 , A.DOCCATNM
                 , A.SHPMTY
                 , A.SHPMTYNM
                 , A.DOCUTY
                 , A.SVBELN
                 , A.OWNRKY
                 , A.WARESR
                 , A.USRID1
                 , A.UNAME1
                 , A.DEPTID1
                 , A.DNAME1
                 , A.USRID2
                 , A.UNAME2
                 , A.UNAME4
                 , A.DNAME4
                 , A.PGRC02
                 , A.PGRC03
                 , A.PGRC04
                 , A.CARNUM
                 , A.C00104
                 , A.CREUSR
                 , A.C00107
                 , A.WARETG
                 , A.FILEDN
  </select> 
  
    <!-- [DL01] 영업오더할당 : 아이템 조회 : Group Type = ERPSO -->
  <select id="DL01_ITEM_LIST" parameterType="hashmap" resultType="DataMap">

    SELECT /*+ ORDERED */IF.SVBELN AS KEY, 
           ' ' AS SHPOKY,
           ' ' AS SHPOIT,
           'NEW' AS STATIT,
           IF.WARESR AS WARESR,
           IF.WARETG AS WARETG,
           F_SDW_ALSTKY( IF.OWNRKY, IF.WAREKY, NVL(IF.DOCUTY,' '), NVL(IF.WARESR,' ') , NVL(IF.PTNRTO,' '),  NVL(BZ.NATNKY,' '), NVL(IF.DIRSUP,' '), NVL(BZ.PTNG02,' '), NVL(BZ.PTNG03,' '), NVL(BZ.EXPTNK,' '), NVL(IF.DIRDVY,' ')) AS ALSTKY,
           IF.QTYORG AS QTYORG,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTSHPO,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTALLM,
           0 AS QTJCMP,
           0 AS QTSHPD,
           0 AS QTSHPC,
           SW.MEASKY AS MEASKY,
           IF.SKUKEY AS SKUKEY,
           SM.DESC01 AS DESC01,
           SM.DESC02 AS DESC02,
           IF.DUOMKY AS UOMKEY,
           1 AS QTPUOM,
           SM.DUOMKY AS DUOMKY,
           SM.QTDUOM AS QTDUOM,
           F_PRE_QTYPRE(IF.OWNRKY, IF.WAREKY, IF.SKUKEY) AS QTYPRE,
           IF.SVBELN AS REFDKY,
           IF.SPOSNR AS REFDIT,
           ' ' AS REFCAT,
           TO_CHAR(SYSDATE,'YYYYMMDD') AS REFDAT,
           SM.ASKU01 AS ASKU01,
           SM.ASKU02 AS ASKU02,
           SM.ASKU03 AS ASKU03,
           SM.ASKU04 AS ASKU04,
           SM.ASKU05 AS ASKU05,
           SM.EANCOD AS EANCOD,
           SM.GTINCD AS GTINCD,
           SM.SKUG01 AS SKUG01,
           SM.SKUG02 AS SKUG02,
           SM.SKUG03 AS SKUG03,
           SM.SKUG04 AS SKUG04,
           SM.SKUG05 AS SKUG05,
           SM.GRSWGT AS GRSWGT,
           SM.NETWGT AS NETWGT,
           SM.WGTUNT AS WGTUNT,
           SM.LENGTH AS LENGTH,
           SM.WIDTHW AS WIDTHW,
           SM.HEIGHT AS HEIGHT,
           SM.CUBICM AS CUBICM,
           SM.CAPACT AS CAPACT,
           ' ' AS LOTA01,
           ' ' AS LOTA02,
           ' ' AS LOTA03,
           ' ' AS LOTA04,
           ' ' AS LOTA05,
           ' ' AS LOTA06,
           ' ' AS LOTA07,
           ' ' AS LOTA08,
           ' ' AS LOTA09,
           ' ' AS LOTA10,
           ' ' AS LOTA11,
           ' ' AS LOTA12,
           ' ' AS LOTA13,
           ' ' AS LOTA14,
           ' ' AS LOTA15,
           0 AS LOTA16,
           0 AS LOTA17,
           0 AS LOTA18,
           0 AS LOTA19,
           0 AS LOTA20,
           IF.SEQNO AS AWMSNO,
           IF.MANDT AS SMANDT,
           IF.SVBELN AS SVBELN,
           IF.SPOSNR AS SPOSNR,
           IF.REFDKY AS STRAID,
           SW.OBPROT AS OBLKYN,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           DECODE(NVL(ROUND((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / SM.QTYSTD, 2), 0), 0, ' ', TO_CHAR(NVL(ROUND((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / SM.QTYSTD, 2), 0),  'FM999990.000')) AS PLTQTY,
           DECODE(NVL(ROUND((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / SM.QTDUOM, 1), 0), 0, ' ', TO_CHAR(NVL(ROUND((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / SM.QTDUOM, 1), 0),  'FM999990.00')) AS BOXQTY,
           NVL(MOD(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
           NVL(SM.GRSWGT,0) * NVL(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD,0)  AS GRSWGT,
           NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
           IF.TEXT01 AS NAME01,
           0 AS QTALOC,
           IF.QTYORG AS QTUALO,
           CASE IF.OWNRKY WHEN '2200' THEN NVL(C.CARNUM, ' ') ELSE ' ' END AS SXBLNR,
           CASE IF.OWNRKY WHEN '2200' THEN 1 ELSE 0 END AS SZEILE 
      FROM IFWMS113 IF INNER JOIN SKUMA SM ON SM.OWNRKY = IF.OWNRKY AND SM.SKUKEY = IF.SKUKEY
                       INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY
                       LEFT OUTER JOIN BZPTN BZ ON BZ.PTNRKY = IF.PTNRTO AND BZ.PTNRTY = '0007' AND BZ.OWNRKY = IF.OWNRKY
                       LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
                                    ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
    WHERE  IF.XSTAT = 'R'
       AND IF.C00102 != 'X'
       AND IF.OWNRKY = #{OWNRKY}
       AND IF.WAREKY = #{WAREKY}
       AND IF.QTYREQ > IF.WMSMGT + IF.QTSHPD
       AND IF.SVBELN = #{SVBELN}
       <if test="RANGE_SQL != null and RANGE_SQL != ''">
          ${RANGE_SQL}
        </if>                                
    <if test="PROGID == 'DL01'">
        AND EXISTS (SELECT 1 FROM DOCTM WHERE DOCUTY IN ('211','212','213','214','215','216','270') AND DOCUTY = IF.DOCUTY)
          AND IF.C00102 = 'Y'
    </if> 
    <if test="PROGID == 'DL09'">
        AND EXISTS (SELECT 1 FROM DOCTM WHERE DOCUTY IN ('211','212','213','214','215','216','270') AND DOCUTY = IF.DOCUTY)
          AND IF.C00102 = 'Y'
    </if> 
    <if test="PROGID == 'DL19'">
        AND IF.DOCUTY IN ('266','267' )
          AND IF.C00102 = 'Y'
    </if> 
    <if test="PROGID == 'DL20'">
        AND IF.DOCUTY IN ('266','267' )
          AND IF.C00102 = 'Y'
    </if> 
    <if test="PROGID == 'DL20'">
        AND IF.DOCUTY IN ('266','267' )
          AND IF.C00102 = 'Y'
    </if>     
    <if test="TOTALPICKING == 'Y'">
        AND IF.STKNUM &lt;&gt; ' '
    </if> 
    <if test="TOTALPICKING == 'N'">
        AND IF.STKNUM = ' '
    </if> 
    
     ORDER BY IF.SPOSNR
    

  </select> 
  
  
  
    <!-- [DL19] 영업오더할당 : 아이템 조회 : Group Type = ERPSO -->
  <select id="DL19_ITEM_LIST" parameterType="hashmap" resultType="DataMap">

    SELECT /*+ ORDERED */IF.SVBELN AS KEY, 
           ' ' AS SHPOKY,
           ' ' AS SHPOIT,
           'NEW' AS STATIT,
           IF.WARESR AS WARESR,
           IF.WARETG AS WARETG,
           F_SDW_ALSTKY( IF.OWNRKY, IF.WAREKY, NVL(IF.DOCUTY,' '), NVL(IF.WARESR,' ') , NVL(IF.PTNRTO,' '),  NVL(BZ.NATNKY,' '), NVL(IF.DIRSUP,' '), NVL(BZ.PTNG02,' '), NVL(BZ.PTNG03,' '), NVL(BZ.EXPTNK,' '), NVL(IF.DIRDVY,' ')) AS ALSTKY,
           IF.QTYORG AS QTYORG,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTSHPO,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTALLM,
           0 AS QTJCMP,
           0 AS QTSHPD,
           0 AS QTSHPC,
           SW.MEASKY AS MEASKY,
           IF.SKUKEY AS SKUKEY,
           SM.DESC01 AS DESC01,
           SM.DESC02 AS DESC02,
           IF.DUOMKY AS UOMKEY,
           1 AS QTPUOM,
           SM.DUOMKY AS DUOMKY,
           SM.QTDUOM AS QTDUOM,
           F_PRE_QTYPRE(IF.OWNRKY, IF.WAREKY, IF.SKUKEY) AS QTYPRE,
           IF.SVBELN AS REFDKY,
           IF.SPOSNR AS REFDIT,
           ' ' AS REFCAT,
           TO_CHAR(SYSDATE,'YYYYMMDD') AS REFDAT,
           SM.ASKU01 AS ASKU01,
           SM.ASKU02 AS ASKU02,
           SM.ASKU03 AS ASKU03,
           SM.ASKU04 AS ASKU04,
           SM.ASKU05 AS ASKU05,
           SM.EANCOD AS EANCOD,
           SM.GTINCD AS GTINCD,
           SM.SKUG01 AS SKUG01,
           SM.SKUG02 AS SKUG02,
           SM.SKUG03 AS SKUG03,
           SM.SKUG04 AS SKUG04,
           SM.SKUG05 AS SKUG05,
           SM.GRSWGT AS GRSWGT,
           SM.NETWGT AS NETWGT,
           SM.WGTUNT AS WGTUNT,
           SM.LENGTH AS LENGTH,
           SM.WIDTHW AS WIDTHW,
           SM.HEIGHT AS HEIGHT,
           SM.CUBICM AS CUBICM,
           SM.CAPACT AS CAPACT,
           ' ' AS LOTA01,
           ' ' AS LOTA02,
           ' ' AS LOTA03,
           ' ' AS LOTA04,
           ' ' AS LOTA05,
           ' ' AS LOTA06,
           ' ' AS LOTA07,
           ' ' AS LOTA08,
           ' ' AS LOTA09,
           ' ' AS LOTA10,
           ' ' AS LOTA11,
           ' ' AS LOTA12,
           ' ' AS LOTA13,
           ' ' AS LOTA14,
           ' ' AS LOTA15,
           0 AS LOTA16,
           0 AS LOTA17,
           0 AS LOTA18,
           0 AS LOTA19,
           0 AS LOTA20,
           IF.SEQNO AS AWMSNO,
           IF.MANDT AS SMANDT,
           IF.SVBELN AS SVBELN,
           IF.SPOSNR AS SPOSNR,
           IF.REFDKY AS STRAID,
           SW.OBPROT AS OBLKYN,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           DECODE(NVL(ROUND((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / SM.QTYSTD, 2), 0), 0, ' ', TO_CHAR(NVL(ROUND((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / SM.QTYSTD, 2), 0),  'FM999990.000')) AS PLTQTY,
           DECODE(NVL(ROUND((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / SM.QTDUOM, 1), 0), 0, ' ', TO_CHAR(NVL(ROUND((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / SM.QTDUOM, 1), 0),  'FM999990.00')) AS BOXQTY,
           NVL(MOD(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
           NVL(SM.GRSWGT,0) * NVL(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD,0)  AS GRSWGT,
           NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
           IF.TEXT01 AS NAME01,
           NVL((SELECT SUM(QTALOC) FROM SHPDI WHERE SHPDI.SVBELN = IF.SVBELN AND SHPDI.SPOSNR = IF.SPOSNR AND SHPDI.STATIT IN   ( 'PAL', 'FAL')),0) AS QTALOC,
           IF.QTYORG AS QTUALO,
           CASE IF.OWNRKY WHEN '2200' THEN NVL(C.CARNUM, ' ') ELSE ' ' END AS SXBLNR,
           CASE IF.OWNRKY WHEN '2200' THEN 1 ELSE 0 END AS SZEILE 
      FROM IFWMS113 IF INNER JOIN SKUMA SM ON SM.OWNRKY = IF.OWNRKY AND SM.SKUKEY = IF.SKUKEY
                       INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY
                       LEFT OUTER JOIN BZPTN BZ ON BZ.PTNRKY = IF.PTNRTO AND BZ.PTNRTY = '0007' AND BZ.OWNRKY = IF.OWNRKY
                       LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
                                    ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
    WHERE  IF.XSTAT = 'R'
       AND IF.C00102 != 'X'
       AND IF.OWNRKY = #{OWNRKY}
       AND IF.WAREKY = #{WAREKY}
       AND IF.QTYREQ > IF.WMSMGT + IF.QTSHPD
       AND IF.SVBELN = #{SVBELN}
       <if test="RANGE_SQL != null and RANGE_SQL != ''">
          ${RANGE_SQL}
        </if>                                
    <if test="PROGID == 'DL01'">
        AND EXISTS (SELECT 1 FROM DOCTM WHERE DOCUTY IN ('211','212','213','214','215','216','270') AND DOCUTY = IF.DOCUTY)
          AND IF.C00102 = 'Y'
    </if> 
    <if test="PROGID == 'DL09'">
        AND EXISTS (SELECT 1 FROM DOCTM WHERE DOCUTY IN ('211','212','213','214','215','216','270') AND DOCUTY = IF.DOCUTY)
          AND IF.C00102 = 'Y'
    </if> 
    <if test="PROGID == 'DL19'">
        AND IF.DOCUTY IN ('266','267' )
          AND IF.C00102 = 'Y'
    </if> 
    <if test="PROGID == 'DL20'">
        AND IF.DOCUTY IN ('266','267' )
          AND IF.C00102 = 'Y'
    </if> 
    <if test="PROGID == 'DL20'">
        AND IF.DOCUTY IN ('266','267' )
          AND IF.C00102 = 'Y'
    </if>     
    <if test="TOTALPICKING == 'Y'">
        AND IF.STKNUM &lt;&gt; ' '
    </if> 
    <if test="TOTALPICKING == 'N'">
        AND IF.STKNUM = ' '
    </if> 
    
     ORDER BY IF.SPOSNR
    

  </select> 
    
    <!-- [DL01] 영업오더할당 : 저장 후 헤더 조회 : Group Type = ERPSO : OUTBOUND.PI.FIND_SHPDH_SAVE -->
  <select id="DL01_HEAD_SAVED_LIST" parameterType="hashmap" resultType="DataMap">
		  SELECT 
		       SH.SHPOKY AS KEY,
		       SH.SHPOKY AS SHPOKY,
		       SH.WAREKY AS WAREKY,
		       WH.NAME01 AS WAREKYNM,
		       SH.STATDO AS STATDO,
		       CV.CDESC1 AS STATDONM,
		       SH.DRELIN AS DRELIN,
		       DECODE(SH.DRELIN,'V','YES','NO') AS DRELINNM,
		       SH.INDDCL AS INDDCL,
		       SH.ALSTKY AS ALSTKY,
		       SH.DPTNKY AS WARESR,
		       SH.DPTNKY AS DPTNKY,
		
		       ( DECODE( SH.SHPMTY, '266',  (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.DPTNKY ) , 
		                            '267',  (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.DPTNKY ) , 
		                            '270',  RBP.NAME01,
		                             BP.NAME01) ) AS DPTNKYNM,
		       SH.PTRCVR AS PTRCVR,
		       ( DECODE( SH.SHPMTY, '266',  (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.DPTNKY ) , 
		                            '267',  (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.DPTNKY ) , 
		                            '270',  RBT.NAME01,
		                             BP.NAME01) ) AS PTRCVRNM,
		       SH.PGRC01 AS PGRC01,
		       SH.PGRC02 as DIRDVY,
		       SH.PGRC03 as DIRSUP, 
		       SH.PGRC04 AS PGRC04,
		       SH.PGRC05 AS PGRC05,
		       ' ' AS PTNBLK,
		       SH.OWNRKY AS OWNRKY,
		       SH.DOCDAT AS DOCDAT,
		       SH.DOCCAT AS DOCCAT,
		       DC.SHORTX AS DOCCATNM,
		       SH.SHPMTY AS SHPMTY,
		       DT.SHORTX AS SHPMTYNM,
		       SH.SHPMTY AS DOCUTY,
		       SH.RQSHPD AS RQSHPD,
		       SH.RQARRD AS RQARRD,
		       SH.RQARRT AS RQARRT,
		       SH.OPURKY AS OPURKY,
		       DECODE(SH.SHPMTY, '299', ' ', SI.SVBELN) AS SVBELN,
		       DECODE(SH.STATDO, 'REF', SI.STKNUM, DECODE(SH.SHPMTY, '299', SI.STKNUM, ' ')) AS STKNUM,
		       CASE WHEN SH.SHPMTY = '299'
		                 THEN NVL((SELECT MAX(SUBSTR(SDATBG,1,8)) FROM IFWMS113 WHERE STKNUM = SI.STKNUM), ' ')
		            ELSE ' ' END AS SDATBG,
		      
	      	  ROUND(SUM(SI.QTALOC * SM.NETWGT), 3) AS QTJWGT,
               
		       SH.LOCADT AS LOCADT,
		       SH.LOCADK AS LOCADK,
		       
		       SH.USRID1 AS USRID1,
		       SH.UNAME1 AS UNAME1,
		       SH.DEPTID1 AS DEPTID1,
		       SH.DNAME1 AS DNAME1,
		       SH.USRID2 AS USRID2,
		       SH.UNAME2 AS UNAME2,
		       SH.DEPTID2 AS DEPTID2,
		       SH.DNAME2 AS DNAME2,
		       SH.USRID3 AS USRID3,
		       SH.UNAME3 AS UNAME3,
		       SH.DEPTID3 AS DEPTID3,
		       SH.DNAME3 AS DNAME3,
		       SH.USRID4 AS USRID4,
		       SH.UNAME4 AS UNAME4,
		       SH.DEPTID4 AS DEPTID4,
		       SH.DNAME4 AS DNAME4,
		       SH.DOCTXT AS DOCTXT,
		       SH.CREDAT AS CREDAT,
		       SH.CRETIM AS CRETIM,
		       SH.CREUSR AS CREUSR,
		       (SELECT NMLAST FROM USRMA WHERE USERID = SH.CREUSR) AS CUSRNM,
		       SH.LMODAT AS LMODAT,
		       SH.LMOTIM AS LMOTIM,
		       SH.LMOUSR AS LMOUSR,
		       (SELECT NMLAST FROM USRMA WHERE USERID = SH.LMOUSR) AS LUSRNM,
		       SI.SEBELN AS SEBELN,
		       SI.SXBLNR AS CARNUM,
		       SUM(TRUNC(SH.QTALOC / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1)) as QTAPPO,
               SUM(TRUNC(sh.qtaloc / DECODE(SM.QTYSTD, NULL, 0, SM.QTYSTD) , 2)) as PLTQTY,
		       (SELECT COUNT(*) FROM SHPDI WHERE SHPOKY = SH.SHPOKY) ITEMCOUNT,
		       
		       SUM(TRUNC(NVL(IF.QTYORG, 1) / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1)) DLBOX,
	           SUM(TRUNC(NVL(IF.QTYREQ, 1) / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1)) DLBIX,
               (CASE WHEN NVL(OM.XLS_REAL_PATH,'**') LIKE 'S%' THEN '다운로드' ELSE ' ' END) AS FILEDN
		  FROM SHPDH SH
		         INNER JOIN SHPDI SI
		               ON SH.SHPOKY = SI.SHPOKY
		       LEFT OUTER JOIN SHPDR SR
		               ON SR.SHPOKY = SI.SHPOKY
		              AND SR.SHPOIT = SI.SHPOIT
		              AND SR.RECAYN = 'N'
		       INNER JOIN WAHMA WH
		               ON SH.WAREKY = WH.WAREKY
		       LEFT OUTER JOIN BZPTN BP
		                    ON BP.PTNRKY = SH.DPTNKY
		                   AND BP.OWNRKY = SH.OWNRKY
		                   AND BP.PTNRTY = '0001'
		       LEFT OUTER JOIN BZPTN BT
		                    ON BT.PTNRKY = SH.PTRCVR
		                   AND BT.OWNRKY = SH.OWNRKY
		                   AND BP.PTNRTY = '0001'
		       LEFT OUTER JOIN BZPTN RBP
		                    ON RBP.PTNRKY = SH.DPTNKY
		                   AND RBP.OWNRKY = SH.OWNRKY
		                   AND RBP.PTNRTY = '0002'
		       LEFT OUTER JOIN BZPTN RBT
		                    ON RBT.PTNRKY = SH.PTRCVR
		                   AND RBT.OWNRKY = SH.OWNRKY
		                   AND RBT.PTNRTY = '0002'  
		       INNER JOIN CMCDV CV
		                     ON SH.STATDO = CV.CMCDVL
		                    AND CV.CMCDKY = 'STATDO'
		       INNER JOIN DOCCM DC
		                     ON SH.DOCCAT = DC.DOCCAT
		       INNER JOIN DOCTM DT
		                     ON SH.SHPMTY = DT.DOCUTY
		  		LEFT OUTER JOIN IFWMS113 IF
                             ON IF.SVBELN = SI.SVBELN
                            AND IF.SKUKEY = SI.SKUKEY
                LEFT OUTER JOIN SKUMA SM
                             ON SM.OWNRKY = IF.OWNRKY
                            AND SM.SKUKEY = SI.SKUKEY
				LEFT OUTER JOIN SA_ORDER_MST@WMSTOTOS OM ON OM.COMP_CD = IF.USRID3 AND OM.ORD_NO = IF.SVBELN
              WHERE 1=1 
		        AND SH.SHPOKY IN (${SHPOKYS})
		GROUP BY SH.SHPOKY, SH.SHPOKY, SH.WAREKY, WH.NAME01, SH.STATDO, CV.CDESC1, SH.DRELIN, SH.INDDCL, SH.ALSTKY, 
                 SH.DPTNKY, SH.PTRCVR, SH.PGRC01, SH.PGRC02, SH.PGRC03, SH.PGRC04, SH.PGRC05, SH.OWNRKY, SH.DOCDAT, 
                 SH.DOCCAT, DC.SHORTX, SH.SHPMTY, DT.SHORTX, SH.SHPMTY, SH.RQSHPD, SH.RQARRD, SH.RQARRT, SH.OPURKY, 
                 SH.LOCADT, SH.LOCADK, SH.USRID1, SH.UNAME1, SH.DEPTID1, SH.DNAME1, SH.USRID2, SH.UNAME2, SH.DEPTID2, 
                 SH.DNAME2, SH.USRID3, SH.UNAME3, SH.DEPTID3, SH.DNAME3, SH.USRID4, SH.UNAME4, SH.DEPTID4, SH.DNAME4, 
                 SH.DOCTXT, SH.CREDAT, SH.CRETIM, SH.CREUSR, SH.LMODAT, SH.LMOTIM, SH.LMOUSR, SI.SEBELN, SI.SXBLNR , 
                 RBP.NAME01, BP.NAME01, RBT.NAME01, SI.SVBELN, SH.LOCADK, SH.SHPOKY, SI.STKNUM, SI.STKNUM, OM.XLS_REAL_PATH, SH.QTALOC  
		
		ORDER BY DECODE(SH.STATDO, 'REF', SI.STKNUM, DECODE(SH.SHPMTY, '299', SI.STKNUM, ' ')), SH.LOCADK, SH.SHPOKY 
  </select>   
  
     <!-- [DL01] 영업오더할당 : 저장 후 아이템 조회 : Group Type = ERPSO -->
  <select id="DL01_ITEM_SAVED_LIST" parameterType="hashmap" resultType="DataMap">
  
  SELECT DISTINCT DI.SHPOKY AS SHPOKY
          , DI.SHPOIT AS SHPOIT
          , DI.STATIT AS STATIT
          , DI.ALSTKY AS ALSTKY
          , DI.SKUKEY AS SKUKEY
          , SM.DESC01 AS DESC01
          , SM.DESC02 AS DESC02
          , DI.UOMKEY AS UOMKEY
          , 0 AS QTYPRE
          , DI.QTYORG AS QTYORG
          , DI.QTSHPO AS QTSHPO       
          , NVL(SM.QTYSTD,0) AS PLIQTY
          , NVL(SM.QTDUOM,0) AS BXIQTY
          , NVL(TRUNC(DI.QTALOC / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY       
          , NVL(TRUNC(DI.QTALOC / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY       
          , NVL(MOD(DI.QTALOC, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY
          , DI.QTALOC AS QTALOC
          , DI.QTSHPO - DI.QTALOC AS QTUALO
          , IF.SVBELN  AS SVBELN
          , IF.SPOSNR AS SPOSNR
          , IF.TEXT01 AS NAME01       
          , SM.SKUKEY AS SKUKEY
          , SM.DESC01 AS DESC01
          ,  SM.ASKU02 AS ASKU02
          ,  SM.ASKU03 AS ASKU03
          ,  SM.ASKU04 AS ASKU04
          ,  SM.ASKU05 AS ASKU05
          ,  SM.EANCOD AS EANCOD
          ,  SM.GTINCD AS GTINCD
          ,  SM.SKUG01 AS SKUG01
          ,  SM.SKUG02 AS SKUG02
          ,  SM.SKUG03 AS SKUG03
          ,  SM.SKUG04 AS SKUG04
          ,  SM.SKUG05 AS SKUG05
          ,  SM.GRSWGT AS GRSWGT
          ,  SM.NETWGT AS NETWGT
          ,  SM.WGTUNT AS WGTUNT
          ,  SM.LENGTH AS LENGTH
          ,  SM.WIDTHW AS WIDTHW
          ,  SM.HEIGHT AS HEIGHT
          ,  SM.CUBICM AS CUBICM
          ,  SM.CAPACT AS CAPACT
          ,  SW.MEASKY AS MEASKY
          ,  NVL(SM.GRSWGT,0)   AS GRSWGTCNT
          ,  SW.OBPROT AS OBLKYN
          , CASE IF.OWNRKY WHEN '2200' THEN NVL(C.CARNUM, ' ') ELSE ' ' END AS SXBLNR 
       FROM SHPDI DI INNER JOIN SHPDH SH ON SH.SHPOKY = DI.SHPOKY 
                     INNER JOIN SKUMA SM    ON SM.SKUKEY = DI.SKUKEY AND SM.OWNRKY = SH.OWNRKY
                     INNER JOIN IFWMS113 IF ON IF.OWNRKY =  SH.OWNRKY AND IF.SKUKEY = DI.SKUKEY AND DI.SVBELN = IF.SVBELN AND DI.SPOSNR = IF.SPOSNR
                     INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY
                     LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
                                    ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
      WHERE 1=1
        AND DI.SHPOKY = #{SHPOKY}
        AND IF.SVBELN = #{SVBELN}
        and if.xstat iN ('R','D')
      ORDER BY DI.SHPOIT 
      
  </select> 
  <!-- [DL01] 출고문서 생성 : 아이템 조회 : Group Type = ERPSO -->
  <select id="SALES_ORDER_DOC_ITEM_LIST" parameterType="hashmap" resultType="DataMap">

    SELECT /*+ ORDERED */IF.SVBELN AS KEY,
           ' ' AS SHPOKY,
           ' ' AS SHPOIT,
           'NEW' AS STATIT,
           IF.WARESR AS WARESR,
           IF.WARETG AS WARETG,
           F_SDW_ALSTKY( IF.OWNRKY, IF.WAREKY, NVL(IF.DOCUTY,' '), NVL(IF.WARESR,' ') , NVL(IF.PTNRTO,' '),  NVL(BZ.NATNKY,' '), NVL(IF.DIRSUP,' '), NVL(BZ.PTNG02,' '), NVL(BZ.PTNG03,' '), NVL(BZ.EXPTNK,' '), NVL(IF.DIRDVY,' ')) AS ALSTKY,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTYORG,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTSHPO,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTALLM,
           0 AS QTJCMP,
           0 AS QTSHPD,
           0 AS QTSHPC,
           SW.MEASKY AS MEASKY,
           IF.SKUKEY AS SKUKEY,
           SM.DESC01 AS DESC01,
           SM.DESC02 AS DESC02,
           IF.DUOMKY AS UOMKEY,
           1 AS QTPUOM,
           SM.DUOMKY AS DUOMKY,
           SM.QTDUOM AS QTDUOM,
           F_PRE_QTYPRE(IF.OWNRKY, IF.WAREKY, IF.SKUKEY) AS QTYPRE,
           IF.SVBELN AS REFDKY,
           IF.SPOSNR AS REFDIT,
           ' ' AS REFCAT,
           TO_CHAR(SYSDATE,'YYYYMMDD') AS REFDAT,
           SM.ASKU01 AS ASKU01,
           SM.ASKU02 AS ASKU02,
           SM.ASKU03 AS ASKU03,
           SM.ASKU04 AS ASKU04,
           SM.ASKU05 AS ASKU05,
           SM.EANCOD AS EANCOD,
           SM.GTINCD AS GTINCD,
           SM.SKUG01 AS SKUG01,
           SM.SKUG02 AS SKUG02,
           SM.SKUG03 AS SKUG03,
           SM.SKUG04 AS SKUG04,
           SM.SKUG05 AS SKUG05,
           SM.GRSWGT AS GRSWGT,
           SM.NETWGT AS NETWGT,
           SM.WGTUNT AS WGTUNT,
           SM.LENGTH AS LENGTH,
           SM.WIDTHW AS WIDTHW,
           SM.HEIGHT AS HEIGHT,
           SM.CUBICM AS CUBICM,
           SM.CAPACT AS CAPACT,
           ' ' AS LOTA01,
           ' ' AS LOTA02,
           ' ' AS LOTA03,
           ' ' AS LOTA04,
           ' ' AS LOTA05,
           ' ' AS LOTA06,
           ' ' AS LOTA07,
           ' ' AS LOTA08,
           ' ' AS LOTA09,
           ' ' AS LOTA10,
           ' ' AS LOTA11,
           ' ' AS LOTA12,
           ' ' AS LOTA13,
           ' ' AS LOTA14,
           ' ' AS LOTA15,
           0 AS LOTA16,
           0 AS LOTA17,
           0 AS LOTA18,
           0 AS LOTA19,
           0 AS LOTA20,
           IF.SEQNO AS AWMSNO,
           IF.MANDT AS SMANDT,
           IF.SVBELN AS SVBELN,
           IF.SPOSNR AS SPOSNR,
           IF.REFDKY AS STRAID,
           SW.OBPROT AS OBLKYN,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           NVL(  TRUNC((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
           NVL(  TRUNC((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
           NVL(MOD(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
           NVL(SM.GRSWGT,0) * NVL(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD,0)  AS GRSWGT,
           NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
           IF.TEXT01 AS NAME01,
           CASE IF.OWNRKY WHEN '2200' THEN NVL(C.CARNUM, ' ') ELSE ' ' END AS SXBLNR,
           CASE IF.OWNRKY WHEN '2200' THEN 1 ELSE 0 END AS SZEILE 
      FROM IFWMS113 IF INNER JOIN SKUMA SM ON SM.OWNRKY = IF.OWNRKY AND SM.SKUKEY = IF.SKUKEY
                       INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY
                       LEFT OUTER JOIN BZPTN BZ ON BZ.PTNRKY = IF.PTNRTO AND BZ.PTNRTY = '0007' AND BZ.OWNRKY = IF.OWNRKY
                       LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
                                    ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
    WHERE  IF.XSTAT = 'R'
       AND IF.C00102 != 'X'
       AND IF.OWNRKY = #{OWNRKY}
       AND IF.WAREKY = #{WAREKY}
       AND IF.QTYREQ > IF.WMSMGT + IF.QTSHPD
       AND IF.SVBELN = #{SVBELN}
    
     ORDER BY IF.SPOSNR
    

  </select>   
  
    <!-- [DL01] 출고문서 생성 : 아이템 조회 (부분할당): Group Type = ERPSO -->
  <select id="SALES_ORDER_DOC_ITEM_FOR_PARTIAL_ALLOC_LIST" parameterType="hashmap" resultType="DataMap">

    SELECT /*+ ORDERED INDEX(IF IDX_IFWMS113K02)*/IF.SVBELN AS KEY,
           ' ' AS SHPOKY,
           ' ' AS SHPOIT,
           'NEW' AS STATIT,
           IF.WARESR AS WARESR,
           IF.WARETG AS WARETG,
           F_SDW_ALSTKY( IF.OWNRKY, IF.WAREKY, NVL(IF.DOCUTY,' '), NVL(IF.WARESR,' ') , NVL(IF.PTNRTO,' '),  NVL(BZ.NATNKY,' '), NVL(IF.DIRSUP,' '), NVL(BZ.PTNG02,' '), NVL(BZ.PTNG03,' '), NVL(BZ.EXPTNK,' '), NVL(IF.DIRDVY,' ')) AS ALSTKY,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTYORG,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTSHPO,
           IF.QTYREQ-IF.WMSMGT-IF.QTSHPD AS QTALLM,
           0 AS QTJCMP,
           0 AS QTSHPD,
           0 AS QTSHPC,
           SW.MEASKY AS MEASKY,
           IF.SKUKEY AS SKUKEY,
           SM.DESC01 AS DESC01,
           SM.DESC02 AS DESC02,
           IF.DUOMKY AS UOMKEY,
           1 AS QTPUOM,
           SM.DUOMKY AS DUOMKY,
           SM.QTDUOM AS QTDUOM,
           F_PRE_QTYPRE(IF.OWNRKY, IF.WAREKY, IF.SKUKEY) AS QTYPRE,
           IF.SVBELN AS REFDKY,
           IF.SPOSNR AS REFDIT,
           ' ' AS REFCAT,
           TO_CHAR(SYSDATE,'YYYYMMDD') AS REFDAT,
           SM.ASKU01 AS ASKU01,
           SM.ASKU02 AS ASKU02,
           SM.ASKU03 AS ASKU03,
           SM.ASKU04 AS ASKU04,
           SM.ASKU05 AS ASKU05,
           SM.EANCOD AS EANCOD,
           SM.GTINCD AS GTINCD,
           SM.SKUG01 AS SKUG01,
           SM.SKUG02 AS SKUG02,
           SM.SKUG03 AS SKUG03,
           SM.SKUG04 AS SKUG04,
           SM.SKUG05 AS SKUG05,
           SM.GRSWGT AS GRSWGT,
           SM.NETWGT AS NETWGT,
           SM.WGTUNT AS WGTUNT,
           SM.LENGTH AS LENGTH,
           SM.WIDTHW AS WIDTHW,
           SM.HEIGHT AS HEIGHT,
           SM.CUBICM AS CUBICM,
           SM.CAPACT AS CAPACT,
           ' ' AS LOTA01,
           ' ' AS LOTA02,
           ' ' AS LOTA03,
           ' ' AS LOTA04,
           ' ' AS LOTA05,
           ' ' AS LOTA06,
           ' ' AS LOTA07,
           ' ' AS LOTA08,
           ' ' AS LOTA09,
           ' ' AS LOTA10,
           ' ' AS LOTA11,
           ' ' AS LOTA12,
           ' ' AS LOTA13,
           ' ' AS LOTA14,
           ' ' AS LOTA15,
           0 AS LOTA16,
           0 AS LOTA17,
           0 AS LOTA18,
           0 AS LOTA19,
           0 AS LOTA20,
           IF.SEQNO AS AWMSNO,
           IF.MANDT AS SMANDT,
           IF.SVBELN AS SVBELN,
           IF.SPOSNR AS SPOSNR,
           IF.REFDKY AS STRAID,
           SW.OBPROT AS OBLKYN,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           NVL(  TRUNC((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
           NVL(  TRUNC((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
           NVL(MOD(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
           NVL(SM.GRSWGT,0) * NVL(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD,0)  AS GRSWGT,
           NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
           IF.TEXT01 AS NAME01,
           CASE IF.OWNRKY WHEN '2200' THEN NVL(C.CARNUM, ' ') ELSE ' ' END AS SXBLNR,
           CASE IF.OWNRKY WHEN '2200' THEN 1 ELSE 0 END AS SZEILE 
      FROM IFWMS113 IF INNER JOIN SKUMA SM ON SM.OWNRKY = IF.OWNRKY AND SM.SKUKEY = IF.SKUKEY
                       INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY
                       LEFT OUTER JOIN BZPTN BZ ON BZ.PTNRKY = IF.PTNRTO AND BZ.PTNRTY = '0007' AND BZ.OWNRKY = IF.OWNRKY
                       LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
                                    ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
    WHERE  IF.XSTAT = 'R'
       AND IF.C00102 != 'X'
       AND IF.OWNRKY = #{OWNRKY}
       AND IF.WAREKY = #{WAREKY}
       AND IF.QTYREQ > IF.WMSMGT + IF.QTSHPD
       AND IF.SVBELN = #{SVBELN}
    
     ORDER BY IF.SPOSNR
    

  </select>   
  
  <!-- [DL01] 영업오더할당 : 아이템 저장 Validation : 할당된 데이터가 있는지 check -->
  <select id="SALES_ORDER_ALLOCATE_ITEM_VALIDATE_MAP" parameterType="hashmap" resultType="DataMap">

    SELECT COUNT(*) AS CNT
      FROM SHPDH 
    WHERE WAREKY = #{WAREKY}
      AND STATDO = 'FAL'
      
       
  </select>
  
  
  <!-- 출고문서 번호 채번  -->
  <select id="GETDOCNUMBER_MAP" parameterType="hashmap" resultType="DataMap">
   SELECT SZF_GETDOCNUMBER(#{DOCUTY}) AS DOCNUM FROM DUAL
  </select>
  
  <!-- 출고문서 아이템 번호 채번  -->
  <select id="GETDOCNUMBER_ITEM_MAP" parameterType="hashmap" resultType="DataMap">
    SELECT LPAD(#{SHPOIT}, 6, 0) AS DOCNUM_ITEM FROM DUAL
  </select>
 
  <!-- 출고문서 아이템 Validation  -->
  <select id="SALES_ORDER_ITEM_CREATE_DOC_VALIDATE_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT DISTINCT 
       CASE WHEN SW.SKUKEY IS NULL THEN
                 'MASTER_M0250' 
            WHEN SM.DELMAK = 'V' THEN
                 'COMMON_M0041' 
            WHEN SW.OBPROT = 'V' THEN
                 'OUT_M0071' 
       END AS ERROR_MSG
    FROM IFWMS113 IF INNER JOIN SKUMA SM ON SM.OWNRKY = IF.OWNRKY AND SM.SKUKEY = IF.SKUKEY
                     INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY
     AND IF.OWNRKY = #{OWNRKY}
     AND IF.WAREKY = #{WAREKY}
     AND IF.SKUKEY = #{SKUKEY}
     AND IF.SVBELN = #{SVBELN}
  </select>
 
  <!-- [DL01] 출고문서 헤더 생성/수정 : SHPDH Merge 입력 -->
  <update id="SHPDH_UPDATE"  parameterType="hashmap">
      MERGE INTO SHPDH
      USING DUAL
      ON (SHPOKY=#{SHPOKY})
      WHEN MATCHED THEN
       UPDATE SET
      WAREKY  = NVL(#{WAREKY},' ')
    , SHPMTY  = NVL(#{SHPMTY},' ')
    , ALSTKY  = NVL(#{ALSTKY},' ')
    , STATDO  = NVL(#{STATDO},' ')
    , DOCDAT  = NVL(#{DOCDAT},' ')
    , DOCCAT  = NVL(#{DOCCAT},' ')
    , PRORTY  = NVL(#{PRORTY},' ')
    , DOCUTY  = NVL(#{DOCUTY},' ')
    , OWNRKY  = NVL(#{OWNRKY},' ')
    , DRELIN  = NVL(#{DRELIN},' ')
    , RQSHPD  = NVL(#{RQSHPD},' ')
    , RQARRD  = NVL(#{RQARRD},' ')
    , RQARRT  = NVL(#{RQARRT},' ')
    , LSHPCD  = NVL(#{LSHPCD},' ')
    , DPTNKY  = NVL(#{DPTNKY},' ')
    , PTRCVR  = NVL(#{PTRCVR},' ')
    , PGRC01  = NVL(#{PGRC01},' ')
    , PGRC02  = NVL(#{PGRC02},' ')
    , PGRC03  = NVL(#{PGRC03},' ')
    , PGRC04  = NVL(#{PGRC04},' ')
    , PGRC05  = NVL(#{PGRC05},' ')
    , VEHINO  = NVL(#{VEHINO},' ')
    , DRIVER  = NVL(#{DRIVER},' ')
    , SHIPSQ  = NVL(#{SHIPSQ},0)
    , SHPORD  = NVL(#{SHPORD},0)
    , ESHPKY  = NVL(#{ESHPKY},' ')
    , OPURKY  = NVL(#{OPURKY},' ')
    , LOCADT  = NVL(#{LOCADT},' ')
    , LOCADK  = NVL(#{LOCADK},' ')
    , DISTGR  = NVL(#{DISTGR},0)
    , INDDCL  = NVL(#{INDDCL},' ')
    , RSNCOD  = NVL(#{RSNCOD},' ')
    , RSNRET  = NVL(#{RSNRET},' ')
    , QTSHPO  = NVL(#{QTSHPO},0)
    , QTYREF  = NVL(#{QTYREF},0)
    , QTAPPO  = NVL(#{QTAPPO},0)
    , QTALOC  = NVL(#{QTALOC},0)
    , QTJCMP  = NVL(#{QTJCMP},0)
    , QTSHPD  = NVL(#{QTSHPD},0)
    , QTSHPC  = NVL(#{QTSHPC},0)
    , USRID1  = NVL(#{USRID1},' ')
    , UNAME1  = NVL(#{UNAME1},' ')
    , DEPTID1 = NVL(#{DEPTID1},' ')
    , DNAME1  = NVL(#{DNAME1},' ')
    , USRID2  = NVL(#{USRID2},' ')
    , UNAME2  = NVL(#{UNAME2},' ')
    , DEPTID2 = NVL(#{DEPTID2},' ')
    , DNAME2  = NVL(#{DNAME2},' ')
    , USRID3  = NVL(#{USRID3},' ')
    , UNAME3  = NVL(#{UNAME3},' ')
    , DEPTID3 = NVL(#{DEPTID3},' ')
    , DNAME3  = NVL(#{DNAME3},' ')
    , USRID4  = NVL(#{USRID4},' ')
    , UNAME4  = NVL(#{UNAME4},' ')
    , DEPTID4 = NVL(#{DEPTID4},' ')
    , DNAME4  = NVL(#{DNAME4},' ')
    , DOCTXT  = NVL(#{DOCTXT},' ')
    , KEEPTS  = NVL(#{KEEPTS},' ')
    , LMODAT  = TO_CHAR(SYSDATE,'YYYYMMDD')
    , LMOTIM  = TO_CHAR(SYSDATE,'HH24MISS')
    , LMOUSR  = #{SES_USER_ID}
    , INDBZL  = NVL(#{INDBZL},' ')
    , INDARC  = NVL(#{INDARC},' ')
    , UPDCHK  = NVL(#{UPDCHK},0)
    
    WHEN NOT MATCHED THEN
    
     INSERT (  
      SHPOKY 
    , WAREKY 
    , SHPMTY 
    , ALSTKY 
    , STATDO 
    , DOCDAT 
    , DOCCAT 
    , PRORTY 
    , DOCUTY 
    , OWNRKY 
    , DRELIN 
    , RQSHPD 
    , RQARRD 
    , RQARRT 
    , LSHPCD 
    , DPTNKY 
    , PTRCVR 
    , PGRC01 
    , PGRC02 
    , PGRC03 
    , PGRC04 
    , PGRC05 
    , VEHINO 
    , DRIVER 
    , SHIPSQ 
    , SHPORD 
    , ESHPKY 
    , OPURKY 
    , LOCADT 
    , LOCADK 
    , DISTGR 
    , INDDCL 
    , RSNCOD 
    , RSNRET 
    , QTSHPO 
    , QTYREF 
    , QTAPPO 
    , QTALOC 
    , QTJCMP 
    , QTSHPD 
    , QTSHPC 
    , USRID1 
    , UNAME1 
    , DEPTID1
    , DNAME1 
    , USRID2 
    , UNAME2 
    , DEPTID2
    , DNAME2 
    , USRID3 
    , UNAME3 
    , DEPTID3
    , DNAME3 
    , USRID4 
    , UNAME4 
    , DEPTID4
    , DNAME4 
    , DOCTXT 
    , KEEPTS 
    , CREDAT 
    , CRETIM 
    , CREUSR 
    , LMODAT
    , LMOTIM
    , LMOUSR
    , INDBZL 
    , INDARC 
    , UPDCHK )
    VALUES (
     NVL(#{SHPOKY},' ')
    ,NVL(#{WAREKY},' ')
    ,NVL(#{SHPMTY},' ')
    ,NVL(#{ALSTKY},' ')
    ,NVL(#{STATDO},' ')
    ,NVL(#{DOCDAT},' ')
    ,NVL(#{DOCCAT},' ')
    ,NVL(#{PRORTY},' ')
    ,NVL(#{DOCUTY},' ')
    ,NVL(#{OWNRKY},' ')
    ,NVL(#{DRELIN},' ')
    ,NVL(#{RQSHPD},' ')
    ,NVL(#{RQARRD},' ')
    ,NVL(#{RQARRT},' ')
    ,NVL(#{LSHPCD},' ')
    ,NVL(#{DPTNKY},' ')
    ,NVL(#{PTRCVR},' ')
    ,NVL(#{PGRC01},' ')
    ,NVL(#{PGRC02},' ')
    ,NVL(#{PGRC03},' ')
    ,NVL(#{PGRC04},' ')
    ,NVL(#{PGRC05},' ')
    ,NVL(#{VEHINO},' ')
    ,NVL(#{DRIVER},' ')
    ,NVL(#{SHIPSQ},0)
    ,NVL(#{SHPORD},0)
    ,NVL(#{ESHPKY},' ')
    ,NVL(#{OPURKY},' ')
    ,NVL(#{LOCADT},' ')
    ,NVL(#{LOCADK},' ')
    ,NVL(#{DISTGR},0)
    ,NVL(#{INDDCL},' ')
    ,NVL(#{RSNCOD},' ')
    ,NVL(#{RSNRET},' ')
    ,NVL(#{QTSHPO},0)
    ,NVL(#{QTYREF},0)
    ,NVL(#{QTAPPO},0)
    ,NVL(#{QTALOC},0)
    ,NVL(#{QTJCMP},0)
    ,NVL(#{QTSHPD},0)
    ,NVL(#{QTSHPC},0)
    ,NVL(#{USRID1},' ')
    ,NVL(#{UNAME1},' ')
    ,NVL(#{DEPTID1},' ')
    ,NVL(#{DNAME1},' ')
    ,NVL(#{USRID2},' ')
    ,NVL(#{UNAME2},' ')
    ,NVL(#{DEPTID2},' ')
    ,NVL(#{DNAME2},' ')
    ,NVL(#{USRID3},' ')
    ,NVL(#{UNAME3},' ')
    ,NVL(#{DEPTID3},' ')
    ,NVL(#{DNAME3},' ')
    ,NVL(#{USRID4},' ')
    ,NVL(#{UNAME4},' ')
    ,NVL(#{DEPTID4},' ')
    ,NVL(#{DNAME4},' ')
    ,NVL(#{DOCTXT},' ')
    ,NVL(#{KEEPTS},' ')
    ,TO_CHAR(SYSDATE,'YYYYMMDD')
    ,TO_CHAR(SYSDATE,'HH24MISS')
    ,#{SES_USER_ID}
    ,TO_CHAR(SYSDATE,'YYYYMMDD')
    ,TO_CHAR(SYSDATE,'HH24MISS')
    ,#{SES_USER_ID}
    ,NVL(#{INDBZL},' ')
    ,NVL(#{INDARC},' ')
    ,NVL(#{UPDCHK},0)
    )
  </update>
  
    <!-- [DL01] 출고문서 헤더 생성 : SHPDH Insert 입력 -->
  <insert id="SHPDH_INSERT"  parameterType="hashmap">
      INSERT INTO SHPDH
      (  
      SHPOKY 
    , WAREKY 
    , SHPMTY 
    , ALSTKY 
    , STATDO 
    , DOCDAT 
    , DOCCAT 
    , PRORTY 
    , DOCUTY 
    , OWNRKY 
    , DRELIN 
    , RQSHPD 
    , RQARRD 
    , RQARRT 
    , LSHPCD 
    , DPTNKY 
    , PTRCVR 
    , PGRC01 
    , PGRC02 
    , PGRC03 
    , PGRC04 
    , PGRC05 
    , VEHINO 
    , DRIVER 
    , SHIPSQ 
    , SHPORD 
    , ESHPKY 
    , OPURKY 
    , LOCADT 
    , LOCADK 
    , DISTGR 
    , INDDCL 
    , RSNCOD 
    , RSNRET 
    , QTSHPO 
    , QTYREF 
    , QTAPPO 
    , QTALOC 
    , QTJCMP 
    , QTSHPD 
    , QTSHPC 
    , USRID1 
    , UNAME1 
    , DEPTID1
    , DNAME1 
    , USRID2 
    , UNAME2 
    , DEPTID2
    , DNAME2 
    , USRID3 
    , UNAME3 
    , DEPTID3
    , DNAME3 
    , USRID4 
    , UNAME4 
    , DEPTID4
    , DNAME4 
    , DOCTXT 
    , KEEPTS 
    , CREDAT 
    , CRETIM 
    , CREUSR 
    , LMODAT
    , LMOTIM
    , LMOUSR
    , INDBZL 
    , INDARC 
    , UPDCHK )
    VALUES (
     NVL(#{SHPOKY},' ')
    ,NVL(#{WAREKY},' ')
    ,NVL(#{SHPMTY},' ')
    ,NVL(#{ALSTKY},' ')
    ,NVL(#{STATDO},' ')
    ,NVL(#{DOCDAT},' ')
    ,NVL(#{DOCCAT},' ')
    ,NVL(#{PRORTY},' ')
    ,NVL(#{DOCUTY},' ')
    ,NVL(#{OWNRKY},' ')
    ,NVL(#{DRELIN},' ')
    ,NVL(#{RQSHPD},' ')
    ,NVL(#{RQARRD},' ')
    ,NVL(#{RQARRT},' ')
    ,NVL(#{LSHPCD},' ')
    ,NVL(#{DPTNKY},' ')
    ,NVL(#{PTRCVR},' ')
    ,NVL(#{PGRC01},' ')
    ,NVL(#{PGRC02},' ')
    ,NVL(#{PGRC03},' ')
    ,NVL(#{PGRC04},' ')
    ,NVL(#{PGRC05},' ')
    ,NVL(#{VEHINO},' ')
    ,NVL(#{DRIVER},' ')
    ,NVL(#{SHIPSQ},0)
    ,NVL(#{SHPORD},0)
    ,NVL(#{ESHPKY},' ')
    ,NVL(#{OPURKY},' ')
    ,NVL(#{LOCADT},' ')
    ,NVL(#{LOCADK},' ')
    ,NVL(#{DISTGR},0)
    ,NVL(#{INDDCL},' ')
    ,NVL(#{RSNCOD},' ')
    ,NVL(#{RSNRET},' ')
    ,NVL(#{QTSHPO},0)
    ,NVL(#{QTYREF},0)
    ,NVL(#{QTAPPO},0)
    ,NVL(#{QTALOC},0)
    ,NVL(#{QTJCMP},0)
    ,NVL(#{QTSHPD},0)
    ,NVL(#{QTSHPC},0)
    ,NVL(#{USRID1},' ')
    ,NVL(#{UNAME1},' ')
    ,NVL(#{DEPTID1},' ')
    ,NVL(#{DNAME1},' ')
    ,NVL(#{USRID2},' ')
    ,NVL(#{UNAME2},' ')
    ,NVL(#{DEPTID2},' ')
    ,NVL(#{DNAME2},' ')
    ,NVL(#{USRID3},' ')
    ,NVL(#{UNAME3},' ')
    ,NVL(#{DEPTID3},' ')
    ,NVL(#{DNAME3},' ')
    ,NVL(#{USRID4},' ')
    ,NVL(#{UNAME4},' ')
    ,NVL(#{DEPTID4},' ')
    ,NVL(#{DNAME4},' ')
    ,NVL(#{DOCTXT},' ')
    ,NVL(#{KEEPTS},' ')
    ,TO_CHAR(SYSDATE,'YYYYMMDD')
    ,TO_CHAR(SYSDATE,'HH24MISS')
    ,#{SES_USER_ID}
    ,TO_CHAR(SYSDATE,'YYYYMMDD')
    ,TO_CHAR(SYSDATE,'HH24MISS')
    ,#{SES_USER_ID}
    ,NVL(#{INDBZL},' ')
    ,NVL(#{INDARC},' ')
    ,NVL(#{UPDCHK},0)
    )
  </insert>
  
  <!-- [DL01] 출고문서 아이템 생성/수정 : SHPDI Merge 입력 -->
  <update id="SHPDI_UPDATE"  parameterType="hashmap">
  MERGE INTO SHPDI
    USING DUAL
    ON (SHPOKY=#{SHPOKY} AND SHPOIT=#{SHPOIT})
    WHEN MATCHED THEN
     UPDATE SET
      STATIT = NVL(#{STATIT},' ')
    , SKUKEY = NVL(#{SKUKEY},' ')
    , QTYORG = NVL(#{QTYORG},0)
    , QTSHPO = NVL(#{QTSHPO},0)
    , QTYREF = NVL(#{QTYREF},0)
    , QTAPPO = NVL(#{QTAPPO},0)
    , QTALOC = NVL(#{QTALOC},0)
    , QTJCMP = NVL(#{QTJCMP},0)
    , QTSHPD = NVL(#{QTSHPD},0)
    , QTSHPC = NVL(#{QTSHPC},0)
    , QTYUOM = NVL(#{QTYUOM},0)
    , MEASKY = NVL(#{MEASKY},' ')
    , UOMKEY = NVL(#{UOMKEY},' ')
    , QTPUOM = NVL(#{QTPUOM},0)
    , DUOMKY = NVL(#{DUOMKY},' ')
    , QTDUOM = NVL(#{QTDUOM},0)
    , SASTKY = NVL(#{SASTKY},' ')
    , ALSTKY = NVL(#{ALSTKY},' ')
    , TKFLKY = NVL(#{TKFLKY},' ')
    , ESHPKY = NVL(#{ESHPKY},' ')
    , ESHPIT = NVL(#{ESHPIT},' ')
    , OPURKY = NVL(#{OPURKY},' ')
    , REFDKY = NVL(#{REFDKY},' ')
    , REFDIT = NVL(#{REFDIT},' ')
    , REFCAT = NVL(#{REFCAT},' ')
    , REFDAT = NVL(#{REFDAT},' ')
    , EXSUBS = NVL(#{EXSUBS},' ')
    , DESC01 = NVL(#{DESC01},' ')
    , DESC02 = NVL(#{DESC02},' ')
    , ASKU01 = NVL(#{ASKU01},' ')
    , ASKU02 = NVL(#{ASKU02},' ')
    , ASKU03 = NVL(#{ASKU03},' ')
    , ASKU04 = NVL(#{ASKU04},' ')
    , ASKU05 = NVL(#{ASKU05},' ')
    , EANCOD = NVL(#{EANCOD},' ')
    , GTINCD = NVL(#{GTINCD},' ')
    , SKUG01 = NVL(#{SKUG01},' ')
    , SKUG02 = NVL(#{SKUG02},' ')
    , SKUG03 = NVL(#{SKUG03},' ')
    , SKUG04 = NVL(#{SKUG04},' ')
    , SKUG05 = NVL(#{SKUG05},' ')
    , GRSWGT = NVL(#{GRSWGT},0)
    , NETWGT = NVL(#{NETWGT},0)
    , WGTUNT = NVL(#{WGTUNT},' ')
    , LENGTH = NVL(#{LENGTH},0)
    , WIDTHW = NVL(#{WIDTHW},0)
    , HEIGHT = NVL(#{HEIGHT},0)
    , CUBICM = NVL(#{CUBICM},0)
    , CAPACT = NVL(#{CAPACT},0)
    , PROCHA = NVL(#{PROCHA},' ')
    , AREAKY = NVL(#{AREAKY},' ')
    , LOTA01 = NVL(#{LOTA01},' ')
    , LOTA02 = NVL(#{LOTA02},' ')
    , LOTA03 = NVL(#{LOTA03},' ')
    , LOTA04 = NVL(#{LOTA04},' ')
    , LOTA05 = NVL(#{LOTA05},' ')
    , LOTA06 = NVL(#{LOTA06},' ')
    , LOTA07 = NVL(#{LOTA07},' ')
    , LOTA08 = NVL(#{LOTA08},' ')
    , LOTA09 = NVL(#{LOTA09},' ')
    , LOTA10 = NVL(#{LOTA10},' ')
    , LOTA11 = NVL(#{LOTA11},' ')
    , LOTA12 = NVL(#{LOTA12},' ')
    , LOTA13 = NVL(#{LOTA13},' ')
    , LOTA14 = NVL(#{LOTA14},' ')
    , LOTA15 = NVL(#{LOTA15},' ')
    , LOTA16 = NVL(#{LOTA16},0)
    , LOTA17 = NVL(#{LOTA17},0)
    , LOTA18 = NVL(#{LOTA18},0)
    , LOTA19 = NVL(#{LOTA19},0)
    , LOTA20 = NVL(#{LOTA20},0)
    , AWMSNO = NVL(#{AWMSNO},' ')
    , SMANDT = NVL(#{SMANDT},' ')
    , SEBELN = NVL(#{SEBELN},' ')
    , SEBELP = NVL(#{SEBELP},' ')
    , SZMBLNO = NVL(#{SZMBLNO},' ')
    , SZMIPNO = NVL(#{SZMIPNO},' ')
    , STRAID = NVL(#{STRAID},' ')
    , SVBELN = NVL(#{SVBELN},' ')
    , SPOSNR = NVL(#{SPOSNR},' ')
    , STKNUM = NVL(#{STKNUM},' ')
    , STPNUM = NVL(#{STPNUM},' ')
    , SWERKS = NVL(#{SWERKS},' ')
    , SLGORT = NVL(#{SLGORT},' ')
    , SDATBG = NVL(#{SDATBG},' ')
    , STDLNR = NVL(#{STDLNR},' ')
    , SSORNU = NVL(#{SSORNU},' ')
    , SSORIT = NVL(#{SSORIT},' ')
    , SMBLNR = NVL(#{SMBLNR},' ')
    , SZEILE = NVL(#{SZEILE},' ')
    , SMJAHR = NVL(#{SMJAHR},' ')
    , SXBLNR = NVL(#{SXBLNR},' ')
    , SAPSTS = NVL(#{SAPSTS},' ')
    , PTNRKY = NVL(#{PTNRKY},' ')
    , NAME01 = NVL(#{NAME01},' ')
    , SLAND1 = NVL(#{SLAND1},' ')
    , SBKTXT = NVL(#{SBKTXT},' ')
    , LMODAT  = TO_CHAR(SYSDATE,'YYYYMMDD')
    , LMOTIM  = TO_CHAR(SYSDATE,'HH24MISS')
    , LMOUSR  = #{SES_USER_ID}
    , INDBZL = NVL(#{INDBZL},' ')
    , INDARC = NVL(#{INDARC},' ')
    , UPDCHK = NVL(#{UPDCHK},0)   
    
    WHEN NOT MATCHED THEN
    
     INSERT (  
      SHPOKY
    , SHPOIT
    , STATIT
    , SKUKEY
    , QTYORG
    , QTSHPO
    , QTYREF
    , QTAPPO
    , QTALOC
    , QTJCMP
    , QTSHPD
    , QTSHPC
    , QTYUOM
    , MEASKY
    , UOMKEY
    , QTPUOM
    , DUOMKY
    , QTDUOM
    , SASTKY
    , ALSTKY
    , TKFLKY
    , ESHPKY
    , ESHPIT
    , OPURKY
    , REFDKY
    , REFDIT
    , REFCAT
    , REFDAT
    , EXSUBS
    , DESC01
    , DESC02
    , ASKU01
    , ASKU02
    , ASKU03
    , ASKU04
    , ASKU05
    , EANCOD
    , GTINCD
    , SKUG01
    , SKUG02
    , SKUG03
    , SKUG04
    , SKUG05
    , GRSWGT
    , NETWGT
    , WGTUNT
    , LENGTH
    , WIDTHW
    , HEIGHT
    , CUBICM
    , CAPACT
    , PROCHA
    , AREAKY
    , LOTA01
    , LOTA02
    , LOTA03
    , LOTA04
    , LOTA05
    , LOTA06
    , LOTA07
    , LOTA08
    , LOTA09
    , LOTA10
    , LOTA11
    , LOTA12
    , LOTA13
    , LOTA14
    , LOTA15
    , LOTA16
    , LOTA17
    , LOTA18
    , LOTA19
    , LOTA20
    , AWMSNO
    , SMANDT
    , SEBELN
    , SEBELP
    , SZMBLNO
    , SZMIPNO
    , STRAID
    , SVBELN
    , SPOSNR
    , STKNUM
    , STPNUM
    , SWERKS
    , SLGORT
    , SDATBG
    , STDLNR
    , SSORNU
    , SSORIT
    , SMBLNR
    , SZEILE
    , SMJAHR
    , SXBLNR
    , SAPSTS
    , PTNRKY
    , NAME01
    , SLAND1
    , SBKTXT
    , CREDAT
    , CRETIM
    , CREUSR
    , LMODAT
    , LMOTIM
    , LMOUSR
    , INDBZL
    , INDARC
    , UPDCHK
     )
     VALUES (
      NVL(#{SHPOKY},' ')
    , NVL(#{SHPOIT},' ')
    , NVL(#{STATIT},' ')
    , NVL(#{SKUKEY},' ')
    , NVL(#{QTYORG},0)
    , NVL(#{QTSHPO},0)
    , NVL(#{QTYREF},0)
    , NVL(#{QTAPPO},0)
    , NVL(#{QTALOC},0)
    , NVL(#{QTJCMP},0)
    , NVL(#{QTSHPD},0)
    , NVL(#{QTSHPC},0)
    , NVL(#{QTYUOM},0)
    , NVL(#{MEASKY},' ')
    , NVL(#{UOMKEY},' ')
    , NVL(#{QTPUOM},0)
    , NVL(#{DUOMKY},' ')
    , NVL(#{QTDUOM},0)
    , NVL(#{SASTKY},' ')
    , NVL(#{ALSTKY},' ')
    , NVL(#{TKFLKY},' ')
    , NVL(#{ESHPKY},' ')
    , NVL(#{ESHPIT},' ')
    , NVL(#{OPURKY},' ')
    , NVL(#{REFDKY},' ')
    , NVL(#{REFDIT},' ')
    , NVL(#{REFCAT},' ')
    , NVL(#{REFDAT},' ')
    , NVL(#{EXSUBS},' ')
    , NVL(#{DESC01},' ')
    , NVL(#{DESC02},' ')
    , NVL(#{ASKU01},' ')
    , NVL(#{ASKU02},' ')
    , NVL(#{ASKU03},' ')
    , NVL(#{ASKU04},' ')
    , NVL(#{ASKU05},' ')
    , NVL(#{EANCOD},' ')
    , NVL(#{GTINCD},' ')
    , NVL(#{SKUG01},' ')
    , NVL(#{SKUG02},' ')
    , NVL(#{SKUG03},' ')
    , NVL(#{SKUG04},' ')
    , NVL(#{SKUG05},' ')
    , NVL(#{GRSWGT},0)
    , NVL(#{NETWGT},0)
    , NVL(#{WGTUNT},' ')
    , NVL(#{LENGTH},0)
    , NVL(#{WIDTHW},0)
    , NVL(#{HEIGHT},0)
    , NVL(#{CUBICM},0)
    , NVL(#{CAPACT},0)
    , NVL(#{PROCHA},' ')
    , NVL(#{AREAKY},' ')
    , NVL(#{LOTA01},' ')
    , NVL(#{LOTA02},' ')
    , NVL(#{LOTA03},' ')
    , NVL(#{LOTA04},' ')
    , NVL(#{LOTA05},' ')
    , NVL(#{LOTA06},' ')
    , NVL(#{LOTA07},' ')
    , NVL(#{LOTA08},' ')
    , NVL(#{LOTA09},' ')
    , NVL(#{LOTA10},' ')
    , NVL(#{LOTA11},' ')
    , NVL(#{LOTA12},' ')
    , NVL(#{LOTA13},' ')
    , NVL(#{LOTA14},' ')
    , NVL(#{LOTA15},' ')
    , NVL(#{LOTA16},0)
    , NVL(#{LOTA17},0)
    , NVL(#{LOTA18},0)
    , NVL(#{LOTA19},0)
    , NVL(#{LOTA20},0)
    , NVL(#{AWMSNO},' ')
    , NVL(#{SMANDT},' ')
    , NVL(#{SEBELN},' ')
    , NVL(#{SEBELP},' ')
    , NVL(#{SZMBLNO},' ')
    , NVL(#{SZMIPNO},' ')
    , NVL(#{STRAID},' ')
    , NVL(#{SVBELN},' ')
    , NVL(#{SPOSNR},' ')
    , NVL(#{STKNUM},' ')
    , NVL(#{STPNUM},' ')
    , NVL(#{SWERKS},' ')
    , NVL(#{SLGORT},' ')
    , NVL(#{SDATBG},' ')
    , NVL(#{STDLNR},' ')
    , NVL(#{SSORNU},' ')
    , NVL(#{SSORIT},' ')
    , NVL(#{SMBLNR},' ')
    , NVL(#{SZEILE},' ')
    , NVL(#{SMJAHR},' ')
    , NVL(#{SXBLNR},' ')
    , NVL(#{SAPSTS},' ')
    , NVL(#{PTNRKY},' ')
    , NVL(#{NAME01},' ')
    , NVL(#{SLAND1},' ')
    , NVL(#{SBKTXT},' ')
    , TO_CHAR(SYSDATE,'YYYYMMDD')
    , TO_CHAR(SYSDATE,'HH24MISS')
    , #{SES_USER_ID}
    ,TO_CHAR(SYSDATE,'YYYYMMDD')
    ,TO_CHAR(SYSDATE,'HH24MISS')
    ,#{SES_USER_ID}
    , NVL(#{INDBZL},' ')
    , NVL(#{INDARC},' ')
    , NVL(#{UPDCHK},0)
    )
  </update>
  
    <!-- [DL01] 출고문서 아이템 생성 : SHPDI Insert 입력 -->
  <insert id="SHPDI_INSERT"  parameterType="hashmap">
  INSERT INTO SHPDI
       (  
      SHPOKY
    , SHPOIT
    , STATIT
    , SKUKEY
    , QTYORG
    , QTSHPO
    , QTYREF
    , QTAPPO
    , QTALOC
    , QTJCMP
    , QTSHPD
    , QTSHPC
    , QTYUOM
    , MEASKY
    , UOMKEY
    , QTPUOM
    , DUOMKY
    , QTDUOM
    , SASTKY
    , ALSTKY
    , TKFLKY
    , ESHPKY
    , ESHPIT
    , OPURKY
    , REFDKY
    , REFDIT
    , REFCAT
    , REFDAT
    , EXSUBS
    , DESC01
    , DESC02
    , ASKU01
    , ASKU02
    , ASKU03
    , ASKU04
    , ASKU05
    , EANCOD
    , GTINCD
    , SKUG01
    , SKUG02
    , SKUG03
    , SKUG04
    , SKUG05
    , GRSWGT
    , NETWGT
    , WGTUNT
    , LENGTH
    , WIDTHW
    , HEIGHT
    , CUBICM
    , CAPACT
    , PROCHA
    , AREAKY
    , LOTA01
    , LOTA02
    , LOTA03
    , LOTA04
    , LOTA05
    , LOTA06
    , LOTA07
    , LOTA08
    , LOTA09
    , LOTA10
    , LOTA11
    , LOTA12
    , LOTA13
    , LOTA14
    , LOTA15
    , LOTA16
    , LOTA17
    , LOTA18
    , LOTA19
    , LOTA20
    , AWMSNO
    , SMANDT
    , SEBELN
    , SEBELP
    , SZMBLNO
    , SZMIPNO
    , STRAID
    , SVBELN
    , SPOSNR
    , STKNUM
    , STPNUM
    , SWERKS
    , SLGORT
    , SDATBG
    , STDLNR
    , SSORNU
    , SSORIT
    , SMBLNR
    , SZEILE
    , SMJAHR
    , SXBLNR
    , SAPSTS
    , PTNRKY
    , NAME01
    , SLAND1
    , SBKTXT
    , CREDAT
    , CRETIM
    , CREUSR
    , LMODAT
    , LMOTIM
    , LMOUSR
    , INDBZL
    , INDARC
    , UPDCHK
     )
     VALUES (
      NVL(#{SHPOKY},' ')
    , NVL(#{SHPOIT},' ')
    , NVL(#{STATIT},' ')
    , NVL(#{SKUKEY},' ')
    , NVL(#{QTYORG},0)
    , NVL(#{QTSHPO},0)
    , NVL(#{QTYREF},0)
    , NVL(#{QTAPPO},0)
    , NVL(#{QTALOC},0)
    , NVL(#{QTJCMP},0)
    , NVL(#{QTSHPD},0)
    , NVL(#{QTSHPC},0)
    , NVL(#{QTYUOM},0)
    , NVL(#{MEASKY},' ')
    , NVL(#{UOMKEY},' ')
    , NVL(#{QTPUOM},0)
    , NVL(#{DUOMKY},' ')
    , NVL(#{QTDUOM},0)
    , NVL(#{SASTKY},' ')
    , NVL(#{ALSTKY},' ')
    , NVL(#{TKFLKY},' ')
    , NVL(#{ESHPKY},' ')
    , NVL(#{ESHPIT},' ')
    , NVL(#{OPURKY},' ')
    , NVL(#{REFDKY},' ')
    , NVL(#{REFDIT},' ')
    , NVL(#{REFCAT},' ')
    , NVL(#{REFDAT},' ')
    , NVL(#{EXSUBS},' ')
    , NVL(#{DESC01},' ')
    , NVL(#{DESC02},' ')
    , NVL(#{ASKU01},' ')
    , NVL(#{ASKU02},' ')
    , NVL(#{ASKU03},' ')
    , NVL(#{ASKU04},' ')
    , NVL(#{ASKU05},' ')
    , NVL(#{EANCOD},' ')
    , NVL(#{GTINCD},' ')
    , NVL(#{SKUG01},' ')
    , NVL(#{SKUG02},' ')
    , NVL(#{SKUG03},' ')
    , NVL(#{SKUG04},' ')
    , NVL(#{SKUG05},' ')
    , NVL(#{GRSWGT},0)
    , NVL(#{NETWGT},0)
    , NVL(#{WGTUNT},' ')
    , NVL(#{LENGTH},0)
    , NVL(#{WIDTHW},0)
    , NVL(#{HEIGHT},0)
    , NVL(#{CUBICM},0)
    , NVL(#{CAPACT},0)
    , NVL(#{PROCHA},' ')
    , NVL(#{AREAKY},' ')
    , NVL(#{LOTA01},' ')
    , NVL(#{LOTA02},' ')
    , NVL(#{LOTA03},' ')
    , NVL(#{LOTA04},' ')
    , NVL(#{LOTA05},' ')
    , NVL(#{LOTA06},' ')
    , NVL(#{LOTA07},' ')
    , NVL(#{LOTA08},' ')
    , NVL(#{LOTA09},' ')
    , NVL(#{LOTA10},' ')
    , NVL(#{LOTA11},' ')
    , NVL(#{LOTA12},' ')
    , NVL(#{LOTA13},' ')
    , NVL(#{LOTA14},' ')
    , NVL(#{LOTA15},' ')
    , NVL(#{LOTA16},0)
    , NVL(#{LOTA17},0)
    , NVL(#{LOTA18},0)
    , NVL(#{LOTA19},0)
    , NVL(#{LOTA20},0)
    , NVL(#{AWMSNO},' ')
    , NVL(#{SMANDT},' ')
    , NVL(#{SEBELN},' ')
    , NVL(#{SEBELP},' ')
    , NVL(#{SZMBLNO},' ')
    , NVL(#{SZMIPNO},' ')
    , NVL(#{STRAID},' ')
    , NVL(#{SVBELN},' ')
    , NVL(#{SPOSNR},' ')
    , NVL(#{STKNUM},' ')
    , NVL(#{STPNUM},' ')
    , NVL(#{SWERKS},' ')
    , NVL(#{SLGORT},' ')
    , NVL(#{SDATBG},' ')
    , NVL(#{STDLNR},' ')
    , NVL(#{SSORNU},' ')
    , NVL(#{SSORIT},' ')
    , NVL(#{SMBLNR},' ')
    , NVL(#{SZEILE},' ')
    , NVL(#{SMJAHR},' ')
    , NVL(#{SXBLNR},' ')
    , NVL(#{SAPSTS},' ')
    , NVL(#{PTNRKY},' ')
    , NVL(#{NAME01},' ')
    , NVL(#{SLAND1},' ')
    , NVL(#{SBKTXT},' ')
    , TO_CHAR(SYSDATE,'YYYYMMDD')
    , TO_CHAR(SYSDATE,'HH24MISS')
    , #{SES_USER_ID}
    ,TO_CHAR(SYSDATE,'YYYYMMDD')
    ,TO_CHAR(SYSDATE,'HH24MISS')
    ,#{SES_USER_ID}
    , NVL(#{INDBZL},' ')
    , NVL(#{INDARC},' ')
    , NVL(#{UPDCHK},0)
    )
  </insert>
  
  <!-- [DL01] 영업오더할당 : 헤더 삭제 : SHPDH   -->
  <delete id="SHPDH_DELETE"  parameterType="hashmap">
  
    DELETE FROM SHPDH
    WHERE 1=1
      AND SHPOKY = #{SHPOKY} 
       
  </delete> 
  
  <!-- [DL01] 영업오더할당 : 아이템 삭제 : SHPDI   -->
  <delete id="SHPDI_DELETE"  parameterType="hashmap">
  
    DELETE FROM SHPDI
    WHERE 1=1
      AND SHPOKY = #{SHPOKY} 

  </delete> 
  
  <!-- [DL12] 영업오더조회 -->
  <select id="DL12_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT /*+ ORDERED INDEX(SM PK_SKUMA_NEW) INDEX(WH PK_WAHMA) INDEX(W1 PK_WAHMA) INDEX(W2 PK_WAHMA) INDEX(SH PK_SHPDH_NEW_NEW) INDEX(B1 IDX_BZPTN_NEW03) INDEX(B2 IDX_BZPTN_NEW03) INDEX(SR IDX_SHPDR_NEW_NEW01) */ IF.SVBELN AS SVBELN,
           IF.OWNRKY AS OWNRKY,
           IF.WAREKY AS WAREKY,
           WH.NAME01 AS WAREKYNM,
           IF.OTRQDT AS OTRQDT,
           IF.PTNROD AS PTNROD,
           DECODE(IF.DOCUTY,'266',W2.NAME01,
                            '267',W2.NAME01,
                                  B2.NAME01) AS PTNRODNM,
           IF.PTNRTO AS PTNRTO,
           DECODE(IF.DOCUTY,'266',W1.NAME01,
                            '267',W1.NAME01,
                                  B1.NAME01) AS PTNRTONM,
           IF.CUADDR AS CUADDR,
           IF.CTNAME AS CTNAME,
           IF.CTTEL1 AS CTTEL1,
           IF.SALENM AS SALENM,
           IF.SALTEL AS SALTEL,
           IF.TEXT01 AS TEXT01,
           IF.SKUKEY AS SKUKEY,
           SM.DESC01 AS DESC01,
           NVL(IF.QTYREQ,0) AS QTYREQ,
           IF.XDATS AS XDATS,
           IF.XTIMS AS XTIMS,
           DECODE(IF.C00102,'X','접수',
                            'N','확정',
                            'Y',DECODE(IF.XSTAT,'D',DECODE(IF.QTYREQ,0,'수량0확정',
                                                                        '출고작업'),
                                                'R','출고지시')) AS XSTAT,
           NVL(SH.SHPOKY,' ') AS SHPOKY,
           NVL(SH.WAREKY,' ') AS WAREKY2,
           NVL(SR.SHIPSQ,0) AS SHIPSQ,
           NVL(SR.CARNUM,' ') AS CARNUM,
           NVL(SR.RECNUM,' ') AS RECNUM,
           DECODE(NVL(SI.STATIT,' '),'FAL','할당완료',
                                     'PAL','부분할당',
                                     'FPC','피킹완료',
                                     'PAC','부분피킹',
                                     'FSH','출고완료',
                                     'PSH','부분출고',
                                     NVL(SI.STATIT,' ')) AS STATIT,
           DECODE(NVL(SI.STATIT,' '),'FAL',NVL(SUM(SI.QTALOC),0),
                                     'PAL',NVL(SUM(SI.QTALOC),0),
                                     'FPC',NVL(SUM(SI.QTJCMP),0),
                                     'PAC',NVL(SUM(SI.QTJCMP),0),
                                     'FSH',NVL(SUM(SI.QTSHPD),0),
                                     'PSH',NVL(SUM(SI.QTSHPD),0),
                                           0) AS QTSHPD
      FROM IFWMS113 IF
     LEFT OUTER JOIN SHPDI SI
                  ON IF.SVBELN = SI.SVBELN
                 AND IF.SPOSNR = SI.SPOSNR
     LEFT OUTER JOIN SHPDH SH
                  ON SH.SHPOKY = SI.SHPOKY
     LEFT OUTER JOIN SHPDR SR
                  ON SH.SHPOKY = SR.SHPOKY
                 AND SI.SHPOIT = SR.SHPOIT
     LEFT OUTER JOIN BZPTN B1
                  ON IF.OWNRKY = B1.OWNRKY
                 AND IF.PTNRTO = B1.PTNRKY
                 AND B1.PTNRTY = '0007'
     LEFT OUTER JOIN BZPTN B2
                  ON IF.OWNRKY = B2.OWNRKY
                 AND IF.PTNROD = B2.PTNRKY
                 AND B2.PTNRTY = '0001' 
     LEFT OUTER JOIN WAHMA WH
                  ON IF.WAREKY = WH.WAREKY
     LEFT OUTER JOIN WAHMA W1
                  ON IF.PTNRTO = W1.WAREKY
     LEFT OUTER JOIN WAHMA W2
                  ON IF.PTNROD = W2.WAREKY
     LEFT OUTER JOIN SKUMA SM
                  ON IF.OWNRKY = SM.OWNRKY
                  AND IF.SKUKEY = SM.SKUKEY
     WHERE 1=1
       <if test="RANGE_SQL != null and RANGE_SQL != ''">
      ${RANGE_SQL}
    </if>
      AND IF.XSTAT IN ('D','R') 
    GROUP BY IF.OWNRKY, IF.WAREKY, WH.NAME01, IF.SVBELN, IF.SKUKEY, IF.QTYREQ, IF.XSTAT, SI.STATIT, SH.WAREKY, IF.PTNROD, IF.PTNRTO, B2.NAME01, 
                B1.NAME01, IF.C00102, IF.OTRQDT, IF.CUADDR, IF.CTNAME, IF.CTTEL1, IF.SALENM, IF.SALTEL, IF.TEXT01, IF.XDATS, IF.XTIMS,
                SH.SHPOKY, SR.CARNUM, SR.RECNUM, SR.SHIPSQ, W1.NAME01, IF.DOCUTY, W2.NAME01, SM.DESC01
    ORDER BY IF.SVBELN, IF.SKUKEY
  
  </select>

  <!-- P_BATCH_ALLOCATION 프로시서 실행  -->
  <update id="P_BATCH_ALLOCATION_UPDATE" parameterType="hashmap">
      { call P_BATCH_ALLOCATION(#{SHPOKY}, #{SES_USER_ID}) }
  </update>
  
  <!-- P_BATCH_ALLOCATION_TRFIT 프로시서 실행  -->
  <update id="P_BATCH_ALLOCATION_TRFIT_UPDATE" parameterType="hashmap">
      { call P_BATCH_ALLOCATION_TRFIT(#{SHPOKY}, #{SES_USER_ID}) }
  </update>
  
  <!-- P_BATCH_ALLOCATION_SV_TRFIT 프로시서 실행  -->
  <update id="P_BATCH_ALLOCATION_SV_TRFIT" parameterType="hashmap">
      { call P_BATCH_ALLOCATION_SV_TRFIT(#{SHPOKY}, #{SES_USER_ID}) }
  </update>
  
  
  <!-- [DL02] 매입반품출고  : 헤더 조회 : GroupType = RTNPUR  -->
  <select id="DL02_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
  		SELECT 
			IF.SEBELN      AS KEY
			,     ' '     AS SHPOKY
			,IF.WAREKY AS WAREKY,
			WH.NAME01 AS WAREKYNM,
			'NEW' AS STATDO,
			ST.CDESC1 AS STATDONM
			,' ' AS ALSTKY       
			,DECODE(IF.DOCUTY, '266', IF.WAREKY, IF.PTNRKY) AS DPTNKY
			,DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 
			                                FROM WAHMA 
			                               WHERE WAREKY = IF.WAREKY),' '), BZ.NAME01) AS DPTNKYNM
			,DECODE(IF.DOCUTY, '266', IF.WAREKY, IF.PTNRKY) AS PTRCVR
			,DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 
			                                FROM WAHMA 
			                               WHERE WAREKY = IF.WAREKY),' '), BZ.NAME01)  AS PTRCVRNM
			,NVL(BZ.EXPTNK,' ') AS PGRC01
			,NVL(BZ.PTNG02,' ') AS PGRC02
			,NVL(BZ.PTNG03,' ')  AS PGRC03
			,NVL(BZ.PTNG04,' ') AS PGRC04
			,' ' AS PGRC05
			,' ' AS PTNBLK
			,TO_CHAR(SYSDATE,'YYYYMMDD') AS DOCDAT
			,'200' AS DOCCAT
			,DC.SHORTX AS DOCCATNM
			,IF.DOCUTY AS SHPMTY
			,D.SHORTX AS SHPMTYNM
			,IF.DOCUTY AS DOCUTY
			,IF.DLVDAT AS RQSHPD     
			,IF.BUYDAT AS RQARRD     
			
			,IF.SEBELN AS SEBELN
			,IF.OWNRKY AS OWNRKY 
			,IF.WARESR AS WARESR
			,IF.WARETG AS WARETG
			
			 FROM IFWMS103 IF
			     INNER JOIN DOCTM D
			                   ON D.DOCUTY = IF.DOCUTY
			     INNER JOIN SKUWC SW
			               ON SW.OWNRKY = IF.OWNRKY
			              AND SW.WAREKY = IF.WAREKY
			              AND SW.SKUKEY = IF.SKUKEY
			      LEFT OUTER JOIN WAHMA WH
			                   ON WH.WAREKY = IF.WAREKY
			      LEFT OUTER JOIN CMCDV ST
			                   ON ST.CMCDKY = 'STATDO'
			                  AND ST.CMCDVL = 'NEW'
			      LEFT OUTER JOIN BZPTN BZ
			                   ON BZ.OWNRKY = IF.OWNRKY
			                  AND BZ.PTNRKY = IF.PTNRKY
			                  AND BZ.PTNRTY = '0002'
			      LEFT OUTER JOIN WAHMA W
			                   ON W.WAREKY = IF.PTNRKY
			      LEFT OUTER JOIN DOCCM DC
			                   ON DC.DOCCAT = '200'
			WHERE IF.XSTAT IN ('R','D')
			AND IF.ORDQTY-IF.WMSMGT-IF.INNQTY > 0
			AND IF.DOCUTY = '270'
			AND IF.OWNRKY = #{OWNRKY}    
			AND IF.WAREKY = #{WAREKY}
			
			<if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
			
			<if test="RANGEITEM != ''">
            AND IF.SVBELN  <if test="FLAG == 'NOT'"> NOT IN </if>  
                           <if test="FLAG == 'IN'">  IN </if>  
                   (   SELECT IF.SVBELN FROM IFWMS113 IF 
                  WHERE IF.XSTAT = 'R' 
                  AND IF.STKNUM = ' '
                  AND IF.DOCUTY = '270'
                  AND IF.OWNRKY = #{OWNRKY}
                  AND IF.WAREKY = #{WAREKY}
              		<if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
               )
          </if>   
			
			GROUP BY 
			IF.SEBELN, 
			IF.WAREKY, 
			WH.NAME01, 
			ST.CDESC1,
			DECODE(IF.DOCUTY, '266', IF.WAREKY, IF.PTNRKY),
			DECODE(IF.DOCUTY, '266', IF.WAREKY, IF.PTNRKY),
			NVL(BZ.EXPTNK,' '),
			NVL(BZ.PTNG02,' '),
			NVL(BZ.PTNG03,' '),
			NVL(BZ.PTNG04,' '),
			IF.PTNRKY,
			DC.SHORTX ,
			IF.DOCUTY, 
			D.SHORTX,  
			BZ.NATNKY,
			IF.DOCUTY, 
			BZ.NAME01,
			IF.BUYDAT,  
			IF.BUYCDT,   
			IF.SEBELN,
			IF.OWNRKY,
			IF.WARESR,
			IF.WARETG,IF.DLVDAT 
			ORDER BY SEBELN
  </select>   
  
  <!-- [DL02] 매입반품출고  : 아이템 조회 : Group Type = RTNPUR -->
  <select id="DL02_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT IF.SEBELN AS KEY,
           ' ' AS SHPOKY,
           ' ' AS SHPOIT,
           'NEW' AS STATIT,
           ' ' AS STATITNM,
           SF_GET_ALSTKY( IF.OWNRKY, IF.WAREKY, NVL(IF.DOCUTY,' '), NVL(IF.WARESR,' ') , NVL(IF.PTNRKY,' '),  NVL(BZ.NATNKY,' '), NVL(NULL,' '), NVL(BZ.PTNG02,' '), NVL(BZ.PTNG03,' '), NVL(BZ.EXPTNK,' ')) AS ALSTKY,
           IF.ORDQTY AS QTYORG,
           IF.ORDQTY-IF.WMSMGT-IF.INNQTY AS QTSHPO,
           IF.ORDQTY-IF.WMSMGT-IF.INNQTY AS QTALLM,
           0 AS QTJCMP,
           0 AS QTSHPD,
           0 AS QTSHPC,
           SW.MEASKY AS MEASKY,
           IF.SKUKEY AS SKUKEY,
           SM.DESC01 AS DESC01,
           SM.DESC02 AS DESC02,
           IF.DUOMKY AS UOMKEY,
           1 AS QTPUOM,
           SM.DUOMKY AS DUOMKY,
           SM.QTDUOM AS QTDUOM,
           IF.SEBELN AS REFDKY,
           IF.SEBELP AS REFDIT,
           ' ' AS REFCAT,
           TO_CHAR(SYSDATE,'YYYYMMDD') AS REFDAT,
           SM.ASKU01 AS ASKU01,
           SM.ASKU02 AS ASKU02,
           SM.ASKU03 AS ASKU03,
           SM.ASKU04 AS ASKU04,
           SM.ASKU05 AS ASKU05,
           SM.EANCOD AS EANCOD,
           SM.GTINCD AS GTINCD,
           SM.SKUG01 AS SKUG01,
           SM.SKUG02 AS SKUG02,
           SM.SKUG03 AS SKUG03,
           SM.SKUG04 AS SKUG04,
           SM.SKUG05 AS SKUG05,
           SM.GRSWGT AS GRSWGT,
           SM.NETWGT AS NETWGT,
           SM.WGTUNT AS WGTUNT,
           SM.LENGTH AS LENGTH,
           SM.WIDTHW AS WIDTHW,
           SM.HEIGHT AS HEIGHT,
           SM.CUBICM AS CUBICM,
           SM.CAPACT AS CAPACT,
           ' ' AS LOTA01,
           ' ' AS LOTA02,
           ' ' AS LOTA03,
           ' ' AS LOTA04,
           ' ' AS LOTA05,
           ' ' AS LOTA06,
           ' ' AS LOTA07,
           ' ' AS LOTA08,
           ' ' AS LOTA09,
           ' ' AS LOTA10,
           ' ' AS LOTA11,
           ' ' AS LOTA12,
           ' ' AS LOTA13,
           ' ' AS LOTA14,
           ' ' AS LOTA15,
           0 AS LOTA16,
           0 AS LOTA17,
           0 AS LOTA18,
           0 AS LOTA19,
           0 AS LOTA20,
           IF.MANDT AS SMANDT,
           IF.SEQNO AS AWMSNO,
           IF.SEBELN AS SEBELN,
           IF.SEBELP AS SEBELP,
           ' ' AS SVBELN,
           ' ' AS SPOSNR,
           IF.REFDKY AS STRAID,
           SW.OBPROT AS OBLKYN,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           NVL(  TRUNC((IF.ORDQTY-IF.WMSMGT-IF.INNQTY) / DECODE(SM.QTDUOM, 0, NULL,SM.QTDUOM) ) ,0) AS BOXQTY,       
           NVL(  TRUNC((IF.ORDQTY-IF.WMSMGT-IF.INNQTY) / DECODE(SM.QTYSTD, 0, NULL,SM.QTYSTD) ) ,0) AS PLTQTY,       
           NVL(MOD(IF.ORDQTY-IF.ASNQTY-IF.INNQTY, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
           NVL(SM.GRSWGT,0) * NVL(IF.ORDQTY-IF.WMSMGT-IF.INNQTY,0)  AS GRSWGT,
           NVL(SM.GRSWGT,0)   AS GRSWGTCNT, 
           IF.C00110 AS NAME01
      FROM IFWMS103 IF
           INNER JOIN SKUMA SM
                   ON SM.OWNRKY = IF.OWNRKY
                  AND SM.SKUKEY = IF.SKUKEY
           INNER JOIN SKUWC SW
                   ON SW.OWNRKY = IF.OWNRKY
                  AND SW.WAREKY = IF.WAREKY
                  AND SW.SKUKEY = IF.SKUKEY
           LEFT OUTER JOIN BZPTN BZ
                   ON BZ.PTNRKY = IF.PTNRKY
                  AND BZ.PTNRTY = '0001'
                  AND BZ.OWNRKY = IF.OWNRKY
    WHERE  IF.XSTAT IN ('R','D')
       AND IF.ORDQTY-IF.WMSMGT-IF.INNQTY > 0
       <if test="SHPOKYS == null and SHPOKYS == ''">
       AND IF.DOCUTY = '270'
       </if>
       AND IF.WAREKY = #{WAREKY}
       AND IF.OWNRKY = #{OWNRKY}
       AND IF.SEBELN = #{SEBELN}
     ORDER BY IF.SEBELN, IF.SEBELP
  </select>   
  
  
  
  
  <!-- [DL03] 출고지시 : 헤더 조회 : Group Type =  : DBL.IFWMS113_03.HEADERFIND-->
  <select id="DL03_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
	  SELECT I.SVBELN AS KEY,
	       I.OWNRKY AS OWNRKY,
	       MAX(I.SKUG05) AS SKUG05,
	       I.WAREKY AS WAREKY,
	       I.WARESR AS WARESR,
	       I.DOCUTY AS DOCUTY,
	       I.ORDTYP AS ORDTYP,
	       I.ORDDAT AS ORDDAT,
	       I.ERPCDT AS ERPCDT,
	       I.SVBELN AS SVBELN,
	       I.OTRQDT AS OTRQDT,
	       I.PTNRTO AS PTNRTO,
	       B.NAME01 AS PTNRTONM,
	       I.PTNROD AS PTNROD,
	       B2.NAME01 AS PTNRODNM,
	       I.DIRDVY AS DIRDVY,
	       I.DIRSUP AS DIRSUP,
	       I.CUSRID AS CUSRID,
	       I.CUNAME AS CUNAME,
	       I.CUPOST AS CUPOST,
	       I.CUNATN AS CUNATN,
	       I.CUTEL1 AS CUTEL1,
	       I.CUTEL2 AS CUTEL2,
	       I.CUMAIL AS CUMAIL,
	       I.CUADDR AS CUADDR,
	       MAX(I.CTNAME) AS CTNAME,
	       I.CTTEL1 AS CTTEL1,
	       I.SALENM AS SALENM,
	       I.SALTEL AS SALTEL,
	       MAX(I.TEXT01) AS TEXT01,
	       SUM(OBOXQTY) AS BOXQTY,
	       SUM(RBOXQTY) AS BXIQTY,
	       SP.REGNKY AS REGNKY,
	       SP.REGNNM AS REGNNM,
	       B.NAME03 AS NAME03B,
	       I.C00102 AS C00102,
	       MAX(I.XTIMS) AS ERPCTM,
	       MAX(I.XDATS) AS CREDAT,
	       (CASE WHEN NVL(OM.XLS_REAL_PATH,'**') LIKE 'S%' THEN '다운로드' ELSE ' ' END) AS FILEDN,
	       B2.PTNG08 AS PTNG08
	 FROM (
	        SELECT SM.SKUG05, 
	               SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) ORDTOT,
	               NVL(CASE WHEN NVL(S.USEQTY, 0) >= SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) 
	                            THEN SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) END, 0) STKTOT,
	               I.MANDT, I.SEQNO, I.ORDTYP, I.ORDDAT, I.CHKSEQ, I.ORDSEQ, I.SVBELN, I.SPOSNR, I.DOCUTY, I.ERPCDT, I.ERPCTM, I.ERPMDT, I.OTRQDT,
	               I.PTNRTO, I.PTNROD, I.OWNRKY, I.WAREKY, I.WARESR, I.WARETG, I.SKUKEY, I.QTYORG, I.QTYREQ, I.WMSMGT, I.QTSHPD, I.DUOMKY, I.NETPR,
	               I.SALDPT, I.REFDKY, I.REDKIT, I.REDDAT, I.STKNUM, I.SDATBG, I.DIRDVY, I.DIRSUP, I.SALEPR, I.DISRAT, I.SELLPR, I.SELAMT, I.VATAMT,
	               I.CUSRID, I.CUNAME, I.CUPOST, I.CUNATN, I.CUTEL1, I.CUTEL2, I.CUMAIL, I.CUADDR, I.CTNAME, I.CTTEL1, I.SALENM, I.SALTEL, I.TEXT01,
	               I.TEXT02, I.TEXT03, I.C00101, I.C00102, I.C00103, I.C00104, I.C00105, I.C00106, I.C00107, I.C00108, I.C00109, I.C00110, I.N00101,
	               I.N00102, I.N00103, I.N00104, I.N00105, I.N00106, I.N00107, I.N00108, I.N00109, I.N00110, I.USRID1, I.DEPTID1, I.USRID2, I.DEPTID2,
	               I.USRID3, I.DEPTID3, I.USRID4, I.DEPTID4, I.CREDAT, I.CRETIM, I.LMODAT, I.LMOTIM, I.STATUS, I.TDATE, I.XDATS, I.XSTAT, I.XTIMS, I.ERTXT, SM.DESC01, 
	               TRUNC(I.QTYORG / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1) OBOXQTY,
	               TRUNC(I.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1) RBOXQTY
	          FROM IFWMS113 I INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
	                     LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
	                                        FROM STKKY 
	                                       WHERE OWNRKY = #{OWNRKY} AND LOTA06 = '00' AND QTSIWH > 0 
	                                       GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
	         WHERE I.DOCUTY IN ('211','212','213','214','215','216')
	           AND I.XSTAT = 'R'
	           AND I.MANDT = 'SAP'
	           AND I.CHKSEQ != ' '
	           AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0
	            <if test="SVBELNS == ''">
	               AND I.C00102 = 'N'
	             </if> 
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = #{WAREKY}
	           
	           <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if> 
	           
	               ) I LEFT OUTER JOIN (SELECT DISTINCT OWNRKY, REGNKY, POSTCD, REGNNM 
	                                      FROM SHPMA) SP ON I.CUPOST = SP.POSTCD AND I.OWNRKY = SP.OWNRKY
	           INNER JOIN SKUMA SM2 ON SM2.OWNRKY = I.OWNRKY AND SM2.SKUKEY = I.SKUKEY
	           LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY = '0007'
	           LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
	           LEFT OUTER JOIN SA_ORDER_MST@WMSTOTOS OM ON OM.COMP_CD = I.USRID3 AND OM.ORD_NO = I.SVBELN
	 WHERE 1 = 1
	   AND I.OWNRKY = #{OWNRKY}
	   
	 <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if> 
	 <if test="SVBELNS != ''">
	    AND I.SVBELN IN (${SVBELNS})
	 </if> 
	 GROUP BY I.MANDT, I.OWNRKY, I.WAREKY, I.WARESR, I.DOCUTY, I.ORDTYP, I.ORDDAT, I.ERPCDT, I.SVBELN, I.OTRQDT, 
	          I.PTNRTO, I.PTNROD, B2.NAME01, B.NAME01, DIRDVY, DIRSUP, CUSRID, CUNAME, CUPOST, CUNATN, CUTEL1, 
	          CUTEL2, CUMAIL, CUADDR, CTTEL1, SALENM, SALTEL, REGNKY, REGNNM, B.NAME03, I.C00102, B2.PTNG08, OM.XLS_REAL_PATH
	 <if test="ORDTYPE == 'NO'">
	      HAVING (SUM(I.STKTOT) >= SUM(I.ORDTOT))
	    </if>  
	    <if test="ORDTYPE == 'ONE'">
	      HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
	    </if>  
	    <if test="ORDTYPE == 'MORE'">
	      HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
	    </if>  
	    <if test="ORDTYPE == 'POOR'">
	      HAVING (SUM(I.STKTOT) = 0)
	    </if>  
	 ORDER BY SVBELN
 
  </select>   
  
	<select id="DL02_ITEM_SAVED_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT SI.SHPOKY AS KEY,
		       SI.SHPOKY AS SHPOKY,
		       SI.SHPOIT AS SHPOIT,
		       SI.STATIT AS STATIT,
		       CV.CDESC1 AS STATITNM,
		       SI.SKUKEY AS SKUKEY,
		       SI.QTSHPO AS QTSHPO,
		       SI.QTSHPO - SI.QTALOC AS QTALLM,
		       SI.QTYORG AS QTYORG,
		       DECODE(SI.STATIT, 'REF', SI.QTJCMP, SI.QTYREF) AS QTYREF,
		       SI.QTAPPO AS QTAPPO,
		       SI.QTALOC AS QTALOC,
		       F_PRE_QTYPRE(SH.OWNRKY, SH.WAREKY, SI.SKUKEY) AS QTYPRE,
		       SI.QTJCMP AS QTJCMP,
		       SI.QTSHPD AS QTSHPD,
		       SI.QTSHPC AS QTSHPC,
		       SI.QTYUOM AS QTYUOM,
		       SI.MEASKY AS MEASKY,
		       SI.UOMKEY AS UOMKEY,
		       SI.QTPUOM AS QTPUOM,
		       SI.DUOMKY AS DUOMKY,
		       SI.QTDUOM AS QTDUOM,
		       SI.SASTKY AS SASTKY,
		       SI.ALSTKY AS ALSTKY,
		       SI.TKFLKY AS TKFLKY,
		       SI.ESHPKY AS ESHPKY,
		       SI.ESHPIT AS ESHPIT,
		       SI.OPURKY AS OPURKY,
		       SI.REFDKY AS REFDKY,
		       SI.REFDIT AS REFDIT,
		       SI.REFCAT AS REFCAT,
		       SI.REFDAT AS REFDAT,
		       SI.EXSUBS AS EXSUBS,
		       SI.DESC01 AS DESC01,
		       SI.DESC02 AS DESC02,
		       SI.ASKU01 AS ASKU01,
		       SI.ASKU02 AS ASKU02,
		       SI.ASKU03 AS ASKU03,
		       SI.ASKU04 AS ASKU04,
		       SI.ASKU05 AS ASKU05,
		       SI.EANCOD AS EANCOD,
		       SI.GTINCD AS GTINCD,
		       SI.SKUG01 AS SKUG01,
		       SI.SKUG02 AS SKUG02,
		       SI.SKUG03 AS SKUG03,
		       SI.SKUG04 AS SKUG04,
		       SI.SKUG05 AS SKUG05,
		       SI.GRSWGT AS GRSWGT,
		       SI.NETWGT AS NETWGT,
		       SI.WGTUNT AS WGTUNT,
		       SI.LENGTH AS LENGTH,
		       SI.WIDTHW AS WIDTHW,
		       SI.HEIGHT AS HEIGHT,
		       SI.CUBICM AS CUBICM,
		       CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
		            ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
		       SI.CAPACT AS CAPACT,
		       SI.PROCHA AS PROCHA,
		       SI.AREAKY AS AREAKY,
		       SI.LOTA01 AS LOTA01,
		       SI.LOTA02 AS LOTA02,
		       SI.LOTA03 AS LOTA03,
		       SI.LOTA04 AS LOTA04,
		       SI.LOTA05 AS LOTA05,
		       SI.LOTA06 AS LOTA06,
		       SI.LOTA07 AS LOTA07,
		       SI.LOTA08 AS LOTA08,
		       SI.LOTA09 AS LOTA09,
		       SI.LOTA10 AS LOTA10,
		       SI.LOTA11 AS LOTA11,
		       SI.LOTA12 AS LOTA12,
		       SI.LOTA13 AS LOTA13,
		       SI.LOTA14 AS LOTA14,
		       SI.LOTA15 AS LOTA15,
		       SI.LOTA16 AS LOTA16,
		       SI.LOTA17 AS LOTA17,
		       SI.LOTA18 AS LOTA18,
		       SI.LOTA19 AS LOTA19,
		       SI.LOTA20 AS LOTA20,
		       SI.AWMSNO AS AWMSNO,
		       SI.SMANDT AS SMANDT,
		       SI.SEBELN AS SEBELN,
		       SI.SEBELP AS SEBELP,
		       SI.STRAID AS STRAID,
		       SI.SVBELN AS SVBELN,
		       SI.SPOSNR AS SPOSNR,
		       SI.STKNUM AS STKNUM,
		       SI.STPNUM AS STPNUM,
		       SI.SWERKS AS SWERKS,
		       SI.SLGORT AS SLGORT,
		       SI.SDATBG AS SDATBG,
		       SI.STDLNR AS STDLNR,
		       SI.SSORNU AS SSORNU,
		       SI.SSORIT AS SSORIT,
		       SI.SMBLNR AS SMBLNR,
		       SI.SZEILE AS SZEILE,
		       SI.SMJAHR AS SMJAHR,
		       SI.SXBLNR AS SXBLNR,
		       SI.SAPSTS AS SAPSTS,
		       SI.PTNRKY AS PTNRKY,
		       SI.NAME01 AS NAME01,
		       SI.SLAND1 AS SLAND1,
		       SI.SBKTXT AS SBKTXT,
		       SH.SHPMTY AS SHPMTY,
		       SI.STRAID AS VGBEL,
		       NVL(SM.QTYSTD,0) AS PLIQTY,
		       NVL(SM.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS BOXQTY,       
		       NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTYSTD, NULL,0,SM.QTYSTD) ) ,0) AS PLTQTY,       
		       NVL(MOD(SI.QTSHPO, DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM)),0) AS REMQTY ,            
		       SR.ARRIVA AS ARRIVA,
		       SR.CARDAT AS CARDAT,
		       SR.CARNUM AS CARNUM,
		       SR.SHIPSQ AS SHIPSQ,
		       SR.SORTSQ AS SORTSQ,
		       SR.DRIVER AS DRIVER,
		       SR.RECAYN AS RECAYN,
		       SI.QTYREF AS QTYREF,
		       SI.QTSHPC AS QTSHPC,
		       SW.OBPROT AS OBLKYN,
		       (SELECT COUNT(*) FROM SHPDI WHERE SHPOKY = SH.SHPOKY)  AS ITEMCOUNT
		
		  FROM SHPDH SH
		       INNER JOIN SHPDI SI
		               ON SH.SHPOKY = SI.SHPOKY
		              AND SI.SHPOKY IN (SELECT SHPOKY FROM SHPDI)
		       LEFT OUTER JOIN SHPDR SR
		               ON SR.SHPOKY = SI.SHPOKY
		              AND SR.SHPOIT = SI.SHPOIT
		       INNER JOIN SKUMA SM
		               ON SM.OWNRKY = SH.OWNRKY
		              AND SM.SKUKEY = SI.SKUKEY
		        INNER JOIN SKUWC SW
                   ON SW.OWNRKY = SH.OWNRKY
                  AND SW.WAREKY = SH.WAREKY
                  AND SW.SKUKEY = SI.SKUKEY
		       INNER JOIN CMCDV CV
		               ON CV.CMCDKY = 'STATIT'
		              AND CV.CMCDVL = SI.STATIT
		WHERE  1 = 1

		     AND SH.SHPOKY IN (${SHPOKYS}) 
		
		ORDER BY SI.SHPOKY, SI.SHPOIT
	</select>
  
  <!-- [DL03] 출고지시 : 헤더 조회 : Group Type =  : ERPIF.IFWMS113_03.ITEMFIND -->
  <select id="DL03_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT I.SVBELN KEY,
           TO_NUMBER(I.ORDTOT) ORDTOT,
           TO_NUMBER(NVL(I.USEQTY, 0)) USEQTY,
           I.MANDT MANDT,
           I.SEQNO SEQNO,
           I.ORDTYP ORDTYP,
           I.ORDDAT ORDDAT,
           I.CHKSEQ CHKSEQ,
           I.ORDSEQ ORDSEQ,
           I.SVBELN SVBELN,
           I.SPOSNR SPOSNR,
           I.DOCUTY DOCUTY,
           I.ERPCDT ERPCDT,
           I.ERPCTM ERPCTM,
           I.ERPMDT ERPMDT,
           I.OTRQDT OTRQDT,
           I.PTNRTO PTNRTO,
           I.PTNROD PTNROD,
           I.OWNRKY OWNRKY,
           I.WAREKY WAREKY,
           I.WARESR WARESR,
           I.WARETG WARETG,
           I.SKUKEY SKUKEY,
           I.QTYORG QTYORG,
           I.QTYREQ QTYREQ,
           I.WMSMGT WMSMGT,
           I.QTSHPD QTSHPD,
           I.DUOMKY DUOMKY,
           I.NETPR NETPR,
           I.SALDPT SALDPT,
           I.REFDKY REFDKY,
           I.REDKIT REDKIT,
           I.REDDAT REDDAT,
           I.STKNUM STKNUM,
           I.SDATBG SDATBG,
           I.DIRDVY DIRDVY,
           I.DIRSUP DIRSUP,
           I.SALEPR SALEPR,
           I.DISRAT DISRAT,
           I.SELLPR SELLPR,
           I.SELAMT SELAMT,
           I.VATAMT VATAMT,
           I.CUSRID CUSRID,
           I.CUNAME CUNAME,
           I.CUPOST CUPOST,
           I.CUNATN CUNATN,
           I.CUTEL1 CUTEL1,
           I.CUTEL2 CUTEL2,
           I.CUMAIL CUMAIL,
           I.CUADDR CUADDR,
           I.CTNAME CTNAME,
           I.CTTEL1 CTTEL1,
           I.SALENM SALENM,
           I.SALTEL SALTEL,
           I.TEXT01 TEXT01,
           I.TEXT02 TEXT02,
           I.TEXT03 TEXT03,
           I.C00101 C00101,
           I.C00102 C00102,
           I.C00103 C00103,
           I.C00104 C00104,
           I.C00105 C00105,
           I.C00106 C00106,
           I.C00107 C00107,
           I.C00108 C00108,
           I.C00109 C00109,
           I.C00110 C00110,
           I.N00101 N00101,
           I.N00102 N00102,
           I.N00103 N00103,
           I.N00104 N00104,
           I.N00105 N00105,
           I.N00106 N00106,
           I.N00107 N00107,
           I.N00108 N00108,
           I.N00109 N00109,
           I.N00110 N00110,
           I.USRID1 USRID1,
           I.DEPTID1 DEPTID1,
           I.USRID2 USRID2,
           I.DEPTID2 DEPTID2,
           I.USRID3 USRID3,
           I.DEPTID3 DEPTID3,
           I.USRID4 USRID4,
           I.DEPTID4 DEPTID4,
           I.CREDAT CREDAT,
           I.CRETIM CRETIM,
           I.LMODAT LMODAT,
           I.LMOTIM LMOTIM,
           I.STATUS STATUS,
           I.TDATE TDATE ,
           I.XSTAT XSTAT ,
           I.ERTXT ERTXT ,
           I.DESC01 DESC01,
           I.PLIQTY PLIQTY,
           I.BXIQTY BXIQTY,
           I.BOXQTY BOXQTY,
           I.PLTQTY PLTQTY,
           I.REMQTY REMQTY,
           I.PLBQTY PLBQTY
      FROM
           (SELECT /*+ INDEX(S IDX_STKKY_NEW29) INDEX(I IDX_IFWMS11301) */  SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) AS ORDTOT,
                   S.USEQTY USEQTY,
                   I.MANDT MANDT ,
                   I.SEQNO SEQNO ,
                   I.ORDTYP ORDTYP ,
                   I.ORDDAT ORDDAT ,
                   I.CHKSEQ CHKSEQ ,
                   I.ORDSEQ ORDSEQ ,
                   I.SVBELN SVBELN ,
                   I.SPOSNR SPOSNR ,
                   I.DOCUTY DOCUTY ,
                   I.ERPCDT ERPCDT ,
                   I.ERPCTM ERPCTM ,
                   I.ERPMDT ERPMDT ,
                   I.OTRQDT OTRQDT ,
                   I.PTNRTO PTNRTO ,
                   I.PTNROD PTNROD ,
                   I.OWNRKY OWNRKY ,
                   I.WAREKY WAREKY ,
                   I.WARESR WARESR ,
                   I.WARETG WARETG ,
                   I.SKUKEY SKUKEY ,
                   I.QTYORG QTYORG ,
                   I.QTYREQ QTYREQ ,
                   I.WMSMGT WMSMGT ,
                   I.QTSHPD QTSHPD ,
                   I.DUOMKY DUOMKY ,
                   I.NETPR NETPR ,
                   I.SALDPT SALDPT ,
                   I.REFDKY REFDKY ,
                   I.REDKIT REDKIT ,
                   I.REDDAT REDDAT ,
                   I.STKNUM STKNUM ,
                   I.SDATBG SDATBG ,
                   I.DIRDVY DIRDVY ,
                   I.DIRSUP DIRSUP ,
                   I.SALEPR SALEPR ,
                   I.DISRAT DISRAT ,
                   I.SELLPR SELLPR ,
                   I.SELAMT SELAMT ,
                   I.VATAMT VATAMT ,
                   I.CUSRID CUSRID ,
                   I.CUNAME CUNAME ,
                   I.CUPOST CUPOST ,
                   I.CUNATN CUNATN ,
                   I.CUTEL1 CUTEL1 ,
                   I.CUTEL2 CUTEL2 ,
                   I.CUMAIL CUMAIL ,
                   I.CUADDR CUADDR ,
                   I.CTNAME CTNAME ,
                   I.CTTEL1 CTTEL1 ,
                   I.SALENM SALENM ,
                   I.SALTEL SALTEL ,
                   I.TEXT01 TEXT01 ,
                   I.TEXT02 TEXT02 ,
                   I.TEXT03 TEXT03 ,
                   I.C00101 C00101 ,
                   I.C00102 C00102 ,
                   I.C00103 C00103 ,
                   I.C00104 C00104 ,
                   I.C00105 C00105 ,
                   I.C00106 C00106 ,
                   I.C00107 C00107 ,
                   I.C00108 C00108 ,
                   I.C00109 C00109 ,
                   I.C00110 C00110 ,
                   I.N00101 N00101 ,
                   I.N00102 N00102 ,
                   I.N00103 N00103 ,
                   I.N00104 N00104 ,
                   I.N00105 N00105 ,
                   I.N00106 N00106 ,
                   I.N00107 N00107 ,
                   I.N00108 N00108 ,
                   I.N00109 N00109 ,
                   I.N00110 N00110 ,
                   I.USRID1 USRID1 ,
                   I.DEPTID1 DEPTID1 ,
                   I.USRID2 USRID2 ,
                   I.DEPTID2 DEPTID2 ,
                   I.USRID3 USRID3 ,
                   I.DEPTID3 DEPTID3 ,
                   I.USRID4 USRID4 ,
                   I.DEPTID4 DEPTID4 ,
                   I.CREDAT CREDAT ,
                   I.CRETIM CRETIM ,
                   I.LMODAT LMODAT ,
                   I.LMOTIM LMOTIM ,
                   I.STATUS STATUS ,
                   I.TDATE TDATE ,
                   I.XSTAT XSTAT ,
                   I.ERTXT ERTXT ,
                   SM.DESC01 DESC01 ,
                   NVL(SM.QTYSTD, 0) PLIQTY ,
                   NVL(SM.QTDUOM, 0) BXIQTY ,
                   NVL( TRUNC((I.QTYREQ) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) , 0) AS BOXQTY ,
                   NVL( TRUNC((I.QTYREQ) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) , 0) AS PLTQTY ,
                   NVL(MOD(I.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)), 0) AS REMQTY,
                   NVL(SM.QTYSTD,0) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) AS PLBQTY
              FROM IFWMS113 I LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
                                                 FROM STKKY 
                                                WHERE OWNRKY = #{OWNRKY} AND LOTA06 = '00' AND QTSIWH > 0 
                                                GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
                              INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
             WHERE I.XSTAT = 'R'
               AND I.OWNRKY = #{OWNRKY}
               AND I.SVBELN = #{SVBELN}
            ) I
     WHERE 1=1
       AND I.DOCUTY IN ('211','212','213','214','215','216')
       AND I.XSTAT = 'R'
	 <if test="SVBELNS != ''">
       AND I.C00102 = 'N'  
	 </if>     
       <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if> 
    ORDER BY I.SVBELN, I.ORDSEQ, I.SKUKEY
  
  </select>   
  
  <!-- [DL03] 출고지시(D/O마감) : 출고지시 : Group Type =  -->
  <update id="ACCEPT_UPDATE"  parameterType="hashmap">
    UPDATE IFWMS113
       SET C00101 = 'ACP',
           C00102 = 'Y',
           USRID2 = #{SES_USER_ID}
     WHERE MANDT = 'SAP'
       AND SVBELN = #{SVBELN}
       AND C00102 = 'N'
       AND XSTAT = 'R'  
  </update>
  
  <!-- [DL04] 출고지시(D/O마감) 해제 : 헤더 조회 : Group Type =  -->
  <select id="DL04_HEAD_LIST" parameterType="hashmap" resultType="DataMap">

		SELECT I.SVBELN AS KEY,
		       I.OWNRKY AS OWNRKY,
		       MAX(I.SKUG05) AS SKUG05,
		       MAX(I.WAREKY) AS WAREKY,
		       I.WARESR AS WARESR,
		       BZ.NAME01 AS WARESRNM,
		       I.DOCUTY AS DOCUTY,
		       D.SHORTX AS DOCUTYNM,
		       I.ORDTYP AS ORDTYP,
		       I.ORDDAT AS ORDDAT,
		       I.ERPCDT AS ERPCDT,
		       I.SVBELN AS SVBELN,
		       MAX(I.REFDKY) AS REFDKY,
		       I.OTRQDT AS OTRQDT,
		       I.PTNRTO AS PTNRTO,
		       DECODE(I.DOCUTY, '266', W.NAME01, B2.NAME01) AS PTNRTONM,
		       I.PTNROD AS PTNROD,
		       B2.NAME01 AS PTNRODNM,
		       I.DIRDVY AS DIRDVY,
		       I.DIRSUP AS DIRSUP,
		       MAX(I.CUSRID) AS CUSRID,
		       MAX(I.CUNAME) AS CUNAME,
		       MAX(I.CUPOST) AS CUPOST,
		       MAX(I.CUNATN) AS CUNATN,
		       MAX(I.CUTEL1) AS CUTEL1,
		       MAX(I.CUTEL2) AS CUTEL2,
		       MAX(I.CUMAIL) AS CUMAIL,
		       MAX(I.CUADDR) AS CUADDR,
		       MAX(I.CTNAME) AS CTNAME,
		       MAX(I.CTTEL1) AS CTTEL1,
		       MAX(I.SALENM) AS SALENM,
		       MAX(I.SALTEL) AS SALTEL,
		       MAX(I.TEXT01) AS TEXT01,
		       SUM(OBOXQTY) AS BOXQTY,
		       SUM(RBOXQTY) AS BXIQTY,
		       SP.REGNKY AS REGNKY,
		       SP.REGNNM AS REGNNM,
		       SF_GET_WAHNM(B2.NAME03) AS NAME03B,
		       MAX(C.CARNUM) AS CARNUM,
		       I.C00102 AS C00102,
		       MAX(I.XTIMS) AS ERPCTM,
		       B2.PTNG08 AS PTNG08,
		       MAX(I.XDATS) AS CREDAT
		  FROM (
		        SELECT /*+ ORDERED */ SM.SKUG05, 
		               SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) ORDTOT,
		               NVL(CASE WHEN NVL(S.USEQTY, 0) >= SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) 
		                        THEN SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) END, 0) STKTOT,
		               I.MANDT, I.SEQNO, I.ORDTYP, I.ORDDAT, I.CHKSEQ, I.ORDSEQ, I.SVBELN, I.SPOSNR, I.DOCUTY, I.ERPCDT, I.ERPCTM, I.ERPMDT, I.OTRQDT,
		               I.PTNRTO, I.PTNROD, I.OWNRKY, I.WAREKY, I.WARESR, I.WARETG, I.SKUKEY, I.QTYORG, I.QTYREQ, I.WMSMGT, I.QTSHPD, I.DUOMKY, I.NETPR,
		               I.SALDPT, I.REFDKY, I.REDKIT, I.REDDAT, I.STKNUM, I.SDATBG, I.DIRDVY, I.DIRSUP, I.SALEPR, I.DISRAT, I.SELLPR, I.SELAMT, I.VATAMT,
		               I.CUSRID, I.CUNAME, I.CUPOST, I.CUNATN, I.CUTEL1, I.CUTEL2, I.CUMAIL, I.CUADDR, I.CTNAME, I.CTTEL1, I.SALENM, I.SALTEL, I.TEXT01,
		               I.TEXT02, I.TEXT03, I.C00101, I.C00102, I.C00103, I.C00104, I.C00105, I.C00106, I.C00107, I.C00108, I.C00109, I.C00110, I.N00101,
		               I.N00102, I.N00103, I.N00104, I.N00105, I.N00106, I.N00107, I.N00108, I.N00109, I.N00110, I.USRID1, I.DEPTID1, I.USRID2, I.DEPTID2,
		               I.USRID3, I.DEPTID3, I.USRID4, I.DEPTID4, I.CREDAT, I.CRETIM, I.LMODAT, I.LMOTIM, I.STATUS, I.TDATE, I.XSTAT, I.XDATS, I.XTIMS, I.ERTXT, SM.DESC01, 
		               TRUNC(I.QTYORG / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1) OBOXQTY,
		               TRUNC(I.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1) RBOXQTY
		          FROM IFWMS113 I INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
		                        LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
		                                           FROM STKKY 
		                                          WHERE OWNRKY = #{OWNRKY} AND LOTA06 = '00' AND QTSIWH > 0 
		                                          GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
		         WHERE I.DOCUTY IN ('211','212','213','214','215','216')
		           AND I.XSTAT = 'R'
		           AND I.CHKSEQ != ' '
		           AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0
		           AND I.WMSMGT + I.QTSHPD = 0
					           
				 <if test="SVBELNS != ''">
		          	AND I.C00102 = 'N'
				    AND I.SVBELN IN (${SVBELNS})
				 </if> 
				 <if test="SVBELNS == ''">
		           AND I.C00102 = 'Y'
		         </if>
		           AND I.OWNRKY = #{OWNRKY}     
		           <if test="WAREKY != ''">
				      AND I.WAREKY = #{WAREKY}
				    </if>    
		           
		           
		           <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>  
		           
		       ) I LEFT OUTER JOIN (SELECT DISTINCT OWNRKY, REGNKY, POSTCD, REGNNM 
		                              FROM SHPMA) SP ON I.CUPOST = SP.POSTCD AND I.OWNRKY = SP.OWNRKY
		           INNER JOIN SKUMA SM2 ON SM2.OWNRKY = I.OWNRKY AND SM2.SKUKEY = I.SKUKEY
		           INNER JOIN DOCTM D ON D.DOCUTY = I.DOCUTY 
		           LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		           LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		           LEFT OUTER JOIN WAHMA W ON W.WAREKY = I.PTNRTO 
		           LEFT OUTER JOIN BZPTN BZ ON BZ.OWNRKY = I.OWNRKY AND BZ.PTNRKY = I.WARESR AND BZ.PTNRTY IN ('0003', '0004') 
		           LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM 
		                              FROM CARFX 
		                             GROUP BY OWNRKY, WAREKY, PTNRKY) C ON I.OWNRKY = C.OWNRKY AND I.WAREKY = C.WAREKY AND I.PTNRTO = C.PTNRKY
		 WHERE 1 = 1
		 
		   <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>  
		   
		 GROUP BY I.MANDT, I.OWNRKY, I.WARESR, I.DOCUTY, D.SHORTX, I.ORDTYP, I.ORDDAT, I.ERPCDT, I.SVBELN, I.OTRQDT, I.PTNRTO, W.NAME01, 
		         I.PTNROD, B.NAME01, B2.NAME01, BZ.NAME01, DIRDVY, DIRSUP, REGNKY, REGNNM, B2.NAME03, I.C00102, B2.PTNG08
		 <if test="ORDTYPE == 'NO'">
	      HAVING (SUM(I.STKTOT) >= SUM(I.ORDTOT))
	    </if>  
	    <if test="ORDTYPE == 'ONE'">
	      HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
	    </if>  
	    <if test="ORDTYPE == 'MORE'">
	      HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
	    </if>  
	    <if test="ORDTYPE == 'POOR'">
	      HAVING (SUM(I.STKTOT) = 0)
	    </if>  
	    
		 ORDER BY SVBELN
		   
    </select>   
    
  <!-- [DL04] 출고지시(D/O마감) 해제 : 아이템 조회   -->
  <select id="DL04_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT I.SVBELN KEY,
           TO_NUMBER(I.ORDTOT) ORDTOT,
           TO_NUMBER(NVL(I.USEQTY, 0)) USEQTY,
           I.MANDT MANDT,
           I.SEQNO SEQNO,
           I.ORDTYP ORDTYP,
           I.ORDDAT ORDDAT,
           I.CHKSEQ CHKSEQ,
           I.ORDSEQ ORDSEQ,
           I.SVBELN SVBELN,
           I.SPOSNR SPOSNR,
           I.DOCUTY DOCUTY,
           I.ERPCDT ERPCDT,
           I.ERPCTM ERPCTM,
           I.ERPMDT ERPMDT,
           I.OTRQDT OTRQDT,
           I.PTNRTO PTNRTO,
           I.PTNROD PTNROD,
           I.OWNRKY OWNRKY,
           I.WAREKY WAREKY,
           I.WARESR WARESR,
           I.WARETG WARETG,
           I.SKUKEY SKUKEY,
           I.QTYORG QTYORG,
           I.QTYREQ QTYREQ,
           I.WMSMGT WMSMGT,
           I.QTSHPD QTSHPD,
           I.DUOMKY DUOMKY,
           I.NETPR NETPR,
           I.SALDPT SALDPT,
           I.REFDKY REFDKY,
           I.REDKIT REDKIT,
           I.REDDAT REDDAT,
           I.STKNUM STKNUM,
           I.SDATBG SDATBG,
           I.DIRDVY DIRDVY,
           I.DIRSUP DIRSUP,
           I.SALEPR SALEPR,
           I.DISRAT DISRAT,
           I.SELLPR SELLPR,
           I.SELAMT SELAMT,
           I.VATAMT VATAMT,
           I.CUSRID CUSRID,
           I.CUNAME CUNAME,
           I.CUPOST CUPOST,
           I.CUNATN CUNATN,
           I.CUTEL1 CUTEL1,
           I.CUTEL2 CUTEL2,
           I.CUMAIL CUMAIL,
           I.CUADDR CUADDR,
           I.CTNAME CTNAME,
           I.CTTEL1 CTTEL1,
           I.SALENM SALENM,
           I.SALTEL SALTEL,
           I.TEXT01 TEXT01,
           I.TEXT02 TEXT02,
           I.TEXT03 TEXT03,
           I.C00101 C00101,
           I.C00102 C00102,
           I.C00103 C00103,
           I.C00104 C00104,
           I.C00105 C00105,
           I.C00106 C00106,
           I.C00107 C00107,
           I.C00108 C00108,
           I.C00109 C00109,
           I.C00110 C00110,
           I.N00101 N00101,
           I.N00102 N00102,
           I.N00103 N00103,
           I.N00104 N00104,
           I.N00105 N00105,
           I.N00106 N00106,
           I.N00107 N00107,
           I.N00108 N00108,
           I.N00109 N00109,
           I.N00110 N00110,
           I.USRID1 USRID1,
           I.DEPTID1 DEPTID1,
           I.USRID2 USRID2,
           I.DEPTID2 DEPTID2,
           I.USRID3 USRID3,
           I.DEPTID3 DEPTID3,
           I.USRID4 USRID4,
           I.DEPTID4 DEPTID4,
           I.CREDAT CREDAT,
           I.CRETIM CRETIM,
           I.LMODAT LMODAT,
           I.LMOTIM LMOTIM,
           I.STATUS STATUS,
           I.TDATE TDATE ,
           I.XSTAT XSTAT ,
           I.ERTXT ERTXT ,
           I.DESC01 DESC01,
           I.PLIQTY PLIQTY,
           I.BXIQTY BXIQTY,
           I.BOXQTY BOXQTY,
           I.PLTQTY PLTQTY,
           I.REMQTY REMQTY,
           0 AS PLTBOX,
           ' ' AS IFFLG
      FROM (SELECT /*+ ORDERED */ SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) AS ORDTOT,
                   S.USEQTY USEQTY,
                   I.MANDT MANDT ,
                   I.SEQNO SEQNO ,
                   I.ORDTYP ORDTYP ,
                   I.ORDDAT ORDDAT ,
                   I.CHKSEQ CHKSEQ ,
                   I.ORDSEQ ORDSEQ ,
                   I.SVBELN SVBELN ,
                   I.SPOSNR SPOSNR ,
                   I.DOCUTY DOCUTY ,
                   I.ERPCDT ERPCDT ,
                   I.ERPCTM ERPCTM ,
                   I.ERPMDT ERPMDT ,
                   I.OTRQDT OTRQDT ,
                   I.PTNRTO PTNRTO ,
                   I.PTNROD PTNROD ,
                   I.OWNRKY OWNRKY ,
                   I.WAREKY WAREKY ,
                   I.WARESR WARESR ,
                   I.WARETG WARETG ,
                   I.SKUKEY SKUKEY ,
                   I.QTYORG QTYORG ,
                   I.QTYREQ QTYREQ ,
                   I.WMSMGT WMSMGT ,
                   I.QTSHPD QTSHPD ,
                   I.DUOMKY DUOMKY ,
                   I.NETPR NETPR ,
                   I.SALDPT SALDPT ,
                   I.REFDKY REFDKY ,
                   I.REDKIT REDKIT ,
                   I.REDDAT REDDAT ,
                   I.STKNUM STKNUM ,
                   I.SDATBG SDATBG ,
                   I.DIRDVY DIRDVY ,
                   I.DIRSUP DIRSUP ,
                   I.SALEPR SALEPR ,
                   I.DISRAT DISRAT ,
                   I.SELLPR SELLPR ,
                   I.SELAMT SELAMT ,
                   I.VATAMT VATAMT ,
                   I.CUSRID CUSRID ,
                   I.CUNAME CUNAME ,
                   I.CUPOST CUPOST ,
                   I.CUNATN CUNATN ,
                   I.CUTEL1 CUTEL1 ,
                   I.CUTEL2 CUTEL2 ,
                   I.CUMAIL CUMAIL ,
                   I.CUADDR CUADDR ,
                   I.CTNAME CTNAME ,
                   I.CTTEL1 CTTEL1 ,
                   I.SALENM SALENM ,
                   I.SALTEL SALTEL ,
                   I.TEXT01 TEXT01 ,
                   I.TEXT02 TEXT02 ,
                   I.TEXT03 TEXT03 ,
                   I.C00101 C00101 ,
                   I.C00102 C00102 ,
                   I.C00103 C00103 ,
                   I.C00104 C00104 ,
                   I.C00105 C00105 ,
                   I.C00106 C00106 ,
                   I.C00107 C00107 ,
                   I.C00108 C00108 ,
                   I.C00109 C00109 ,
                   I.C00110 C00110 ,
                   I.N00101 N00101 ,
                   I.N00102 N00102 ,
                   I.N00103 N00103 ,
                   I.N00104 N00104 ,
                   I.N00105 N00105 ,
                   I.N00106 N00106 ,
                   I.N00107 N00107 ,
                   I.N00108 N00108 ,
                   I.N00109 N00109 ,
                   I.N00110 N00110 ,
                   I.USRID1 USRID1 ,
                   I.DEPTID1 DEPTID1 ,
                   I.USRID2 USRID2 ,
                   I.DEPTID2 DEPTID2 ,
                   I.USRID3 USRID3 ,
                   I.DEPTID3 DEPTID3 ,
                   I.USRID4 USRID4 ,
                   I.DEPTID4 DEPTID4 ,
                   I.CREDAT CREDAT ,
                   I.CRETIM CRETIM ,
                   I.LMODAT LMODAT ,
                   I.LMOTIM LMOTIM ,
                   I.STATUS STATUS ,
                   I.TDATE TDATE ,
                   I.XSTAT XSTAT ,
                   I.ERTXT ERTXT ,
                   SM.DESC01 DESC01 ,
                   NVL(SM.QTYSTD, 0) PLIQTY ,
                   NVL(SM.QTDUOM, 0) BXIQTY ,
                   NVL( TRUNC((I.QTYREQ) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) , 0) AS BOXQTY ,
                   NVL( TRUNC((I.QTYREQ) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) , 0) AS PLTQTY ,
                   NVL(MOD(I.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)), 0) AS REMQTY
              FROM IFWMS113 I LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
                                                 FROM STKKY 
                                                WHERE OWNRKY = #{OWNRKY} AND WAREKY = #{WAREKY} AND LOTA06 = '00' AND QTSIWH > 0 
                                                GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
                              INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
                              WHERE I.XSTAT = 'R'
                                AND I.OWNRKY = #{OWNRKY} 
                                AND I.SVBELN = #{SVBELN} 
            ) I
     WHERE 1=1
       AND I.DOCUTY IN ('211','212','213','214','215','216')
       AND I.XSTAT = 'R'
		<if test="SVBELNS != ''">
       AND I.C00102 = 'Y'
       </if>
       <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>        
     ORDER BY I.SVBELN    
    </select>   
    
  <!-- [DL04] 출고지시(D/O마감) 해제  -->
  <update id="CANCEL_ACCEPT_UPDATE"  parameterType="hashmap">
    UPDATE IFWMS113
       SET C00101 = 'ACP',
           C00102 = 'N',
           USRID2 = #{SES_USER_ID}
     WHERE 1=1
       AND SVBELN = #{SVBELN}
       AND XSTAT = 'R'  
  </update>
  
  <!-- [DL04] 출고지시(D/O마감) 해제 : 헤더  VALIDATION 01 조회   -->
  <select id="DL04_HEADER_VALID_01_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT SVBELN AS SVBELN, 
           SPOSNR AS SPOSNR,
           'D'  AS IFFLG,
           WMSMGT AS WMSMGT
      FROM IFWMS113
     WHERE SVBELN = #{SVBELN}
       AND WMSMGT + QTSHPD > 0
       AND XSTAT IN ('R','D')
  </select>   
  
  <!-- [DL04] 출고지시(D/O마감) 해제 : 헤더  VALIDATION 02 조회   -->
  <select id="DL04_HEADER_VALID_02_MAP" parameterType="hashmap" resultType="DataMap">
    SELECT SVBELN AS SVBELN,
           SPOSNR AS SPOSNR,
           XSTAT AS XSTAT
      FROM IFWMS113
     WHERE MANDT = 'SAP'
       AND SVBELN = #{SVBELN}
       AND C00102 = 'N'
       AND XSTAT IN ('R', 'D')
       AND QTYORG != 0
  </select>   
  <!-- [DL03] 출고지시(D/O마감)(대림) : 헤더 조회   -->
  <select id="DL05_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
		SELECT CM.CMCDVL AS KEY,
		       CM.CMCDVL AS PTNG08,
		       SUM(NVL(IFT.CNT1, 0)) AS NUM01,
		       SUM(NVL(IFT.CNT2, 0)) AS NUM02,
		       SUM(NVL(IFT.CNT1, 0)) + SUM(NVL(IFT.CNT2, 0)) AS NUM03,
		       COUNT(PTNROD) AS NUM04
		  FROM CMCDV CM LEFT OUTER JOIN (SELECT /*+ ORDERED */ BZ2.PTNG08, CASE IT.C00102 WHEN 'N' THEN COUNT(DISTINCT IT.SVBELN) ELSE 0 END CNT1,
		                                                    CASE IT.C00102 WHEN 'Y' THEN COUNT(DISTINCT IT.SVBELN) ELSE 0 END CNT2,
		                                                    IT.PTNROD AS PTNROD
		                                  FROM IFWMS113 IT INNER JOIN BZPTN BZ2 ON IT.OWNRKY = BZ2.OWNRKY AND IT.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
		                                                   INNER JOIN SKUMA SM ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY AND SM.DELMAK = ' '                                                   
		                                 WHERE  IT.MANDT = 'SAP'
		                                   AND IT.OWNRKY = #{OWNRKY}
		                                   AND IT.DOCUTY IN ('211', '212', '213', '214', '215', '216')
		                                   AND IT.C00102 IN ('N', 'Y')
		                                   AND IT.XSTAT = 'R'
		                                   AND IT.WAREKY NOT IN ('2220')
		                                   <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
		                                 GROUP BY BZ2.PTNG08, IT.C00102, IT.PTNROD) IFT ON CM.CMCDVL = IFT.PTNG08
		 WHERE CM.CMCDKY = 'PTNG08'
		 GROUP BY CM.CMCDVL
		 ORDER BY CM.CMCDVL
		 
  </select>   
  
  <!-- [DL05] 출고지시(D/O마감)(대림) : 아이템 조회   -->
  <select id="DL05_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
      
      SELECT /*+ ORDERED */ BZ2.PTNG08 AS KEY, 
		       IT.SVBELN AS SVBELN, 
		       IT.DOCUTY AS DOCUTY,
		       IT.ORDDAT AS ORDDAT,
		       IT.OTRQDT AS OTRQDT,
		       IT.PTNROD AS PTNROD,
		       BZ1.NAME01 AS PTNRODNM,
		       IT.PTNRTO AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       IT.WARESR AS WARESR,
		       BZ2.PTNG08 AS PTNG08,
		       IT.DIRDVY AS DIRDVY,
		       IT.DIRSUP AS DIRSUP,
		       IT.C00102 AS C00102,
		       CASE IT.DOCUTY WHEN '214' THEN MAX(IT.C00103) ELSE ' ' END AS C00103,
		       MAX(IT.TEXT01) AS TEXT01,
		       MAX(IT.XDATS) AS XDATS,
		       MAX(IT.XTIMS) AS XTIMS
		  FROM IFWMS113 IT INNER JOIN BZPTN BZ1 ON IT.OWNRKY = BZ1.OWNRKY AND IT.PTNROD = BZ1.PTNRKY AND BZ1.PTNRTY = '0001'
		                   INNER JOIN BZPTN BZ2 ON IT.OWNRKY = BZ2.OWNRKY AND IT.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
		                   INNER JOIN SKUMA SM ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY AND SM.DELMAK = ' '
		 WHERE IT.MANDT = 'SAP'
		   AND IT.OWNRKY = #{OWNRKY}
		   AND IT.DOCUTY IN ('211','212','213','214','215','216')
		   AND IT.C00102 = 'N'
		   AND IT.XSTAT = 'R'
		   AND IT.WAREKY NOT IN ('2220')
		   AND BZ2.PTNG08 = #{PTNG08}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">
	          ${RANGE_SQL}
	       </if>
		 GROUP BY IT.SVBELN, IT.DOCUTY, IT.ORDDAT, IT.OTRQDT, IT.PTNROD, BZ1.NAME01, IT.PTNRTO, BZ2.NAME01, IT.WARESR, IT.DIRDVY, IT.DIRSUP, IT.C00102, BZ2.PTNG08
      
  </select> 

  
  <!-- [DL07] 출고할당(마감별) : 출고완료/미작업내역 : 헤더 조회   -->
  <select id="DL07_HEAD_01_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT CM.CMCDVL AS KEY,
           CM.CMCDVL AS PTNG08,
           NVL(IFT.OWNRKY,' ') AS OWNRKY,
           NVL(IFT.WAREKY,' ') AS WAREKY,
           NVL(IFT.ORDDAT,' ') AS ORDDAT,
           NVL(SUM(PTNROD), 0) AS SUMQTY,
           NVL(SUM(IFT.ALLOCCNT), 0) AS ALLOCCNT,
           NVL(SUM(IFT.UNALLOCCNT), 0) AS UNALLOCCNT
      FROM CMCDV CM LEFT OUTER JOIN (
                                     
                                     SELECT /*+ ORDERED */ IT.OWNRKY AS OWNRKY, IT.WAREKY WAREKY, IT.ORDDAT ORDDAT, BZ2.PTNG08 AS PTNG08, COUNT(DISTINCT IT.PTNROD) AS PTNROD, COUNT(DISTINCT IT.SVBELN) AS UNALLOCCNT, 0 AS ALLOCCNT 
                                      FROM IFWMS113 IT INNER JOIN BZPTN BZ2 ON IT.OWNRKY = BZ2.OWNRKY AND IT.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
                                                       INNER JOIN SKUMA SM ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY AND SM.DELMAK = ' '  
                                     WHERE IT.MANDT = 'SAP'
                                       AND IT.OWNRKY = #{OWNRKY}
                                       AND IT.WAREKY = #{WAREKY}
                                       AND IT.DOCUTY IN ('211', '212', '213', '214', '215', '216')
                                       AND IT.C00102 = 'Y'
                                       AND IT.XSTAT = 'R'
                                       AND IT.QTYREQ &gt; IT.WMSMGT + IT.QTSHPD
                                       <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
                                     GROUP BY IT.OWNRKY, BZ2.PTNG08, IT.C00102, IT.WAREKY, IT.ORDDAT
    
                                     UNION ALL
       
                                  
                                    SELECT /*+ ORDERED */ IT.OWNRKY AS OWNRKY, IT.WAREKY WAREKY, IT.ORDDAT ORDDAT, BZ2.PTNG08 AS PTNG08, COUNT(DISTINCT IT.PTNROD) AS PTNROD, 0 AS UNALLOCCNT, COUNT(DISTINCT IT.SVBELN) AS ALLOCCNT 
                                      FROM IFWMS113 IT INNER JOIN BZPTN BZ2 ON IT.OWNRKY = BZ2.OWNRKY AND IT.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
                                                       INNER JOIN SKUMA SM ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY AND SM.DELMAK = ' '  
                                     WHERE IT.MANDT = 'SAP'
                                       AND IT.OWNRKY = #{OWNRKY}
                                       AND IT.WAREKY = #{WAREKY}
                                       AND IT.DOCUTY IN ('211', '212', '213', '214', '215', '216')
                                       AND IT.C00102 = 'Y'
                                       AND IT.XSTAT = 'D'
                                       AND (IT.WMSMGT != 0 OR IT.QTSHPD !=0 )
                                       <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
                                     GROUP BY IT.OWNRKY, BZ2.PTNG08, IT.C00102, IT.WAREKY, IT.ORDDAT
                                     
     
                                     ) IFT ON CM.CMCDVL = IFT.PTNG08
     WHERE CM.CMCDKY = 'PTNG08'
     GROUP BY CM.CMCDVL, CM.CMCDVL, NVL(IFT.OWNRKY,' '), NVL(IFT.WAREKY,' '), NVL(IFT.ORDDAT,' ') 
     ORDER BY CM.CMCDVL
  </select> 
  
  <!-- [DL07] 출고할당(마감별) : 출고완료/미작업내역 : 아이템 조회   -->
  <select id="DL07_ITEM_01_LIST" parameterType="hashmap" resultType="DataMap">
        SELECT /*+ ORDERED */ BZ2.PTNG08 AS KEY,
		       IT.OWNRKY AS OWNRKY,
		       IT.WAREKY AS WAREKY,
		       IT.ORDDAT AS DOCDAT,
		       IT.ORDDAT AS ORDDAT,
		       IT.DOCUTY AS SHPMTY,
		       IT.SVBELN AS SVBELN, 
		       IT.OTRQDT AS RQSHPD,
		       IT.PTNROD AS DPTNKY,
		       BZ1.NAME01 AS DPTNKYNM,
		       IT.PTNRTO AS PTRCVR,
		       BZ2.NAME01 AS PTRCVRNM,
		       BZ2.PTNG08 AS PTNG08,
		       IT.DIRDVY AS PGRC02,
		       IT.DIRSUP AS PGRC03,
		       MAX(IT.TEXT01) AS TEXT01
		  FROM IFWMS113 IT INNER JOIN BZPTN BZ1 ON IT.OWNRKY = BZ1.OWNRKY AND IT.PTNROD = BZ1.PTNRKY AND BZ1.PTNRTY = '0001'
		                   INNER JOIN BZPTN BZ2 ON IT.OWNRKY = BZ2.OWNRKY AND IT.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
		                   INNER JOIN SKUMA SM ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY AND SM.DELMAK = ' '
		                   INNER JOIN DOCTM TM ON IT.DOCUTY = TM.DOCUTY
		 WHERE IT.MANDT = 'SAP'
		   AND IT.OWNRKY = #{OWNRKY}
		   AND IT.WAREKY = #{WAREKY}
		   AND IT.DOCUTY IN ('211','212','213','214','215','216')
		   AND IT.C00102 = 'Y'
		   AND IT.XSTAT = 'R'
		   AND (IT.QTSHPD = 0 OR IT.WMSMGT = 0)
		   AND IT.QTYREQ &gt; 0
		   AND BZ2.PTNG08 = #{PTNG08}
		   <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
		 GROUP BY IT.OWNRKY, IT.WAREKY, IT.SVBELN, IT.DOCUTY, IT.ORDDAT, IT.OTRQDT, IT.PTNROD, BZ1.NAME01, IT.PTNRTO, BZ2.NAME01, IT.DIRDVY, IT.DIRSUP, BZ2.PTNG08
        
  </select> 
  
  <!-- [DL07] 출고할당(마감별) : 부족재고/주문내역 : 헤더 조회   -->
  <select id="DL07_HEAD_02_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT /*+ ORDERED */ IT.WAREKY||IT.ORDDAT||IT.SKUKEY KEY,
           IT.OWNRKY AS OWNRKY,
           IT.WAREKY AS WAREKY,
           IT.SKUKEY AS SKUKEY,
           IT.ORDDAT AS DOCDAT,
           SM.DESC01 AS DESC01,
           SM.DESC02 AS DESC02,
           SUM(IT.QTYREQ-IT.QTSHPD) AS QTYREQ,
           NVL(ST.STKQTY,0) AS TOTQTY
      FROM IFWMS113 IT LEFT OUTER JOIN V_WMS_STOCK_TOSS ST ON IT.OWNRKY = ST.OWNRKY AND IT.WAREKY = ST.WAREKY AND IT.SKUKEY = ST.SKUKEY
                       INNER JOIN BZPTN BZ2 ON IT.OWNRKY = BZ2.OWNRKY AND IT.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
                       INNER JOIN SKUMA SM ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY
     WHERE IT.MANDT = 'SAP'
       AND IT.OWNRKY = #{OWNRKY}
       AND IT.WAREKY = #{WAREKY}
       AND IT.DOCUTY IN ('211','212','213','214','215','216')
       AND IT.C00102 = 'Y'
       AND IT.XSTAT = 'R'
       AND IT.QTYREQ &gt; 0
       <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
     GROUP BY IT.OWNRKY, IT.WAREKY, IT.SKUKEY, SM.DESC01, SM.DESC02, ST.STKQTY, IT.ORDDAT
     HAVING SUM(IT.QTYREQ-IT.QTSHPD) > NVL(ST.STKQTY,0)
     ORDER BY IT.SKUKEY
  </select> 
  
  <!-- [DL07] 출고할당(마감별) : 부족재고/주문내역 : 아이템 조회   -->
  <select id="DL07_ITEM_02_LIST" parameterType="hashmap" resultType="DataMap">
  
	  SELECT /*+ ORDERED */IT.WAREKY||IT.ORDDAT||IT.SKUKEY KEY,
		       IT.OWNRKY AS OWNRKY,
		       IT.WAREKY AS WAREKY,
		       IT.SVBELN AS SVBELN,
		       IT.PTNROD AS PTNROD,
		       BZ.NAME01 AS PTNRODNM,
		       IT.PTNRTO AS PTNRTO,
		       BZ2.NAME01 AS PTNRTONM,
		       BZ2.PTNG08 AS PTNG08,
		       IT.SKUKEY AS SKUKEY,
		       IT.ORDDAT AS DOCDAT,
		       SM.DESC01 AS DESC01,
		       SM.DESC02 AS DESC02,
		       SUM(IT.QTYREQ-IT.QTSHPD) AS QTYREQ
		  FROM IFWMS113 IT INNER JOIN SKUMA SM ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY 
		                   INNER JOIN BZPTN BZ ON IT.OWNRKY = BZ.OWNRKY AND IT.PTNROD = BZ.PTNRKY AND BZ.PTNRTY = '0001' 
		                   INNER JOIN BZPTN BZ2 ON IT.OWNRKY = BZ2.OWNRKY AND IT.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
		 WHERE IT.MANDT = 'SAP'
		   AND IT.OWNRKY = #{OWNRKY}
		   AND IT.WAREKY = #{WAREKY}
		   AND IT.DOCUTY IN ('211','212','213','214','215','216')
		   AND IT.C00102 = 'Y'
		   AND IT.SKUKEY = #{SKUKEY}
		   AND IT.XSTAT = 'R'
		   AND IT.QTYREQ &gt; 0
		   <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
		 GROUP BY IT.OWNRKY, IT.WAREKY, IT.SVBELN, IT.SKUKEY, SM.DESC01, SM.DESC02, IT.ORDDAT, IT.PTNROD, BZ.NAME01, IT.PTNRTO, BZ2.NAME01, BZ2.PTNG08
		 ORDER BY IT.SKUKEY

  </select> 
  
    <!-- [DL07] 출고할당(마감별) : 부족재고/주문내역  : SZF_GETDL07_CLSYN  -->
  <select id="SZF_GETDL07_CLSYN_MAP" parameterType="hashmap" resultType="DataMap">
    SELECT SZF_GETDL07_CLSYN(#{WAREKY}) AS CHK FROM DUAL
  </select>
  
    <!-- P_BATCH_ALLOCATION 프로시서 실행  -->
  <update id="P_BATCH_GI_COMPLET_DETAIL_UPDATE" parameterType="hashmap">
      { call P_BATCH_GI_COMPLET_DETAIL(#{OWNRKY}, #{WAREKY}, #{PTNG08}, #{ORDDAT}, #{SES_USER_ID}) }
  </update>
  
  <!-- [DL10] 출고예정일변경 : 조회 -->
  <select id="DL10_LIST" parameterType="hashmap" resultType="DataMap">

	  SELECT I.OWNRKY AS OWNRKY,
		       MAX(I.SKUG05) AS SKUG05,
		       I.WAREKY AS WAREKY,
		       I.WAREKY AS WAREKY2,
		       I.WARESR AS WARESR,
		       I.DOCUTY AS DOCUTY,
		       D.SHORTX AS DOCUTYNM,
		       I.ORDTYP AS ORDTYP,
		       I.ORDDAT AS ORDDAT,
		       I.ERPCDT AS ERPCDT,
		       I.SVBELN AS SVBELN,
		       I.OTRQDT AS OTRQDT,
		       I.OTRQDT AS OTRQDT2,
		       I.PTNRTO AS PTNRTO,
		       B.NAME01 AS PTNRTONM,
		       I.PTNROD AS PTNROD,
		       B2.NAME01 AS PTNRODNM,
		       I.DIRDVY AS DIRDVY,
		       I.DIRSUP AS DIRSUP,
		       NVL(I.CUSRID,' ') AS CUSRID,
		       NVL(I.CUNAME,' ') AS CUNAME,
		       NVL(I.CUPOST,' ') AS CUPOST,
		       NVL(I.CUNATN,' ') AS CUNATN,
		       NVL(I.CUTEL1,' ') AS CUTEL1,
		       NVL(I.CUTEL2,' ') AS CUTEL2,
		       NVL(I.CUMAIL,' ') AS CUMAIL,
		       NVL(I.CUADDR,' ') AS CUADDR,
		       NVL(I.CTNAME,' ') AS CTNAME,
		       NVL(I.CTTEL1,' ') AS CTTEL1,
		       NVL(I.SALENM,' ') AS SALENM,
		       NVL(I.SALTEL,' ') AS SALTEL,
		       NVL(MAX(I.TEXT01),' ') AS TEXT01,
		       SUM(OBOXQTY) AS BOXQTY,
		       SUM(RBOXQTY) AS BXIQTY,
		       SP.REGNKY AS REGNKY,
		       SP.REGNNM AS REGNNM,
		       SF_GET_WAHNM(B.NAME03) AS NAME03B,
		       ' ' AS CARNUM,
		       ' ' AS WARESRNM,
		       I.C00102 AS C00102,
		       MAX(I.CRETIM) AS ERPCTM,
		       MAX(I.CREDAT) AS CREDAT,
		       MAX(I.XDATS) AS XDATS,
		       MAX(I.XTIMS) AS XTIMS,
		       SUM(NETWGT)  AS GRSWGT,
		       ROUND(SUM(QTYORG / QTYSTD), 3) AS PLTQTY
		  FROM (
		        SELECT SM.SKUG05,
		               SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) ORDTOT,
		               NVL(CASE WHEN NVL(S.USEQTY, 0) >= SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN)
		                        THEN SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN)
		                         END, 0) STKTOT,
		               I.MANDT,
		               I.SEQNO,
		               I.ORDTYP,
		               I.ORDDAT,
		               I.CHKSEQ,
		               I.ORDSEQ,
		               I.SVBELN,
		               I.SPOSNR,
		               I.DOCUTY,
		               I.ERPCDT,
		               I.ERPCTM,
		               I.ERPMDT,
		               I.OTRQDT,
		               I.PTNRTO,
		               I.PTNROD,
		               I.OWNRKY,
		               I.WAREKY,
		               I.WARESR,
		               I.WARETG,
		               I.SKUKEY,
		               I.QTYORG,
		               I.QTYREQ,
		               I.WMSMGT,
		               I.QTSHPD,
		               I.DUOMKY,
		               I.NETPR,
		               I.SALDPT,
		               I.REFDKY,
		               I.REDKIT,
		               I.REDDAT,
		               I.STKNUM,
		               I.SDATBG,
		               I.DIRDVY,
		               I.DIRSUP,
		               I.SALEPR,
		               I.DISRAT,
		               I.SELLPR,
		               I.SELAMT,
		               I.VATAMT,
		               I.CUSRID,
		               I.CUNAME,
		               I.CUPOST,
		               I.CUNATN,
		               I.CUTEL1,
		               I.CUTEL2,
		               I.CUMAIL,
		               I.CUADDR,
		               I.CTNAME,
		               I.CTTEL1,
		               I.SALENM,
		               I.SALTEL,
		               I.TEXT01,
		               I.TEXT02,
		               I.TEXT03,
		               I.C00101,
		               I.C00102,
		               I.C00103,
		               I.C00104,
		               I.C00105,
		               I.C00106,
		               I.C00107,
		               I.C00108,
		               I.C00109,
		               I.C00110,
		               I.N00101,
		               I.N00102,
		               I.N00103,
		               I.N00104,
		               I.N00105,
		               I.N00106,
		               I.N00107,
		               I.N00108,
		               I.N00109,
		               I.N00110,
		               I.USRID1,
		               I.DEPTID1 ,
		               I.USRID2,
		               I.DEPTID2,
		               I.USRID3,
		               I.DEPTID3 ,
		               I.USRID4,
		               I.DEPTID4,
		               I.CREDAT,
		               I.CRETIM,
		               I.LMODAT,
		               I.LMOTIM,
		               I.STATUS,
		               I.TDATE,
		               I.XDATS ,
		               I.XSTAT,
		               I.XTIMS,
		               I.ERTXT ,
		               SM.DESC01,
		               TRUNC(I.QTYORG / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) OBOXQTY ,
		               TRUNC(I.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) , 1) RBOXQTY,
		       SM.NETWGT,
		        SM.QTYSTD
		        FROM IFWMS113 I INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
		                   LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO,QTSPMO)) AS USEQTY
		                                      FROM STKKY WHERE OWNRKY = #{OWNRKY} AND WAREKY = #{WAREKY} AND LOTA06 = '00' AND QTSIWH > 0
		                                     GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY AND I.SKUKEY = S.SKUKEY
		        WHERE I.DOCUTY IN ('211','212','213','214','215','216', '266', '267')
		          AND I.XSTAT = 'R'
		          AND I.CHKSEQ != ' '
		          AND I.QTYORG &gt; 0
		          <if test="C00102 == ''">
		          	AND I.C00102 IN ('N', 'Y')
		          </if>  
		          <if test="C00102 != ''">
		          	AND I.C00102 = #{C00102}
		          </if>  
	              <if test="RANGE2 != null and RANGE2 != ''">
		          	${RANGE2}
		          </if>
		     ) I LEFT OUTER JOIN (SELECT DISTINCT OWNRKY, REGNKY, POSTCD, REGNNM
		                            FROM SHPMA) SP ON I.CUPOST = SP.POSTCD AND I.OWNRKY = SP.OWNRKY
		         INNER JOIN SKUMA SM2 ON SM2.OWNRKY = I.OWNRKY AND SM2.SKUKEY = I.SKUKEY
		         LEFT OUTER JOIN SKUWC SW ON SW.OWNRKY = I.OWNRKY AND SW.WAREKY = I.WAREKY AND SW.SKUKEY = I.SKUKEY
		         INNER JOIN DOCTM D ON D.DOCUTY = I.DOCUTY
		         LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY IN ('0007', '0004')
		         LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY IN ('0001', '0004')
		         LEFT OUTER JOIN WAHMA W ON W.WAREKY = I.PTNRTO
			 WHERE 1 = 1
	    <if test="SVBELNS != ''">
         AND I.SVBELN IN (${SVBELNS})
        </if>
        <if test="SVBELNS == ''">  
           AND I.OWNRKY = #{OWNRKY}
           AND I.WAREKY = #{WAREKY}         
         <if test="RANGE_SQL != null and RANGE_SQL != ''">
          ${RANGE_SQL}
         </if>
        </if>

		 GROUP BY I.MANDT, I.OWNRKY, I.WAREKY, I.WARESR, I.DOCUTY, D.SHORTX, I.ORDTYP, I.ORDDAT, I.ERPCDT, I.SVBELN,
		          I.OTRQDT, I.PTNRTO, W.NAME01, I.PTNROD, B2.NAME01, B.NAME01, DIRDVY, DIRSUP, CUSRID, CUNAME, CUPOST,
		          CUNATN, CUTEL1, CUTEL2, CUMAIL, CUADDR, CTNAME, CTTEL1, SALENM, SALTEL, REGNKY, REGNNM, B.NAME03,  I.C00102
		
		<if test="ORDTYPE == 'NO'">
	      HAVING (SUM(I.STKTOT) >= SUM(I.ORDTOT))
	    </if>  
	    <if test="ORDTYPE == 'ONE'">
	     HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
	    </if>  
	    <if test="ORDTYPE == 'MORE'">
	      HAVING (SUM(I.ORDTOT) > SUM(I.STKTOT))
	    </if>  
	    <if test="ORDTYPE == 'POOR'">
	      HAVING (SUM(I.STKTOT) = 0)
	    </if>  

		 ORDER BY SVBELN
		 
  </select> 
  
  <!-- [DL10] 출고예정일변경 : 헤더 수정 : IFWMS113.SETHEADER.RETURNUPDATE -->
  <update id="DL10_UPDATE"  parameterType="hashmap">
    UPDATE IFWMS113
    SET C00101 = 'IF',
        C00106 = NVL(#{CARNUM},' '),
        WAREKY = #{WAREKY},
        OTRQDT = #{OTRQDT},
        TEXT01 = #{TEXT01},
        LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
        LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'),
        USRID2 = NVL(#{SES_USER_ID}, ' ')
    WHERE MANDT = 'SAP'
      AND SVBELN = #{SVBELN} 
      AND XSTAT = 'R' 
  </update>
  
    <!-- [DL11] 출고반품 센터 변경 : 조회 -->
	<select id="DL11_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT I.OWNRKY OWNRKY ,
		       I.WAREKY WAREKY ,
		       I.WARESR WARESR ,
		       (select name01 from BZPTN where OWNRKY = I.OWNRKY AND PTNRKY = I.WARESR AND PTNRTY ='0003') AS WARESRNM ,
		       I.DOCUTY DOCUTY ,
		       D.SHORTX DOCUTYNM ,
		       I.ORDTYP ORDTYP ,
		       I.ORDDAT ORDDAT ,
		       I.SVBELN SVBELN ,
		       I.OTRQDT OTRQDT ,
		       I.PTNRTO PTNRTO ,
		       B.NAME01 PTNRTONM ,
		       I.PTNROD PTNROD ,
		       DECODE(I.DOCUTY, '266', W.NAME01, B2.NAME01) PTNRODNM ,
		       MAX(I.REGNNM) REGNNM ,
		       MAX(I.REGNKY) REGNKY ,
		       I.DIRDVY DIRDVY ,
		       I.DIRSUP DIRSUP ,
		       I.CUSRID AS CUSRID ,
		       I.CUNAME AS CUNAME ,
		       I.CUPOST AS CUPOST ,
		       I.CUNATN AS CUNATN ,
		       I.CUTEL1 AS CUTEL1 ,
		       I.CUTEL2 AS CUTEL2 ,
		       I.CUMAIL AS CUMAIL ,
		       I.CUADDR AS CUADDR ,
		       I.CTNAME AS CTNAME ,
		       I.CTTEL1 AS CTTEL1 ,
		       I.SALENM AS SALENM ,
		       I.SALTEL AS SALTEL ,
		       MAX(I.TEXT01) AS TEXT01 ,
		       MAX(I.TEXT02) AS TEXT02 ,
		       SUM(OBOXQTY) AS BOXQTY ,
		       SUM(RBOXQTY) AS BXIQTY ,
		       I.C00106 AS CARNUM ,
		       I.XSTAT AS SHPOKYMV,
		       DECODE(MAX(I.C00105), 'V', 'YES', 'NO') AS C00105
		  FROM (
		        SELECT I.MANDT,I.SEQNO,I.ORDTYP,I.ORDDAT,I.CHKSEQ,I.ORDSEQ,I.SVBELN,I.SPOSNR,
		               I.DOCUTY,I.ERPCDT,I.ERPCTM,I.ERPMDT,I.OTRQDT,I.PTNRTO,I.PTNROD,I.OWNRKY,
		               I.WAREKY,I.WARESR,I.WARETG,I.SKUKEY,I.QTYORG,I.QTYREQ,I.WMSMGT,I.QTSHPD,
		               I.DUOMKY,I.NETPR,I.SALDPT,I.REFDKY,I.REDKIT,I.REDDAT,I.STKNUM,I.SDATBG,
		               I.DIRDVY,I.DIRSUP,I.SALEPR,I.DISRAT,I.SELLPR,I.SELAMT,I.VATAMT,I.CUSRID,
		               I.CUNAME,I.CUPOST,I.CUNATN,I.CUTEL1,I.CUTEL2,I.CUMAIL,I.CUADDR,I.CTNAME,
		               I.CTTEL1,I.SALENM,I.SALTEL,I.TEXT01,I.TEXT02,I.TEXT03,I.C00101,I.C00102,
		               I.C00103,I.C00104,I.C00105,I.C00106,I.C00107,I.C00108,I.C00109,I.C00110,
		               I.N00101,I.N00102,I.N00103,I.N00104,I.N00105,I.N00106,I.N00107,I.N00108,
		               I.N00109,I.N00110,I.USRID1,I.DEPTID1 ,I.USRID2,I.DEPTID2,I.USRID3,I.DEPTID3,
		               I.USRID4,I.DEPTID4,I.CREDAT,I.CRETIM,I.LMODAT,I.LMOTIM,I.STATUS,I.TDATE,
		               SP.REGNNM, SP.REGNKY,I.XSTAT,I.ERTXT,SM.DESC01,
					   TRUNC(I.QTYORG / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM), 1) OBOXQTY,
		               TRUNC(I.QTYREQ / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM), 1) RBOXQTY
		          FROM IFWMS113 I LEFT OUTER JOIN (SELECT DISTINCT OWNRKY, REGNKY, POSTCD, REGNNM 
		                                             FROM SHPMA) SP ON I.CUPOST = SP.POSTCD AND I.OWNRKY = SP.OWNRKY
		                          INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
		         WHERE I.DOCUTY = #{RCPTTY}
		           AND I.XSTAT = 'R'
		           AND I.C00102 IN ('N', 'Y')
		           AND I.CHKSEQ != ' '
		           AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0
		        ) I INNER JOIN SKUMA SM2 ON SM2.OWNRKY = I.OWNRKY AND SM2.SKUKEY = I.SKUKEY
		            INNER JOIN DOCTM D ON D.DOCUTY = I.DOCUTY 
		            LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY = '0007'
		            LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
		            LEFT OUTER JOIN WAHMA W ON W.WAREKY = I.PTNRTO
		 WHERE 1 = 1
		 AND I.XSTAT ='R'
		 AND I.OWNRKY = #{OWNRKY}
  		 AND I.WAREKY = #{WAREKY}
		<if test="SVBELNS != null and SVBELNS != ''">
		 AND I.SVBELN IN ( ${SVBELNS} )
		</if> 
		<if test="RANGE_SQL != null and RANGE_SQL != ''"> 
			${RANGE_SQL}
		</if>
		 GROUP BY I.MANDT,I.OWNRKY,I.WAREKY,I.WARESR,I.DOCUTY,D.SHORTX,I.ORDTYP,I.ORDDAT,I.SVBELN,I.OTRQDT,I.PTNRTO,I.PTNROD,
		          W.NAME01,B.NAME01,B2.NAME01,DIRDVY,DIRSUP,CUSRID,CUNAME,CUPOST,CUNATN,CUTEL1,CUTEL2,CUMAIL,CUADDR,
		          CTNAME,CTTEL1,SALENM,SALTEL,I.C00106,I.XSTAT
		 ORDER BY SVBELN
		 
  
<!--     SELECT I.OWNRKY OWNRKY , -->
<!--            I.WAREKY WAREKY , -->
<!--            I.WARESR WARESR , -->
<!--            I.DOCUTY DOCUTY , -->
<!--            D.SHORTX DOCUTYNM , -->
<!--            I.ORDTYP ORDTYP , -->
<!--            I.ORDDAT ORDDAT , -->
<!--            I.SVBELN SVBELN , -->
<!--            I.OTRQDT OTRQDT , -->
<!--            I.PTNRTO PTNRTO , -->
<!--            B.NAME01 PTNRTONM , -->
<!--            I.PTNROD PTNROD , -->
<!--            DECODE(I.DOCUTY, '266', W.NAME01, B2.NAME01) PTNRODNM , -->
<!--            MAX(I.REGNNM) REGNNM , -->
<!--            MAX(I.REGNKY) REGNKY , -->
<!--            I.DIRDVY DIRDVY , -->
<!--            I.DIRSUP DIRSUP , -->
<!--            I.CUSRID AS CUSRID , -->
<!--            I.CUNAME AS CUNAME , -->
<!--            I.CUPOST AS CUPOST , -->
<!--            I.CUNATN AS CUNATN , -->
<!--            I.CUTEL1 AS CUTEL1 , -->
<!--            I.CUTEL2 AS CUTEL2 , -->
<!--            I.CUMAIL AS CUMAIL , -->
<!--            I.CUADDR AS CUADDR , -->
<!--            I.CTNAME AS CTNAME , -->
<!--            I.CTTEL1 AS CTTEL1 , -->
<!--            I.SALENM AS SALENM , -->
<!--            I.SALTEL AS SALTEL , -->
<!--            MAX(I.TEXT01) AS TEXT01 , -->
<!--            MAX(I.TEXT02) AS TEXT02 , -->
<!--            SUM(OBOXQTY) AS BOXQTY , -->
<!--            SUM(RBOXQTY) AS BXIQTY , -->
<!--            I.C00106 AS CARNUM , -->
<!--            I.XSTAT AS SHPOKYMV,  -->
<!--            '' AS WARESRNM -->
<!--       FROM ( -->
<!--             SELECT I.MANDT,I.SEQNO,I.ORDTYP,I.ORDDAT,I.CHKSEQ,I.ORDSEQ,I.SVBELN,I.SPOSNR, -->
<!--                    I.DOCUTY,I.ERPCDT,I.ERPCTM,I.ERPMDT,I.OTRQDT,I.PTNRTO,I.PTNROD,I.OWNRKY, -->
<!--                    I.WAREKY,I.WARESR,I.WARETG,I.SKUKEY,I.QTYORG,I.QTYREQ,I.WMSMGT,I.QTSHPD, -->
<!--                    I.DUOMKY,I.NETPR,I.SALDPT,I.REFDKY,I.REDKIT,I.REDDAT,I.STKNUM,I.SDATBG, -->
<!--                    I.DIRDVY,I.DIRSUP,I.SALEPR,I.DISRAT,I.SELLPR,I.SELAMT,I.VATAMT,I.CUSRID, -->
<!--                    I.CUNAME,I.CUPOST,I.CUNATN,I.CUTEL1,I.CUTEL2,I.CUMAIL,I.CUADDR,I.CTNAME, -->
<!--                    I.CTTEL1,I.SALENM,I.SALTEL,I.TEXT01,I.TEXT02,I.TEXT03,I.C00101,I.C00102, -->
<!--                    I.C00103,I.C00104,I.C00105,I.C00106,I.C00107,I.C00108,I.C00109,I.C00110, -->
<!--                    I.N00101,I.N00102,I.N00103,I.N00104,I.N00105,I.N00106,I.N00107,I.N00108, -->
<!--                    I.N00109,I.N00110,I.USRID1,I.DEPTID1 ,I.USRID2,I.DEPTID2,I.USRID3,I.DEPTID3, -->
<!--                    I.USRID4,I.DEPTID4,I.CREDAT,I.CRETIM,I.LMODAT,I.LMOTIM,I.STATUS,I.TDATE, -->
<!--                    SP.REGNNM, SP.REGNKY,I.XSTAT,I.ERTXT,SM.DESC01, -->
<!--              TRUNC(I.QTYORG / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM), 1) OBOXQTY, -->
<!--                    TRUNC(I.QTYREQ / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM), 1) RBOXQTY -->
<!--               FROM IFWMS113 I LEFT OUTER JOIN (SELECT DISTINCT OWNRKY, REGNKY, POSTCD, REGNNM  -->
<!--                                                  FROM SHPMA) SP ON I.CUPOST = SP.POSTCD AND I.OWNRKY = SP.OWNRKY -->
<!--                               INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY -->
<!--              WHERE I.DOCUTY = #{RCPTTY} -->
<!--                AND I.XSTAT = 'R' -->
<!--                AND I.C00102 IN ('N', 'Y') -->
<!--                AND I.CHKSEQ != ' ' -->
<!--                AND I.QTYREQ - I.WMSMGT - I.QTSHPD > 0 -->
<!--                AND I.OWNRKY = #{OWNRKY} -->
<!--                AND I.WAREKY = #{WAREKY} -->
<!--                <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if> -->
<!--             ) I INNER JOIN SKUMA SM2 ON SM2.OWNRKY = I.OWNRKY AND SM2.SKUKEY = I.SKUKEY -->
<!--                 INNER JOIN DOCTM D ON D.DOCUTY = I.DOCUTY  -->
<!--                 LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY = '0007' -->
<!--                 LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001' -->
<!--                 LEFT OUTER JOIN WAHMA W ON W.WAREKY = I.PTNRTO -->
<!--      WHERE 1 = 1 -->
<!--      AND I.XSTAT ='R' -->
<!--      AND I.OWNRKY = #{OWNRKY} -->
<!--      AND I.WAREKY = #{WAREKY} -->
<!--       <if test="SVBELNS != ''"> -->
<!--          AND I.SVBELN IN (${SVBELNS}) -->
<!--       </if> -->
<!--       <if test="SVBELNS == ''">            -->
<!-- 	      <if test="RANGE_SQL != null and RANGE_SQL != ''"> -->
<!-- 	          ${RANGE_SQL} -->
<!-- 	      </if> -->
<!--       </if> -->
  
<!--      GROUP BY I.MANDT,I.OWNRKY,I.WAREKY,I.WARESR,I.DOCUTY,D.SHORTX,I.ORDTYP,I.ORDDAT,I.SVBELN,I.OTRQDT,I.PTNRTO,I.PTNROD, -->
<!--               W.NAME01,B.NAME01,B2.NAME01,DIRDVY,DIRSUP,CUSRID,CUNAME,CUPOST,CUNATN,CUTEL1,CUTEL2,CUMAIL,CUADDR, -->
<!--               CTNAME,CTTEL1,SALENM,SALTEL,I.C00106,I.XSTAT -->
<!--      ORDER BY SVBELN -->
      
  </select> 
  
    <!-- [DL11] 반품배차관리 : 프린트 =  -->
  <update id="DL11_PRINT_UPDATE"  parameterType="hashmap">
	    UPDATE IFWMS113
		   SET C00105 = 'V',
		       LMODAT = TO_CHAR(SYSDATE, 'YYYYMMDD'),
		       LMOTIM = TO_CHAR(SYSDATE, 'HH24MISS')
		WHERE XSTAT IN ('D','R')
		  AND SVBELN = #{SVBELN}
		  AND C00105 != 'V' 
  </update>
  
  <!-- P_CAR_REDISPATCHING_RECALLDAT 프로시서 실행  -->
  <update id="P_CAR_REDISPATCHING_RECALLDAT_UPDATE" parameterType="hashmap">
      { call P_CAR_REDISPATCHING_RECALLDAT(#{SVBELN}, #{OTRQDT}, #{SES_USER_ID} ) }
  </update>

  <!-- P_CAR_REDISPATCHING_RETURN 프로시서 실행  -->
  <update id="P_CAR_REDISPATCHING_RETURN_UPDATE" parameterType="hashmap">
      { call P_CAR_REDISPATCHING_RETURN(#{SVBELN}, #{OTRQDT}, #{SES_USER_ID} ) }
  </update>

    <!-- [DL17] S/O 마감 헤더 : 조회 : OUTBOUND.DOCLOSINGORDER_HEADER.FIND -->
  <select id="DL17_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
      SELECT /*+ ORDERED */ I.SVBELN KEY,
           I.OWNRKY OWNRKY,
           I.WAREKY WAREKY,
           I.DOCUTY DOCUTY,
           I.ORDDAT ORDDAT,
           I.OTRQDT OTRQDT, 
           I.PTNRTO PTNRTO,
           B.NAME01 PTNRTONM,
           I.SVBELN SVBELN,
           I.PTNROD PTNROD,
           B2.NAME01 PTNRODNM,
           MAX(DECODE(I.CREDAT, '0', '', I.CREDAT)) CREDAT,
           MAX(DECODE(I.CRETIM, '0', '', I.CRETIM)) CRETIM,
           MAX(DECODE(I.LMODAT, '0', '', I.LMODAT)) LMODAT,
           MAX(DECODE(I.LMOTIM, '0', '', I.LMOTIM)) LMOTIM
      FROM IFWMS113 I
                LEFT OUTER JOIN BZPTN B ON I.OWNRKY = B.OWNRKY AND I.PTNRTO = B.PTNRKY 
                            AND B.PTNRTY = '0007'
                            AND B.DELMAK  != 'V'   
                LEFT OUTER JOIN BZPTN B2 ON I.OWNRKY = B2.OWNRKY
                            AND I.PTNRTO = B2.PTNRKY
                            AND B2.PTNRTY = '0001'
                            AND B2.DELMAK  != 'V'   
                INNER JOIN SHPDI D
                        ON I.SVBELN = D.SVBELN           
     WHERE I.OWNRKY = #{OWNRKY}
       AND I.WAREKY = #{WAREKY}
       <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
       <if test="SVBELNS != ''">
       	  AND I.SVBELN IN (${SVBELNS})
       </if>   
       AND I.DOCUTY IN ('211','212','213','214','216','266','267')
       <if test="SVBELNS == ''">
       	  AND I.XSTAT = 'R'
       	  AND I.QTYREQ != I.QTSHPD
       </if> 
       
       AND I.C00102 = 'Y' 
       
     GROUP BY I.OWNRKY, I.WAREKY, I.DOCUTY, I.ORDDAT, I.OTRQDT, I.PTNRTO, I.PTNROD, I.SVBELN, B.NAME01, B2.NAME01
     
  </select> 
  
    <!-- [DL17] S/O 마감 아이템 : 조회 : OUTBOUND.DOCLOSINGORDER_ITEM.FIND-->
  <select id="DL17_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
      SELECT /*+ ORDERED */ I.OWNRKY OWNRKY,
           I.WAREKY WAREKY,
           I.SVBELN KEY,
           I.SPOSNR SPOSNR,
           I.SVBELN SVBELN,
           I.SKUKEY SKUKEY,
           M.DESC01 DESC01,
           I.DUOMKY DUOMKY,
           I.QTYORG QTYORG,
           I.QTYREQ QTYREQ,
           I.QTSHPD QTSHPD,
           I.QTYORG - I.QTSHPD SHPQTY,
           I.TEXT01 TEXT01,
           MAX(I.CREDAT) CREDAT,
           MAX(I.CRETIM) CRETIM,
           MAX(I.LMODAT) LMODAT,
           MAX(I.LMOTIM) LMOTIM, 
           I.C00103 C00103 
           
      FROM IFWMS113 I 
               LEFT OUTER JOIN SKUMA M
                            ON I.SKUKEY = M.SKUKEY
                           AND M.OWNRKY = #{OWNRKY}
                           AND M.DELMAK !='V' 
               INNER JOIN SHPDI D
                       ON I.SVBELN = D.SVBELN
     WHERE I.OWNRKY = #{OWNRKY}
       AND I.WAREKY = #{WAREKY}
       AND I.SVBELN = #{SVBELN}
       AND I.DOCUTY IN ('211','212','213','214','216','266','267')     
       AND I.C00102 != 'X'
       <if test="SVBELNS == ''">
       	  AND I.XSTAT = 'R'
       	  AND I.QTYREQ != I.QTSHPD
       </if> 
     GROUP BY I.OWNRKY, I.WAREKY, I.SVBELN, I.SPOSNR, I.SVBELN, I.SKUKEY, M.DESC01, I.DUOMKY, I.QTYORG, I.QTYREQ, I.QTSHPD, I.TEXT01, I.C00103 
       
  </select> 
    <!-- [DL17] S/O 마감 저장 Head Valid 조회 : SHPDH.ORDER.VALIDATE -->
  <select id="DL17_CLOSE_VALID_LIST" parameterType="hashmap" resultType="DataMap">
  
      SELECT H.SHPOKY AS SHPOKY,
           H.INDDCL AS INDDCL
      FROM SHPDH H
     WHERE H.SHPOKY
        IN (SELECT SHPOKY SHPOKY
              FROM SHPDI
             WHERE SVBELN = #{SVBELN}
               AND STATIT != 'DEL'
               AND SPOSNR = #{SPOSNR})
       AND H.INDDCL=' '

  </select> 
  
  <!-- [DL17] 출고예정일변경 : 저장 : OUTBOUND.DOCLOSING.SAVE-->
  <update id="DL17_CLOSE_UPDATE"  parameterType="hashmap">
    UPDATE IFWMS113 I
       SET I.C00101 = 'CLS'
         , I.C00103 = #{C00103}
     WHERE I.OWNRKY = #{OWNRKY}
       AND I.WAREKY = #{WAREKY}
       AND I.SVBELN = #{SVBELN}
       AND I.SPOSNR = #{SPOSNR}
       AND I.XSTAT = 'R'
       AND I.C00102 = 'Y'
  </update>
  
  <!-- [DL23] 출고할당 헤더 : 조회 : DBL.PI.FIND_NEW_SHPDH_SALESORDER -->
  <select id="DL23_HEAD_01_LIST" parameterType="hashmap" resultType="DataMap">
	    SELECT  A.KEY AS KEY     
		      , A.SHPOKY  AS SHPOKY  
		      , A.WAREKY  AS WAREKY  
		      , A.WAREKYNM  AS WAREKYNM
		      , A.STATDO  AS STATDO  
		      , A.STATDONM  AS STATDONM
		      , A.ALSTKY  AS ALSTKY  
		      , A.DPTNKY  AS DPTNKY  
		      , A.DPTNKYNM  AS DPTNKYNM
		      , A.PTRCVR  AS PTRCVR  
		      , A.PTRCVRNM  AS PTRCVRNM
		      , A.PGRC01  AS PGRC01  
		      , A.PGRC05  AS PGRC05  
		      , A.PTNBLK  AS PTNBLK  
		      , A.DOCDAT  AS DOCDAT  
		      , A.DOCCAT  AS DOCCAT  
		      , A.DOCCATNM  AS DOCCATNM
		      , A.SHPMTY  AS SHPMTY  
		      , A.SHPMTYNM  AS SHPMTYNM
		      , A.DOCUTY  AS DOCUTY  
		      , A.RQSHPD  AS RQSHPD  
		      , A.RQARRD  AS RQARRD  
		      , A.RQARRT  AS RQARRT  
		      , A.SVBELN  AS SVBELN  
		      , A.OWNRKY  AS OWNRKY  
		      , A.WARESR  AS WARESR  
		      , MAX(A.WARETG) AS WARETG  
		      , A.DOCTXT  AS DOCTXT  
		      , A.USRID1  AS USRID1  
		      , A.UNAME1  AS UNAME1  
		      , A.DEPTID1 AS DEPTID1 
		      , A.DNAME1  AS DNAME1  
		      , A.USRID2  AS USRID2  
		      , A.UNAME2  AS UNAME2  
		      , A.UNAME4  AS UNAME4  
		      , A.DNAME4  AS DNAME4  
		      , A.PGRC02  AS PGRC02  
		      , A.PGRC03  AS PGRC03  
		      , A.PGRC04  AS PGRC04  
		      , SUM(A.ITEMCOUNT)  AS ITEMCOUNT  
		      , SUM(A.QTAPPO) AS QTAPPO     
		      , A.CARNUM  AS CARNUM   
		      , MAX(A.XDATS)  AS XDATS   
		      , A.XTIMS AS XTIMS    
		      , MAX(A.C00104) AS C00104   
		      , MAX(A.CREUSR) AS CREUSR
		      , A.C00107  AS C00107  
		      , SUM(A.QTJWGT) AS QTJWGT
		      , SUM(A.PLTQTY) AS PLTQTY    
		      , A.WARETG AS WARETG 
		      ,A.FILEDN AS FILEDN
		  FROM (
		         SELECT /*+ ORDERED */ IF.SVBELN AS KEY,
		                ' ' AS SHPOKY,
		                IF.WAREKY AS WAREKY,
		                WH.NAME01 AS WAREKYNM,
		                'NEW' AS STATDO,
		                ST.CDESC1 AS STATDONM,
		                ' ' AS ALSTKY,
		                DECODE(IF.DOCUTY, '266', IF.WARETG, IF.PTNROD) AS DPTNKY,
		                DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = IF.WARETG), ' '), BZ2.NAME01) AS DPTNKYNM,
		                IF.PTNRTO AS PTRCVR,
		                DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 FROM WAHMA WHERE WAREKY = IF.PTNRTO), ' '), BZ.NAME01) AS PTRCVRNM,
		         
		                NVL(SP.REGNKY, ' ') AS PGRC01,
		                ' ' AS PGRC05,
		                ' ' AS PTNBLK,
		                DECODE(IF.OWNRKY, '2200', IF.ORDDAT, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS DOCDAT,
		                '200' AS DOCCAT,
		                DC.SHORTX AS DOCCATNM,
		                IF.DOCUTY AS SHPMTY,
		                D.SHORTX AS SHPMTYNM,
		                IF.DOCUTY AS DOCUTY,
		                IF.OTRQDT AS RQSHPD,
		                MAX(IF.ERPCDT) AS RQARRD,
		                MAX(IF.ERPCTM) AS RQARRT,
		                IF.SVBELN AS SVBELN,
		                IF.OWNRKY AS OWNRKY,
		                IF.WARESR AS WARESR,
		                CASE WHEN IF.DOCUTY = '266' THEN  IF.WARETG
		                     WHEN IF.DOCUTY = '267' THEN  IF.WARETG
		                     ELSE IF.WAREKY
		                 END AS WARETG,
		                MAX(TEXT01) AS DOCTXT,
		                NVL(MAX(IF.CUPOST), ' ') AS USRID1,
		                NVL(MAX(IF.CUADDR), ' ') AS UNAME1,
		                NVL(MAX(IF.CTNAME), ' ') AS DEPTID1,
		                NVL(MAX(IF.CTTEL1), ' ') AS DNAME1,
		                NVL(MAX(IF.CUTEL2), ' ') AS USRID2,
		                NVL(MAX(IF.CUNAME), ' ') AS UNAME2,
		                NVL(MAX(IF.SALENM), ' ') AS UNAME4,
		                NVL(MAX(IF.SALTEL), ' ') AS DNAME4,
		                NVL(MAX(DIRDVY), ' ') AS PGRC02,
		                NVL(MAX(DIRSUP), ' ') AS PGRC03,
		                NVL(MAX(IF.WARESR), ' ') AS PGRC04,
		                SUM(TRUNC(IF.QTYORG/ DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1)) ITEMCOUNT,
		                SUM(TRUNC(IF.QTYREQ / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM), 1)) QTAPPO,
		                NVL(C.CARNUM, ' ') AS CARNUM,
		         /*
		                MAX(IF.XDATS)           AS XDATS,
		                MAX(IF.XTIMS)           AS XTIMS,
		         */
		                CASE WHEN (MAX(IF.XDATS) IS NULL OR MAX(IF.XDATS) = '' OR MAX(IF.XDATS) = ' ') THEN MAX(IF.CREDAT) ELSE MAX(IF.XDATS) END AS XDATS,
		                CASE WHEN (MAX(IF.XTIMS) IS NULL OR MAX(IF.XTIMS) = '' OR MAX(IF.XTIMS) = ' ') THEN MAX(IF.CRETIM) ELSE MAX(IF.XTIMS) END AS XTIMS,
		                MAX(IF.C00104)          AS C00104,
		                MAX(IF.USRID1) AS CREUSR,
		                MAX(IF.C00107)          AS C00107,
		                SUM(SM.NETWGT)  AS QTJWGT,
		                ROUND(SUM(IF.QTYORG / SM.QTYSTD), 3) AS PLTQTY,
		               (CASE WHEN NVL(OM.XLS_REAL_PATH,'**') LIKE 'S%' THEN '다운로드' ELSE ' ' END) AS FILEDN
		          FROM IFWMS113 IF INNER JOIN SKUMA SM ON SM.OWNRKY = IF.OWNRKY AND SM.SKUKEY = IF.SKUKEY
		                           INNER JOIN DOCTM D ON D.DOCUTY = IF.DOCUTY 
		                           LEFT OUTER JOIN WAHMA WH ON WH.WAREKY = IF.WAREKY
		                           LEFT OUTER JOIN CMCDV ST ON ST.CMCDKY = 'STATDO' AND ST.CMCDVL = 'NEW'
		                           LEFT OUTER JOIN BZPTN BZ ON BZ.OWNRKY = IF.OWNRKY AND BZ.PTNRKY = IF.PTNRTO AND BZ.PTNRTY = '0007'
		                           LEFT OUTER JOIN BZPTN BZ2 ON BZ2.OWNRKY = IF.OWNRKY AND BZ2.PTNRKY = IF.PTNROD AND BZ2.PTNRTY = '0001'
		                           LEFT OUTER JOIN SHPMA SP ON SP.OWNRKY = IF.OWNRKY AND SP.POSTCD=IF.CUPOST
		                           LEFT OUTER JOIN WAHMA W ON W.WAREKY = IF.PTNRTO
		                           LEFT OUTER JOIN DOCCM DC ON DC.DOCCAT = '200'
		                           LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
		                                        ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
		                           LEFT OUTER JOIN SA_ORDER_MST@WMSTOTOS OM ON OM.COMP_CD = IF.USRID3 AND OM.ORD_NO = IF.SVBELN
		         WHERE IF.XSTAT = 'R'
		         AND IF.STKNUM = ' '
		         AND IF.OWNRKY = #{OWNRKY}
		         AND IF.WAREKY = #{WAREKY}
		         AND IF.C00102 = 'Y'
		         AND IF.QTYREQ > IF.WMSMGT + IF.QTSHPD
		         <if test="GRPRL == 'ERPSO'">
		          AND IF.DOCUTY IN ('211','212','213','214','215','216','270')
 		         </if> 
		         <if test="GRPRL == 'TOTAL'">
		          AND IF.DOCUTY IN ('299')
 		         </if> 
		         <if test="GRPRL == 'MOVE'">
		          AND IF.DOCUTY IN ('266','267')
		          AND IF.CHKSEQ != ' ' 
		          AND IF.QTYREQ-IF.WMSMGT-IF.QTSHPD > 0
 		         </if> 
		            AND IF.C00102 ='Y'
		         <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
		           
		         <if test="RANGE_SQL2 != ''">
			         <if test="GRPRL == 'TOTAL'"> AND IF.DOCUTY IN ('299') </if> 
			         AND IF.SVBELN  <if test="FLAG != ''"> NOT IN </if>  
			                        <if test="FLAG == ''"> IN </if>  
			         (SELECT IF.SVBELN FROM IFWMS113 IF WHERE IF.XSTAT = 'R' AND IF.STKNUM = ' '
			                                              AND IF.OWNRKY = #{OWNRKY} AND IF.WAREKY = #{WAREKY}
			           <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>
			         )
		         </if> 
		        
		         
		          GROUP BY IF.SVBELN, IF.WAREKY, WH.NAME01, ST.CDESC1, IF.DOCUTY, IF.PTNRTO, BZ.NAME01, IF.PTNROD, BZ2.NAME01, IF.ORDDAT,
		                   SP.REGNKY, DC.SHORTX, D.SHORTX, IF.OTRQDT, IF.C00102,  IF.OWNRKY, IF.WARETG, BZ.NATNKY, IF.WARESR, IF.WARETG, C.CARNUM, OM.XLS_REAL_PATH
		          ORDER BY IF.SVBELN
		        ) A
		    GROUP BY A.KEY
		           , A.SHPOKY
		           , A.WAREKY
		           , A.WAREKYNM
		           , A.STATDO
		           , A.STATDONM
		           , A.ALSTKY
		           , A.DPTNKY
		           , A.DPTNKYNM
		           , A.PTRCVR
		           , A.PTRCVRNM
		           , A.PGRC01
		           , A.PGRC05
		           , A.PTNBLK
		           , A.DOCDAT
		           , A.DOCCAT
		           , A.DOCCATNM
		           , A.SHPMTY
		           , A.SHPMTYNM
		           , A.DOCUTY
		           , A.RQSHPD
		           , A.RQARRD
		           , A.RQARRT
		           , A.SVBELN
		           , A.OWNRKY
		           , A.WARESR
		
		           , A.DOCTXT
		           , A.USRID1
		           , A.UNAME1
		           , A.DEPTID1
		           , A.DNAME1
		           , A.USRID2
		           , A.UNAME2
		           , A.UNAME4
		           , A.DNAME4
		           , A.PGRC02
		           , A.PGRC03
		           , A.PGRC04
		           , A.CARNUM
		           , A.XDATS
		           , A.XTIMS
		           , A.C00104
		           , A.CREUSR
		           , A.C00107
		           , A.WARETG
		           ,A.FILEDN
  </select> 
  
    <!-- [DL23] 출고할당 헤더 : 조회 : OUTBOUND.PI.FIND_NEW_SHPDH_RETURNPOORDER -->
  <select id="DL23_HEAD_02_LIST" parameterType="hashmap" resultType="DataMap">
  		SELECT 
				IF.SEBELN      AS KEY
				,     ' '     AS SHPOKY
				,IF.WAREKY AS WAREKY,
				WH.NAME01 AS WAREKYNM,
				'NEW' AS STATDO,
				ST.CDESC1 AS STATDONM
				,' ' AS ALSTKY       
				,DECODE(IF.DOCUTY, '266', IF.WAREKY, IF.PTNRKY) AS DPTNKY
				,DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 
				                                FROM WAHMA 
				                               WHERE WAREKY = IF.WAREKY),' '), BZ.NAME01) AS DPTNKYNM
				,DECODE(IF.DOCUTY, '266', IF.WAREKY, IF.PTNRKY) AS PTRCVR
				,DECODE(IF.DOCUTY, '266', NVL((SELECT NAME01 
				                                FROM WAHMA 
				                               WHERE WAREKY = IF.WAREKY),' '), BZ.NAME01)  AS PTRCVRNM
				,NVL(BZ.EXPTNK,' ') AS PGRC01
				,NVL(BZ.PTNG02,' ') AS PGRC02
				,NVL(BZ.PTNG03,' ')  AS PGRC03
				,NVL(BZ.PTNG04,' ') AS PGRC04
				,' ' AS PGRC05
				,' ' AS PTNBLK
				,TO_CHAR(SYSDATE,'YYYYMMDD') AS DOCDAT
				,'200' AS DOCCAT
				,DC.SHORTX AS DOCCATNM
				,IF.DOCUTY AS SHPMTY
				,D.SHORTX AS SHPMTYNM
				,IF.DOCUTY AS DOCUTY
				,IF.DLVDAT AS RQSHPD     
				,IF.BUYDAT AS RQARRD     
				
				,IF.SEBELN AS SEBELN
				,IF.OWNRKY AS OWNRKY 
				,IF.WARESR AS WARESR
				,IF.WARETG AS WARETG
				
				 FROM IFWMS103 IF
				     INNER JOIN DOCTM D
				                   ON D.DOCUTY = IF.DOCUTY
				     INNER JOIN SKUWC SW
				               ON SW.OWNRKY = IF.OWNRKY
				              AND SW.WAREKY = IF.WAREKY
				              AND SW.SKUKEY = IF.SKUKEY
				      LEFT OUTER JOIN WAHMA WH
				                   ON WH.WAREKY = IF.WAREKY
				      LEFT OUTER JOIN CMCDV ST
				                   ON ST.CMCDKY = 'STATDO'
				                  AND ST.CMCDVL = 'NEW'
				      LEFT OUTER JOIN BZPTN BZ
				                   ON BZ.OWNRKY = IF.OWNRKY
				                  AND BZ.PTNRKY = IF.PTNRKY
				                  AND BZ.PTNRTY = '0002'
				      LEFT OUTER JOIN WAHMA W
				                   ON W.WAREKY = IF.PTNRKY
				      LEFT OUTER JOIN DOCCM DC
				                   ON DC.DOCCAT = '200'
				WHERE IF.XSTAT IN ('R','D')
				AND IF.ORDQTY-IF.WMSMGT-IF.INNQTY > 0
				AND IF.DOCUTY = '270'
				AND IF.OWNRKY = #{OWNRKY}    
				AND IF.WAREKY = #{WAREKY}
				<if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
				
				<if test="RANGE_SQL2 != ''">
			        AND IF.SVBELN  <if test="FLAG != ''"> NOT IN </if>  
			                       <if test="FLAG == ''"> IN </if>  
					(SELECT IF.SVBELN FROM IFWMS113 IF 
					WHERE IF.XSTAT = 'R' 
					AND IF.STKNUM = ' '
					AND IF.DOCUTY = '270'
					AND IF.OWNRKY = #{OWNRKY}
					AND IF.WAREKY = #{WAREKY}
					  <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>
					)

				</if>
				GROUP BY 
				IF.SEBELN, 
				IF.WAREKY, 
				WH.NAME01, 
				ST.CDESC1,
				DECODE(IF.DOCUTY, '266', IF.WAREKY, IF.PTNRKY),
				DECODE(IF.DOCUTY, '266', IF.WAREKY, IF.PTNRKY),
				NVL(BZ.EXPTNK,' '),
				NVL(BZ.PTNG02,' '),
				NVL(BZ.PTNG03,' '),
				NVL(BZ.PTNG04,' '),
				IF.PTNRKY,
				DC.SHORTX ,
				IF.DOCUTY, 
				D.SHORTX,  
				BZ.NATNKY,
				IF.DOCUTY, 
				BZ.NAME01,
				IF.BUYDAT,  
				IF.BUYCDT,   
				IF.SEBELN,
				IF.OWNRKY,
				IF.WARESR,
				IF.WARETG,IF.DLVDAT 
				ORDER BY SEBELN
  </select> 

  <!-- [DL24] 배차/피킹 : 헤더 : 조회 : OUTBOUND.PI.FIND_SHPDH-->
  <select id="DL24_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT DISTINCT SH.SHPOKY AS KEY,
           SH.SHPOKY AS SHPOKY,
           SH.WAREKY AS WAREKY,
           WH.NAME01 AS WAREKYNM,
           SH.STATDO AS STATDO,
           CV.CDESC1 AS STATDONM,
           SH.DRELIN AS DRELIN,
           DECODE(MAX(SR.SHIPSQ),' ',0,'',0,NULL,0,MAX(SR.SHIPSQ)) AS SHIPSQ,
           DECODE(SH.DRELIN,'V','YES','NO') AS DRELINNM,
           MAX(SR.CARNUM) AS CARNUM,
           SH.INDDCL AS INDDCL,
           SH.ALSTKY AS ALSTKY,
           SH.DPTNKY AS DPTNKY,
           DECODE(SH.SHPMTY, '270', RBP.NAME01, BP.NAME01) AS DPTNKYNM,
           SH.PTRCVR AS PTRCVR,
           DECODE(SH.SHPMTY, '270', RBT.NAME01, BT.NAME01) AS PTRCVRNM,
           SH.PGRC01 AS PGRC01,
           SH.PGRC02 AS PGRC02,
           SH.PGRC03 AS PGRC03,
           SH.PGRC04 AS PGRC04,
           SH.PGRC05 AS PGRC05,
           ' ' AS PTNBLK,
           SH.OWNRKY AS OWNRKY,
           SH.DOCDAT AS DOCDAT,
           SH.DOCCAT AS DOCCAT,
           DC.SHORTX AS DOCCATNM,
           SH.SHPMTY AS SHPMTY,
           DT.SHORTX AS SHPMTYNM,
           SH.SHPMTY AS DOCUTY,
           SH.RQSHPD AS RQSHPD,
           SH.RQARRD AS RQARRD,
           SH.RQARRT AS RQARRT,
           SH.OPURKY AS OPURKY,
           DECODE(SH.SHPMTY, '299', ' ', SI.SVBELN) AS SVBELN,
           DECODE(SH.STATDO, 'REF', SI.STKNUM, DECODE(SH.SHPMTY, '299', SI.STKNUM, ' ')) AS STKNUM,
           CASE WHEN SH.SHPMTY = '299'
                     THEN NVL((SELECT MAX(SUBSTR(SDATBG,1,8)) FROM IFWMS113 WHERE STKNUM = SI.STKNUM), ' ')
                ELSE ' ' END AS SDATBG,
           SH.QTAPPO AS QTAPPO,
           SH.LOCADT AS LOCADT,
           SH.LOCADK AS LOCADK,
           SH.USRID1 AS USRID1,
           SH.UNAME1 AS UNAME1,
           SH.DEPTID1 AS DEPTID1,
           SH.DNAME1 AS DNAME1,
           SH.USRID2 AS USRID2,
           SH.UNAME2 AS UNAME2,
           SH.DEPTID2 AS DEPTID2,
           SH.DNAME2 AS DNAME2,
           SH.USRID3 AS USRID3,
           SH.UNAME3 AS UNAME3,
           SH.DEPTID3 AS DEPTID3,
           SH.DNAME3 AS DNAME3,
           SH.USRID4 AS USRID4,
           SH.UNAME4 AS UNAME4,
           SH.DEPTID4 AS DEPTID4,
           SH.DNAME4 AS DNAME4,
           SH.DOCTXT AS DOCTXT,
           SH.CREDAT AS CREDAT,
           SH.CRETIM AS CRETIM,
           SH.CREUSR AS CREUSR,
           (SELECT NMLAST FROM USRMA WHERE USERID = SH.CREUSR) AS CUSRNM,
           SH.LMODAT AS LMODAT,
           SH.LMOTIM AS LMOTIM,
           SH.LMOUSR AS LMOUSR,
           (SELECT NMLAST FROM USRMA WHERE USERID = SH.LMOUSR) AS LUSRNM,
           SI.SEBELN AS SEBELN,
           MAX(NVL(SR.ARRIVA, ' ')) ARRIVA,
           COUNT(*) AS ITEMCNT,
           SUM(SI.QTALOC / NVL(SM.QTDUOM, NULL)) AS SUMQTY,
           (SELECT COUNT(STATIT) FROM SHPDI WHERE SHPOKY = SH.SHPOKY AND STATIT IN ('NEW','DEL')) AS RECOCD 
      FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
                    LEFT OUTER JOIN SHPDR SR ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
                    INNER JOIN WAHMA WH ON SH.WAREKY = WH.WAREKY
                    INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
                    LEFT OUTER JOIN BZPTN BP ON BP.PTNRKY = SH.DPTNKY AND BP.OWNRKY = SH.OWNRKY AND BP.PTNRTY IN ('0001', '0004')
                    LEFT OUTER JOIN BZPTN BT ON BT.PTNRKY = SH.PTRCVR AND BT.OWNRKY = SH.OWNRKY AND BT.PTNRTY IN ('0007', '0004')
                    LEFT OUTER JOIN BZPTN RBP ON RBP.PTNRKY = SH.DPTNKY AND RBP.OWNRKY = SH.OWNRKY AND RBP.PTNRTY = '0002'
                    LEFT OUTER JOIN BZPTN RBT ON RBT.PTNRKY = SH.PTRCVR AND RBT.OWNRKY = SH.OWNRKY AND RBT.PTNRTY = '0002'
                    INNER JOIN CMCDV CV ON SH.STATDO = CV.CMCDVL AND CV.CMCDKY = 'STATDO' 
                    INNER JOIN DOCCM DC ON SH.DOCCAT = DC.DOCCAT
                    INNER JOIN DOCTM DT ON SH.SHPMTY = DT.DOCUTY
     WHERE 1 = 1
       
     <if test='SHPOKYS != ""'> 
        AND SH.SHPOKY IN (${SHPOKYS}) 
       </if>  
       <if test='SHPOKYS == ""'> 
        AND SH.OWNRKY = #{OWNRKY}
        AND SH.WAREKY = #{WAREKY}
        
        <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>  
      <if test="DRELIN != ''">
        AND SH.DRELIN LIKE DECODE(#{DRELIN},'N', ' ', 'Y', 'V', #{DRELIN} )
      </if>  
      <if test="GRPRL == 'ERPSO'">
        AND SH.SHPMTY IN ('211','212','213','214','215','216' )
      </if>  
      <if test="GRPRL == 'TOTAL'">
        AND SH.SHPMTY IN ('299')
      </if>  
      <if test="GRPRL == 'MOVE'">
        AND SH.SHPMTY IN ('266','267')
      </if>  
      <if test="GRPRL == 'PTNPUR'">
        AND SH.SHPMTY IN ('270')
      </if>  
      <if test="INDDCL != ''">
        AND SH.INDDCL = #{INDDCL}
      </if>  
      <if test="CLOSE == 'V'">
        AND STATDO &lt;&gt; 'REF'
      </if>     
      </if>  
    
    GROUP BY SH.SHPOKY, SH.SHPOKY, RBT.NAME01, SH.WAREKY, WH.NAME01, SH.STATDO, CV.CDESC1, SH.DRELIN, RBP.NAME01, SH.PTRCVR,
             SH.INDDCL, SI.SVBELN, SH.ALSTKY, SH.DPTNKY, BP.NAME01, SH.PGRC01, SH.PGRC02, SH.PGRC03, SH.PGRC04, SH.PGRC05,
             SH.OWNRKY, SH.DOCDAT, SH.DOCCAT, DC.SHORTX, SH.SHPMTY, DT.SHORTX, SH.SHPMTY, SH.RQSHPD, SH.RQARRD, SH.RQARRT, 
             SH.OPURKY, SI.STKNUM, SH.QTAPPO, SH.LOCADT, SH.LOCADK, SH.USRID1, SH.UNAME1, SH.DEPTID1, SH.DNAME1, SH.USRID2,
             SH.UNAME2, SH.DEPTID2, SH.DNAME2, SH.USRID3, SH.UNAME3, SH.DEPTID3, SH.DNAME3, SH.USRID4, SH.UNAME4, SH.DEPTID4,
             SH.DNAME4, SH.DOCTXT, SH.CREDAT, SH.CRETIM, SH.CREUSR, SH.LMODAT, SH.LMOTIM, SH.LMOUSR, SI.SEBELN, BT.NAME01
             
    </select> 
    
  <!-- [DL24] 배차/피킹 : 아이템 : 조회1 : OUTBOUND.PI.FIND_SHPDI-->
  <select id="DL24_ITEM_01_LIST" parameterType="hashmap" resultType="DataMap">
     SELECT 
           SI.SHPOKY AS SHPOKY,
           SI.SHPOIT AS SHPOIT,
           SI.STATIT AS STATIT,
           CV.CDESC1 AS STATITNM,
           SI.SKUKEY AS SKUKEY,
           SI.QTSHPO AS QTSHPO,
           SI.QTSHPO - SI.QTALOC AS QTALLM,
           SI.QTSHPO - SI.QTALOC AS QTUALO,
           SI.QTYORG AS QTYORG,
           DECODE(SI.STATIT, 'REF', SI.QTJCMP, SI.QTYREF) AS QTYREF,
           SI.QTAPPO AS QTAPPO,
           SI.QTALOC AS QTALOC,
           F_PRE_QTYPRE(SH.OWNRKY, SH.WAREKY, SI.SKUKEY) AS QTYPRE,
           SI.QTJCMP AS QTJCMP,
        <if test="PROGID == 'DL180'">
         DECODE(SI.EXSUBS,' ',SI.QTJCMP,SI.QTSHPD) AS QTSHPD,
      </if>  
      <if test="PROGID != 'DL180'">
         SI.QTSHPD AS QTSHPD,
      </if>  
           SI.QTSHPC AS QTSHPC,
           SI.QTYUOM AS QTYUOM,
           SI.MEASKY AS MEASKY,
           SI.UOMKEY AS UOMKEY,
           SI.QTPUOM AS QTPUOM,
           SI.DUOMKY AS DUOMKY,
           SI.QTDUOM AS QTDUOM,
           SI.SASTKY AS SASTKY,
           SI.ALSTKY AS ALSTKY,
           SI.TKFLKY AS TKFLKY,
           SI.ESHPKY AS ESHPKY,
           SI.ESHPIT AS ESHPIT,
           SI.OPURKY AS OPURKY,
           SI.REFDKY AS REFDKY,
           SI.REFDIT AS REFDIT,
           SI.REFCAT AS REFCAT,
           SI.REFDAT AS REFDAT,
           SI.EXSUBS AS EXSUBS,
           SI.DESC01 AS DESC01,
           SI.DESC02 AS DESC02,
           SI.ASKU01 AS ASKU01,
           SI.ASKU02 AS ASKU02,
           SI.ASKU03 AS ASKU03,
           SI.ASKU04 AS ASKU04,
           SI.ASKU05 AS ASKU05,
           SI.EANCOD AS EANCOD,
           SI.GTINCD AS GTINCD,
           SI.SKUG01 AS SKUG01,
           SI.SKUG02 AS SKUG02,
           SI.SKUG03 AS SKUG03,
           SI.SKUG04 AS SKUG04,
           SI.SKUG05 AS SKUG05,
           SI.GRSWGT AS GRSWGT,
           SI.NETWGT AS NETWGT,
           SI.WGTUNT AS WGTUNT,
           SI.LENGTH AS LENGTH,
           SI.WIDTHW AS WIDTHW,
           SI.HEIGHT AS HEIGHT,
           SI.CUBICM AS CUBICM,
        <if test="PROGID == 'DL040'">
         CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
               ELSE ROUND(SI.QTALOC * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
      </if>  
      <if test="PROGID != 'DL040'">
         CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
               ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
      </if>      
           SI.CAPACT AS CAPACT,
           SI.PROCHA AS PROCHA,
           SI.AREAKY AS AREAKY,
           SI.LOTA01 AS LOTA01,
           SI.LOTA02 AS LOTA02,
           SI.LOTA03 AS LOTA03,
           SI.LOTA04 AS LOTA04,
           SI.LOTA05 AS LOTA05,
           SI.LOTA06 AS LOTA06,
           SI.LOTA07 AS LOTA07,
           SI.LOTA08 AS LOTA08,
           SI.LOTA09 AS LOTA09,
           SI.LOTA10 AS LOTA10,
           SI.LOTA11 AS LOTA11,
           SI.LOTA12 AS LOTA12,
           SI.LOTA13 AS LOTA13,
           SI.LOTA14 AS LOTA14,
           SI.LOTA15 AS LOTA15,
           SI.LOTA16 AS LOTA16,
           SI.LOTA17 AS LOTA17,
           SI.LOTA18 AS LOTA18,
           SI.LOTA19 AS LOTA19,
           SI.LOTA20 AS LOTA20,
           SI.AWMSNO AS AWMSNO,
           SI.SMANDT AS SMANDT,
           SI.SEBELN AS SEBELN,
           SI.SEBELP AS SEBELP,
           SI.STRAID AS STRAID,
           SI.SVBELN AS SVBELN,
           SI.SPOSNR AS SPOSNR,
           SI.STKNUM AS STKNUM,
           SI.STPNUM AS STPNUM,
           SI.SWERKS AS SWERKS,
           SI.SLGORT AS SLGORT,
           SI.SDATBG AS SDATBG,
           SI.STDLNR AS STDLNR,
           SI.SSORNU AS SSORNU,
           SI.SSORIT AS SSORIT,
           SI.SMBLNR AS SMBLNR,
           SI.SZEILE AS SZEILE,
           SI.SMJAHR AS SMJAHR,
           SI.SXBLNR AS SXBLNR,
           SI.SAPSTS AS SAPSTS,
           SI.PTNRKY AS PTNRKY,
           SI.NAME01 AS NAME01,
           SI.SLAND1 AS SLAND1,
           SI.SBKTXT AS SBKTXT,
           SH.SHPMTY AS SHPMTY,
           SI.STRAID AS VGBEL,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS BOXQTY,       
           NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTYSTD, NULL,0,SM.QTYSTD) ) ,0) AS PLTQTY,       
           NVL(MOD(SI.QTSHPO, DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM)),0) AS REMQTY,
            SR.ARRIVA AS ARRIVA,
           SR.CARDAT AS CARDAT,
           SR.CARNUM AS CARNUM,
           SR.SHIPSQ AS SHIPSQ,
           SR.SORTSQ AS SORTSQ,
           SR.DRIVER AS DRIVER,
           SR.RECAYN AS RECAYN,
           SI.QTYREF AS QTYREF,
           SI.QTSHPC AS QTSHPC,
           (SELECT COUNT(*) FROM SHPDI WHERE SHPOKY = SH.SHPOKY)  AS ITEMCOUNT
                FROM SHPDH SH
           INNER JOIN SHPDI SI
                   ON SH.SHPOKY = SI.SHPOKY 
           LEFT OUTER JOIN SHPDR SR
                   ON SR.SHPOKY = SI.SHPOKY
                  AND SR.SHPOIT = SI.SHPOIT
           LEFT OUTER JOIN SKUMA SM
                   ON SM.OWNRKY = SH.OWNRKY
                  AND SM.SKUKEY = SI.SKUKEY
           LEFT OUTER JOIN CMCDV CV
                   ON CV.CMCDKY = 'STATIT'
                  AND CV.CMCDVL = SI.STATIT
       WHERE  1 = 1
       AND SH.SHPOKY = #{SHPOKY}  
       ORDER BY SI.SHPOKY, SI.SHPOIT    

    </select> 
    <!-- [DL24] 배차/피킹 : 아이템 : 조회2 : OUTBOUND.PLANTISSUE.FIND_UNALLOCATED_INFO-->
  <select id="DL24_ITEM_02_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT DISTINCT PTNRTO AS PTNRKY,
           BN.NAME01 AS PTNRNM,
           BN.TELN01 AS TELN01,
           SVBELN AS SVBELN,
           REFDKY AS SVGBEL,
           TMP.SKUKEY AS SKUKEY,
           SA.DESC01 AS DESC01,
           QTYORG AS QTSHPO,
           QTYORG - (DECODE(SIGN(ALLOC-CULSUM), -1, LEAST(QTYORG, ABS(ALLOC-CULSUM)), 0)) AS QTALOC,
           DECODE(SIGN(ALLOC-CULSUM), -1, LEAST(QTYORG, ABS(ALLOC-CULSUM)), 0) AS QTUALO,
           CULSUM,
           ALLOC,
           ALLOC-CULSUM GAP,
           CUSRID    AS CUSRID,
           CUNAME    AS CUNAME,
           CUPOST    AS CPSTLZ,
           CUNATN     AS LAND1,
           CUTEL1     AS TELF1,
           CUTEL2     AS TELE2,
           CUMAIL    AS SMTP_ADDR,
           DIRSUP     AS KUKLA,
           DIRDVY     AS VTEXT,
           CUADDR     AS ADDR,
           CTNAME     AS CNAME,
           CTTEL1     AS CPHON,
           SALENM     AS BNAME,
           SALTEL     AS BPHON
      FROM (SELECT OWNRKY, SVBELN, PTNRTO, A.SKUKEY, CREDAT, USRID1 , QTYORG, REFDKY,
                   SUM(QTYORG) OVER ( PARTITION BY A.SKUKEY ORDER BY SVBELN) CULSUM,
                   ALLOC, 
                   CUSRID, CUNAME, CUPOST, CUNATN, CUTEL1, CUTEL2, CUMAIL, 
                   DIRSUP, DIRDVY, CUADDR, CTNAME, CTTEL1, SALENM, SALTEL
              FROM IFWMS113 A, 
                   (SELECT STKNUM, SKUKEY , SHPDI.QTALOC ALLOC, DPTNKY
                      FROM SHPDH,SHPDI
                     WHERE SHPDH.SHPOKY = SHPDI.SHPOKY
                       AND STKNUM = DECODE(#{STKNUM}, '', ' ', #{STKNUM})
                       AND SHPDH.SHPOKY = #{SHPOKY}
                       AND SHPDI.QTSHPO - SHPDI.QTALOC > 0
                       AND STATIT != 'REF' ) B
             WHERE A.STKNUM =  DECODE(#{STKNUM}, '', ' ', #{STKNUM})
               AND A.STKNUM = B.STKNUM
               AND A.SKUKEY = B.SKUKEY
               AND A.PTNRTO = B.DPTNKY
             ORDER BY 3, 1) TMP,
            SKUMA SA,
            BZPTN BN
     WHERE TMP.SKUKEY = SA.SKUKEY(+)
       AND TMP.OWNRKY = SA.OWNRKY(+)
       AND TMP.PTNRTO = BN.PTNRKY(+)
       AND TMP.OWNRKY = BN.OWNRKY(+) 
       AND BN.PTNRTY = '0007'   
<!--     <if test="SKUKEY != 'SKUKEY'"> -->
<!--       AND TMP.SKUKEY = #{SKUKEY} -->
<!--     </if>   -->
     ORDER BY 4, 3
    </select> 
    
  <!-- [DL24] 배차/피킹 : D/O 전송 : 헤더  VALIDATION 01 조회  : SHPDR.SHIPSQ.VALIDATE -->
  <select id="DL24_HEAD_VALID_01_MAP" parameterType="hashmap" resultType="DataMap">

        SELECT 
               DECODE(MAX(R.CARDAT),NULL,'19900101',MAX(R.CARDAT)) AS CARDAT,
               DECODE(MAX(R.CARDAT),'','N','Y')    AS IFFLG,
              DECODE(MAX(R.SHIPSQ),NULL,'000',MAX(R.SHIPSQ)) AS SHIPSQ
          FROM SHPDH H
          LEFT OUTER JOIN SHPDI I 
                       ON H.SHPOKY = I.SHPOKY
          LEFT OUTER JOIN SHPDR R
                       ON H.SHPOKY = R.SHPOKY
                      AND I.SHPOIT = R.SHPOIT
         WHERE (R.CARDAT, R.SHIPSQ) IN (SELECT CARDAT, 
                                               SHIPSQ 
                                          FROM SHPDR 
                                         WHERE SHPOKY = #{SHPOKY} AND SHIPSQ !=0)
           AND H.WAREKY  = (SELECT WAREKY FROM SHPDH WHERE SHPOKY = #{SHPOKY} )
           AND H.DRELIN = 'V'

  </select>   
    
  <!-- [DL24] 배차/피킹 : D/O 전송 : 헤더  VALIDATION 02 조회   -->
  <select id="DL24_HEAD_VALID_02_MAP" parameterType="hashmap" resultType="DataMap">

        SELECT DISTINCT 'D' AS IFFLG,
             R.SHPOKY AS SHPOKY
        FROM SHPDR R 
       WHERE R.SHPOKY = #{SHPOKY} AND R.SHIPSQ = 0   

  </select>   
    
  <!-- [DL24] 배차/피킹 : D/O 전송 : 헤더  VALIDATION 03 조회   -->
  <select id="DL24_HEAD_VALID_03_MAP" parameterType="hashmap" resultType="DataMap">

        SELECT COUNT(DISTINCT LOTA06) AS CNT
        FROM STKKY
       WHERE SHPOKY = #{SHPOKY} 

  </select>   
  
  <!-- [DL24] 배차/피킹 : D/O 전송 : 헤더 수정 -->
  <update id="DL24_CFM_ORD_DOC_HEAD_UPDATE"  parameterType="hashmap">

    UPDATE SHPDH
            SET DRELIN = #{DRELIN},
                LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
                LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'), 
                LMOUSR = #{SES_USER_ID}
          WHERE SHPOKY = #{SHPOKY}
  
  </update>
  
  <!-- [DL24] 배차/피킹 : D/O 전송 : 아이템 수정 -->
  <update id="DL24_CFM_ORD_DOC_ITEM_UPDATE"  parameterType="hashmap">

    UPDATE SHPDI 
         SET QTSHPO = #{QTALOC}, 
             AWMSNO = 'WMS', 
             LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'), 
             LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'), 
             LMOUSR = #{SES_USER_ID}  
       WHERE SHPOKY = #{SHPOKY}
         AND SHPOIT = #{SHPOIT}
  
  </update>
  <!-- P_SAJO_PICKING_DRTCMP 프로시서 실행 : Picking -->
  <update id="P_SAJO_PICKING_DRTCMP_UPDATE" parameterType="hashmap">
      { call P_SAJO_PICKING_DRTCMP(#{SHPOKY}, #{SES_USER_ID}, #{ERRNUM}, #{ERRMSG}) }
  </update>
  
  <!-- [DL24] 배차/피킹 : 삭제 -->
  <update id="DL24_REMOVE_UPDATE"  parameterType="hashmap">

    UPDATE SHPDH
       SET DRELIN = ' ',
           LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
           LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'),
           LMOUSR = #{SES_USER_ID}
     WHERE 1 = 1
    <if test="SHPMTY == '299'">
      AND SHPOKY IN (SELECT DISTINCT SHPOKY FROM SHPDI WHERE STKNUM = #{STKNUM})
    </if>     
    <if test="SHPMTY != '299'">
      AND SHPOKY = #{SHPOKY}
    </if>     
        
  </update>
  
  <!-- P_DEL_SHP_REF 프로시서 실행 : RemoveDL24 -->
  <update id="P_DEL_SHP_REF_UPDATE" parameterType="hashmap">
  
      { call P_DEL_SHP_REF(#{SES_USER_ID}, #{OWNRKY}, #{OWNRKY}, #{WAREKY}, #{STKNUM}) }
      
  </update>
    
  <!-- [DL26] 지정출고 : 헤더 : 조회 -->
  <select id="DL26_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT ' ' AS KEY,
           SI.SHPOKY AS SHPOKY,
           SI.SHPOIT AS SHPOIT,
           SIC.ITEMCNT  AS ITEMCOUNT,
           SI.STATIT AS STATIT,
           CV.CDESC1 AS STATITNM,
           SI.SKUKEY AS SKUKEY,
           SI.QTSHPO AS QTSHPO,
           SI.QTSHPO - SI.QTALOC AS QTALLM,
           SI.QTYORG AS QTYORG,
           DECODE(SI.STATIT, 'REF', SI.QTJCMP, SI.QTYREF) AS QTYREF,
           SI.QTAPPO AS QTAPPO,
           SI.QTALOC AS QTALOC,
           SI.QTJCMP AS QTJCMP,
           SI.QTSHPD AS QTSHPD,
           SI.QTSHPC AS QTSHPC,
           SI.QTYUOM AS QTYUOM,
           SI.MEASKY AS MEASKY,
           SI.UOMKEY AS UOMKEY,
           SI.QTPUOM AS QTPUOM,
           SI.DUOMKY AS DUOMKY,
           SI.QTDUOM AS QTDUOM,
           SI.SASTKY AS SASTKY,
           SI.ALSTKY AS ALSTKY,
           SI.TKFLKY AS TKFLKY,
           SI.ESHPKY AS ESHPKY,
           SI.ESHPIT AS ESHPIT,
           SI.OPURKY AS OPURKY,
           SI.REFDKY AS REFDKY,
           SI.REFDIT AS REFDIT,
           SI.REFCAT AS REFCAT,
           SI.REFDAT AS REFDAT,
           SI.EXSUBS AS EXSUBS,
           SI.DESC01 AS DESC01,
           SI.DESC02 AS DESC02,
           SI.ASKU01 AS ASKU01,
           SI.ASKU02 AS ASKU02,
           SI.ASKU03 AS ASKU03,
           SI.ASKU04 AS ASKU04,
           SI.ASKU05 AS ASKU05,
           SI.EANCOD AS EANCOD,
           SI.GTINCD AS GTINCD,
           SI.SKUG01 AS SKUG01,
           SI.SKUG02 AS SKUG02,
           SI.SKUG03 AS SKUG03,
           SI.SKUG04 AS SKUG04,
           SI.SKUG05 AS SKUG05,
           SI.GRSWGT AS GRSWGT,
           SI.NETWGT AS NETWGT,
           SI.WGTUNT AS WGTUNT,
           SI.LENGTH AS LENGTH,
           SI.WIDTHW AS WIDTHW,
           SI.HEIGHT AS HEIGHT,
           SI.CUBICM AS CUBICM,
    <if test="PROGID == 'DL040'">
        CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
                  ELSE ROUND(SI.QTALOC * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
    </if>  
    <if test="PROGID != 'DL040'">
        CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
                  ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
    </if>  
           SI.CAPACT AS CAPACT,
           SI.PROCHA AS PROCHA,
           SI.AREAKY AS AREAKY,
           SI.LOTA01 AS LOTA01,
           SI.LOTA02 AS LOTA02,
           SI.LOTA03 AS LOTA03,
           SI.LOTA04 AS LOTA04,
           SI.LOTA05 AS LOTA05,
           SI.LOTA06 AS LOTA06,
           SI.LOTA07 AS LOTA07,
           SI.LOTA08 AS LOTA08,
           SI.LOTA09 AS LOTA09,
           SI.LOTA10 AS LOTA10,
           SI.LOTA11 AS LOTA11,
           SI.LOTA12 AS LOTA12,
           SI.LOTA13 AS LOTA13,
           SI.LOTA14 AS LOTA14,
           SI.LOTA15 AS LOTA15,
           SI.LOTA16 AS LOTA16,
           SI.LOTA17 AS LOTA17,
           SI.LOTA18 AS LOTA18,
           SI.LOTA19 AS LOTA19,
           SI.LOTA20 AS LOTA20,
           SI.AWMSNO AS AWMSNO,
           SI.SMANDT AS SMANDT,
           SI.SEBELN AS SEBELN,
           SI.SEBELP AS SEBELP,
           SI.STRAID AS STRAID,
           SI.SVBELN AS SVBELN,
           SI.SPOSNR AS SPOSNR,
           SI.STKNUM AS STKNUM,
           SI.STPNUM AS STPNUM,
           SI.SWERKS AS SWERKS,
           SI.SLGORT AS SLGORT,
           SI.SDATBG AS SDATBG,
           SI.STDLNR AS STDLNR,
           SI.SSORNU AS SSORNU,
           SI.SSORIT AS SSORIT,
           SI.SMBLNR AS SMBLNR,
           SI.SZEILE AS SZEILE,
           SI.SMJAHR AS SMJAHR,
           SI.SXBLNR AS SXBLNR,
           SI.SAPSTS AS SAPSTS,
           SI.PTNRKY AS PTNRKY,
           SI.NAME01 AS NAME01,
           SI.SLAND1 AS SLAND1,
           SI.SBKTXT AS SBKTXT,
           SH.SHPMTY AS SHPMTY,
           SI.STRAID AS VGBEL,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS BOXQTY,       
           NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTYSTD, NULL,0,SM.QTYSTD) ) ,0) AS PLTQTY,       
           NVL(MOD(SI.QTSHPO, DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM)),0) AS REMQTY ,
                
           
           SI.QTYREF AS QTYREF,
           SI.QTSHPC AS QTSHPC,
           SH.DPTNKY AS DPTNKY,
           DECODE(TRIM(B.NAME01),'',BP.NAME01,B.NAME01)  AS DPTNKYNM,
    
           SH.PTRCVR AS PTRCVR,
           DECODE(TRIM(B2.NAME01),'',BP.NAME01,B2.NAME01)  AS PTRCVRNM,
    
           '['|| SH.SHPMTY || ']'|| DM.SHORTX AS SHPMTYNM,
           SUBSTR(SH.RQSHPD,0,4)||'-'||SUBSTR(SH.RQSHPD,5,2)||'-'||SUBSTR(SH.RQSHPD,7,2) AS RQSHPD,
           SUBSTR(SH.USRID1,0,3) ||'-'|| SUBSTR(SH.USRID1,4,3)  AS USRID1 ,
           SH.UNAME1 AS UNAME1,
           (SELECT MAX(R.ARRIVA) FROM SHPDR R WHERE R.SHPOKY = SI.SHPOKY AND R.SHPOIT = SI.SHPOIT ) ARRIVA,
           SH.UNAME1 AS UNAME1,
           DECODE(SH.DRELIN,'V','YES','NO') AS DRELIN,
           SH.DOCTXT AS DOCTXT,
           NVL(B.EXPTNK,' ') AS PGRC01,
           NVL(TRIM(R.CARDAT),NVL(TRIM(SI.SMBLNR),TO_CHAR(TO_DATE(IF.OTRQDT,'YYYYMMDD'),'YYYYMMDD'))) AS CARDAT,   
           NVL(TRIM(R.CARNUM),SI.SXBLNR) AS CARNUM,
           NVL(TRIM(R.SHIPSQ),SI.SZEILE) AS SHIPSQ,
           NVL(R.PERHNO, ' ') AS PERHNO,
           NVL(R.CASTIM, ' ') AS CASTIM,
           NVL(R.DOCSEQ,' ') AS SORTSQ,
           SH.OWNRKY AS OWNRKY,
           SH.WAREKY AS WAREKY,
           SH.PGRC02 AS PGRC02
    
      FROM SHPDH SH
           INNER JOIN SHPDI SI
                   ON SH.SHPOKY = SI.SHPOKY
                  AND SI.SHPOKY IN (SELECT SHPOKY FROM SHPDI WHERE SHPOKY = #{SHPOKY})
           LEFT OUTER JOIN IFWMS113 IF
                        ON SI.SVBELN = IF.SVBELN 
                       AND SI.SPOSNR = IF.SPOSNR
                       AND IF.XSTAT IN ('D', 'R')
           INNER JOIN (SELECT SHPOKY, COUNT(*) AS ITEMCNT FROM SHPDI GROUP BY SHPOKY) SIC
                   ON SIC.SHPOKY = SH.SHPOKY
    
           LEFT OUTER JOIN (SELECT SHPOKY, SHPOIT, CARDAT, CARNUM, SHIPSQ, PERHNO, CASTIM, DOCSEQ FROM SHPDR WHERE RECOYN = 'N' ) R
                   ON R.SHPOKY = SI.SHPOKY
                  AND R.SHPOIT = SI.SHPOIT
    
           INNER JOIN SKUMA SM
                   ON SM.OWNRKY = SH.OWNRKY
                  AND SM.SKUKEY = SI.SKUKEY
           INNER JOIN CMCDV CV
                   ON CV.CMCDKY = 'STATIT'
                  AND CV.CMCDVL = SI.STATIT
          INNER JOIN DOCTM DM
                   ON DM.DOCUTY = SH.SHPMTY 
           LEFT OUTER JOIN BZPTN B
                   ON B.OWNRKY = SH.OWNRKY
                  AND B.PTNRKY = SH.DPTNKY
                  AND B.PTNRTY = '0001'
           LEFT OUTER JOIN BZPTN B2
                   ON B2.OWNRKY = SH.OWNRKY
                  AND B2.PTNRKY = SH.PTRCVR
                  AND B2.PTNRTY = '0007'
           LEFT OUTER JOIN BZPTN BP
                   ON BP.OWNRKY = SH.OWNRKY
                  AND BP.PTNRKY = SH.DPTNKY
                  AND BP.PTNRTY IN ('0002', '0004')
    WHERE  1 = 1
    AND SH.SHPMTY IN ('211','212','213','214','215','216', '266', '267','270')
    AND  SI.STATIT NOT IN ('FSH','PSH', 'DEL')
    
    AND  SI.STKNUM = ' '
    AND  SH.SHPOKY = #{SHPOKY}
    <if test="OWNRKY != ''">
      AND SH.OWNRKY = #{OWNRKY}
    </if>  
    <if test="WAREKY != ''">
      AND SH.WAREKY = #{WAREKY}
    </if>  
    
    ORDER BY SI.SHPOKY, SI.SHPOIT 
  </select>
  
  <!-- [DL26] 지정출고 : 아이템 : 조회 -->
  <select id="DL26_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT /*+ ORDERED FIRST_ROWS */ ' ' AS TASKKY,
           ' ' AS TASKIT,
    <if test="TASOTY == '320'">
         'V' AS CONFIRM,
    </if>  
    <if test="TASOTY != '320'">
         ' ' AS CONFIRM,
    </if>  
           S.OWNRKY AS OWNRKY,
           S.WAREKY AS WAREKY,
           S.STOKKY AS STOKKY,
           'PK' AS TASKTY,
           ' ' AS RSNCOD,
           'NEW' AS STATIT,
           S.QTSIWH AS AVAILABLEQTY,
           S.QTSIWH AS QTTAOR,
           0 AS QTCOMP,
           S.OWNRKY AS OWNRKY,
           S.SKUKEY AS SKUKEY,
           S.LOTNUM AS LOTNUM,
           '00000000' AS ACTCDT,
           '000000' AS ACTCTI,
           S.QTYUOM AS QTYUOM,
           ' ' AS TKFLKY,
           ' ' AS STEPNO,
           ' ' AS LSTTFL,
           S.LOCAKY AS LOCASR,
           S.SECTID AS SECTSR,
           S.PACKID AS PAIDSR,
           S.TRNUID AS TRNUSR,
           ' ' AS STRUTY,
           S.MEASKY AS SMEAKY,
           S.UOMKEY AS SUOMKY,
           S.QTPUOM AS QTSPUM,
           S.DUOMKY AS SDUOKY,
           S.QTDUOM AS QTSDUM,
           DT.SYSLOC AS LOCATG,
           S.SECTID AS SECTTG,
           S.PACKID AS PAIDTG,
           S.TRNUID AS TRNUTG,
           ' ' AS TTRUTY,
           S.MEASKY AS TMEAKY,
           S.UOMKEY AS TUOMKY,
           S.QTPUOM AS QTTPUM,
           S.DUOMKY AS TDUOKY,
           S.QTDUOM AS QTTDUM,
           ' ' AS LOCAAC,
           ' ' AS SECTAC,
           ' ' AS PAIDAC,
           ' ' AS TRNUAC,
           ' ' AS ATRUTY,
           ' ' AS AMEAKY,
           ' ' AS AUOMKY,
           0 AS QTAPUM,
           ' ' AS ADUOKY,
           0 AS QTADUM,
           ' ' AS REFDKY,
           ' ' AS REFDIT,
           ' ' AS REFCAT,
           ' ' AS REFDAT,
           S.PURCKY AS PURCKY,
           S.PURCIT AS PURCIT,
           S.ASNDKY AS ASNDKY,
           S.ASNDIT AS ASNDIT,
           S.RECVKY AS RECVKY,
           S.RECVIT AS RECVIT,
    <if test="TASOTY == '320'">
         #{SHPOKY} AS SHPOKY,
    </if>  
    <if test="TASOTY != '320'">
         S.SHPOKY AS SHPOKY,
    </if>  
           S.SHPOIT AS SHPOIT,
           S.GRPOKY AS GRPOKY,
           S.GRPOIT AS GRPOIT,
           S.SADJKY AS SADJKY,
           S.SADJIT AS SADJIT,
           S.SDIFKY AS SDIFKY,
           S.SDIFIT AS SDIFIT,
           S.PHYIKY AS PHYIKY,
           S.PHYIIT AS PHYIIT,
           ' ' AS DROPID,
           S.DESC01 AS DESC01,
           S.DESC02 AS DESC02,
           S.ASKU01 AS ASKU01,
           S.ASKU02 AS ASKU02,
           S.ASKU03 AS ASKU03,
           S.ASKU04 AS ASKU04,
           S.ASKU05 AS ASKU05,
           S.EANCOD AS EANCOD,
           S.GTINCD AS GTINCD,
           S.SKUG01 AS SKUG01,
           S.SKUG02 AS SKUG02,
           S.SKUG03 AS SKUG03,
           S.SKUG04 AS SKUG04,
           S.SKUG05 AS SKUG05,
           S.GRSWGT AS GRSWGT,
           S.NETWGT AS NETWGT,
           S.WGTUNT AS WGTUNT,
           S.LENGTH AS LENGTH,
           S.WIDTHW AS WIDTHW,
           S.HEIGHT AS HEIGHT,
           S.CUBICM AS CUBICM,
           S.CAPACT AS CAPACT,
           ' ' AS WORKID,
           ' ' AS WORKNM,
           ' ' AS HHTTID,
           S.AREAKY AS AREAKY,
           S.LOTA01 AS LOTA01,
           S.LOTA02 AS LOTA02,
           BZ.NAME01 AS LOTA03NM,
           S.LOTA03 AS LOTA03,
           S.LOTA04 AS LOTA04,
           S.LOTA05 AS LOTA05,
           S.LOTA06 AS LOTA06,
           S.LOTA07 AS LOTA07,
    
           CASE WHEN S.LOTA07 = '21SV' AND S.LOTA08 ='OD' THEN '오양위탁'
                WHEN S.LOTA07 = '21SV' THEN '삼아재고'
                ELSE ' ' 
            END AS LOTA07NM,
           S.LOTA08 AS LOTA08,
           S.LOTA09 AS LOTA09,
           S.LOTA10 AS LOTA10,
           S.LOTA11 AS LOTA11,
           S.LOTA12 AS LOTA12,
           S.LOTA13 AS LOTA13,
           S.LOTA14 AS LOTA14,
           S.LOTA15 AS LOTA15,
           S.LOTA16 AS LOTA16,
           S.LOTA17 AS LOTA17,
           S.LOTA18 AS LOTA18,
           S.LOTA19 AS LOTA19,
           S.LOTA20 AS LOTA20,
           NVL(TO_DATE(TRIM(S.LOTA13),'YYYYMMDD') - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')),0) AS DTREMDAT,
           NVL(TRUNC(((TO_DATE(TRIM(S.LOTA13),'YYYYMMDD') - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')))/SM.OUTDMT) * 100),0) AS DTREMRAT,
           S.AWMSNO AS AWMSNO,
           ' ' AS AWMSTS,
           S.SMANDT AS SMANDT,
           S.SEBELN AS SEBELN,
           S.SEBELP AS SEBELP,
           S.SZMBLNO AS SZMBLNO,
           S.SZMIPNO AS SZMIPNO,
           S.STRAID AS STRAID,
    <if test="TASOTY == '331'">
      <if test="SVBELN == ''">
        <if test="SHPOKY == ''">
         ' ' AS SVBELN,
        </if>  
        <if test="SHPOKY != ''">
         NVL((SELECT SVBELN FROM SHPDI WHERE SHPOKY = #{SHPOKY} AND ROWNUM = 1),' ') AS SVBELN,
        </if>  
      </if>  
      <if test="SVBELN != ''">
         #{SVBELN} AS SVBELN,
      </if>  
    </if>  
    <if test="TASOTY == '331'">
         S.SVBELN AS SVBELN,
    </if>      
           S.SPOSNR AS SPOSNR,
           S.STKNUM AS STKNUM,
           S.STPNUM AS STPNUM,
           S.SWERKS AS SWERKS,
           S.SLGORT AS SLGORT,
           S.SDATBG AS SDATBG,
           S.STDLNR AS STDLNR,
           S.SSORNU AS SSORNU,
           S.SSORIT AS SSORIT,
           S.SMBLNR AS SMBLNR,
           S.SZEILE AS SZEILE,
           S.SMJAHR AS SMJAHR,
           S.SXBLNR AS SXBLNR,
           S.SAPSTS AS SAPSTS,
           ' ' AS DOORKY,
           S.LOTA01 AS PTLT01,
           S.LOTA02 AS PTLT02,
           S.LOTA03 AS PTLT03,
           S.LOTA04 AS PTLT04,
           S.LOTA05 AS PTLT05,
           S.LOTA06 AS PTLT06,
           S.LOTA07 AS PTLT07,
           CASE WHEN S.LOTA07 = '21SV' THEN '삼아재고'
                ELSE ' ' 
            END AS PTLT07NM,
           S.LOTA08 AS PTLT08,
           S.LOTA09 AS PTLT09,
           S.LOTA10 AS PTLT10,
           S.LOTA11 AS PTLT11,
           S.LOTA12 AS PTLT12,
           S.LOTA13 AS PTLT13,
           S.LOTA14 AS PTLT14,
           S.LOTA15 AS PTLT15,
           S.LOTA16 AS PTLT16,
           S.LOTA17 AS PTLT17,
           S.LOTA18 AS PTLT18,
           S.LOTA19 AS PTLT19,
           S.LOTA20 AS PTLT20,
           ' ' AS PASTKY,
           ' ' AS ALSTKY,
           ' ' AS SBKTXT,
           ' ' AS TASRSN,
    
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           NVL(  TRUNC(S.QTSIWH / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,1) AS BOXQTY,       
           NVL(  TRUNC(S.QTSIWH / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
           NVL(MOD(S.QTSIWH , DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
           NVL(SM.GRSWGT,0) * NVL(S.QTSIWH ,0)  AS GRSWGT,
           NVL(SM.GRSWGT,0)   AS GRSWGTCNT
      FROM STKKY S
           INNER JOIN SKUMA SM
                  ON SM.OWNRKY = S.OWNRKY
                 AND SM.SKUKEY = S.SKUKEY
           INNER JOIN SKUWC W    
                  ON W.OWNRKY = S.OWNRKY
                 AND W.SKUKEY = S.SKUKEY
                 AND W.WAREKY = S.WAREKY
           INNER JOIN AREMA A
                   ON A.WAREKY = S.WAREKY
                  AND A.AREAKY = S.AREAKY
           INNER JOIN LOCMA M
                   ON M.WAREKY = S.WAREKY
                  AND M.LOCAKY = S.LOCAKY
                  AND M.STATUS = '00'
           INNER JOIN DOCTM DT
                   ON DT.DOCUTY = #{TASOTY}  
           LEFT OUTER JOIN (SELECT PTNRKY, MAX(NAME01) AS NAME01 
                              FROM (SELECT PTNRKY,NAME01
                                      FROM BZPTN
                                     WHERE PTNRTY = '0002' AND (OWNRKY = '2100' OR OWNRKY = '2500')
                                     UNION ALL
                                    SELECT WAREKY,NAME01 FROM WAHMA
                                    )GROUP BY PTNRKY) BZ
                        ON BZ.PTNRKY = S.LOTA03
     WHERE 1 = 1
       AND S.OWNRKY = #{OWNRKY}
       AND S.WAREKY = #{WAREKY}
       AND S.SKUKEY = #{SKUKEY}
      <if test="LOTA_06 != ''">
         AND S.LOTA06 = #{LOTA_06}
      </if>     
       AND S.AREAKY NOT IN ('SYS','SHP')
       AND S.QTSIWH > 0
       AND S.QTSALO = 0
       AND S.QTSPMO = 0
       AND S.QTSPMI = 0
       AND S.QTSBLK = 0
        <if test="LOTA07 != ''">
          <if test="LOTA07 != 'ALL'">
            <if test="LOTA07 == 'N'">
       AND S.LOTA07 != '21SV'
          </if>     
            <if test="LOTA07 == 'Y'">
       AND S.LOTA07 = '21SV'
          </if>     
        </if>     
      </if>     
       
      <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
      <if test="RANGELOT != null and RANGELOT != ''"> ${RANGELOT} </if>
  </select>

    <!-- [DL32] 지정출고 : 헤더 : 조회 -->
  <select id="DL32_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT ' ' AS KEY,
           SI.SHPOKY AS SHPOKY,
           SI.SHPOIT AS SHPOIT,
           SIC.ITEMCNT  AS ITEMCOUNT,
           SI.STATIT AS STATIT,
           CV.CDESC1 AS STATITNM,
           SI.SKUKEY AS SKUKEY,
           SI.QTSHPO AS QTSHPO,
           SI.QTSHPO - SI.QTALOC AS QTALLM,
           SI.QTYORG AS QTYORG,
           DECODE(SI.STATIT, 'REF', SI.QTJCMP, SI.QTYREF) AS QTYREF,
           SI.QTAPPO AS QTAPPO,
           SI.QTALOC AS QTALOC,
           SI.QTJCMP AS QTJCMP,
           SI.QTSHPD AS QTSHPD,
           SI.QTSHPC AS QTSHPC,
           SI.QTYUOM AS QTYUOM,
           SI.MEASKY AS MEASKY,
           SI.UOMKEY AS UOMKEY,
           SI.QTPUOM AS QTPUOM,
           SI.DUOMKY AS DUOMKY,
           SI.QTDUOM AS QTDUOM,
           SI.SASTKY AS SASTKY,
           SI.ALSTKY AS ALSTKY,
           SI.TKFLKY AS TKFLKY,
           SI.ESHPKY AS ESHPKY,
           SI.ESHPIT AS ESHPIT,
           SI.OPURKY AS OPURKY,
           SI.REFDKY AS REFDKY,
           SI.REFDIT AS REFDIT,
           SI.REFCAT AS REFCAT,
           SI.REFDAT AS REFDAT,
           SI.EXSUBS AS EXSUBS,
           SI.DESC01 AS DESC01,
           SI.DESC02 AS DESC02,
           SI.ASKU01 AS ASKU01,
           SI.ASKU02 AS ASKU02,
           SI.ASKU03 AS ASKU03,
           SI.ASKU04 AS ASKU04,
           SI.ASKU05 AS ASKU05,
           SI.EANCOD AS EANCOD,
           SI.GTINCD AS GTINCD,
           SI.SKUG01 AS SKUG01,
           SI.SKUG02 AS SKUG02,
           SI.SKUG03 AS SKUG03,
           SI.SKUG04 AS SKUG04,
           SI.SKUG05 AS SKUG05,
           SI.GRSWGT AS GRSWGT,
           SI.NETWGT AS NETWGT,
           SI.WGTUNT AS WGTUNT,
           SI.LENGTH AS LENGTH,
           SI.WIDTHW AS WIDTHW,
           SI.HEIGHT AS HEIGHT,
           SI.CUBICM AS CUBICM,
    <if test="PROGID == 'DL040'">
        CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
                  ELSE ROUND(SI.QTALOC * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
    </if>  
    <if test="PROGID != 'DL040'">
        CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
                  ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
    </if>  
           SI.CAPACT AS CAPACT,
           SI.PROCHA AS PROCHA,
           SI.AREAKY AS AREAKY,
           SI.LOTA01 AS LOTA01,
           SI.LOTA02 AS LOTA02,
           SI.LOTA03 AS LOTA03,
           SI.LOTA04 AS LOTA04,
           SI.LOTA05 AS LOTA05,
           SI.LOTA06 AS LOTA06,
           SI.LOTA07 AS LOTA07,
           SI.LOTA08 AS LOTA08,
           SI.LOTA09 AS LOTA09,
           SI.LOTA10 AS LOTA10,
           SI.LOTA11 AS LOTA11,
           SI.LOTA12 AS LOTA12,
           SI.LOTA13 AS LOTA13,
           SI.LOTA14 AS LOTA14,
           SI.LOTA15 AS LOTA15,
           SI.LOTA16 AS LOTA16,
           SI.LOTA17 AS LOTA17,
           SI.LOTA18 AS LOTA18,
           SI.LOTA19 AS LOTA19,
           SI.LOTA20 AS LOTA20,
           SI.AWMSNO AS AWMSNO,
           SI.SMANDT AS SMANDT,
           SI.SEBELN AS SEBELN,
           SI.SEBELP AS SEBELP,
           SI.STRAID AS STRAID,
           SI.SVBELN AS SVBELN,
           SI.SPOSNR AS SPOSNR,
           SI.STKNUM AS STKNUM,
           SI.STPNUM AS STPNUM,
           SI.SWERKS AS SWERKS,
           SI.SLGORT AS SLGORT,
           SI.SDATBG AS SDATBG,
           SI.STDLNR AS STDLNR,
           SI.SSORNU AS SSORNU,
           SI.SSORIT AS SSORIT,
           SI.SMBLNR AS SMBLNR,
           SI.SZEILE AS SZEILE,
           SI.SMJAHR AS SMJAHR,
           SI.SXBLNR AS SXBLNR,
           SI.SAPSTS AS SAPSTS,
           SI.PTNRKY AS PTNRKY,
           SI.NAME01 AS NAME01,
           SI.SLAND1 AS SLAND1,
           SI.SBKTXT AS SBKTXT,
           SH.SHPMTY AS SHPMTY,
           SI.STRAID AS VGBEL,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS BOXQTY,       
           NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTYSTD, NULL,0,SM.QTYSTD) ) ,0) AS PLTQTY,       
           NVL(MOD(SI.QTSHPO, DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM)),0) AS REMQTY ,
                
           
           SI.QTYREF AS QTYREF,
           SI.QTSHPC AS QTSHPC,
           SH.DPTNKY AS DPTNKY,
           DECODE(TRIM(B.NAME01),'',BP.NAME01,B.NAME01)  AS DPTNKYNM,
    
           SH.PTRCVR AS PTRCVR,
           DECODE(TRIM(B2.NAME01),'',BP.NAME01,B2.NAME01)  AS PTRCVRNM,
    
           '['|| SH.SHPMTY || ']'|| DM.SHORTX AS SHPMTYNM,
           SUBSTR(SH.RQSHPD,0,4)||'-'||SUBSTR(SH.RQSHPD,5,2)||'-'||SUBSTR(SH.RQSHPD,7,2) AS RQSHPD,
           SUBSTR(SH.USRID1,0,3) ||'-'|| SUBSTR(SH.USRID1,4,3)  AS USRID1 ,
           SH.UNAME1 AS UNAME1,
           (SELECT MAX(R.ARRIVA) FROM SHPDR R WHERE R.SHPOKY = SI.SHPOKY AND R.SHPOIT = SI.SHPOIT ) ARRIVA,
           SH.UNAME1 AS UNAME1,
           DECODE(SH.DRELIN,'V','YES','NO') AS DRELIN,
           SH.DOCTXT AS DOCTXT,
           NVL(B.EXPTNK,' ') AS PGRC01,
           NVL(TRIM(R.CARDAT),NVL(TRIM(SI.SMBLNR),TO_CHAR(TO_DATE(IF.OTRQDT,'YYYYMMDD'),'YYYYMMDD'))) AS CARDAT,   
           NVL(TRIM(R.CARNUM),SI.SXBLNR) AS CARNUM,
           NVL(TRIM(R.SHIPSQ),SI.SZEILE) AS SHIPSQ,
           NVL(R.PERHNO, ' ') AS PERHNO,
           NVL(R.CASTIM, ' ') AS CASTIM,
           NVL(R.DOCSEQ,' ') AS SORTSQ,
           SH.OWNRKY AS OWNRKY,
           SH.WAREKY AS WAREKY,
           SH.PGRC02 AS PGRC02
    
      FROM SHPDH SH
           INNER JOIN SHPDI SI
                   ON SH.SHPOKY = SI.SHPOKY
                  AND SI.SHPOKY IN (SELECT SHPOKY FROM SHPDI WHERE SHPOKY = #{SHPOKY})
           LEFT OUTER JOIN IFWMS113 IF
                        ON SI.SVBELN = IF.SVBELN 
                       AND SI.SPOSNR = IF.SPOSNR
                       AND IF.XSTAT IN ('D', 'R')
           INNER JOIN (SELECT SHPOKY, COUNT(*) AS ITEMCNT FROM SHPDI GROUP BY SHPOKY) SIC
                   ON SIC.SHPOKY = SH.SHPOKY
    
           LEFT OUTER JOIN (SELECT SHPOKY, SHPOIT, CARDAT, CARNUM, SHIPSQ, PERHNO, CASTIM, DOCSEQ FROM SHPDR WHERE RECOYN = 'N' ) R
                   ON R.SHPOKY = SI.SHPOKY
                  AND R.SHPOIT = SI.SHPOIT
    
           INNER JOIN SKUMA SM
                   ON SM.OWNRKY = SH.OWNRKY
                  AND SM.SKUKEY = SI.SKUKEY
           INNER JOIN CMCDV CV
                   ON CV.CMCDKY = 'STATIT'
                  AND CV.CMCDVL = SI.STATIT
          INNER JOIN DOCTM DM
                   ON DM.DOCUTY = SH.SHPMTY 
           LEFT OUTER JOIN BZPTN B
                   ON B.OWNRKY = SH.OWNRKY
                  AND B.PTNRKY = SH.DPTNKY
                  AND B.PTNRTY = '0001'
           LEFT OUTER JOIN BZPTN B2
                   ON B2.OWNRKY = SH.OWNRKY
                  AND B2.PTNRKY = SH.PTRCVR
                  AND B2.PTNRTY = '0007'
           LEFT OUTER JOIN BZPTN BP
                   ON BP.OWNRKY = SH.OWNRKY
                  AND BP.PTNRKY = SH.DPTNKY
                  AND BP.PTNRTY IN ('0002', '0004')
    WHERE  1 = 1
    AND SH.SHPMTY IN ('211','212','213','214','215','216', '266', '267','270')
    AND  SI.STATIT NOT IN ('FSH','PSH', 'DEL')
    
    AND  SI.STKNUM = ' '
    AND  SH.SHPOKY = #{SHPOKY}
    <if test="OWNRKY != ''">
      AND SH.OWNRKY = #{OWNRKY}
    </if>  
    <if test="WAREKY != ''">
      AND SH.WAREKY = #{WAREKY}
    </if>  
    
    ORDER BY SI.SHPOKY, SI.SHPOIT 
  </select>
  
  <!-- [DL32] 지정출고 : 아이템 : 조회 -->
  <select id="DL32_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT /*+ ORDERED FIRST_ROWS */ ' ' AS TASKKY,
           ' ' AS TASKIT,
    <if test="TASOTY == '320'">
         'V' AS CONFIRM,
    </if>  
    <if test="TASOTY != '320'">
         ' ' AS CONFIRM,
    </if>  
           S.OWNRKY AS OWNRKY,
           S.WAREKY AS WAREKY,
           S.STOKKY AS STOKKY,
           'PK' AS TASKTY,
           ' ' AS RSNCOD,
           'NEW' AS STATIT,
           S.QTSIWH AS AVAILABLEQTY,
           S.QTSIWH AS QTTAOR,
           0 AS QTCOMP,
           S.OWNRKY AS OWNRKY,
           S.SKUKEY AS SKUKEY,
           S.LOTNUM AS LOTNUM,
           '00000000' AS ACTCDT,
           '000000' AS ACTCTI,
           S.QTYUOM AS QTYUOM,
           ' ' AS TKFLKY,
           ' ' AS STEPNO,
           ' ' AS LSTTFL,
           S.LOCAKY AS LOCASR,
           S.SECTID AS SECTSR,
           S.PACKID AS PAIDSR,
           S.TRNUID AS TRNUSR,
           ' ' AS STRUTY,
           S.MEASKY AS SMEAKY,
           S.UOMKEY AS SUOMKY,
           S.QTPUOM AS QTSPUM,
           S.DUOMKY AS SDUOKY,
           S.QTDUOM AS QTSDUM,
           DT.SYSLOC AS LOCATG,
           S.SECTID AS SECTTG,
           S.PACKID AS PAIDTG,
           S.TRNUID AS TRNUTG,
           ' ' AS TTRUTY,
           S.MEASKY AS TMEAKY,
           S.UOMKEY AS TUOMKY,
           S.QTPUOM AS QTTPUM,
           S.DUOMKY AS TDUOKY,
           S.QTDUOM AS QTTDUM,
           ' ' AS LOCAAC,
           ' ' AS SECTAC,
           ' ' AS PAIDAC,
           ' ' AS TRNUAC,
           ' ' AS ATRUTY,
           ' ' AS AMEAKY,
           ' ' AS AUOMKY,
           0 AS QTAPUM,
           ' ' AS ADUOKY,
           0 AS QTADUM,
           ' ' AS REFDKY,
           ' ' AS REFDIT,
           ' ' AS REFCAT,
           ' ' AS REFDAT,
           S.PURCKY AS PURCKY,
           S.PURCIT AS PURCIT,
           S.ASNDKY AS ASNDKY,
           S.ASNDIT AS ASNDIT,
           S.RECVKY AS RECVKY,
           S.RECVIT AS RECVIT,
    <if test="TASOTY == '320'">
         #{SHPOKY} AS SHPOKY,
    </if>  
    <if test="TASOTY != '320'">
         S.SHPOKY AS SHPOKY,
    </if>  
           S.SHPOIT AS SHPOIT,
           S.GRPOKY AS GRPOKY,
           S.GRPOIT AS GRPOIT,
           S.SADJKY AS SADJKY,
           S.SADJIT AS SADJIT,
           S.SDIFKY AS SDIFKY,
           S.SDIFIT AS SDIFIT,
           S.PHYIKY AS PHYIKY,
           S.PHYIIT AS PHYIIT,
           ' ' AS DROPID,
           S.DESC01 AS DESC01,
           S.DESC02 AS DESC02,
           S.ASKU01 AS ASKU01,
           S.ASKU02 AS ASKU02,
           S.ASKU03 AS ASKU03,
           S.ASKU04 AS ASKU04,
           S.ASKU05 AS ASKU05,
           S.EANCOD AS EANCOD,
           S.GTINCD AS GTINCD,
           S.SKUG01 AS SKUG01,
           S.SKUG02 AS SKUG02,
           S.SKUG03 AS SKUG03,
           S.SKUG04 AS SKUG04,
           S.SKUG05 AS SKUG05,
           S.GRSWGT AS GRSWGT,
           S.NETWGT AS NETWGT,
           S.WGTUNT AS WGTUNT,
           S.LENGTH AS LENGTH,
           S.WIDTHW AS WIDTHW,
           S.HEIGHT AS HEIGHT,
           S.CUBICM AS CUBICM,
           S.CAPACT AS CAPACT,
           ' ' AS WORKID,
           ' ' AS WORKNM,
           ' ' AS HHTTID,
           S.AREAKY AS AREAKY,
           S.LOTA01 AS LOTA01,
           S.LOTA02 AS LOTA02,
           BZ.NAME01 AS LOTA03NM,
           S.LOTA03 AS LOTA03,
           S.LOTA04 AS LOTA04,
           S.LOTA05 AS LOTA05,
           S.LOTA06 AS LOTA06,
           S.LOTA07 AS LOTA07,
    
           CASE WHEN S.LOTA07 = '21SV' AND S.LOTA08 ='OD' THEN '오양위탁'
                WHEN S.LOTA07 = '21SV' THEN '삼아재고'
                ELSE ' ' 
            END AS LOTA07NM,
           S.LOTA08 AS LOTA08,
           S.LOTA09 AS LOTA09,
           S.LOTA10 AS LOTA10,
           S.LOTA11 AS LOTA11,
           S.LOTA12 AS LOTA12,
           S.LOTA13 AS LOTA13,
           S.LOTA14 AS LOTA14,
           S.LOTA15 AS LOTA15,
           S.LOTA16 AS LOTA16,
           S.LOTA17 AS LOTA17,
           S.LOTA18 AS LOTA18,
           S.LOTA19 AS LOTA19,
           S.LOTA20 AS LOTA20,
           NVL(TO_DATE(TRIM(S.LOTA13),'YYYYMMDD') - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')),0) AS DTREMDAT,
           NVL(TRUNC(((TO_DATE(TRIM(S.LOTA13),'YYYYMMDD') - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')))/SM.OUTDMT) * 100),0) AS DTREMRAT,
           S.AWMSNO AS AWMSNO,
           ' ' AS AWMSTS,
           S.SMANDT AS SMANDT,
           S.SEBELN AS SEBELN,
           S.SEBELP AS SEBELP,
           S.SZMBLNO AS SZMBLNO,
           S.SZMIPNO AS SZMIPNO,
           S.STRAID AS STRAID,
    <if test="TASOTY == '331'">
      <if test="SVBELN == ''">
        <if test="SHPOKY == ''">
         ' ' AS SVBELN,
        </if>  
        <if test="SHPOKY != ''">
         NVL((SELECT SVBELN FROM SHPDI WHERE SHPOKY = #{SHPOKY} AND ROWNUM = 1),' ') AS SVBELN,
        </if>  
      </if>  
      <if test="SVBELN != ''">
         #{SVBELN} AS SVBELN,
      </if>  
    </if>  
    <if test="TASOTY == '331'">
         S.SVBELN AS SVBELN,
    </if>      
           S.SPOSNR AS SPOSNR,
           S.STKNUM AS STKNUM,
           S.STPNUM AS STPNUM,
           S.SWERKS AS SWERKS,
           S.SLGORT AS SLGORT,
           S.SDATBG AS SDATBG,
           S.STDLNR AS STDLNR,
           S.SSORNU AS SSORNU,
           S.SSORIT AS SSORIT,
           S.SMBLNR AS SMBLNR,
           S.SZEILE AS SZEILE,
           S.SMJAHR AS SMJAHR,
           S.SXBLNR AS SXBLNR,
           S.SAPSTS AS SAPSTS,
           ' ' AS DOORKY,
           S.LOTA01 AS PTLT01,
           S.LOTA02 AS PTLT02,
           S.LOTA03 AS PTLT03,
           S.LOTA04 AS PTLT04,
           S.LOTA05 AS PTLT05,
           S.LOTA06 AS PTLT06,
           S.LOTA07 AS PTLT07,
           CASE WHEN S.LOTA07 = '21SV' THEN '삼아재고'
                ELSE ' ' 
            END AS PTLT07NM,
           S.LOTA08 AS PTLT08,
           S.LOTA09 AS PTLT09,
           S.LOTA10 AS PTLT10,
           S.LOTA11 AS PTLT11,
           S.LOTA12 AS PTLT12,
           S.LOTA13 AS PTLT13,
           S.LOTA14 AS PTLT14,
           S.LOTA15 AS PTLT15,
           S.LOTA16 AS PTLT16,
           S.LOTA17 AS PTLT17,
           S.LOTA18 AS PTLT18,
           S.LOTA19 AS PTLT19,
           S.LOTA20 AS PTLT20,
           ' ' AS PASTKY,
           ' ' AS ALSTKY,
           ' ' AS SBKTXT,
           ' ' AS TASRSN,
    
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
<!--            NVL(  ROUND(S.QTSIWH / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) , 1 ) ,1) AS BOXQTY,  -->
           NVL(  TRUNC(S.QTSIWH / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,1) AS BOXQTY,      
           NVL(  ROUND(S.QTSIWH / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) , 1 ) ,0) AS PLTQTY,       
           NVL(MOD(S.QTSIWH , DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
           NVL(SM.GRSWGT,0) * NVL(S.QTSIWH ,0)  AS GRSWGT,
           NVL(SM.GRSWGT,0)   AS GRSWGTCNT
      FROM STKKY S
           INNER JOIN SKUMA SM
                  ON SM.OWNRKY = S.OWNRKY
                 AND SM.SKUKEY = S.SKUKEY
           INNER JOIN SKUWC W    
                  ON W.OWNRKY = S.OWNRKY
                 AND W.SKUKEY = S.SKUKEY
                 AND W.WAREKY = S.WAREKY
           INNER JOIN AREMA A
                   ON A.WAREKY = S.WAREKY
                  AND A.AREAKY = S.AREAKY
           INNER JOIN LOCMA M
                   ON M.WAREKY = S.WAREKY
                  AND M.LOCAKY = S.LOCAKY
                  AND M.STATUS = '00'
           INNER JOIN DOCTM DT
                   ON DT.DOCUTY = #{TASOTY}  
           LEFT OUTER JOIN (SELECT PTNRKY, MAX(NAME01) AS NAME01 
                              FROM (SELECT PTNRKY,NAME01
                                      FROM BZPTN
                                     WHERE PTNRTY = '0002' AND (OWNRKY = '2100' OR OWNRKY = '2500')
                                     UNION ALL
                                    SELECT WAREKY,NAME01 FROM WAHMA
                                    )GROUP BY PTNRKY) BZ
                        ON BZ.PTNRKY = S.LOTA03
     WHERE 1 = 1
       AND S.OWNRKY = #{OWNRKY}
       AND S.WAREKY = #{WAREKY}
       AND S.SKUKEY = #{SKUKEY}
      <if test="LOTA_06 != ''">
         AND S.LOTA06 = #{LOTA_06}
      </if>     
       AND S.AREAKY NOT IN ('SYS','SHP')
       AND S.QTSIWH > 0
       AND S.QTSALO = 0
       AND S.QTSPMO = 0
       AND S.QTSPMI = 0
       AND S.QTSBLK = 0
        <if test="LOTA07 != ''">
          <if test="LOTA07 != 'ALL'">
            <if test="LOTA07 == 'N'">
       AND S.LOTA07 != '21SV'
          </if>     
            <if test="LOTA07 == 'Y'">
       AND S.LOTA07 = '21SV'
          </if>     
        </if>     
      </if>     
       
      <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
      <if test="RANGELOT != null and RANGELOT != ''"> ${RANGELOT} </if>
  </select>
  
  <!-- [DL26] 지정출고 : TASDH : 조회 -->
  <select id="DL26_TASDH_MAP" parameterType="hashmap" resultType="DataMap">
    SELECT DISTINCT
           ' ' AS TASKKY,
           WH.WAREKY AS WAREKY,
           WH.NAME01 AS WAREKYNM,
    
           DT.DOCUTY AS TASOTY,
           DT.SHORTX AS TASOTYNM,
           TO_CHAR(SYSDATE,'YYYYMMDD') AS DOCDAT,
           DC.DOCCAT AS DOCCAT,
           DC.SHORTX AS DOCCATNM,
           ' ' AS DRELIN,
           ST.CMCDVL AS STATDO,
           ST.CDESC1 AS STATDONM,
           0 AS QTTAOR,
           0 AS QTCOMP,
           ' ' AS TSPKEY,
           ' ' AS DOORKY,
           WT.WAREKY AS WARETG,
           WT.NAME01 AS WARETGNM
    
      FROM (SELECT 1
              FROM DUAL) D
           LEFT OUTER JOIN WAHMA WH
                   ON WH.WAREKY = #{WAREKY}
           LEFT OUTER JOIN WAHMA WT
                   ON WT.WAREKY = #{WAREKY}
           LEFT OUTER JOIN DOCCM DC
                   ON DC.DOCCAT = #{DOCCAT}
           LEFT OUTER JOIN DOCTM DT
                   ON DT.DOCUTY = #{TASOTY}
           LEFT OUTER JOIN CMCDV ST
                   ON ST.CMCDKY = 'STATDO'
                  AND ST.CMCDVL = #{STATDO} 
  </select>
          
  <!-- [DL26] 지정출고 : 저장 : 아이템  VALIDATION 01   -->
  <select id="DL26_CRE_TASK_ORD_VALID_01_MAP" parameterType="hashmap" resultType="DataMap">

         SELECT CASE WHEN SUM(QTSHPO) - SUM(QTSHPD) &lt; #QTTAOR#  THEN TO_CHAR(SUM(QTSHPO) - SUM(QTSHPD) )
                    ELSE 'OK'
              END AS RESULTMSG
         FROM SHPDI 
        WHERE SHPOKY = #{SHPOKY}
          AND SKUKEY = #{SKUKEY}
        GROUP BY SKUKEY
          
  </select> 
          
  <!-- [DL26] 지정출고 : 저장 : 아이템  VALIDATION 02   -->
  <select id="DL26_CRE_TASK_ORD_VALID_02_MAP" parameterType="hashmap" resultType="DataMap">

         SELECT DISTINCT TDH.WAREKY
            , LMS.LOCAKY SLOCKAY
            , LMT.LOCAKY TLOCKAY
            , SHS.MEASKY SHMEASKY
            , SIS.MEASKY SIMEASKY
            , SIS.UOMKEY SIUOMKEY
            , THS.MEASKY THMEASKY
            , TIS.MEASKY TIMEASKY
            , TIS.UOMKEY TIUOMKEY
          FROM TASDH TDH LEFT OUTER JOIN LOCMA LMS ON TDH.WAREKY = LMS.WAREKY AND LMS.LOCAKY = #{LOCASR} 
                  LEFT OUTER JOIN LOCMA LMT ON TDH.WAREKY = LMT.WAREKY AND LMT.LOCAKY = #{LOCATG} 
            LEFT OUTER JOIN MEASH SHS ON SHS.WAREKY = LMS.WAREKY AND SHS.MEASKY = #{SMEAKY}
                  LEFT OUTER JOIN MEASI SIS ON SIS.WAREKY = LMS.WAREKY AND SIS.MEASKY = #{SMEAKY} AND SIS.UOMKEY = #{SUOMKY}
                  LEFT OUTER JOIN MEASH THS ON THS.WAREKY = LMS.WAREKY AND THS.MEASKY = #{TMEAKY}
                  LEFT OUTER JOIN MEASI TIS ON TIS.WAREKY = LMS.WAREKY AND TIS.MEASKY = #{TMEAKY} AND TIS.UOMKEY = #{TUOMKY}
        WHERE TDH.WAREKY = #{WAREKY} 
    
    
  </select> 
          
  <!-- [DL26] 지정출고 : 저장 : 아이템  VALIDATION 03   -->
  <select id="DL26_CRE_TASK_ORD_VALID_03_MAP" parameterType="hashmap" resultType="DataMap">
  
      SELECT COUNT(*) AS RESULT 
        FROM SHPDR 
       WHERE SHPOKY = #{SHPOKY}
         AND SHPOIT = #{SHPOIT}
        
  </select> 

  <!-- [DL26] 지정출고 : SHPDI : 단건 전체 조회   -->
  <select id="DL26_SHPDI_MAP" parameterType="hashmap" resultType="DataMap">
    SELECT 
           SMANDT
         , SEBELN
         , SEBELP
         , SZMBLNO
         , SZMIPNO
         , STRAID
         , SVBELN
         , SPOSNR
         , STKNUM
         , STPNUM
         , SWERKS
         , SLGORT
         , SDATBG
         , SSORNU
         , SSORIT
         , SMBLNR
         , SZEILE
         , SMJAHR
         , SXBLNR
         , SAPSTS
       , REFDKY
         , REFDIT

      FROM SHPDI
     WHERE 1=1
       AND SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
  </select> 
  
    <!-- [DL26] 지정출고 : STKKY : 단건 전체 조회   -->
  <select id="DL26_STKKY_LOTA_MAP" parameterType="hashmap" resultType="DataMap">
    SELECT          
            LOTA01
          , LOTA02
          , LOTA03
          , LOTA04
          , LOTA05
          , LOTA06
          , LOTA07
          , LOTA08
          , LOTA09
          , LOTA10
          , LOTA11
          , LOTA12
          , LOTA13
          FROM STKKY
          WHERE 1=1
            AND STOKKY = #{STOKKY}
  </select> 
    
    <!-- [DL26] 지정출고 : 헤더 생성/수정 : TASDH Merge 입력 -->
  <update id="TASDH_UPDATE"  parameterType="hashmap">
  
    MERGE INTO TASDH
    USING DUAL
    ON (TASKKY = #{TASKKY})
    WHEN MATCHED
    THEN UPDATE SET
    
      WAREKY = NVL(#{WAREKY},' ')
    , TASOTY = NVL(#{TASOTY},' ')
    , DOCDAT = NVL(#{DOCDAT},' ')
    , DOCCAT = NVL(#{DOCCAT},' ')
    , DRELIN = NVL(#{DRELIN},' ')
    , STATDO = NVL(#{STATDO},' ')
    , QTTAOR = NVL(#{QTTAOR},0)
    , QTCOMP = NVL(#{QTCOMP},0)
    , TSPKEY = NVL(#{TSPKEY},' ')
    , DOORKY = NVL(#{DOORKY},' ')
    , WARETG = NVL(#{WARETG},' ')
    , PTNRKY = NVL(#{PTNRKY},' ')
    , PTNRTY = NVL(#{PTNRTY},' ')
    , PTNRNM = NVL(#{PTNRNM},' ')
    , USRID1 = NVL(#{USRID1},' ')
    , UNAME1 = NVL(#{UNAME1},' ')
    , DEPTID1 = NVL(#{DEPTID1},' ')
    , DNAME1 = NVL(#{DNAME1},' ')
    , USRID2 = NVL(#{USRID2},' ')
    , UNAME2 = NVL(#{UNAME2},' ')
    , DEPTID2 = NVL(#{DEPTID2},' ')
    , DNAME2 = NVL(#{DNAME2},' ')
    , USRID3 = NVL(#{USRID3},' ')
    , UNAME3 = NVL(#{UNAME3},' ')
    , DEPTID3 = NVL(#{DEPTID3},' ')
    , DNAME3 = NVL(#{DNAME3},' ')
    , USRID4 = NVL(#{USRID4},' ')
    , UNAME4 = NVL(#{UNAME4},' ')
    , DEPTID4 = NVL(#{DEPTID4},' ')
    , DNAME4 = NVL(#{DNAME4},' ')
    , DOCTXT = NVL(#{DOCTXT},' ')
    , LMODAT  = TO_CHAR(SYSDATE,'YYYYMMDD')
    , LMOTIM  = TO_CHAR(SYSDATE,'HH24MISS')
    , LMOUSR  = #{SES_USER_ID}
    , INDBZL = NVL(#{INDBZL},' ')
    , INDARC = NVL(#{INDARC},' ')
    , UPDCHK = NVL(#{UPDCHK},0)
    , KEEPTS = NVL(#{KEEPTS},' ')
    
    WHEN NOT MATCHED
    THEN INSERT (TASKKY, WAREKY, TASOTY, DOCDAT, DOCCAT, DRELIN, STATDO, QTTAOR, QTCOMP, TSPKEY, DOORKY, WARETG, PTNRKY, PTNRTY, PTNRNM, USRID1, UNAME1, DEPTID1, DNAME1, USRID2, UNAME2, DEPTID2, DNAME2, USRID3, UNAME3, DEPTID3, DNAME3, USRID4, UNAME4, DEPTID4, DNAME4, DOCTXT, CREDAT, CRETIM, CREUSR, LMODAT, LMOTIM, LMOUSR, INDBZL, INDARC, UPDCHK, KEEPTS)
    VALUES (
    
      NVL(#{TASKKY},' ')
    , NVL(#{WAREKY},' ')
    , NVL(#{TASOTY},' ')
    , NVL(#{DOCDAT},' ')
    , NVL(#{DOCCAT},' ')
    , NVL(#{DRELIN},' ')
    , NVL(#{STATDO},' ')
    , NVL(#{QTTAOR},0)
    , NVL(#{QTCOMP},0)
    , NVL(#{TSPKEY},' ')
    , NVL(#{DOORKY},' ')
    , NVL(#{WARETG},' ')
    , NVL(#{PTNRKY},' ')
    , NVL(#{PTNRTY},' ')
    , NVL(#{PTNRNM},' ')
    , NVL(#{USRID1},' ')
    , NVL(#{UNAME1},' ')
    , NVL(#{DEPTID1},' ')
    , NVL(#{DNAME1},' ')
    , NVL(#{USRID2},' ')
    , NVL(#{UNAME2},' ')
    , NVL(#{DEPTID2},' ')
    , NVL(#{DNAME2},' ')
    , NVL(#{USRID3},' ')
    , NVL(#{UNAME3},' ')
    , NVL(#{DEPTID3},' ')
    , NVL(#{DNAME3},' ')
    , NVL(#{USRID4},' ')
    , NVL(#{UNAME4},' ')
    , NVL(#{DEPTID4},' ')
    , NVL(#{DNAME4},' ')
    , NVL(#{DOCTXT},' ')
    , TO_CHAR(SYSDATE,'YYYYMMDD')
    , TO_CHAR(SYSDATE,'HH24MISS')
    , #{SES_USER_ID}
    , TO_CHAR(SYSDATE,'YYYYMMDD')
    , TO_CHAR(SYSDATE,'HH24MISS')
    , #{SES_USER_ID}
    , NVL(#{INDBZL},' ')
    , NVL(#{INDARC},' ')
    , NVL(#{UPDCHK},0)
    , NVL(#{KEEPTS},' ') 
    
        )
  
    </update>
    <!-- [DL26] 지정출고 : 아이템 생성/수정 : TASDI Merge 입력 -->
  <update id="TASDI_UPDATE"  parameterType="hashmap">
    MERGE INTO TASDI
      USING DUAL 
      ON (TASKKY=#{TASKKY} AND TASKIT=#{TASKIT})
      WHEN MATCHED THEN 
      UPDATE SET
      
  TASKTY  = NVL(#{TASKTY },' ')
, RSNCOD  = NVL(#{RSNCOD },' ')
, STATIT  = NVL(#{STATIT },' ')
, QTTAOR  = NVL(#{QTTAOR },0)
, QTCOMP  = NVL(#{QTCOMP },0)
, QTYFCN  = NVL(#{QTYFCN },0)
, OWNRKY  = NVL(#{OWNRKY },' ')
, SKUKEY  = NVL(#{SKUKEY },' ')
, LOTNUM  = NVL(#{LOTNUM },' ')
, ACTCDT  = NVL(#{ACTCDT },' ')
, ACTCTI  = NVL(#{ACTCTI },' ')
, QTYUOM  = NVL(#{QTYUOM },0)
, TKFLKY  = NVL(#{TKFLKY },' ')
, STEPNO  = NVL(#{STEPNO },' ')
, LSTTFL  = NVL(#{LSTTFL },' ')
, LOCASR  = NVL(#{LOCASR },' ')
, SECTSR  = NVL(#{SECTSR },' ')
, PAIDSR  = NVL(#{PAIDSR },' ')
, TRNUSR  = NVL(#{TRNUSR },' ')
, STRUTY  = NVL(#{STRUTY },' ')
, SMEAKY  = NVL(#{SMEAKY },' ')
, SUOMKY  = NVL(#{SUOMKY },' ')
, QTSPUM  = NVL(#{QTSPUM },0)
, SDUOKY  = NVL(#{SDUOKY },' ')
, QTSDUM  = NVL(#{QTSDUM },0)
, LOCATG  = NVL(#{LOCATG },' ')
, SECTTG  = NVL(#{SECTTG },' ')
, PAIDTG  = NVL(#{PAIDTG },' ')
, TRNUTG  = NVL(#{TRNUTG },' ')
, TTRUTY  = NVL(#{TTRUTY },' ')
, TMEAKY  = NVL(#{TMEAKY },' ')
, TUOMKY  = NVL(#{TUOMKY },' ')
, QTTPUM  = NVL(#{QTTPUM },0)
, TDUOKY  = NVL(#{TDUOKY },' ')
, QTTDUM  = NVL(#{QTTDUM },0)
, LOCAAC  = NVL(#{LOCAAC },' ')
, SECTAC  = NVL(#{SECTAC },' ')
, PAIDAC  = NVL(#{PAIDAC },' ')
, TRNUAC  = NVL(#{TRNUAC },' ')
, ATRUTY  = NVL(#{ATRUTY },' ')
, AMEAKY  = NVL(#{AMEAKY },' ')
, AUOMKY  = NVL(#{AUOMKY },' ')
, QTAPUM  = NVL(#{QTAPUM },0)
, ADUOKY  = NVL(#{ADUOKY },' ')
, QTADUM  = NVL(#{QTADUM },0)
, REFDKY  = NVL(#{REFDKY },' ')
, REFDIT  = NVL(#{REFDIT },' ')
, REFCAT  = NVL(#{REFCAT },' ')
, REFDAT  = NVL(#{REFDAT },' ')
, PURCKY  = NVL(#{PURCKY },' ')
, PURCIT  = NVL(#{PURCIT },' ')
, ASNDKY  = NVL(#{ASNDKY },' ')
, ASNDIT  = NVL(#{ASNDIT },' ')
, RECVKY  = NVL(#{RECVKY },' ')
, RECVIT  = NVL(#{RECVIT },' ')
, SHPOKY  = NVL(#{SHPOKY },' ')
, SHPOIT  = NVL(#{SHPOIT },' ')
, GRPOKY  = NVL(#{GRPOKY },' ')
, GRPOIT  = NVL(#{GRPOIT },' ')
, SADJKY  = NVL(#{SADJKY },' ')
, SADJIT  = NVL(#{SADJIT },' ')
, SDIFKY  = NVL(#{SDIFKY },' ')
, SDIFIT  = NVL(#{SDIFIT },' ')
, PHYIKY  = NVL(#{PHYIKY },' ')
, PHYIIT  = NVL(#{PHYIIT },' ')
, DROPID  = NVL(#{DROPID },' ')
, DESC01  = NVL(#{DESC01 },' ')
, DESC02  = NVL(#{DESC02 },' ')
, ASKU01  = NVL(#{ASKU01 },' ')
, ASKU02  = NVL(#{ASKU02 },' ')
, ASKU03  = NVL(#{ASKU03 },' ')
, ASKU04  = NVL(#{ASKU04 },' ')
, ASKU05  = NVL(#{ASKU05 },' ')
, EANCOD  = NVL(#{EANCOD },' ')
, GTINCD  = NVL(#{GTINCD },' ')
, SKUG01  = NVL(#{SKUG01 },' ')
, SKUG02  = NVL(#{SKUG02 },' ')
, SKUG03  = NVL(#{SKUG03 },' ')
, SKUG04  = NVL(#{SKUG04 },' ')
, SKUG05  = NVL(#{SKUG05 },' ')
, GRSWGT  = NVL(#{GRSWGT },0)
, NETWGT  = NVL(#{NETWGT },0)
, WGTUNT  = NVL(#{WGTUNT },' ')
, LENGTH  = NVL(#{LENGTH },0)
, WIDTHW  = NVL(#{WIDTHW },0)
, HEIGHT  = NVL(#{HEIGHT },0)
, CUBICM  = NVL(#{CUBICM },0)
, CAPACT  = NVL(#{CAPACT },0)
, WORKID  = NVL(#{WORKID },' ')
, WORKNM  = NVL(#{WORKNM },' ')
, HHTTID  = NVL(#{HHTTID },' ')
, AREAKY  = NVL(#{AREAKY },' ')
, LOTA01  = NVL(#{LOTA01 },' ')
, LOTA02  = NVL(#{LOTA02 },' ')
, LOTA03  = NVL(#{LOTA03 },' ')
, LOTA04  = NVL(#{LOTA04 },' ')
, LOTA05  = NVL(#{LOTA05 },' ')
, LOTA06  = NVL(#{LOTA06 },' ')
, LOTA07  = NVL(#{LOTA07 },' ')
, LOTA08  = NVL(#{LOTA08 },' ')
, LOTA09  = NVL(#{LOTA09 },' ')
, LOTA10  = NVL(#{LOTA10 },' ')
, LOTA11  = NVL(#{LOTA11 },' ')
, LOTA12  = NVL(#{LOTA12 },' ')
, LOTA13  = NVL(#{LOTA13 },' ')
, LOTA14  = NVL(#{LOTA14 },' ')
, LOTA15  = NVL(#{LOTA15 },' ')
, LOTA16  = NVL(#{LOTA16 },0)
, LOTA17  = NVL(#{LOTA17 },0)
, LOTA18  = NVL(#{LOTA18 },0)
, LOTA19  = NVL(#{LOTA19 },0)
, LOTA20  = NVL(#{LOTA20 },0)
, AWMSNO  = NVL(#{AWMSNO },' ')
, AWMSTS  = NVL(#{AWMSTS },' ')
, SMANDT  = NVL(#{SMANDT },' ')
, SEBELN  = NVL(#{SEBELN },' ')
, SEBELP  = NVL(#{SEBELP },' ')
, SZMBLNO = NVL(#{SZMBLNO},' ')
, SZMIPNO = NVL(#{SZMIPNO},' ')
, STRAID  = NVL(#{STRAID },' ')
, SVBELN  = NVL(#{SVBELN },' ')
, SPOSNR  = NVL(#{SPOSNR },' ')
, STKNUM  = NVL(#{STKNUM },' ')
, STPNUM  = NVL(#{STPNUM },' ')
, SWERKS  = NVL(#{SWERKS },' ')
, SLGORT  = NVL(#{SLGORT },' ')
, SDATBG  = NVL(#{SDATBG },' ')
, STDLNR  = NVL(#{STDLNR },' ')
, SSORNU  = NVL(#{SSORNU },' ')
, SSORIT  = NVL(#{SSORIT },' ')
, SMBLNR  = NVL(#{SMBLNR },' ')
, SZEILE  = NVL(#{SZEILE },' ')
, SMJAHR  = NVL(#{SMJAHR },' ')
, SXBLNR  = NVL(#{SXBLNR },' ')
, SAPSTS  = NVL(#{SAPSTS },' ')
, DOORKY  = NVL(#{DOORKY },' ')
, PTLT01  = NVL(#{PTLT01 },' ')
, PTLT02  = NVL(#{PTLT02 },' ')
, PTLT03  = NVL(#{PTLT03 },' ')
, PTLT04  = NVL(#{PTLT04 },' ')
, PTLT05  = NVL(#{PTLT05 },' ')
, PTLT06  = NVL(#{PTLT06 },' ')
, PTLT07  = NVL(#{PTLT07 },' ')
, PTLT08  = NVL(#{PTLT08 },' ')
, PTLT09  = NVL(#{PTLT09 },' ')
, PTLT10  = NVL(#{PTLT10 },' ')
, PTLT11  = NVL(#{PTLT11 },' ')
, PTLT12  = NVL(#{PTLT12 },' ')
, PTLT13  = NVL(#{PTLT13 },' ')
, PTLT14  = NVL(#{PTLT14 },' ')
, PTLT15  = NVL(#{PTLT15 },' ')
, PTLT16  = NVL(#{PTLT16 },0)
, PTLT17  = NVL(#{PTLT17 },0)
, PTLT18  = NVL(#{PTLT18 },0)
, PTLT19  = NVL(#{PTLT19 },0)
, PTLT20  = NVL(#{PTLT20 },0)
, PASTKY  = NVL(#{PASTKY },' ')
, ALSTKY  = NVL(#{ALSTKY },' ')
, SBKTXT  = NVL(#{SBKTXT },' ')
, TASRSN  = NVL(#{TASRSN },' ')
, LMODAT  = TO_CHAR(SYSDATE,'YYYYMMDD')
, LMOTIM  = TO_CHAR(SYSDATE,'HH24MISS')
, LMOUSR  = #{SES_USER_ID}
, INDBZL  = NVL(#{INDBZL },' ')
, INDARC  = NVL(#{INDARC },' ')
, UPDCHK  = NVL(#{UPDCHK },0)
  
      
      WHEN NOT MATCHED
      THEN INSERT (TASKKY, TASKIT, TASKTY, RSNCOD, STATIT, QTTAOR, QTCOMP, QTYFCN, OWNRKY, SKUKEY, LOTNUM, ACTCDT, ACTCTI, QTYUOM, TKFLKY, STEPNO, LSTTFL, LOCASR, SECTSR, PAIDSR, TRNUSR, STRUTY, SMEAKY, SUOMKY, QTSPUM, SDUOKY, QTSDUM, LOCATG, SECTTG, PAIDTG, TRNUTG, TTRUTY, TMEAKY, TUOMKY, QTTPUM, TDUOKY, QTTDUM, LOCAAC, SECTAC, PAIDAC, TRNUAC, ATRUTY, AMEAKY, AUOMKY, QTAPUM, ADUOKY, QTADUM, REFDKY, REFDIT, REFCAT, REFDAT, PURCKY, PURCIT, ASNDKY, ASNDIT, RECVKY, RECVIT, SHPOKY, SHPOIT, GRPOKY, GRPOIT, SADJKY, SADJIT, SDIFKY, SDIFIT, PHYIKY, PHYIIT, DROPID, DESC01, DESC02, ASKU01, ASKU02, ASKU03, ASKU04, ASKU05, EANCOD, GTINCD, SKUG01, SKUG02, SKUG03, SKUG04, SKUG05, GRSWGT, NETWGT, WGTUNT, "LENGTH", WIDTHW, HEIGHT, CUBICM, CAPACT, WORKID, WORKNM, HHTTID, AREAKY, LOTA01, LOTA02, LOTA03, LOTA04, LOTA05, LOTA06, LOTA07, LOTA08, LOTA09, LOTA10, LOTA11, LOTA12, LOTA13, LOTA14, LOTA15, LOTA16, LOTA17, LOTA18, LOTA19, LOTA20, AWMSNO, AWMSTS, SMANDT, SEBELN, SEBELP, SZMBLNO, SZMIPNO, STRAID, SVBELN, SPOSNR, STKNUM, STPNUM, SWERKS, SLGORT, SDATBG, STDLNR, SSORNU, SSORIT, SMBLNR, SZEILE, SMJAHR, SXBLNR, SAPSTS, DOORKY, PTLT01, PTLT02, PTLT03, PTLT04, PTLT05, PTLT06, PTLT07, PTLT08, PTLT09, PTLT10, PTLT11, PTLT12, PTLT13, PTLT14, PTLT15, PTLT16, PTLT17, PTLT18, PTLT19, PTLT20, PASTKY, ALSTKY, SBKTXT, TASRSN, CREDAT, CRETIM, CREUSR, LMODAT, LMOTIM, LMOUSR, INDBZL, INDARC, UPDCHK)
      VALUES 
      (
  NVL(#{TASKKY },' ')
, NVL(#{TASKIT },' ')
, NVL(#{TASKTY },' ')
, NVL(#{RSNCOD },' ')
, NVL(#{STATIT },' ')
, NVL(#{QTTAOR },0)
, NVL(#{QTCOMP },0)
, NVL(#{QTYFCN },0)
, NVL(#{OWNRKY },' ')
, NVL(#{SKUKEY },' ')
, NVL(#{LOTNUM },' ')
, NVL(#{ACTCDT },' ')
, NVL(#{ACTCTI },' ')
, NVL(#{QTYUOM },0)
, NVL(#{TKFLKY },' ')
, NVL(#{STEPNO },' ')
, NVL(#{LSTTFL },' ')
, NVL(#{LOCASR },' ')
, NVL(#{SECTSR },' ')
, NVL(#{PAIDSR },' ')
, NVL(#{TRNUSR },' ')
, NVL(#{STRUTY },' ')
, NVL(#{SMEAKY },' ')
, NVL(#{SUOMKY },' ')
, NVL(#{QTSPUM },0)
, NVL(#{SDUOKY },' ')
, NVL(#{QTSDUM },0)
, NVL(#{LOCATG },' ')
, NVL(#{SECTTG },' ')
, NVL(#{PAIDTG },' ')
, NVL(#{TRNUTG },' ')
, NVL(#{TTRUTY },' ')
, NVL(#{TMEAKY },' ')
, NVL(#{TUOMKY },' ')
, NVL(#{QTTPUM },0)
, NVL(#{TDUOKY },' ')
, NVL(#{QTTDUM },0)
, NVL(#{LOCAAC },' ')
, NVL(#{SECTAC },' ')
, NVL(#{PAIDAC },' ')
, NVL(#{TRNUAC },' ')
, NVL(#{ATRUTY },' ')
, NVL(#{AMEAKY },' ')
, NVL(#{AUOMKY },' ')
, NVL(#{QTAPUM },0)
, NVL(#{ADUOKY },' ')
, NVL(#{QTADUM },0)
, NVL(#{REFDKY },' ')
, NVL(#{REFDIT },' ')
, NVL(#{REFCAT },' ')
, NVL(#{REFDAT },' ')
, NVL(#{PURCKY },' ')
, NVL(#{PURCIT },' ')
, NVL(#{ASNDKY },' ')
, NVL(#{ASNDIT },' ')
, NVL(#{RECVKY },' ')
, NVL(#{RECVIT },' ')
, NVL(#{SHPOKY },' ')
, NVL(#{SHPOIT },' ')
, NVL(#{GRPOKY },' ')
, NVL(#{GRPOIT },' ')
, NVL(#{SADJKY },' ')
, NVL(#{SADJIT },' ')
, NVL(#{SDIFKY },' ')
, NVL(#{SDIFIT },' ')
, NVL(#{PHYIKY },' ')
, NVL(#{PHYIIT },' ')
, NVL(#{DROPID },' ')
, NVL(#{DESC01 },' ')
, NVL(#{DESC02 },' ')
, NVL(#{ASKU01 },' ')
, NVL(#{ASKU02 },' ')
, NVL(#{ASKU03 },' ')
, NVL(#{ASKU04 },' ')
, NVL(#{ASKU05 },' ')
, NVL(#{EANCOD },' ')
, NVL(#{GTINCD },' ')
, NVL(#{SKUG01 },' ')
, NVL(#{SKUG02 },' ')
, NVL(#{SKUG03 },' ')
, NVL(#{SKUG04 },' ')
, NVL(#{SKUG05 },' ')
, NVL(#{GRSWGT },0)
, NVL(#{NETWGT },0)
, NVL(#{WGTUNT },' ')
, NVL(#{LENGTH },0)
, NVL(#{WIDTHW },0)
, NVL(#{HEIGHT },0)
, NVL(#{CUBICM },0)
, NVL(#{CAPACT },0)
, NVL(#{WORKID },' ')
, NVL(#{WORKNM },' ')
, NVL(#{HHTTID },' ')
, NVL(#{AREAKY },' ')
, NVL(#{LOTA01 },' ')
, NVL(#{LOTA02 },' ')
, NVL(#{LOTA03 },' ')
, NVL(#{LOTA04 },' ')
, NVL(#{LOTA05 },' ')
, NVL(#{LOTA06 },' ')
, NVL(#{LOTA07 },' ')
, NVL(#{LOTA08 },' ')
, NVL(#{LOTA09 },' ')
, NVL(#{LOTA10 },' ')
, NVL(#{LOTA11 },' ')
, NVL(#{LOTA12 },' ')
, NVL(#{LOTA13 },' ')
, NVL(#{LOTA14 },' ')
, NVL(#{LOTA15 },' ')
, NVL(#{LOTA16 },0)
, NVL(#{LOTA17 },0)
, NVL(#{LOTA18 },0)
, NVL(#{LOTA19 },0)
, NVL(#{LOTA20 },0)
, NVL(#{AWMSNO },' ')
, NVL(#{AWMSTS },' ')
, NVL(#{SMANDT },' ')
, NVL(#{SEBELN },' ')
, NVL(#{SEBELP },' ')
, NVL(#{SZMBLNO},' ')
, NVL(#{SZMIPNO},' ')
, NVL(#{STRAID },' ')
, NVL(#{SVBELN },' ')
, NVL(#{SPOSNR },' ')
, NVL(#{STKNUM },' ')
, NVL(#{STPNUM },' ')
, NVL(#{SWERKS },' ')
, NVL(#{SLGORT },' ')
, NVL(#{SDATBG },' ')
, NVL(#{STDLNR },' ')
, NVL(#{SSORNU },' ')
, NVL(#{SSORIT },' ')
, NVL(#{SMBLNR },' ')
, NVL(#{SZEILE },' ')
, NVL(#{SMJAHR },' ')
, NVL(#{SXBLNR },' ')
, NVL(#{SAPSTS },' ')
, NVL(#{DOORKY },' ')
, NVL(#{PTLT01 },' ')
, NVL(#{PTLT02 },' ')
, NVL(#{PTLT03 },' ')
, NVL(#{PTLT04 },' ')
, NVL(#{PTLT05 },' ')
, NVL(#{PTLT06 },' ')
, NVL(#{PTLT07 },' ')
, NVL(#{PTLT08 },' ')
, NVL(#{PTLT09 },' ')
, NVL(#{PTLT10 },' ')
, NVL(#{PTLT11 },' ')
, NVL(#{PTLT12 },' ')
, NVL(#{PTLT13 },' ')
, NVL(#{PTLT14 },' ')
, NVL(#{PTLT15 },' ')
, NVL(#{PTLT16 },0)
, NVL(#{PTLT17 },0)
, NVL(#{PTLT18 },0)
, NVL(#{PTLT19 },0)
, NVL(#{PTLT20 },0)
, NVL(#{PASTKY },' ')
, NVL(#{ALSTKY },' ')
, NVL(#{SBKTXT },' ')
, NVL(#{TASRSN },' ')
, TO_CHAR(SYSDATE,'YYYYMMDD')
, TO_CHAR(SYSDATE,'HH24MISS')
, #{SES_USER_ID}
, TO_CHAR(SYSDATE,'YYYYMMDD')
, TO_CHAR(SYSDATE,'HH24MISS')
, #{SES_USER_ID}
, NVL(#{INDBZL },' ')
, NVL(#{INDARC },' ')
, NVL(#{UPDCHK },0) 
      )

  
    </update>
    
    <!-- [DL26] 지정출고 : 헤더 생성/수정 : TASDH Merge 입력 -->
  <update id="TASDR_UPDATE"  parameterType="hashmap">
    MERGE INTO TASDR
    USING DUAL
    ON (TASKKY=#{TASKKY} AND TASKIT=#{TASKIT} AND TASKIR=#{TASKIR})
    WHEN MATCHED
    THEN UPDATE SET

        STOKKY = NVL(#{STOKKY},' ')
      , QTSTKM = NVL(#{QTSTKM},0)
      , QTSTKC = NVL(#{QTSTKC},0)
      , LMODAT  = TO_CHAR(SYSDATE,'YYYYMMDD')
      , LMOTIM  = TO_CHAR(SYSDATE,'HH24MISS')
      , LMOUSR  = #{SES_USER_ID}
      , INDBZL = NVL(#{INDBZL},' ')
      , INDARC = NVL(#{INDARC},' ')
      , UPDCHK = NVL(#{UPDCHK},0)
      
    WHEN NOT MATCHED
    THEN INSERT (TASKKY, TASKIT, TASKIR, STOKKY, QTSTKM, QTSTKC, CREDAT, CRETIM, CREUSR, LMODAT, LMOTIM, LMOUSR, INDBZL, INDARC, UPDCHK)
    VALUES (
        NVL(#{TASKKY},' ')
      , NVL(#{TASKIT},' ')
      , NVL(#{TASKIR},' ')
      , NVL(#{STOKKY},' ')
      , NVL(#{QTSTKM},0)
      , NVL(#{QTSTKC},0)
      , TO_CHAR(SYSDATE,'YYYYMMDD')
      , TO_CHAR(SYSDATE,'HH24MISS')
      , #{SES_USER_ID}
      , TO_CHAR(SYSDATE,'YYYYMMDD')
      , TO_CHAR(SYSDATE,'HH24MISS')
      , #{SES_USER_ID}
      , NVL(#{INDBZL},' ')
      , NVL(#{INDARC},' ')
      , NVL(#{UPDCHK},0)
    )
    
    </update>
        
    <!-- [DL26] 지정출고 : 헤더 생성/수정 : SHPDI DIRECT 입력 -->
  <update id="SHPDI_DIRECT_UPDATE"  parameterType="hashmap">
  
    UPDATE SHPDI
      SET SZEILE = #{SHIPSQ},            
          SXBLNR = #{CARNUM}             
    WHERE SHPOKY = #{SHPOKY}
      AND SHPOIT = #{SHPOIT}  
      
    </update>
        
    <!-- [DL26] 지정출고 : 헤더 생성/수정 : SHPDR DIRECT 입력 -->
  <update id="SHPDR_DIRECT_UPDATE"  parameterType="hashmap">
  
     UPDATE SHPDR
      SET CARDAT = NVL(#{CARDAT}, ' '),
          CARNUM = nvl(#{CARNUM}, ' '),
          PERHNO = nvl(#{PERHNO}, ' '),
          CASTIM = nvl(#{CASTIM}, ' '),
          castdt = nvl(#{CARDAT}, ' '),
          castyn = 'Y',
          shipsq= decode(#{SHIPSQ}, ' ', 0, #{SHIPSQ}),
          TASKKY = 'DIRECT'
     WHERE SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
      
    </update>
    
    <!-- [DL26] 지정출고 : 헤더 할당취소 : SHPDH -->
  <update id="DL26_UNALLOC_SHPDH_UPDATE"  parameterType="hashmap">
     UPDATE SHPDH
      SET DRELIN = ' '
      WHERE SHPOKY = #{SHPOKY}
    </update>
    
    <!-- [DL26] 지정출고 : 헤더 할당취소 : SHPDI -->
  <update id="DL26_UNALLOC_SHPDI_UPDATE"  parameterType="hashmap">
       UPDATE SHPDI
        SET STDLNR = ' ',
            SMBLNR = ' ',            
            SZEILE = ' ',
            SXBLNR = ' '
      WHERE SHPOKY = #{SHPOKY}
        AND SHPOIT = #{SHPOIT}
    </update>
    
    <!-- [DL26] 지정출고 : 헤더 할당취소 : SHPDR -->
  <update id="DL26_UNALLOC_SHPDR_UPDATE"  parameterType="hashmap">
     UPDATE SHPDR
      SET CARDAT = ' ',
          CARNUM = ' ',
          SHIPSQ = 0,
          TASKKY = ' '
      WHERE SHPOKY = #{SHPOKY}
        AND SHPOIT = #{SHPOIT}
    </update>
    
  <!-- [DL26] 지정출고 : 삭제 : 아이템  VALIDATION 01   -->
  <select id="DL26_REMOVE_VALID_MAP" parameterType="hashmap" resultType="DataMap">
  
    SELECT TO_CHAR(NVL(SUM(QTCOMP),0)) AS RESULTMSG
      FROM TASDI 
     WHERE 1=1
       AND SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
       AND ROWNUM = 1
  
  </select> 
  
  <!-- [DL26] 지정출고 : 삭제, 할당취소 : 아이템  VALIDATION   -->
  <select id="DL26_REMOVE_UNALLOC_VALID_MAP" parameterType="hashmap" resultType="DataMap">
  
    SELECT COUNT(1) AS RESULTMSG
      FROM IFWMS214 
     WHERE SVBELN    = #{SVBELN}  --IFWMS113.SVBELN
       AND SPOSNR    = #{SPOSNR}  --IFWMS113.SPOSNR
       AND ZDOC_NO   = #{SHPOKY}  --SHPDH.SHPOKY
       AND ZDOC_ITEM = #{SHPOIT}  -- SHPDI.SHPOIT
       AND WMSTYP ='300'      --고정
      
  </select> 
  
  <!-- [DL26] 지정출고 : 아이템 삭제 : TASDI   -->
  <delete id="DL26_DELETE_TASDI_DELETE"  parameterType="hashmap">
  
    DELETE FROM TASDI
    WHERE 1=1
      AND SHPOKY = #{SHPOKY} 
      AND SHPOIT = #{SHPOIT}
       
  </delete> 
    
  <!-- [DL26] 지정출고 : 헤더 삭제 : TASDI 02   -->
  <delete id="DL26_DELETE_SHPDI_DELETE"  parameterType="hashmap">
  
    DELETE FROM SHPDI SHPDI
     WHERE 1=1
       AND SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
       AND NOT EXISTS (SELECT 1
                        FROM TASDI TASDI
                       WHERE TASDI.SHPOKY = SHPDI.SHPOKY
                         AND TASDI.STATIT NOT IN ('FCN','FSH','PSH') )
                             
  </delete> 
  
  <!-- [DL26] 지정출고 : 헤더 삭제 : TASDH   -->
  <delete id="DL26_DELETE_SHPDH_DELETE"  parameterType="hashmap">
  
    DELETE FROM SHPDH SHPDH
     WHERE 1 = 1
       AND SHPOKY = #{SHPOKY}
       AND QTALOC = 0
       AND QTJCMP = 0
       AND QTSHPC = 0
       AND NOT EXISTS (SELECT 1
                        FROM TASDI TASDI
                       WHERE TASDI.SHPOKY = SHPDH.SHPOKY
                         AND TASDI.STATIT NOT IN ('FCN','FSH','PSH') )
                             
  </delete> 
  
  <!-- [DL26] 지정출고 : 할당취소 : 아이템  VALIDATION 01   -->
  <select id="DL26_UNALLOC_VALID_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT TASDH.TASKKY AS TASKKY
      FROM TASDH TASDH
     WHERE TASKKY IN (SELECT TASKKY
                        FROM TASDI
                       WHERE SHPOKY = #{SHPOKY}
                         AND TASKTY = 'PK'
                       GROUP BY TASKKY)
       AND TASOTY in ('210','208')
       AND EXISTS (SELECT 1
                     FROM TASDI TASDI
                    WHERE TASDI.TASKKY = TASDH.TASKKY
                      AND TASDI.ACTCDT != '00000000'
                      AND TASKTY = 'PK')
  
  </select> 
  
  <!-- [DL26] 지정출고 : 할당취소 : 아이템  TASKKY 조회   -->
  <select id="DL26_UNALLOC_TASKKY_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT TASDH.TASKKY AS TASKKY
      FROM TASDH TASDH
     WHERE TASKKY IN (SELECT TASKKY
                        FROM TASDI
                       WHERE SHPOKY = #{SHPOKY}
                         AND TASKTY = 'PK'
                       GROUP BY TASKKY)
       AND TASOTY in ('210','208')
       AND EXISTS (SELECT 1
                     FROM TASDI TASDI
                    WHERE TASDI.TASKKY = TASDH.TASKKY
                      AND TASDI.ACTCDT == '00000000'
                      AND TASKTY = 'PK')
  
  </select> 
  
    <!-- [DL31] 배차관리 : 조회 : OUTBOUND.SKUMANUALLALLOCATION.FIND_ALLOCATION_STOCK -->
  <select id="DL31_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT S.OWNRKY AS OWNRKY,
           S.WAREKY AS WAREKY,
           S.AREAKY AS AREAKY,
           S.ZONEKY AS ZONEKY,
           S.LOCAKY AS LOCAKY,
           S.SKUKEY AS SKUKEY,
           S.ASKU01 AS ASKU01,
           S.DESC01 AS DESC01,
           S.DESC02 AS DESC02,
           NVL(SUM(STK.QTSIWH),0) AS QTSIWH,
           NVL(MAX(TS.QTTAOR),0) AS QTSALO,
           NVL(MAX(TS.QTTAOR),0) AS QTINIT,
           S.MEASKY AS MEASKY,
           S.UOMKEY AS UOMKEY,
           S.TRNUID AS TRNUID,
           S.LOTNUM AS LOTNUM,
           S.LOTA01 AS LOTA01,
           S.LOTA02 AS LOTA02,
           S.LOTA03 AS LOTA03,
           S.LOTA04 AS LOTA04,
           S.LOTA05 AS LOTA05,
           S.LOTA06 AS LOTA06,
           S.LOTA07 AS LOTA07,
           S.LOTA08 AS LOTA08,
           S.LOTA09 AS LOTA09,
           S.LOTA10 AS LOTA10,
           S.LOTA11 AS LOTA11,
           S.LOTA12 AS LOTA12,
           S.LOTA13 AS LOTA13,
           S.LOTA14 AS LOTA14,
           S.LOTA15 AS LOTA15,
           S.LOTA16 AS LOTA16,
           S.LOTA17 AS LOTA17,
           S.LOTA18 AS LOTA18,
           S.LOTA19 AS LOTA19,
           S.LOTA20 AS LOTA20,
           S.SHPOKY AS SHPOKY,
           S.SHPOIT AS SHPOIT,
           TS.DPTNKY AS DPTNKY,
           SUM(STK.QTSIWH - STK.QTSBLK - GREATEST(STK.QTSALO, STK.QTSPMO)) AS QTTAOR,
           NVL(MAX(TS.QTSHPO),0) QTSHPO,
           NVL(MAX(TS.QTTAOR),0)  + SUM(STK.QTSIWH - STK.QTSBLK - GREATEST(STK.QTSALO, STK.QTSPMO)) AS TOTAL,
           B.NAME01 AS DPTNKYNM,
           TS.SVBELN AS SVBELN,
           TS.DOCDAT AS DOCDAT,
           MAX((SELECT SHORTX FROM DOCTM WHERE DOCUTY = TS.SHPMTY)) AS SHPMTY
      FROM STKKY S
           INNER JOIN ( SELECT S.SHPOKY, S.SHPOIT, SHPDH.DPTNKY, S.OWNRKY, SUM(S.QTTAOR) QTTAOR, SUM(SHPDI.QTSHPO) QTSHPO, SHPDI.SVBELN, SHPDH.DOCDAT, SHPDH.SHPMTY, S.TASKKY, S.TASKIT
                          FROM TASDH
                               INNER JOIN TASDI S
                                       ON TASDH.TASKKY = S.TASKKY
                               INNER JOIN SKUMA SM
                                       ON SM.OWNRKY = S.OWNRKY
                                      AND SM.SKUKEY = S.SKUKEY
                               LEFT OUTER  JOIN SHPDI
                                       ON SHPDI.SHPOKY = S.SHPOKY 
                                      AND SHPDI.SHPOIT = S.SHPOIT
                               LEFT OUTER JOIN SHPDH 
                                       ON SHPDH.SHPOKY = S.SHPOKY
                         WHERE 1=1
                        AND SHPDH.DRELIN != 'V'
                        AND S.STATIT = 'NEW'
                        AND TASDH.TASOTY = '210' OR TASDH.TASOTY = '208' 
                        AND SHPDH.SHPMTY != '299'
                        GROUP BY S.SHPOKY, S.SHPOIT, TASDH.WAREKY, S.OWNRKY, SHPDH.DPTNKY, SHPDI.SVBELN, SHPDH.DOCDAT, SHPDH.SHPMTY, S.TASKKY, S.TASKIT
                        HAVING TASDH.WAREKY = #{WAREKY}
                           AND S.OWNRKY = #{OWNRKY}                   
                        ) TS
                    ON TS.TASKKY= S.TASKKY
                   AND TS.TASKIT= S.TASKIT
           LEFT OUTER JOIN BZPTN  B
                   ON B.OWNRKY = TS.OWNRKY
                  AND B.PTNRKY = TS.DPTNKY
                  AND B.PTNRTY = '0001'
           INNER JOIN LOCMA L
                   ON L.WAREKY = S.WAREKY
                  AND L.LOCAKY = S.LOCAKY
          INNER JOIN STKKY STK
                    ON STK.OWNRKY  = S.OWNRKY
                   AND STK.WAREKY  = S.WAREKY
                   AND STK.AREAKY  = S.AREAKY
                   AND STK.ZONEKY  = S.ZONEKY
                   AND STK.LOCAKY  = S.LOCAKY
                   AND STK.SKUKEY  = S.SKUKEY
                   AND STK.ASKU01  = S.ASKU01
                   AND STK.DESC01  = S.DESC01
                   AND STK.DESC02  = S.DESC02
                   AND STK.MEASKY  = S.MEASKY
                   AND STK.UOMKEY  = S.UOMKEY
                   AND STK.TRNUID  = S.TRNUID
                   AND STK.LOTNUM  = S.LOTNUM
                   AND STK.LOTA01  = S.LOTA01
                   AND STK.LOTA02  = S.LOTA02
                   AND STK.LOTA03  = S.LOTA03
                   AND STK.LOTA04  = S.LOTA04
                   AND STK.LOTA05  = S.LOTA05
                   AND STK.LOTA06  = S.LOTA06
                   AND STK.LOTA07  = S.LOTA07
                   AND STK.LOTA08  = S.LOTA08
                   AND STK.LOTA09  = S.LOTA09
                   AND STK.LOTA10  = S.LOTA10
                   AND STK.LOTA11  = S.LOTA11
                   AND STK.LOTA12  = S.LOTA12
                   AND STK.LOTA13  = S.LOTA13
                   AND STK.LOTA14  = S.LOTA14
                   AND STK.LOTA15  = S.LOTA15
                   AND STK.LOTA16  = S.LOTA16
                   AND STK.LOTA17  = S.LOTA17
                   AND STK.LOTA18  = S.LOTA18
                   AND STK.LOTA19  = S.LOTA19
                   AND STK.LOTA20  = S.LOTA20
    
     WHERE S.WAREKY = #{WAREKY}
       AND S.OWNRKY = #{OWNRKY}
       AND S.QTSIWH > 0 AND S.QTSALO > 0 
       AND L.INDUPK = 'V'
       AND L.STATUS = '00'
       AND S.LOTA06 = '00'
        <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
     GROUP BY S.OWNRKY, S.WAREKY, S.AREAKY, S.ZONEKY, S.LOCAKY,
              S.SKUKEY, S.ASKU01, S.DESC01, S.DESC02,
              S.MEASKY, S.UOMKEY,
              S.TRNUID, S.LOTNUM,
              S.LOTA01, S.LOTA02, S.LOTA03, S.LOTA04, S.LOTA05,
              S.LOTA06, S.LOTA07, S.LOTA08, S.LOTA09, S.LOTA10,
              S.LOTA11, S.LOTA12, S.LOTA13, S.LOTA14, S.LOTA15,
              S.LOTA16, S.LOTA17, S.LOTA18, S.LOTA19, S.LOTA20,
              S.SHPOKY, TS.DPTNKY, B.NAME01, S.SHPOIT, TS.SVBELN, TS.SHPMTY, TS.DOCDAT
  </select>
    
  <!-- [DL30] 오더할당 관리 : 할당 취소 : 헤더  VALIDATION 01 조회   -->
  <select id="DL30_UNALLOCATE_VALID_01_MAP" parameterType="hashmap" resultType="DataMap">

      SELECT DRELIN AS DRELIN
        FROM SHPDH  
       WHERE SHPOKY = #{SHPOKY} 

  </select>   
      
  <!-- [DL30] 오더할당 관리 : 할당 취소 : 헤더  VALIDATION 02 조회   -->
  <select id="DL30_UNALLOCATE_VALID_02_MAP" parameterType="hashmap" resultType="DataMap">

      SELECT TASKKY AS TASKKY
        FROM TASDH
       WHERE TASKKY IN (SELECT TASKKY
                          FROM TASDI
                         WHERE SHPOKY = #{SHPOKY}
                         AND    TASKTY = 'PK'
                         GROUP BY TASKKY)
         AND TASOTY IN ('210','208')
         AND EXISTS (SELECT 1
                       FROM TASDI
                      WHERE TASDI.TASKKY = TASDH.TASKKY
                        AND TASDI.ACTCDT != '00000000'
                        AND TASKTY = 'PK')
  </select>   
      
  <!-- [DL30] 오더할당 관리 : 할당 취소 대상  조회   -->
  <select id="DL30_UNALLOCATE_TARGET_LIST" parameterType="hashmap" resultType="DataMap">

      SELECT TASKKY AS TASKKY
        FROM TASDH TASDH
       WHERE TASKKY IN (SELECT TASKKY
                          FROM TASDI
                         WHERE SHPOKY = #{SHPOKY}
                         AND    TASKTY = 'PK'
                         GROUP BY TASKKY)
         AND TASOTY IN ('210','208')
         AND EXISTS (SELECT 1
                       FROM TASDI
                      WHERE TASKKY = TASDH.TASKKY
                        AND ACTCDT = '00000000'
                        AND TASKTY = 'PK')
  </select>   
  
    <!-- [DL30] 오더할당 관리 : 아이템 : 할당 취소  : 작업지시서 삭제    -->
  <delete id="DL30_UNALLOCATE_ITEM_DELETE"  parameterType="hashmap">
  
    DELETE FROM TASDI
     WHERE TASKKY = #{TASKKY}
       AND ACTCDT = '00000000'
       AND TASKTY = 'PK'
       
  </delete>
  
    <!-- [DL30] 오더할당 관리 : 헤더 : 할당 취소  : 작업지시서 삭제  -->
  <delete id="DL30_UNALLOCATE_HEAD_DELETE"  parameterType="hashmap">
  
    DELETE FROM TASDH
     WHERE TASKKY = #{TASKKY}
       AND TASOTY = '210'
       AND NOT EXISTS (SELECT 1
                     FROM TASDI
                    WHERE TASDI.TASKKY = TASDH.TASKKY
                      AND TASDI.ACTCDT = '00000000'
                      AND TASKTY = 'PK')

  </delete>
  
    <!-- P_DEL_SHP_REF 프로시서 실행 : RemoveDL30 -->
  <update id="P_IFWMS113_REMOVE_SHIPMENT_UPDATE" parameterType="hashmap">
  
      { call P_IFWMS113_REMOVE_SHIPMENT(#{SHPOKY}) }
      
  </update>
  
  <!-- [DL31] 오더할당 수정 : TASDI 대상  조회  : OUTBOUND.MANUALLALLOCATION.FIND_TASI -->
  <select id="DL31_TASDI_MAP" parameterType="hashmap" resultType="DataMap">

    SELECT DISTINCT TASKKY TASKKY
      FROM TASDI
     WHERE OWNRKY = #{OWNRKY}
       AND LOCASR = #{LOCAKY}
       AND SKUKEY = #{SKUKEY}
       AND SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
        
  </select>   
  
  <!-- [DL31] 오더할당 수정 : TASDI 대상  삭제  : OUTBOUND.MANUALLALLOCATION.DELETE_TASKORDER -->
  <delete id="DL31_TASDI_DELETE"  parameterType="hashmap">
  
    DELETE FROM TASDI
     WHERE SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
       AND OWNRKY = #{OWNRKY}
       AND LOCASR = #{LOCAKY}
       AND SKUKEY = #{SKUKEY}
       AND STATIT = 'NEW'

  </delete>
  
  <!-- [DL31] 오더할당 수정 : TASDH 대상  삭제  : OUTBOUND.MANUALLALLOCATION.DELETE_TASDH -->
  <delete id="DL31_TASDH_DELETE"  parameterType="hashmap">
  
    DELETE FROM TASDH
     WHERE TASKKY = #{TASKKY}

  </delete>
  
  <!-- [DL31] 오더할당 수정 : SHPDH 대상  조회  : OUTBOUND.MANUALLALLOCATION.GROUPING_SHIPMENT -->
  <select id="DL31_SHPDH_MAP" parameterType="hashmap" resultType="DataMap">
  SELECT 
          WAREKY
        , SHPMTY
        , ALSTKY
        , STATDO
        , DOCDAT
        , DOCCAT
        , PRORTY
        , DOCUTY
        , OWNRKY
        , DRELIN
        , RQSHPD
        , RQARRD
        , RQARRT
        , LSHPCD
        , DPTNKY
        , PTRCVR
        , PGRC01
        , PGRC02
        , PGRC03
        , PGRC04
        , PGRC05
        , VEHINO
        , DRIVER
        , SHIPSQ
        , SHPORD
        , ESHPKY
        , OPURKY
        , LOCADT
        , LOCADK
        , DISTGR
        , INDDCL
        , RSNCOD
        , RSNRET
        , QTSHPO
        , QTYREF
        , QTAPPO
        , QTALOC
        , QTJCMP
        , QTSHPD
        , QTSHPC
        , USRID1
        , UNAME1
        , DEPTID1
        , DNAME1
        , USRID2
        , UNAME2
        , DEPTID2
        , DNAME2
        , USRID3
        , UNAME3
        , DEPTID3
        , DNAME3
        , USRID4
        , UNAME4
        , DEPTID4
        , DNAME4
        , DOCTXT
        , KEEPTS
        , CREDAT
        , CRETIM
        , CREUSR
        , LMODAT
        , LMOTIM
        , LMOUSR
        , INDBZL
        , INDARC
        , UPDCHK  
    FROM SHPDH
   WHERE SHPOKY = #{SHPOKY}
  </select>   

  <!-- [DL31] 오더할당 수정 : SHPDI 대상  조회   -->
  <select id="DL31_SHPDI_MAP" parameterType="hashmap" resultType="DataMap">
     SELECT 
           STATIT
         , SKUKEY
         , QTYORG
         , QTSHPO
         , QTYREF
         , QTAPPO
         , QTALOC
         , QTJCMP
         , QTSHPD
         , QTSHPC
         , QTYUOM
         , MEASKY
         , UOMKEY
         , QTPUOM
         , DUOMKY
         , QTDUOM
         , SASTKY
         , ALSTKY
         , TKFLKY
         , ESHPKY
         , ESHPIT
         , OPURKY
         , REFDKY
         , REFDIT
         , REFCAT
         , REFDAT
         , EXSUBS
         , DESC01
         , DESC02
         , ASKU01
         , ASKU02
         , ASKU03
         , ASKU04
         , ASKU05
         , EANCOD
         , GTINCD
         , SKUG01
         , SKUG02
         , SKUG03
         , SKUG04
         , SKUG05
         , GRSWGT
         , NETWGT
         , WGTUNT
         , LENGTH
         , WIDTHW
         , HEIGHT
         , CUBICM
         , CAPACT
         , PROCHA
         , AREAKY
         , LOTA01
         , LOTA02
         , LOTA03
         , LOTA04
         , LOTA05
         , LOTA06
         , LOTA07
         , LOTA08
         , LOTA09
         , LOTA10
         , LOTA11
         , LOTA12
         , LOTA13
         , LOTA14
         , LOTA15
         , LOTA16
         , LOTA17
         , LOTA18
         , LOTA19
         , LOTA20
         , AWMSNO
         , SMANDT
         , SEBELN
         , SEBELP
         , SZMBLNO
         , SZMIPNO
         , STRAID
         , SVBELN
         , SPOSNR
         , STKNUM
         , STPNUM
         , SWERKS
         , SLGORT
         , SDATBG
         , STDLNR
         , SSORNU
         , SSORIT
         , SMBLNR
         , SZEILE
         , SMJAHR
         , SXBLNR
         , SAPSTS
         , PTNRKY
         , NAME01
         , SLAND1
         , SBKTXT
         , CREDAT
         , CRETIM
         , CREUSR
         , LMODAT
         , LMOTIM
         , LMOUSR
         , INDBZL
         , INDARC
         , UPDCHK
     FROM SHPDI
     WHERE 1=1
       AND SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
  </select> 
    
  <!-- [DL31] 오더할당 수정 : STKKY 대상  조회   -->
  <select id="DL31_STKKY_MAP" parameterType="hashmap" resultType="DataMap">
    SELECT S.STOKKY  AS STOKKY,
           S.WAREKY  AS WAREKY,
           S.LOTNUM  AS LOTNUM,
           S.LOCAKY  AS LOCAKY,
           S.TRNUID  AS TRNUID,
           S.SECTID  AS SECTID,
           S.PACKID  AS PACKID,
           S.QTSIWH  AS QTSIWH,
           S.QTSALO  AS QTSALO,
           S.QTSPMO  AS QTSPMO,
           S.QTSPMI  AS QTSPMI,
           S.QTSBLK  AS QTSBLK,
           S.QTYUOM  AS QTYUOM,
           S.TRUNTY  AS TRUNTY,
           S.MEASKY  AS MEASKY,
           S.UOMKEY  AS UOMKEY,
           S.QTPUOM  AS QTPUOM,
           S.DUOMKY  AS DUOMKY,
           S.QTDUOM  AS QTDUOM,
           S.TKFLKY  AS TKFLKY,
           S.STEPNO  AS STEPNO,
           S.LSTTFL  AS LSTTFL,
           S.SRCSKY  AS SRCSKY,
           S.UOMDOC  AS UOMDOC,
           S.CNTBSK  AS CNTBSK,
           S.NUPDPS  AS NUPDPS,
           S.REFDKY  AS REFDKY,
           S.REFDIT  AS REFDIT,
           S.REFCAT  AS REFCAT,
           S.REFDAT  AS REFDAT,
           S.PURCKY  AS PURCKY,
           S.PURCIT  AS PURCIT,
           S.ASNDKY  AS ASNDKY,
           S.ASNDIT  AS ASNDIT,
           S.RECVKY  AS RECVKY,
           S.RECVIT  AS RECVIT,
           S.SHPOKY  AS SHPOKY,
           S.SHPOIT  AS SHPOIT,
           S.GRPOKY  AS GRPOKY,
           S.GRPOIT  AS GRPOIT,
           S.TASKKY  AS TASKKY,
           S.TASKIT  AS TASKIT,
           S.SADJKY  AS SADJKY,
           S.SADJIT  AS SADJIT,
           S.SDIFKY  AS SDIFKY,
           S.SDIFIT  AS SDIFIT,
           S.PHYIKY  AS PHYIKY,
           S.PHYIIT  AS PHYIIT,
           S.OWNRKY  AS OWNRKY,
           S.SKUKEY  AS SKUKEY,
           S.LOTA01  AS LOTA01,
           S.LOTA02  AS LOTA02,
           S.LOTA03  AS LOTA03,
           S.LOTA04  AS LOTA04,
           S.LOTA05  AS LOTA05,
           S.LOTA06  AS LOTA06,
           S.LOTA07  AS LOTA07,
           S.LOTA08  AS LOTA08,
           S.LOTA09  AS LOTA09,
           S.LOTA10  AS LOTA10,
           S.LOTA11  AS LOTA11,
           S.LOTA12  AS LOTA12,
           S.LOTA13  AS LOTA13,
           S.LOTA14  AS LOTA14,
           S.LOTA15  AS LOTA15,
           S.LOTA16  AS LOTA16,
           S.LOTA17  AS LOTA17,
           S.LOTA18  AS LOTA18,
           S.LOTA19  AS LOTA19,
           S.LOTA20  AS LOTA20,
           S.AWMSNO  AS AWMSNO,
           S.DESC01  AS DESC01,
           S.DESC02  AS DESC02,
           S.ASKU01  AS ASKU01,
           S.ASKU02  AS ASKU02,
           S.ASKU03  AS ASKU03,
           S.ASKU04  AS ASKU04,
           S.ASKU05  AS ASKU05,
           S.EANCOD  AS EANCOD,
           S.GTINCD  AS GTINCD,
           S.SKUG01  AS SKUG01,
           S.SKUG02  AS SKUG02,
           S.SKUG03  AS SKUG03,
           S.SKUG04  AS SKUG04,
           S.SKUG05  AS SKUG05,
           S.GRSWGT  AS GRSWGT,
           S.NETWGT  AS NETWGT,
           S.WGTUNT  AS WGTUNT,
           S.LENGTH  AS LENGTH,
           S.WIDTHW  AS WIDTHW,
           S.HEIGHT  AS HEIGHT,
           S.CUBICM  AS CUBICM,
           S.CAPACT  AS CAPACT,
           S.ZONEKY  AS ZONEKY,
           S.TKZONE  AS TKZONE,
           S.AREAKY  AS AREAKY,
           S.SMANDT  AS SMANDT,
           S.SEBELN  AS SEBELN,
           S.SEBELP  AS SEBELP,
           S.SZMBLNO AS SZMBLNO,
           S.SZMIPNO AS SZMIPNO,
           S.STRAID  AS STRAID,
           S.SVBELN  AS SVBELN,
           S.SPOSNR  AS SPOSNR,
           S.STKNUM  AS STKNUM,
           S.STPNUM  AS STPNUM,
           S.SWERKS  AS SWERKS,
           S.SLGORT  AS SLGORT,
           S.SDATBG  AS SDATBG,
           S.STDLNR  AS STDLNR,
           S.SSORNU  AS SSORNU,
           S.SSORIT  AS SSORIT,
           S.SMBLNR  AS SMBLNR,
           S.SZEILE  AS SZEILE,
           S.SMJAHR  AS SMJAHR,
           S.SXBLNR  AS SXBLNR,
           S.SAPSTS  AS SAPSTS,
           S.SBKTXT  AS SBKTXT,
           S.CREDAT  AS CREDAT,
           S.CRETIM  AS CRETIM,
           S.CREUSR  AS CREUSR,
           S.LMODAT  AS LMODAT,
           S.LMOTIM  AS LMOTIM,
           S.LMOUSR  AS LMOUSR
      FROM STKKY S
           INNER JOIN ( SELECT #{WAREKY} AS WAREKY, #{AREAKY} AS AREAKY, #{ZONEKY} AS ZONEKY, #{LOCAKY} AS LOCAKY, #{OWNRKY} AS OWNRKY, #{SKUKEY} AS SKUKEY, #{ASKU01} AS ASKU01, #{DESC01} AS DESC01, #{DESC02} AS DESC02, #{MEASKY} AS MEASKY, #{UOMKEY} AS UOMKEY, #{TRNUID} AS TRNUID, #{LOTNUM} AS LOTNUM   FROM DUAL  ) A  
                   ON A.WAREKY = S.WAREKY
                  AND A.AREAKY = S.AREAKY
                  AND A.ZONEKY = S.ZONEKY
                  AND A.LOCAKY = S.LOCAKY
                  AND A.OWNRKY = S.OWNRKY
                  AND A.SKUKEY = S.SKUKEY
                  AND A.ASKU01 = S.ASKU01
                  AND A.MEASKY = S.MEASKY
                  AND A.UOMKEY = S.UOMKEY
                  AND A.TRNUID = S.TRNUID
                  AND A.LOTNUM = S.LOTNUM
           INNER JOIN LOCMA L
                   ON L.WAREKY = S.WAREKY
                  AND L.LOCAKY = S.LOCAKY
     WHERE S.WAREKY = #{WAREKY}
       AND S.OWNRKY = #{OWNRKY}
       AND S.SKUKEY = #{SKUKEY}
       AND S.QTSIWH > 0
       AND S.QTSALO = 0
       AND S.QTSPMO = 0
       AND S.QTSPMI = 0
       AND S.QTSBLK = 0
       AND S.LOTA06 = '00'
       AND L.INDUPK = 'V'
     ORDER BY S.STOKKY
  </select>   
  
  <!-- [DL34] 배차 관리 : 헤더  조회   : OUTBOUND.CARMA.FIND-->
  <select id="DL34_HEAD_LIST" parameterType="hashmap" resultType="DataMap">

      SELECT CM.OWNRKY AS OWNRKY,
             CM.WAREKY AS WAREKY,
             CM.CARNUM AS CARNUM,
             CM.DESC01||'('||SR.SHIPSQ||')' AS DESC01,
             CM.CARTYP AS CARTYP,
             CM.CARGBN AS CARGBN,
             CM.CARTMP AS CARTMP,
             NVL(SUM(SI.QTALOC), 0) AS QTALOC,
             DECODE(NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 2), 0), 0, ' ', TO_CHAR(NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 2), 0),  'FM999990.00')) AS PTQTY,
             DECODE(NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 1), 0), 0, ' ', TO_CHAR(NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 1), 0),  'FM999990.0')) AS BOXQTY,
             NVL(SUM(DECODE(SM.ASKU05, '001', ROUND(SI.QTALOC / CL.LOQTY1, 2), 0)), 0) AS RT1,       
             NVL(SUM(DECODE(SM.ASKU05, '001', 0, ROUND(SI.QTALOC / CL.LOQTY1, 2))), 0) AS RT2,         
             NVL(SUM(DECODE(SM.ASKU05, '001', SM.NETWGT * SI.QTALOC / DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT1, 
             NVL(SUM(DECODE(SM.ASKU05, '001', 0, SM.NETWGT * SI.QTALOC/ DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT2,
             COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
             NVL(CD.USARG1, '20000') AS MAXCARTON,
             NVL(SR.SHIPSQ, 0) AS SHIPSQ
        FROM CARMA CM INNER JOIN SHPDR SR ON CM.CARNUM = SR.CARNUM AND SR.CARDAT = #{CAR_CARDAT}
                      INNER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
                      INNER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY AND SH.DOCDAT = #{DOCDAT} <if test="WAREKY != ''"> AND SH.WAREKY = #{WAREKY} </if> 
                      INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
                      LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
                      LEFT OUTER JOIN CMCDV CD ON CD.CMCDKY = 'CARTYP'  AND CM.CARTYP = CD.CMCDVL
       WHERE 1 = 1
         AND CM.DELMAK != '1'
    <if test="OWNRKY != ''">
         AND CM.OWNRKY = #{OWNRKY} 
    </if>     
    <if test="WAREKY != ''">
         AND CM.WAREKY = #{WAREKY} 
    </if>     
    <if test="CARGBN != ''">
        AND CM.CARGBN = ${CARGBN}
    </if>     
    <if test="CARTMP != ''">
        AND CM.CARTMP = ${CARTMP}
    </if>     
       
       GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, CM.CARTYP, CM.CARGBN, CM.CARTMP, CD.USARG1, SR.SHIPSQ
  
       UNION ALL
  
      SELECT CM.OWNRKY AS OWNRKY,
             CM.WAREKY AS WAREKY,
             CM.CARNUM AS CARNUM,
             CM.DESC01 AS DESC01,
             CM.CARTYP AS CARTYP,
             CM.CARGBN AS CARGBN,
             CM.CARTMP AS CARTMP,
             SUM(SI.QTALOC) AS QTALOC,
             DECODE(NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 2), 0), 0, ' ', TO_CHAR(NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 2), 0),  'FM999990.00')) AS PTQTY,
             DECODE(NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 1), 0), 0, ' ', TO_CHAR(NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 1), 0),  'FM999990.0')) AS BOXQTY,
               SUM(DECODE(SM.ASKU05, '001', ROUND(SI.QTALOC / CL.LOQTY1, 2), 0)) AS RT1,       
             SUM(DECODE(SM.ASKU05, '001', 0, ROUND(SI.QTALOC / CL.LOQTY1, 2))) AS RT2,         
             SUM(DECODE(SM.ASKU05, '001', SM.NETWGT * SI.QTALOC / DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)) AS GRSWGT1, 
             SUM(DECODE(SM.ASKU05, '001', 0, SM.NETWGT * SI.QTALOC/ DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)) AS GRSWGT2,
             COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
             NVL(CD.USARG1, '20000') AS MAXCARTON,
             0 AS SHIPSQ
        FROM CARMA CM LEFT OUTER JOIN SHPDR SR ON CM.CARNUM = SR.CARNUM AND SR.CARDAT = #{CAR_CARDAT}
                      LEFT OUTER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
                      LEFT OUTER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY AND SH.DOCDAT = #{DOCDAT}  <if test="WAREKY != ''"> AND SH.WAREKY = #{WAREKY} </if> 
                      LEFT OUTER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
                      LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
                      LEFT OUTER JOIN CMCDV CD ON CD.CMCDKY = 'CARTYP'  AND CM.CARTYP = CD.CMCDVL
       WHERE 1 = 1
         AND CM.DELMAK != '1'
    <if test="OWNRKY != ''">
         AND CM.OWNRKY = #{OWNRKY} 
    </if>     
    <if test="WAREKY != ''">
         AND CM.WAREKY = #{WAREKY} 
    </if>     
    <if test="CARGBN != ''">
        AND CM.CARGBN = ${CARGBN}
    </if>     
    <if test="CARTMP != ''">
        AND CM.CARTMP = ${CARTMP}
    </if>   
       
       GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, CM.CARTYP, CM.CARGBN, CM.CARTMP, CD.USARG1    

  </select> 
    
  <!-- [DL34] 배차 관리 : 아이템  조회   : OUTBOUND.DL35.FIND-->
  <select id="DL34_ITEM_LIST" parameterType="hashmap" resultType="DataMap">	
    
    SELECT A.OWNRKY AS OWNRKY,
           A.WAREKY AS WAREKY,
           A.SHPOKY AS SHPOKY,
           A.SVBELN AS SVBELN,
           A.SHPMTY AS SHPMTY,
           (SELECT SHORTX FROM DOCTM WHERE DOCUTY = A.SHPMTY ) AS SHPMTYNM,
           SUM(A.CNT) AS CNT,
           COUNT(1) AS SKUCNT,
           A.DPTNKY AS DPTNKY,
           A.NAME01 AS NAME01,
           A.PTRCVR AS PTRCVR,
           A.PTRCVRNM AS PTRCVRNM,
           A.DEPART AS DEPART,
           A.ARRIVA AS ARRIVA,
           A.CARNUM AS CARNUM, 
           A.CARDAT AS CARDAT,
           A.CARDAT AS OCARDAT,
           A.CARNUM AS OCARNUM,
           A.SHIPSQ AS SHIPSQ, 
           A.SHIPSQ AS OSHIPSQ, 
           SUM(A.GRSWGT) AS GRSWGT,
           DECODE(SUM(A.BOXQTY), '0' , ' ', TO_CHAR(SUM(A.BOXQTY),  'FM999990.0'))  AS BOXQTY, 
           DECODE(SUM(A.PLTQTY), '0', ' ', TO_CHAR(SUM(A.PLTQTY),  'FM999990.00')) AS PLTQTY, 
           0 AS D1T, 
           0 AS D25T,
           0 AS D35T,
           0 AS D5T,
           0 AS D8T,
           0 AS D11T,
           0 AS D15T,
           A.ASKU05   AS  ASKU05,
           SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
           'O'  AS CHKFIELD,
            A.USRID1 AS USRID1,
            A.UNAME1 AS UNAME1 ,
            A.DEPTID1 AS DEPTID1,
            A.DNAME1 AS DNAME1,
            A.USRID2 AS USRID2,
            B.DESC01 AS DESC01,
            B.DESC01 AS ODESC01,
            NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
            A.PTNG07 AS PTNG07,
            MAX(A.DOCTXT) AS DOCTXT,
            B.DCMPNM AS TRCMPY,
            A.FORKYN AS FORKYN
     FROM (
        SELECT /*+ ORDERED FIRST_ROWS */
    H.OWNRKY, H.WAREKY, H.SHPOKY,
               I.SVBELN,
               H.SHPMTY,
               COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
               H.DOCDAT, 
               H.DPTNKY, 
               MAX(H.DOCTXT) DOCTXT,
               B.NAME01,
               H.PTRCVR,
               B2.NAME01 AS PTRCVRNM,
               R.SHPOIT, 
               R.DEPART, 
               R.ARRIVA,
               R.CARNUM,
               R.CARDAT ,
               R.SHIPSQ, 
               R.SORTSQ,
               I.SKUKEY,
               I.QTALOC, 
               H.PGRC03,
               H.USRID1,
                H.UNAME1,
                H.DEPTID1,
                H.DNAME1,
                H.USRID2,
               SUM(S.GRSWGT) GRSWGT, 
               WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
           	   DECODE(NVL(ROUND(I.QTALOC / S.QTYSTD, 2), 0), 0, '0', TO_CHAR(NVL(ROUND(I.QTALOC / S.QTYSTD, 2), 0),  'FM999990.00')) AS PLTQTY,
           	   DECODE(NVL(ROUND(I.QTALOC / S.QTDUOM, 1), 0), 0, '0', TO_CHAR(NVL(ROUND(I.QTALOC / S.QTDUOM, 1), 0),  'FM999990.0')) AS BOXQTY,
              MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
              B2.PTNG07,
              B2.FORKYN 
          FROM SHPDH H, SHPDI I, SHPDR R, BZPTN B, BZPTN B2, SKUMA S, CMCDV V
         WHERE H.DRELIN =' '
           AND H.SHPOKY = I.SHPOKY
           AND I.SHPOKY = R.SHPOKY
           AND I.SHPOIT = R.SHPOIT
           AND H.OWNRKY = B.OWNRKY
           AND H.DPTNKY = B.PTNRKY
           AND B.PTNRTY IN ('0001', '0004')
           AND H.OWNRKY = B2.OWNRKY
           AND H.PTRCVR = B2.PTNRKY
           AND B2.PTNRTY IN ('0007', '0004')
           AND V.CMCDKY = 'CARTYP'
           AND B.PTNG07 = V.CMCDVL
           AND H.OWNRKY = S.OWNRKY
           AND I.SKUKEY = S.SKUKEY
           AND H.SHPMTY != '299'
           AND I.STATIT != 'REF'
           AND H.STATDO NOT IN ('FPC','PPC','FSH','PSH')
           AND I.QTALOC > 0
           AND H.OWNRKY = #{OWNRKY}
           AND H.WAREKY = #{WAREKY}
     <if test="RANGE_SQL1 != null and RANGE_SQL1 != ''"> ${RANGE_SQL1} </if>
         GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, H.PTRCVR, B2.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
                  R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
                  H.DNAME1, H.USRID2, B2.PTNG07, I.SVBELN, B2.FORKYN, S.QTYSTD, S.QTDUOM
                  
        UNION ALL
        
        SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
               I.SVBELN,
               H.SHPMTY,
               COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
               H.DOCDAT, 
               H.DPTNKY, 
               MAX(H.DOCTXT) DOCTXT,
               B.NAME01,
               H.PTRCVR,
               B2.NAME01 AS PTRCVRNM,
               R.SHPOIT, 
               R.DEPART, 
               R.ARRIVA,
               R.CARNUM,
               R.CARDAT ,
               R.SHIPSQ, 
               R.SORTSQ,
               I.SKUKEY,
               I.QTALOC, 
               H.PGRC03,
               H.USRID1,
                H.UNAME1,
                H.DEPTID1,
                H.DNAME1,
                H.USRID2,
               SUM(S.GRSWGT) GRSWGT, 
               WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
           	   DECODE(NVL(ROUND(I.QTALOC / S.QTYSTD, 2), 0), 0, '0', TO_CHAR(NVL(ROUND(I.QTALOC / S.QTYSTD, 2), 0),  'FM999990.00')) AS PLTQTY,
           	   DECODE(NVL(ROUND(I.QTALOC / S.QTDUOM, 1), 0), 0, '0', TO_CHAR(NVL(ROUND(I.QTALOC / S.QTDUOM, 1), 0),  'FM999990.0')) AS BOXQTY,
              MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
              B2.PTNG07,
              B2.FORKYN 
          FROM SHPDH H, SHPDI I, SHPDR R, BZPTN B, BZPTN B2, SKUMA S, CMCDV V
         WHERE H.DRELIN =' '
           AND H.SHPOKY = I.SHPOKY
           AND I.SHPOKY = R.SHPOKY
           AND I.SHPOIT = R.SHPOIT
           AND H.OWNRKY = B.OWNRKY
           AND H.DPTNKY = B.PTNRKY
           AND B.PTNRTY = '0002'
           AND H.OWNRKY = B2.OWNRKY
           AND H.PTRCVR = B2.PTNRKY
           AND B2.PTNRTY = '0002'
           AND V.CMCDKY = 'CARTYP'
           AND B.PTNG07 = V.CMCDVL
           AND H.OWNRKY = S.OWNRKY
           AND I.SKUKEY = S.SKUKEY
           AND R.TASKKY = ' '
           AND H.SHPMTY = '270'
           AND I.STATIT != 'REF'
           AND H.STATDO NOT IN ('FPC','PPC','FSH','PSH')
           AND I.QTALOC > 0
           AND H.OWNRKY = #{OWNRKY}
           AND H.WAREKY = #{WAREKY}
     <if test="RANGE_SQL1 != null and RANGE_SQL1 != ''"> ${RANGE_SQL1} </if>
         GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, H.PTRCVR, B2.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
                  R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
                  H.DNAME1, H.USRID2, B2.PTNG07, I.SVBELN, B2.FORKYN, S.QTYSTD, S.QTDUOM
      ) A, CARMA B
    WHERE 1=1
      AND A.OWNRKY = B.OWNRKY(+)
      AND A.WAREKY = B.WAREKY(+)
      AND A.CARNUM = B.CARNUM(+)
      GROUP BY A.OWNRKY, A.WAREKY, SHPOKY, DPTNKY, NAME01, A.PTRCVR, PTRCVRNM, DEPART,ARRIVA, A.CARNUM, SHIPSQ, ASKU05, PGRC03, CARDAT,
               USRID1, UNAME1, DEPTID1, DNAME1, USRID2, B.DESC01, A.PTNG07, A.SVBELN, B.DCMPNM, A.FORKYN, A.SHPMTY
      ORDER BY A.SHPOKY, A.SHIPSQ
     
  </select> 
  
  <!-- [DL34] 배차 관리 팝업 1 : 아이템  조회   : OUTBOUND.DL35.FIND1-->
  <select id="DL34_POP1_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT A.SHPOKY AS SHPOKY,
           A.SVBELN AS SVBELN,
           A.SKUKEY AS SKUKEY,
           A.DESC01 AS SKUDESC,
           A.SHPOIT AS SHPOIT,
           A.DPTNKY AS DPTNKY,
           A.NAME01 AS NAME01,
           A.DEPART AS DEPART,
           A.ARRIVA AS ARRIVA,
           A.CARNUM AS CARNUM, 
           A.CARDAT AS CARDAT,
           A.CARDAT AS OCARDAT,
           A.CARNUM AS OCARNUM,
           A.SHIPSQ AS SHIPSQ, 
           A.SHIPSQ AS OSHIPSQ, 
           A.GRSWGT AS GRSWGT,
           A.BOXQTY AS BOXQTY,        
           A.D1T AS D1T, 
           A.D25T AS D25T,
           A.D35T AS D35T,
           A.D5T  AS D5T,
           A.D8T  AS D8T,
           A.D11T AS D11T,
           A.D15T AS D15T,
           A.ASKU05   AS  ASKU05,
           SZF_GETCMCDVDESC('PGRC03',PGRC03)  AS PGRC03,
           'O'  AS CHKFIELD,
           A.USRID1 AS USRID1,
           A.UNAME1 AS UNAME1 ,
           A.DEPTID1 AS DEPTID1,
           A.DNAME1 AS DNAME1,
           A.USRID2 AS USRID2,
           B.DESC01 AS DESC01,
           B.DESC01 AS ODESC01,
           NVL(TRIM(MAXCARTON),'200000') AS MAXCARTON,
           A.PTNG07 AS PTNG07
     FROM (
        SELECT H.OWNRKY, 
               H.WAREKY, 
               H.SHPOKY,
               I.SVBELN,
               H.SHPMTY,
               H.DOCDAT, 
               H.DPTNKY, 
               B.NAME01,
               R.SHPOIT, 
               R.DEPART, 
               R.ARRIVA,
               R.CARNUM,
               R.CARDAT ,
               R.SHIPSQ, 
               R.SORTSQ,
               I.SKUKEY,
               S.DESC01,
               I.QTALOC, 
               H.PGRC03, 
               H.USRID1,
               H.UNAME1,
               H.DEPTID1,
               H.DNAME1,
               H.USRID2,
               SUM(S.GRSWGT) GRSWGT,
               WM_CONCAT(DISTINCT S.ASKU05) ASKU05,
               SUM(TRUNC(I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) ,0)) AS BOXQTY,
               MAX(ROUND(DECODE(C.CARTYP, '1.5T', I.QTALOC/C.LOQTY1, 0),3)) D1T,
               MAX(ROUND(DECODE(C.CARTYP, '2.5T', I.QTALOC/C.LOQTY1, 0),3)) D25T,
               MAX(ROUND(DECODE(C.CARTYP, '3.5T', I.QTALOC/C.LOQTY1, 0),3)) D35T,
               MAX(ROUND(DECODE(C.CARTYP, '5T'  , I.QTALOC/C.LOQTY1, 0),3)) D5T,
               MAX(ROUND(DECODE(C.CARTYP, '8T'  , I.QTALOC/C.LOQTY1, 0),3)) D8T,
               MAX(ROUND(DECODE(C.CARTYP, '11T' , I.QTALOC/C.LOQTY1, 0),3)) D11T,
               MAX(ROUND(DECODE(C.CARTYP, '15T' , I.QTALOC/C.LOQTY1, 0),3)) D15T,
               MAX(( SELECT USARG1 FROM CMCDV
                     WHERE CMCDKY = 'CARTYP'
                       AND CMCDVL = PTNG07)) MAXCARTON,
               B.PTNG07
          FROM SHPDH H, SHPDI I, SHPDR R,
               CLDMA C, BZPTN B, SKUMA S
         WHERE H.SHPOKY = I.SHPOKY
           AND I.SHPOKY = R.SHPOKY
           AND I.SHPOIT = R.SHPOIT
           AND S.OWNRKY = C.OWNRKY(+)  
           AND S.SKUKEY = C.SKUKEY(+)  
           AND H.OWNRKY = B.OWNRKY
           AND H.DPTNKY = B.PTNRKY
           AND H.OWNRKY = S.OWNRKY
           AND I.SKUKEY = S.SKUKEY
           AND R.TASKKY = ' '
           AND H.SHPMTY != '299'
           AND I.STATIT != 'REF'
           AND H.STATDO NOT IN ('FPC','PPC','FSH','PSH')
           AND I.QTALOC &gt; 0
         GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
                  R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
                  H.DOCDAT, I.QTALOC, H.PGRC03, H.USRID1, H.UNAME1, H.DEPTID1, H.DNAME1, H.USRID2,
                  B.PTNG07, I.SVBELN, S.DESC01
      ) A, CARMA B
    WHERE 1=1
      AND A.OWNRKY = B.OWNRKY(+)
      AND A.WAREKY = B.WAREKY(+)
      AND A.CARNUM = B.CARNUM(+)
      AND SHPOKY = #{SHPOKY}
    ORDER BY SHPOKY, SHPOIT   
  </select> 
    
  <!-- [DL34] 배차 관리 : 저장 : Validation 01   -->
  <select id="DL34_ITEM_VALID_01_MAP" parameterType="hashmap" resultType="DataMap">

      SELECT COUNT(*) AS CNT
        FROM SHPDR R
             INNER JOIN SHPDH H ON H.SHPOKY = R.SHPOKY
       WHERE R.CARDAT = #{CARDAT}
         AND R.SHIPSQ = #{SHIPSQ}
         AND H.OWNRKY = #{OWNRKY}
         AND H.WAREKY = #{WAREKY}
         AND R.TASKKY != ' '
       
  </select>
  
  <!-- [DL34] 배차 관리 : 저장 : Validation 02   -->
  <select id="DL34_ITEM_VALID_02_MAP" parameterType="hashmap" resultType="DataMap">

        SELECT COUNT(*) AS CNT
        FROM SHPDR R
             INNER JOIN SHPDH H ON H.SHPOKY = R.SHPOKY AND H.STATDO = 'FSH'
       WHERE R.CARDAT = #{CARDAT}
         AND R.SHIPSQ = #{SHIPSQ}
         AND H.OWNRKY = #{OWNRKY}
         AND H.WAREKY = #{WAREKY}
       
  </select>
  
  <!-- [DL34] 배차 관리 : 저장 : Validation 02   -->
  <update id="DL34_ITEM_UPDATE"  parameterType="hashmap">
  
      UPDATE SHPDR 
       SET 
            CARNUM = NVL(#{CARNUM},' ') 
          , SHIPSQ = TRUNC(TO_NUMBER(NVL(#{SHIPSQ},0)), 0) 
          , CARDAT = NVL(#{CARDAT},' ') 
          , RECDAT = NVL(#{CARDAT},' ')
          , TRCMPY = NVL(#{TRCMPY},' ') 
          , LMODAT = TO_CHAR(SYSDATE, 'YYYYMMDD') 
          , LMOTIM = TO_CHAR(SYSDATE, 'HH24MISS') 
          , LMOUSR = #{SES_USER_ID}
     WHERE 1 = 1 
       AND SHPOKY = #{SHPOKY} 
       
  </update>
  
  <!-- [DL34] 배차 관리 : 저장 : Validation 03   -->
  <select id="DL34_ITEM_VALID_03_LIST" parameterType="hashmap" resultType="DataMap">
        
        SELECT /*+ INDEX(H PK_SHPDH_NEW)*/  R.SHIPSQ AS SHIPCHK
        FROM SHPDR R
             INNER JOIN SHPDH H ON H.SHPOKY = R.SHPOKY
       WHERE R.CARDAT = #{CARDAT}
         AND R.CARNUM != ' '
         AND R.SHIPSQ = #{SHIPSQ}
         AND H.OWNRKY = #{OWNRKY}
         AND H.WAREKY = #{WAREKY}
         AND R.TASKKY != ' '
       
  </select>
  
  <!-- P_CAR_DISPATCHING_AUTO 프로시서 실행  -->
  <update id="P_CAR_DISPATCHING_AUTO_UPDATE" parameterType="hashmap">
      { call P_CAR_DISPATCHING_AUTO(#{SHPOKY}, #{SES_USER_ID}, #{SHIPSQ}) }
  </update> 
  
  <!-- P_CAR_DISPATCHING_AUTO2 프로시서 실행  -->
  <update id="P_CAR_DISPATCHING_AUTO2_UPDATE" parameterType="hashmap">
      { call P_CAR_DISPATCHING_AUTO2(#{SHPOKY}, #{SES_USER_ID}, #{SHIPSQ}) }
  </update> 
  
  <!-- P_CAR_DISPATCHING_FIXED 프로시서 실행  -->
  <update id="P_CAR_DISPATCHING_FIXED_UPDATE" parameterType="hashmap">
      { call P_CAR_DISPATCHING_FIXED(#{SHPOKY}, #{SES_USER_ID}, #{SHIPSQ}) }
  </update> 
  
  <!-- P_CAR_DISPATCHING_FIXED2 프로시서 실행  -->
  <update id="P_CAR_DISPATCHING_FIXED2_UPDATE" parameterType="hashmap">
      { call P_CAR_DISPATCHING_FIXED2(#{SHPOKY}, #{SES_USER_ID}, #{SHIPSQ}) }
  </update> 
  
  <!-- [DL40] 오더피킹완료 : 헤더 조회 : TASK.CONFIRM.FIND_TARGET_TASDH_2NO  -->
  <select id="DL40_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT TASDH.TASKKY AS TASKKY,
           TASDH.WAREKY AS WAREKY,
           TASDH.TASOTY AS TASOTY,
           TASDH.DOCDAT AS DOCDAT,
           TASDH.DOCCAT AS DOCCAT,
           (SELECT SHORTX FROM DOCCM WHERE DOCCAT = TASDH.DOCCAT) AS DOCCATNM,
           TASDH.DRELIN AS DRELIN,
           TASDH.STATDO AS STATDO,
           (SELECT X.CDESC1 FROM CMCDV X WHERE X.CMCDKY = 'STATDO' AND X.CMCDVL = TASDH.STATDO) AS STATDONM,
           (SELECT SHORTX FROM DOCTM WHERE DOCUTY = TASDH.TASOTY) AS ADJDSC,
           TASDH.QTTAOR AS QTTAOR,
           TASDH.QTCOMP AS QTCOMP,
           TASDH.TSPKEY AS TSPKEY,
           TASDH.DOORKY AS DOORKY,
           DECODE(TASDH.WARETG, ' ', TASDH.WAREKY, TASDH.WARETG) AS WARETG,
           TASDH.PTNRKY AS PTNRKY,
           TASDH.CREDAT AS CREDAT,
           TASDH.CRETIM AS CRETIM,
           TASDH.CREUSR AS CREUSR,
           (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = TASDH.CREUSR) AS CUSRNM,
           TASDH.LMODAT AS LMODAT,
           TASDH.LMOTIM AS LMOTIM,
           TASDH.LMOUSR AS LMOUSR,
           (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = TASDH.LMOUSR) AS LUSRNM,
           TASDH.INDBZL AS INDBZL,
           TASDH.INDARC AS INDARC,
           TASDH.UPDCHK AS UPDCHK,
           TASDH.KEEPTS AS KEEPTS,
    
           MAX(S.RECVKY) AS RECVKY,
           MAX(S.SHPOKY) AS SHPOKY,
    
           MAX(SHPDH.SHPMTY) AS SHPMTY,
           MAX(DOCTM.SHORTX) AS SHPMTYNM,
           MAX(SHPDH.STATDO) AS SHSTATDO,
           MAX(CMCDV.CDESC1) AS SHSTATDONM,
           MAX(SHPDH.DPTNKY) AS DPTNKY,
           MAX(BZPTN.NAME01) AS DPTNKYNM,
    
           MAX(S.SEBELN) AS SEBELN,
           MAX(S.SZMBLNO) AS SZMBLNO,
           MAX(S.SZMIPNO) AS SZMIPNO,
           MAX(S.STRAID) AS STRAID,
           MAX(S.SVBELN) AS SVBELN,
           MAX(S.STKNUM) AS STKNUM,
           MAX(S.STDLNR) AS STDLNR,
           MAX(S.SSORNU) AS SSORNU,
           MAX(S.SMBLNR) AS SMBLNR,
           MAX(S.SXBLNR) AS SXBLNR,
           NVL(SUM(DECODE(S.ACTCDT, '00000000', 1, ' ', 1, 0)), 0) AS COMPLETECNT,
           MAX(S.AREAKY) AS AREAKY,
           MAX(TASDH.DOCTXT)   AS DOCTXT,
           (SELECT MAX(SHPMTY) FROM SHPDH  WHERE SHPOKY = S.SHPOKY ) SHPMTY
      FROM TASDH
           INNER JOIN TASDI S
                   ON TASDH.TASKKY = S.TASKKY
           INNER JOIN SKUMA SM
                   ON SM.OWNRKY = S.OWNRKY
                  AND SM.SKUKEY = S.SKUKEY
            LEFT OUTER JOIN (SELECT DISTINCT SHPOKY, SHPOIT,  
                                            CARDAT, CARNUM, 
                                            SHIPSQ, 
                                            RECAYN, TASKKY
                              FROM SHPDR)  SR
                   ON SR.SHPOKY = S.SHPOKY 
                  AND SR.SHPOIT = S.SHPOIT              
           LEFT OUTER  JOIN SHPDI
                   ON SHPDI.SHPOKY = S.SHPOKY 
                   AND SHPDI.SHPOIT = S.SHPOIT
           LEFT OUTER JOIN SHPDH 
                   ON SHPDH.SHPOKY = S.SHPOKY
           LEFT OUTER JOIN DOCTM
                   ON SHPDH.SHPMTY = DOCTM.DOCUTY
           LEFT OUTER JOIN CMCDV
                   ON SHPDH.STATDO = CMCDV.CMCDVL 
                   AND CMCDKY = 'STATDO'
           LEFT OUTER JOIN BZPTN
                   ON BZPTN.PTNRKY = SHPDH.DPTNKY
                  AND BZPTN.PTNRTY = '0001'
                  AND BZPTN.OWNRKY = S.OWNRKY
     WHERE 1=1
    AND SHPDH.OWNRKY = #{OWNRKY}
    AND SHPDH.WAREKY = #{WAREKY}
    AND SHPDH.DRELIN = 'V'
    <if test='TASKKYS == ""'> 
      <if test='GRPRL == "ERPSO"'>
       AND SHPDH.SHPMTY IN ('211','212','213','214','215','216')
      </if>
      <if test='GRPRL == "TOTAL"'>
       AND SHPDH.SHPMTY IN ('299')
      </if>
      <if test='GRPRL == "MOVE"'>
       AND SHPDH.SHPMTY IN ('266','267')
      </if>   
      <if test='GRPRL == "RTNPUR"'>
       AND SHPDH.SHPMTY IN ('270')
      </if>  
      
      <if test='DRELIN != ""'>
       AND SHPDH.DRELIN = #{DRELIN}
      </if>  
      <if test='ISSEND == "Y"'>
       AND TASDH.DRELIN = 'V'
      </if>  
      
      <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
      
      <if test="rangeLot != null and rangeLot != ''"> ${rangeLot} </if>
    </if>
      <if test='TASKKYS != ""'> 
       AND TASDH.TASKKY IN (${TASKKYS}) 
      </if>  
      

    
     GROUP BY TASDH.TASKKY, TASDH.WAREKY, TASDH.TASOTY, TASDH.DOCDAT, TASDH.DOCCAT,
              TASDH.DRELIN, TASDH.STATDO, TASDH.QTTAOR, TASDH.QTCOMP, TASDH.TSPKEY,
              TASDH.DOORKY, TASDH.PTNRKY, TASDH.CREDAT, TASDH.CRETIM, TASDH.CREUSR, TASDH.LMODAT,
              TASDH.LMOTIM, TASDH.LMOUSR, TASDH.INDBZL, TASDH.INDARC, TASDH.UPDCHK,
              TASDH.KEEPTS, TASDH.WARETG, S.SHPOKY
     ORDER BY TASDH.TASKKY
  </select>

  <!-- [DL35] 재고보충 : 헤더 VALID 조회   : TASK.TASKORDER.REPLENISHMENT -->
  <select id="DL35_HEAD_VALID_LIST" parameterType="hashmap" resultType="DataMap">
  
		SELECT TASDH.TASKKY AS TASKKY  
		  FROM TASDH, TASDI
		 WHERE 1 = 1
		   AND TASDH.TASKKY = TASDI.TASKKY
		   AND TASDH.WAREKY = #{WAREKY}
		   AND TASDI.OWNRKY = #{OWNRKY}
		   AND TASDH.USRID1 = #{CARDAT}
		   AND TASDH.UNAME1 = #{SHIPSQ}
		   AND TASDH.DOCDAT > '20190101'
 		
  </select>

  <!-- [DL35] 재고보충 : 헤더 조회   : TASK.TASKORDER.DUAL_SHPDR -->
  <select id="DL35_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
  		    SELECT DISTINCT
			       ' ' AS TASKKY,
			       WH.WAREKY AS WAREKY,
			       WH.NAME01 AS WAREKYNM,
			       DT.DOCUTY AS TASOTY,
			       DT.SHORTX AS TASOTYNM,
			       TO_CHAR(SYSDATE,'YYYYMMDD') AS DOCDAT,
			       DC.DOCCAT AS DOCCAT,
			       DC.SHORTX AS DOCCATNM,
			       ' ' AS DRELIN,
			       ST.CMCDVL AS STATDO,
			       ST.CDESC1 AS STATDONM,
			       0 AS QTTAOR,
			       0 AS QTCOMP,
			       ' ' AS TSPKEY,
			       ' ' AS DOORKY,
			       TO_CHAR(SYSDATE,'YYYYMMDD') AS CREDAT,
			       TO_CHAR(SYSDATE,'HH24MISS') AS CRETIM, 
			       #{SES_USER_ID} AS CREUSR,
			       US.NMLAST AS CUSRNM
			
			  FROM (SELECT 1
			          FROM DUAL) D
			       LEFT OUTER JOIN WAHMA WH
			               ON WH.WAREKY = #{WAREKY}
			       LEFT OUTER JOIN DOCCM DC
			               ON DC.DOCCAT = '300'
			       LEFT OUTER JOIN DOCTM DT
			               ON DT.DOCUTY = '305'
			       LEFT OUTER JOIN CMCDV ST
			               ON ST.CMCDKY = 'STATDO'
			              AND ST.CMCDVL = 'NEW'
			       LEFT OUTER JOIN USRMA US
			               ON US.USERID = #{SES_USER_ID}
  		
  </select>

  <!-- [DL35] 재고보충 : 아이템 01 조회   : TASK.CAROPERATE.FIND_SHPDR -->
  <select id="DL35_ITEM_01_LIST" parameterType="hashmap" resultType="DataMap">
  
  		    SELECT /*+ORDERED INDEX(R IDX_SHPDR_NEW02) INDEX(H PK_SHPDH_NEW)*/
					H.OWNRKY OWNRKY, 
					H.WAREKY WAREKY,
					I.SKUKEY SKUKEY, 
					I.DESC01 DESC01, 
					I.STATIT STATITSO, 
					I.QTSHPO QTSHPO, 
					I.QTALOC QTALOC, 
					I.UOMKEY UOMKEY, 
					I.ASKU01 ASKU01, 
					I.ASKU02 ASKU02,  
					I.ASKU03 ASKU03, 
					I.ASKU04 ASKU04, 
					I.ASKU05 ASKU05,  
					I.EANCOD EANCOD, 
					I.SKUG01 SKUG01, 
					I.SKUG02 SKUG02, 
					I.SKUG03 SKUG03, 
					I.SKUG04 SKUG04, 
					I.SKUG05 SKUG05, 
					I.SVBELN SVBELN, 
					I.SPOSNR SPOSNR, 
					H.DOCUTY DOCUTY,
					H.DOCTXT DOCTXT,
					R.SHIPSQ SHIPSQ, 
					R.SORTSQ SORTSQ, 
					
					
					R.STATIT STATITDR, 
					C.CDESC1 STATITDRNM,
					R.DEPART DEPART, 
					R.ARRIVA ARRIVA, 
					R.CARNUM CARNUM,
					R.DRIVER DRIVER,
					R.SHPOKY SHPOKY,
					R.SHPOIT SHPOIT,
					R.SHPOIR SHPOIR,
					R.TASKKY TASKKY,
					
					       NVL(SM.QTYSTD,0) AS PLIQTY,
					       NVL(SM.QTDUOM,0) AS BXIQTY,
					       NVL(  TRUNC((I.QTALOC) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
					       NVL(  TRUNC((I.QTALOC) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
					       NVL(MOD(I.QTALOC, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
					       NVL(SM.GRSWGT,0) * NVL(I.QTALOC-I.QTSHPD,0)  AS GRSWGT,
					       NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
					       R.CARDAT AS CARDAT,
					       R.RECAYN AS RECAYN
					FROM SHPDR R
					     INNER JOIN SHPDI I
					             ON R.SHPOKY = I.SHPOKY
					             AND R.SHPOIT = I.SHPOIT       
					     INNER JOIN SHPDH H
					             ON H.SHPOKY = I.SHPOKY    
					          INNER JOIN CMCDV C
					             ON C.CMCDKY = 'STATIT'
					            AND CMCDVL = R.STATIT
					     INNER JOIN SKUMA SM
					             ON SM.OWNRKY = H.OWNRKY 
					            AND SM.SKUKEY = I.SKUKEY
					WHERE 1=1
					AND I.STATIT NOT IN ('NEW', 'FPC', 'FSH')
					AND I.QTALOC != 0
					AND H.DRELIN = 'V'
					AND R.CARNUM !=' '
					AND R.SHIPSQ > 0 
					AND H.OWNRKY = #{OWNRKY}
					AND H.WAREKY = #{WAREKY}
					AND R.CARDAT = #{CARDAT}
					<if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
  		
  </select>
    
	<!-- [DL35] 재고보충 : 사용중 체크    --> 
	<select id="DL35_VALIDATE_SHPDR_MAP" parameterType="hashmap" resultType="DataMap">
		SELECT COUNT(1) AS CNT  
		  FROM SHPDR 
		 WHERE SHPOKY IN (${SHPOKYS})
		   AND NOT EXISTS (SELECT 1 
		                     FROM TASDH TH
		                          INNER JOIN TASDI TI ON TI.TASKKY = TH.TASKKY
		                    WHERE TH.TASOTY = '305'
		                      AND TI.STATIT = 'NEW'
		                      AND TH.TASKKY = SHPDR.TASKKY)
	</select>
    
	<!-- [DL35] 재고보충 : 대상 체크     --> 
	<select id="DL35_VALIDATE_TARGET_MAP" parameterType="hashmap" resultType="DataMap">
		SELECT count(1) as CNT
		  FROM TASDH A
		       INNER JOIN TASDI B ON A.TASKKY = B.TASKKY
		       INNER JOIN TASDR R ON B.TASKKY = R.TASKKY AND B.TASKIT = R.TASKIT
		       INNER JOIN SKUMA SM ON SM.OWNRKY = B.OWNRKY AND SM.SKUKEY = B.SKUKEY
		       LEFT OUTER JOIN STKKY SK ON SK.STOKKY = R.STOKKY
		       LEFT OUTER JOIN STKKY PK ON PK.SRCSKY = SK.SRCSKY AND PK.LOCAKY = B.LOCASR AND PK.SKUKEY = B.SKUKEY AND PK.LOTNUM = B.LOTNUM AND PK.TRNUID = B.TRNUSR
		       LEFT OUTER JOIN CMCDV C ON C.CMCDKY = 'STATIT' AND C.CMCDVL = B.STATIT
		 WHERE 1 = 1  
		   AND A.TASKKY = #{TASKKY}
	</select>
    
	<!-- [DL35] 재고보충 : 완료 체크    --> 
	<select id="DL35_VALIDATE_TASDH_MAP" parameterType="hashmap" resultType="DataMap">
		SELECT STATDO 
		  FROM TASDH
		 WHERE TASKKY = #{TASKKY}
	</select>
    
	
  <!-- DL35 TASKKY 업데이트  -->
	<update id="DL35_TASKKY_UPDATE"  parameterType="hashmap">
		update SHPDR
		   set TASKKY = #{TASKKY}
         where SHPOKY IN (${SHPOKYS})
	</update>
	
  
  <!-- DL35 P_STOCK_REPLENISH 프로시서 실행  -->
  <update id="P_STOCK_REPLENISH_UPDATE" parameterType="hashmap">
      { call P_STOCK_REPLENISH(#{TASKKY}, #{SES_USER_ID}, #{p_errmsg}, #{p_errnum} ) }
  </update>
	
  
  <!-- DL35 P_STOCK_REPLENISHMENT_COMPL 프로시서 실행  -->
  <update id="P_STOCK_REPLENISHMENT_COMPL_UPDATE" parameterType="hashmap">
      { call P_STOCK_REPLENISHMENT_COMPL(#{TASKKY}, #{TASKIT}, #{LOCAAC}, #{SES_USER_ID}, #{p_errmsg}, #{p_errnum} ) }
  </update>

  <!-- [DL35] 재고보충 : 아이템 02 조회  (저장후)-->
  <select id="DL35_ITEM_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT TI.AREAKY
		     , TI.TASKKY
		     , TI.TASKIT
		     , TI.STATIT
		     , (SELECT CDESC1 FROM CMCDV WHERE CMCDKY = 'STATDO' AND CMCDVL = TI.STATIT) AS STATITNM
		     , TI.QTTAOR
		     , TI.LOCATG AS LOCAAC
		     , TI.OWNRKY
		     , TI.SKUKEY
		     , TI.DESC01
		     , TI.DESC02
		     , TI.LOCASR
		     , TI.SUOMKY
		     , TI.LOCATG
		     , TI.SKUG01
		     , TI.WORKNM
		     , TI.LOTA03
		     , TI.LOTA05
		     , TI.LOTA11
		     , TI.LOTA12
		     , TI.LOTA13
		     , NVL(SM.QTYSTD,0) as PLIQTY
		     , NVL(SM.QTDUOM,0) as BXIQTY
		     , NVL(  TRUNC(SUM(PK.QTSIWH) / DECODE(SM.QTDUOM, null,0,SM.QTDUOM) ) ,0) as BOXQTY
		     , NVL(  TRUNC(SUM(PK.QTSIWH) / DECODE(SM.QTYSTD, null,0,SM.QTYSTD) ) ,0) as PLTQTY
		     , NVL(MOD(SUM(PK.QTSIWH), DECODE(SM.QTDUOM, null,0,SM.QTDUOM)),0) as REMQTY
		  FROM TASDH TH 
		       INNER JOIN TASDI TI ON TI.TASKKY = TH.TASKKY
		       INNER JOIN SKUMA SM ON SM.OWNRKY = TI.OWNRKY AND SM.SKUKEY = TI.SKUKEY
		       INNER JOIN TASDR R ON TI.TASKKY = R.TASKKY AND TI.TASKIT = R.TASKIT
		       LEFT OUTER JOIN STKKY SK ON SK.STOKKY = R.STOKKY
		       LEFT OUTER JOIN STKKY PK ON PK.SRCSKY = SK.SRCSKY AND PK.LOCAKY = TI.LOCASR AND PK.SKUKEY = TI.SKUKEY AND PK.LOTNUM = TI.LOTNUM AND PK.TRNUID = TI.TRNUSR
		 WHERE TH.TASKKY = #{TASKKY}
		 GROUP BY TI.AREAKY
		        , TI.TASKKY
		        , TI.TASKIT
		        , TI.STATIT
		        , TI.QTTAOR
		        , TI.OWNRKY
		        , TI.SKUKEY
		        , TI.DESC01
		        , TI.DESC02
		        , TI.LOCASR
		        , TI.SUOMKY
		        , TI.LOCATG
		        , TI.SKUG01
		        , TI.WORKNM
		        , TI.LOTA03
		        , TI.LOTA05
		        , TI.LOTA11
		        , TI.LOTA12
		        , TI.LOTA13       
		        , SM.QTYSTD
		        , SM.QTDUOM
  </select>
  

  <!-- [DL35] 재고보충 : 헤더 조회 저장후 -->
  <select id="DL35_HEAD2_LIST" parameterType="hashmap" resultType="DataMap">
	  SELECT DISTINCT TH.TASKKY
	       , TH.WAREKY
	       , (SELECT NAME01 FROM WAHMA WHERE WAREKY = TH.WAREKY) AS WAREKYNM
	       , TH.TASOTY
	       , CASE WHEN TH.TASOTY = 'NEW' THEN '미작업'
	              WHEN TH.TASOTY = 'FPA' THEN '보충완료'
	              WHEN TH.TASOTY = 'FPC' THEN '보충완료'
	              ELSE ' ' 
	          END AS TASOTYNM
	       , TH.DOCDAT
	       , TH.DOCCAT
	       , (SELECT SHORTX FROM DOCCM WHERE DOCCAT = TH.DOCCAT) AS DOCCATNM
	       , TH.STATDO
	       , (SELECT CDESC1 FROM CMCDV WHERE CMCDKY = 'STATDO' AND CMCDVL = TH.STATDO) AS STATDONM
	       , TH.CREDAT
	       , TH.CRETIM 
	       , TH.CREUSR
	       , (SELECT NMLAST FROM USRMA WHERE USERID = TH.CREUSR) AS CUSRNM
	       , SR.CARDAT
	       , SR.SHIPSQ
	       , TH.USRID1 AS USRID1
		   , TH.UNAME1 AS UNAME1
		   , TH.LMODAT
		   , TH.LMOTIM
		   , TH.CREUSR
		   , (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = TH.CREUSR) AS LUSRNM
	    FROM TASDH TH 
	         INNER JOIN TASDI TI ON TI.TASKKY = TH.TASKKY
	         INNER JOIN SHPDR SR ON SR.TASKKY = TI.TASKKY
	   WHERE TH.TASKKY = #{TASKKY}
  </select>
  
	
  
  <!-- [DL36] 재고보충 관리 : 헤더 조회   : TASK.CONFIRM.FIND_TARGET_REPLENISHMENT -->
  <select id="DL36_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
  		SELECT TASDH.TASKKY AS TASKKY,
		       TASDH.WAREKY AS WAREKY,
		       TASDH.TASOTY AS TASOTY,
		       TASDH.DOCDAT AS DOCDAT,
		       TASDH.DOCCAT AS DOCCAT,
		       (SELECT SHORTX FROM DOCCM WHERE DOCCAT = TASDH.DOCCAT) AS DOCCATNM,
		       TASDH.DRELIN AS DRELIN,
		       TASDH.STATDO AS STATDO,
		       CASE WHEN TASDH.STATDO = 'NEW' THEN '미작업'
		            WHEN TASDH.STATDO = 'FPA' THEN '보충완료'
		            WHEN TASDH.STATDO = 'FPC' THEN '보충완료'
		            ELSE ' '
		        END AS STATDONM,
		       (SELECT SHORTX FROM DOCTM WHERE DOCUTY = TASDH.TASOTY)  AS ADJDSC,
		       TASDH.QTTAOR AS QTTAOR,
		       TASDH.QTCOMP AS QTCOMP,
		       TASDH.TSPKEY AS TSPKEY,
		       TASDH.DOORKY AS DOORKY,
		       DECODE(TASDH.WARETG, ' ', TASDH.WAREKY, TASDH.WARETG) AS WARETG,
		       TASDH.PTNRKY AS PTNRKY,
		       TASDH.CREDAT AS CREDAT,
		       TASDH.CRETIM AS CRETIM,
		       TASDH.CREUSR AS CREUSR,
		       (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = TASDH.CREUSR) AS CUSRNM,
		       TASDH.LMODAT AS LMODAT,
		       TASDH.LMOTIM AS LMOTIM,
		       TASDH.LMOUSR AS LMOUSR,
		       (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = TASDH.LMOUSR) AS LUSRNM,
		       TASDH.INDBZL AS INDBZL,
		       TASDH.INDARC AS INDARC,
		       TASDH.UPDCHK AS UPDCHK,
		       TASDH.KEEPTS AS KEEPTS,
		
		       MAX(S.RECVKY) AS RECVKY,
		       MAX(S.SHPOKY) AS SHPOKY,
		
		       MAX(SHPDH.SHPMTY) AS SHPMTY,
		       MAX(DOCTM.SHORTX) AS SHPMTYNM,
		       MAX(SHPDH.STATDO) AS SHSTATDO,
		       MAX(CMCDV.CDESC1) AS SHSTATDONM,
		       MAX(SHPDH.DPTNKY) AS DPTNKY,
		       MAX(BZPTN.NAME01) AS DPTNKYNM,
		
		       MAX(S.SEBELN) AS SEBELN,
		       MAX(S.SZMBLNO) AS SZMBLNO,
		       MAX(S.SZMIPNO) AS SZMIPNO,
		       MAX(S.STRAID) AS STRAID,
		       MAX(S.SVBELN) AS SVBELN,
		       MAX(S.STKNUM) AS STKNUM,
		       MAX(S.STDLNR) AS STDLNR,
		       MAX(S.SSORNU) AS SSORNU,
		       MAX(S.SMBLNR) AS SMBLNR,
		       MAX(S.SXBLNR) AS SXBLNR,
		       NVL(SUM(DECODE(S.ACTCDT, '00000000', 1, ' ', 1, 0)), 0) AS COMPLETECNT,
		       MAX(S.AREAKY) AS AREAKY,
		       MAX(TASDH.DOCTXT)   AS DOCTXT,
		       ' ' ARRIVA, 
		       SR.CARDAT CARDAT, 
		       ' ' CARNUM, 
		       SR.SHIPSQ SHIPSQ, 
		
		       MAX(TASDH.USRID1) AS USRID1,
		       MAX(TASDH.UNAME1) AS UNAME1,
		
		       ' ' SORTSQ, 
		       ' ' DRIVER, 
		       ' ' RECAYN
		  FROM TASDH
		       INNER JOIN TASDI S
		               ON TASDH.TASKKY = S.TASKKY
		       INNER JOIN SKUMA SM
		               ON SM.OWNRKY = S.OWNRKY
		              AND SM.SKUKEY = S.SKUKEY
		       LEFT OUTER JOIN (SELECT DISTINCT CARDAT, SHIPSQ, TASKKY
		                          FROM SHPDR WHERE RECAYN = 'N'
		                           AND TASKKY != ' ' AND CARNUM != ' ' ) SR
		                    ON SR.TASKKY = TASDH.TASKKY
		       LEFT OUTER JOIN SHPDI
		               ON SHPDI.SHPOKY = S.SHPOKY 
		               AND SHPDI.SHPOIT = S.SHPOIT
		       LEFT OUTER JOIN LOCMA LM
		               ON TASDH.WAREKY = LM.WAREKY
		               AND S.LOCATG = LM.LOCAKY
		       LEFT OUTER JOIN SHPDH 
		               ON SHPDH.SHPOKY = S.SHPOKY
		       LEFT OUTER JOIN DOCTM
		               ON SHPDH.SHPMTY = DOCTM.DOCUTY
		       LEFT OUTER JOIN CMCDV
		               ON SHPDH.STATDO = CMCDV.CMCDVL 
		               AND CMCDKY = 'STATDO'
		       LEFT OUTER JOIN BZPTN
		               ON BZPTN.PTNRKY = SHPDH.DPTNKY
		              AND BZPTN.PTNRTY = '0001'
		              AND BZPTN.OWNRKY = S.OWNRKY
		 WHERE 1=1
		AND TASDH.TASOTY = #{TASOTY}
		AND S.OWNRKY = #{OWNRKY}
		AND TASDH.WAREKY = #{WAREKY}
				<if test="RANGE_SQL != null and RANGE_SQL != ''">
					${RANGE_SQL}
				</if>
		<if test="CARDAT != null and CARDAT != ''">
			AND SR.CARDAT = #{CARDAT}
		</if>
	
		<if test='ISSEND == "Y"'> 
        	 AND TASDH.DRELIN &lt;&gt; 'V'
   		</if> 
		<if test='CONDITION != ""'> 
        	 AND #{CONDITION}
   		</if>    		
   		
		<if test='TASKKYS != ""'> 
        	 AND TASDH.TASKKY IN (#{TASKKYS})
   		</if>         
   		
		 GROUP BY TASDH.TASKKY, TASDH.WAREKY, TASDH.TASOTY, TASDH.DOCDAT, TASDH.DOCCAT,
		          TASDH.DRELIN, TASDH.STATDO, TASDH.QTTAOR, TASDH.QTCOMP, TASDH.TSPKEY,
		          TASDH.DOORKY, TASDH.PTNRKY, TASDH.CREDAT, TASDH.CRETIM, TASDH.CREUSR, TASDH.LMODAT,
		          TASDH.LMOTIM, TASDH.LMOUSR, TASDH.INDBZL, TASDH.INDARC, TASDH.UPDCHK,
		          TASDH.KEEPTS, TASDH.WARETG,
		          SR.CARDAT, SR.SHIPSQ
		 ORDER BY TASDH.TASKKY
  		
  </select>  
  
	
  
  <!-- [DL37] 재고보충 리스트조회 -->
  <select id="DL37_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
  		SELECT TASDH.TASKKY AS TASKKY,
		       TASDH.WAREKY AS WAREKY,
		       TASDH.TASOTY AS TASOTY,
		       TASDH.DOCDAT AS DOCDAT,
		       TASDH.DOCCAT AS DOCCAT,
		       (SELECT SHORTX FROM DOCCM WHERE DOCCAT = TASDH.DOCCAT) AS DOCCATNM,
		       TASDH.DRELIN AS DRELIN,
		       TASDH.STATDO AS STATDO,
		       (SELECT X.CDESC1 FROM CMCDV X WHERE X.CMCDKY = 'STATDO' AND X.CMCDVL = TASDH.STATDO) AS STATDONM,
		       (SELECT SHORTX FROM DOCTM WHERE DOCUTY = TASDH.TASOTY)  AS ADJDSC,
		       TASDH.QTTAOR AS QTTAOR,
		       TASDH.QTCOMP AS QTCOMP,
		       TASDH.TSPKEY AS TSPKEY,
		       TASDH.DOORKY AS DOORKY,
		       DECODE(TASDH.WARETG, ' ', TASDH.WAREKY, TASDH.WARETG) AS WARETG,
		       TASDH.PTNRKY AS PTNRKY,
		       TASDH.CREDAT AS CREDAT,
		       TASDH.CRETIM AS CRETIM,
		       TASDH.CREUSR AS CREUSR,
		       (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = TASDH.CREUSR) AS CUSRNM,
		       TASDH.LMODAT AS LMODAT,
		       TASDH.LMOTIM AS LMOTIM,
		       TASDH.LMOUSR AS LMOUSR,
		       (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = TASDH.LMOUSR) AS LUSRNM,
		       TASDH.INDBZL AS INDBZL,
		       TASDH.INDARC AS INDARC,
		       TASDH.UPDCHK AS UPDCHK,
		       TASDH.KEEPTS AS KEEPTS,
		
		       MAX(S.RECVKY) AS RECVKY,
		       MAX(S.SHPOKY) AS SHPOKY,
		
		       MAX(SHPDH.SHPMTY) AS SHPMTY,
		       MAX(DOCTM.SHORTX) AS SHPMTYNM,
		       MAX(SHPDH.STATDO) AS SHSTATDO,
		       MAX(CMCDV.CDESC1) AS SHSTATDONM,
		       MAX(SHPDH.DPTNKY) AS DPTNKY,
		       MAX(BZPTN.NAME01) AS DPTNKYNM,
		
		       MAX(S.SEBELN) AS SEBELN,
		       MAX(S.SZMBLNO) AS SZMBLNO,
		       MAX(S.SZMIPNO) AS SZMIPNO,
		       MAX(S.STRAID) AS STRAID,
		       MAX(S.SVBELN) AS SVBELN,
		       MAX(S.STKNUM) AS STKNUM,
		       MAX(S.STDLNR) AS STDLNR,
		       MAX(S.SSORNU) AS SSORNU,
		       MAX(S.SMBLNR) AS SMBLNR,
		       MAX(S.SXBLNR) AS SXBLNR,
		       NVL(SUM(DECODE(S.ACTCDT, '00000000', 1, ' ', 1, 0)), 0) AS COMPLETECNT,
		       MAX(S.AREAKY) AS AREAKY,
		       MAX(TASDH.DOCTXT)   AS DOCTXT,
		       ' ' ARRIVA, 
		       SR.CARDAT CARDAT, 
		       ' ' CARNUM, 
		       SR.SHIPSQ SHIPSQ, 
		
		       MAX(TASDH.USRID1) AS USRID1,
		       MAX(TASDH.UNAME1) AS UNAME1,
		
		       ' ' SORTSQ, 
		       ' ' DRIVER, 
		       ' ' RECAYN
		  FROM TASDH
		       INNER JOIN TASDI S
		               ON TASDH.TASKKY = S.TASKKY
		       INNER JOIN SKUMA SM
		               ON SM.OWNRKY = S.OWNRKY
		              AND SM.SKUKEY = S.SKUKEY
		       LEFT OUTER JOIN (SELECT DISTINCT CARDAT, SHIPSQ, TASKKY
		                          FROM SHPDR WHERE RECAYN = 'N'
		                           AND TASKKY != ' ' AND CARNUM != ' ' ) SR
		                    ON SR.TASKKY = TASDH.TASKKY
		       LEFT OUTER JOIN SHPDI
		               ON SHPDI.SHPOKY = S.SHPOKY 
		               AND SHPDI.SHPOIT = S.SHPOIT
		       LEFT OUTER JOIN LOCMA LM
		               ON TASDH.WAREKY = LM.WAREKY
		               AND S.LOCATG = LM.LOCAKY
		       LEFT OUTER JOIN SHPDH 
		               ON SHPDH.SHPOKY = S.SHPOKY
		       LEFT OUTER JOIN DOCTM
		               ON SHPDH.SHPMTY = DOCTM.DOCUTY
		       LEFT OUTER JOIN CMCDV
		               ON SHPDH.STATDO = CMCDV.CMCDVL 
		               AND CMCDKY = 'STATDO'
		       LEFT OUTER JOIN BZPTN
		               ON BZPTN.PTNRKY = SHPDH.DPTNKY
		              AND BZPTN.PTNRTY = '0001'
		              AND BZPTN.OWNRKY = S.OWNRKY
		 WHERE 1=1
		AND TASDH.TASOTY = #{TASOTY}
		AND S.OWNRKY = #{OWNRKY}
		AND TASDH.WAREKY = #{WAREKY}
				<if test="RANGE_SQL != null and RANGE_SQL != ''">
					${RANGE_SQL}
				</if>
		<if test="CARDAT != null and CARDAT != ''">
			AND SR.CARDAT = #{CARDAT}
		</if>
		<if test="USRID1 != null and USRID1 != ''">
			AND TASDH.USRID1 = #{USRID1}
		</if>
	
		<if test='ISSEND == "Y"'> 
        	 AND TASDH.DRELIN &lt;&gt; 'V'
   		</if> 
		<if test='CONDITION != ""'> 
        	 AND #{CONDITION}
   		</if>    		
   		
		<if test='TASKKYS != ""'> 
        	 AND TASDH.TASKKY IN (#{TASKKYS})
   		</if>         
   		
		 GROUP BY TASDH.TASKKY, TASDH.WAREKY, TASDH.TASOTY, TASDH.DOCDAT, TASDH.DOCCAT,
		          TASDH.DRELIN, TASDH.STATDO, TASDH.QTTAOR, TASDH.QTCOMP, TASDH.TSPKEY,
		          TASDH.DOORKY, TASDH.PTNRKY, TASDH.CREDAT, TASDH.CRETIM, TASDH.CREUSR, TASDH.LMODAT,
		          TASDH.LMOTIM, TASDH.LMOUSR, TASDH.INDBZL, TASDH.INDARC, TASDH.UPDCHK,
		          TASDH.KEEPTS, TASDH.WARETG,
		          SR.CARDAT, SR.SHIPSQ
		 ORDER BY TASDH.TASKKY
  		
  </select>  
  
    <!-- [DL36] 삭제 VALIDATION :    -->
  <select id="DL36_DEL_VALDATION_MAP" parameterType="hashmap" resultType="DataMap">
		SELECT COUNT(1) AS CNT
		     , MAX(SKUKEY) AS SKUKEY 
		     , MAX(TASKKY) AS TASKKY
		  FROM TASDI 
		 WHERE STATIT IN ('PPC','FPC')
		   AND TASKKY = #{TASKKY}
  </select>   
  
  <!-- [DL36] SHPDR TASKKY 초기화  -->
  <update id="DL36_SHPDR_UPDATE"  parameterType="hashmap">
	update shpdr
	set taskky =  ' '
	where TASKKY = #{TASKKY}
  </update>
  
  <delete id="DL36_TASDI_DELETE"  parameterType="hashmap">
  
    DELETE FROM TASDI
     WHERE TASKKY = #{TASKKY}

  </delete>
  
    
  <!-- [DL36] 재고보충 관리 : 아이템 조회   : TASK.CONFIRM.FIND_TARGET_REPLENISHMENT_ALL -->
  <select id="DL36_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
  
  		SELECT ROW_NUMBER() OVER(ORDER BY S.TASKIT) AS NUM,
		       '0' AS USED,
		       A.WAREKY AS WAREKY,
		       0 AS AVAILABLEQTY,              
		       0 AS AVAILABLEQTYUOM,       
		       S.TASKKY AS TASKKY,
		       S.TASKIT AS TASKIT,
		       S.TASKTY AS TASKTY,
		       S.RSNCOD AS RSNCOD,
		       S.STATIT AS STATIT,
		       CASE WHEN S.STATIT = 'NEW' THEN '미작업'
		            WHEN S.STATIT = 'FPC' THEN '보충완료'
		            WHEN S.STATIT = 'FPA' THEN '보충완료'
		            ELSE ' '
		        END  AS STATITNM,
		       DECODE(S.STATIT, 'FPC', MAX(S.QTCOMP), DECODE( NVL(SUM(PK.QTSIWH),0), 0, SUM(S.QTCOMP), NVL(SUM(PK.QTSIWH),0))) AS QTTAOR,
		       DECODE(S.STATIT, 'FPC', MAX(S.QTCOMP), DECODE( NVL(SUM(PK.QTSIWH),0), 0, SUM(S.QTCOMP), NVL(SUM(PK.QTSIWH),0))) AS QTCOMP,
		       S.OWNRKY AS OWNRKY,
		       S.SKUKEY AS SKUKEY,
		       S.LOTNUM AS LOTNUM,
		       S.ACTCDT AS ACTCDT,
		       S.ACTCTI AS ACTCTI,
		       S.QTYUOM AS QTYUOM,
		       S.TKFLKY AS TKFLKY,
		       S.STEPNO AS STEPNO,
		       S.LSTTFL AS LSTTFL,
		       S.LOCASR AS LOCASR,
		       S.SECTSR AS SECTSR,
		       S.PAIDSR AS PAIDSR,
		       S.TRNUSR AS TRNUSR,
		       S.STRUTY AS STRUTY,
		       S.SMEAKY AS SMEAKY,
		       S.SUOMKY AS SUOMKY,
		       S.QTSPUM AS QTSPUM,
		       S.SDUOKY AS SDUOKY,
		       S.QTSDUM AS QTSDUM,
		       S.LOCATG AS LOCATG,
		       S.SECTTG AS SECTTG,
		       S.PAIDTG AS PAIDTG,
		       S.TRNUTG AS TRNUTG,
		       S.TTRUTY AS TTRUTY,
		       S.TMEAKY AS TMEAKY,
		       S.TUOMKY AS TUOMKY,
		       S.QTTPUM AS QTTPUM,
		       S.TDUOKY AS TDUOKY,
		       S.QTTDUM AS QTTDUM,
		       S.LOCATG AS LOCAAC,
		       S.SECTAC AS SECTAC,
		       S.PAIDAC AS PAIDAC,
		       S.TRNUAC AS TRNUAC,
		       S.ATRUTY AS ATRUTY,
		       S.AMEAKY AS AMEAKY,
		       S.AUOMKY AS AUOMKY,
		       S.QTAPUM AS QTAPUM,
		       S.ADUOKY AS ADUOKY,
		       S.QTADUM AS QTADUM,
		       S.REFDKY AS REFDKY,
		       S.REFDIT AS REFDIT,
		       S.REFCAT AS REFCAT,
		       S.REFDAT AS REFDAT,
		       S.PURCKY AS PURCKY,
		       S.PURCIT AS PURCIT,
		       S.ASNDKY AS ASNDKY,
		       S.ASNDIT AS ASNDIT,
		       S.RECVKY AS RECVKY,
		       S.RECVIT AS RECVIT,
		       S.SHPOKY AS SHPOKY,
		       S.SHPOIT AS SHPOIT,
		       S.GRPOKY AS GRPOKY,
		       S.GRPOIT AS GRPOIT,
		       S.SADJKY AS SADJKY,
		       S.SADJIT AS SADJIT,
		       S.SDIFKY AS SDIFKY,
		       S.SDIFIT AS SDIFIT,
		       S.PHYIKY AS PHYIKY,
		       S.PHYIIT AS PHYIIT,
		       S.DROPID AS DROPID,
		       S.DESC01 AS DESC01,
		       S.DESC02 AS DESC02,
		       S.ASKU01 AS ASKU01,
		       S.ASKU02 AS ASKU02,
		       S.ASKU03 AS ASKU03,
		       S.ASKU04 AS ASKU04,
		       S.ASKU05 AS ASKU05,
		       S.EANCOD AS EANCOD,
		       S.GTINCD AS GTINCD,
		       S.SKUG01 AS SKUG01,
		       S.SKUG02 AS SKUG02,
		       S.SKUG03 AS SKUG03,
		       S.SKUG04 AS SKUG04,
		       S.SKUG05 AS SKUG05,
		       S.GRSWGT AS GRSWGT,
		       S.NETWGT AS NETWGT,
		       S.WGTUNT AS WGTUNT,
		       S.LENGTH AS LENGTH,
		       S.WIDTHW AS WIDTHW,
		       S.HEIGHT AS HEIGHT,
		       S.CUBICM AS CUBICM,
		       S.CAPACT AS CAPACT,
		       S.WORKID AS WORKID,
		       S.WORKNM AS WORKNM,
		       S.HHTTID AS HHTTID,
		       S.AREAKY AS AREAKY,
		       S.LOTA01 AS LOTA01,
		       S.LOTA02 AS LOTA02,
		       S.LOTA03 AS LOTA03,
		       S.LOTA04 AS LOTA04,
		       S.LOTA05 AS LOTA05,
		       S.LOTA06 AS LOTA06,
		       S.LOTA07 AS LOTA07,
		       S.LOTA08 AS LOTA08,
		       S.LOTA09 AS LOTA09,
		       S.LOTA10 AS LOTA10,
		       S.LOTA11 AS LOTA11,
		       S.LOTA12 AS LOTA12,
		       S.LOTA13 AS LOTA13,
		       S.LOTA14 AS LOTA14,
		       S.LOTA15 AS LOTA15,
		       S.LOTA16 AS LOTA16,
		       S.LOTA17 AS LOTA17,
		       S.LOTA18 AS LOTA18,
		       S.LOTA19 AS LOTA19,
		       S.LOTA20 AS LOTA20,
		       S.AWMSNO AS AWMSNO,
		       S.SMANDT AS SMANDT,
		       S.SEBELN AS SEBELN,
		       S.SEBELP AS SEBELP,
		       S.SZMBLNO AS SZMBLNO,
		       S.SZMIPNO AS SZMIPNO,
		       S.SVBELN AS SVBELN,
		       S.SPOSNR AS SPOSNR,
		       S.STKNUM AS STKNUM,
		       S.STPNUM AS STPNUM,
		       S.SWERKS AS SWERKS,
		       S.SLGORT AS SLGORT,
		       S.SDATBG AS SDATBG,
		       S.STDLNR AS STDLNR,
		       S.STRAID AS STRAID,
		       S.SSORNU AS SSORNU,
		       S.SSORIT AS SSORIT,
		       S.SMBLNR AS SMBLNR,
		       S.SMJAHR AS SMJAHR,
		       S.SZEILE AS SZEILE,
		       S.SXBLNR AS SXBLNR,
		       S.DOORKY AS DOORKY,
		       S.PTLT01 AS PTLT01,
		       S.PTLT02 AS PTLT02,
		       S.PTLT03 AS PTLT03,
		       S.PTLT04 AS PTLT04,
		       S.PTLT05 AS PTLT05,
		       S.PTLT06 AS PTLT06,
		       S.PTLT07 AS PTLT07,
		       S.PTLT08 AS PTLT08,
		       S.PTLT09 AS PTLT09,
		       S.PTLT10 AS PTLT10,
		       S.PTLT11 AS PTLT11,
		       S.PTLT12 AS PTLT12,
		       S.PTLT13 AS PTLT13,
		       S.PTLT14 AS PTLT14,
		       S.PTLT15 AS PTLT15,
		       S.PTLT16 AS PTLT16,
		       S.PTLT17 AS PTLT17,
		       S.PTLT18 AS PTLT18,
		       S.PTLT19 AS PTLT19,
		       S.PTLT20 AS PTLT20,
		       S.PASTKY AS PASTKY,
		       S.ALSTKY AS ALSTKY,
		       S.CREDAT AS CREDAT,
		       S.CRETIM AS CRETIM,
		       S.CREUSR AS CREUSR,
		       S.LMODAT AS LMODAT,
		       S.LMOTIM AS LMOTIM,
		       S.LMOUSR AS LMOUSR,
		       S.INDBZL AS INDBZL,
		       S.INDARC AS INDARC,
		       S.UPDCHK AS UPDCHK,
		       NVL(SM.QTYSTD,0) AS PLIQTY,
		       NVL(SM.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC(MOD(DECODE( NVL(SUM(PK.QTSIWH),0), 0, SUM(S.QTCOMP), NVL(SUM(PK.QTSIWH),0)),SM.QTYSTD) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
		       NVL(  TRUNC(DECODE( NVL(SUM(PK.QTSIWH),0), 0, SUM(S.QTCOMP), NVL(SUM(PK.QTSIWH),0)) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
		       NVL(MOD(DECODE( NVL(SUM(PK.QTSIWH),0), 0, SUM(S.QTCOMP), NVL(SUM(PK.QTSIWH),0)), DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
		       NVL(SM.GRSWGT,0) * NVL(DECODE( NVL(SUM(PK.QTSIWH),0), 0, SUM(S.QTCOMP), NVL(SUM(PK.QTSIWH),0)),0)  AS GRSWGT,
		       NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
		       ' ' ARRIVA, 
		       SR.CARDAT CARDAT, 
		       ' ' CARNUM, 
		       SR.SHIPSQ SHIPSQ, 
		       ' ' SORTSQ, 
		       ' ' DRIVER, 
		       ' ' RECAYN, 
		       SR.TASKKY TASKKY
		  FROM TASDH A INNER JOIN TASDI S ON A.TASKKY = S.TASKKY
		               INNER JOIN TASDR R ON S.TASKKY = R.TASKKY AND S.TASKIT = R.TASKIT
		               INNER JOIN SKUMA SM ON SM.OWNRKY = S.OWNRKY AND SM.SKUKEY = S.SKUKEY
		               LEFT OUTER JOIN (SELECT DISTINCT CARDAT, SHIPSQ, TASKKY
		                                  FROM SHPDR 
		                                 WHERE RECAYN = 'N' AND TASKKY != ' ' AND CARNUM != ' ' ) SR ON SR.TASKKY = A.TASKKY
		               LEFT OUTER JOIN STKKY SK ON SK.STOKKY = R.STOKKY
		               LEFT OUTER JOIN STKKY PK ON PK.SRCSKY = SK.SRCSKY AND PK.LOCAKY = S.LOCASR 
		                                       AND PK.SKUKEY = S.SKUKEY AND PK.LOTNUM = S.LOTNUM AND PK.TRNUID = S.TRNUSR
		               LEFT OUTER JOIN CMCDV C ON C.CMCDKY = 'STATIT' AND C.CMCDVL = S.STATIT
		WHERE 1 = 1
		   AND A.TASKKY IN ( #{TASKKY} )
		   AND S.STATIT IN ('NEW')
		 GROUP BY A.WAREKY, S.QTYUOM, S.TASKKY, S.TASKIT, S.TASKTY, S.RSNCOD, S.STATIT, C.CDESC1, S.OWNRKY, S.SKUKEY, S.LOTNUM,
		          S.ACTCDT, S.ACTCTI, S.TKFLKY, S.STEPNO, S.LSTTFL, S.LOCASR, S.SECTSR, S.PAIDSR, S.TRNUSR, S.STRUTY, S.SMEAKY,
		          S.SUOMKY, S.QTSPUM, S.SDUOKY, S.QTSDUM, S.LOCATG, S.SECTTG, S.PAIDTG, S.TRNUTG, S.TTRUTY, S.TMEAKY, S.TUOMKY,
		          S.QTTPUM, S.TDUOKY, S.QTTDUM, S.LOCAAC, S.SECTAC, S.PAIDAC, S.TRNUAC, S.ATRUTY, S.AMEAKY, S.AUOMKY, S.QTAPUM,
		          S.ADUOKY, S.QTADUM, S.REFDKY, S.REFDIT, S.REFCAT, S.REFDAT, S.PURCKY, S.PURCIT, S.ASNDKY, S.ASNDIT, S.RECVKY,
		          S.RECVIT, S.SHPOKY, S.SHPOIT, S.GRPOKY, S.GRPOIT, S.SADJKY, S.SADJIT, S.SDIFKY, S.SDIFIT, S.PHYIKY, S.PHYIIT,
		          S.DROPID, S.DESC01, S.DESC02, S.ASKU01, S.ASKU02, S.ASKU03, S.ASKU04, S.ASKU05, S.EANCOD, S.GTINCD, S.SKUG01,
		          S.SKUG02, S.SKUG03, S.SKUG04, S.SKUG05, S.GRSWGT, S.NETWGT, S.WGTUNT, S.LENGTH, S.WIDTHW, S.HEIGHT, S.CUBICM,
		          S.CAPACT, S.WORKID, S.WORKNM, S.HHTTID, S.AREAKY, S.LOTA01, S.LOTA02, S.LOTA03, S.LOTA04, S.LOTA05, S.LOTA06,
		          S.LOTA07, S.LOTA08, S.LOTA09, S.LOTA10, S.LOTA11, S.LOTA12, S.LOTA13, S.LOTA14, S.LOTA15, S.LOTA16, S.LOTA17,
		          S.LOTA18, S.LOTA19, S.LOTA20, S.AWMSNO, S.SMANDT, S.SEBELN, S.SEBELP, S.SZMBLNO, S.SZMIPNO, S.SVBELN, S.SPOSNR,
		          S.STKNUM, S.STPNUM, S.SWERKS, S.SLGORT, S.SDATBG, S.STDLNR, S.STRAID, S.SSORNU, S.SSORIT, S.SMBLNR, S.SMJAHR,
		          S.SZEILE, S.SXBLNR, S.DOORKY, S.PTLT01, S.PTLT02, S.PTLT03, S.PTLT04, S.PTLT05, S.PTLT06, S.PTLT07, S.PTLT08,
		          S.PTLT09, S.PTLT10, S.PTLT11, S.PTLT12, S.PTLT13, S.PTLT14, S.PTLT15, S.PTLT16, S.PTLT17, S.PTLT18, S.PTLT19,
		          S.PTLT20, S.PASTKY, S.ALSTKY, S.CREDAT, S.CRETIM, S.CREUSR, S.LMODAT, S.LMOTIM, S.LMOUSR, S.INDBZL, S.INDARC,
		          S.UPDCHK, SM.QTYSTD, SM.QTDUOM, SM.GRSWGT, SR.CARDAT, SR.SHIPSQ, SR.TASKKY
		
		UNION ALL
		       
		SELECT ROW_NUMBER() OVER(ORDER BY S.TASKIT) AS NUM,
		       '0' AS USED,
		       A.WAREKY AS WAREKY,
		       0 AS AVAILABLEQTY,              
		       0 AS AVAILABLEQTYUOM,       
		       S.TASKKY AS TASKKY,
		       S.TASKIT AS TASKIT,
		       S.TASKTY AS TASKTY,
		       S.RSNCOD AS RSNCOD,
		       S.STATIT AS STATIT,
		       CASE WHEN S.STATIT = 'NEW' THEN '미작업'
		            WHEN S.STATIT = 'FPC' THEN '보충완료'
		            WHEN S.STATIT = 'FPA' THEN '보충완료'
		            ELSE ' '
		        END  AS STATITNM,
		       DECODE(S.STATIT, 'FPC', MAX(S.QTCOMP), DECODE( NVL(SUM(S.QTCOMP),0), 0, SUM(S.QTCOMP), NVL(SUM(S.QTCOMP),0))) AS QTTAOR,
		       DECODE(S.STATIT, 'FPC', MAX(S.QTCOMP), DECODE( NVL(SUM(S.QTCOMP),0), 0, SUM(S.QTCOMP), NVL(SUM(S.QTCOMP),0))) AS QTCOMP,
		       S.OWNRKY AS OWNRKY,
		       S.SKUKEY AS SKUKEY,
		       S.LOTNUM AS LOTNUM,
		       S.ACTCDT AS ACTCDT,
		       S.ACTCTI AS ACTCTI,
		       S.QTYUOM AS QTYUOM,
		       S.TKFLKY AS TKFLKY,
		       S.STEPNO AS STEPNO,
		       S.LSTTFL AS LSTTFL,
		       S.LOCASR AS LOCASR,
		       S.SECTSR AS SECTSR,
		       S.PAIDSR AS PAIDSR,
		       S.TRNUSR AS TRNUSR,
		       S.STRUTY AS STRUTY,
		       S.SMEAKY AS SMEAKY,
		       S.SUOMKY AS SUOMKY,
		       S.QTSPUM AS QTSPUM,
		       S.SDUOKY AS SDUOKY,
		       S.QTSDUM AS QTSDUM,
		       S.LOCATG AS LOCATG,
		       S.SECTTG AS SECTTG,
		       S.PAIDTG AS PAIDTG,
		       S.TRNUTG AS TRNUTG,
		       S.TTRUTY AS TTRUTY,
		       S.TMEAKY AS TMEAKY,
		       S.TUOMKY AS TUOMKY,
		       S.QTTPUM AS QTTPUM,
		       S.TDUOKY AS TDUOKY,
		       S.QTTDUM AS QTTDUM,
		       S.LOCATG AS LOCAAC,
		       S.SECTAC AS SECTAC,
		       S.PAIDAC AS PAIDAC,
		       S.TRNUAC AS TRNUAC,
		       S.ATRUTY AS ATRUTY,
		       S.AMEAKY AS AMEAKY,
		       S.AUOMKY AS AUOMKY,
		       S.QTAPUM AS QTAPUM,
		       S.ADUOKY AS ADUOKY,
		       S.QTADUM AS QTADUM,
		       S.REFDKY AS REFDKY,
		       S.REFDIT AS REFDIT,
		       S.REFCAT AS REFCAT,
		       S.REFDAT AS REFDAT,
		       S.PURCKY AS PURCKY,
		       S.PURCIT AS PURCIT,
		       S.ASNDKY AS ASNDKY,
		       S.ASNDIT AS ASNDIT,
		       S.RECVKY AS RECVKY,
		       S.RECVIT AS RECVIT,
		       S.SHPOKY AS SHPOKY,
		       S.SHPOIT AS SHPOIT,
		       S.GRPOKY AS GRPOKY,
		       S.GRPOIT AS GRPOIT,
		       S.SADJKY AS SADJKY,
		       S.SADJIT AS SADJIT,
		       S.SDIFKY AS SDIFKY,
		       S.SDIFIT AS SDIFIT,
		       S.PHYIKY AS PHYIKY,
		       S.PHYIIT AS PHYIIT,
		       S.DROPID AS DROPID,
		       S.DESC01 AS DESC01,
		       S.DESC02 AS DESC02,
		       S.ASKU01 AS ASKU01,
		       S.ASKU02 AS ASKU02,
		       S.ASKU03 AS ASKU03,
		       S.ASKU04 AS ASKU04,
		       S.ASKU05 AS ASKU05,
		       S.EANCOD AS EANCOD,
		       S.GTINCD AS GTINCD,
		       S.SKUG01 AS SKUG01,
		       S.SKUG02 AS SKUG02,
		       S.SKUG03 AS SKUG03,
		       S.SKUG04 AS SKUG04,
		       S.SKUG05 AS SKUG05,
		       S.GRSWGT AS GRSWGT,
		       S.NETWGT AS NETWGT,
		       S.WGTUNT AS WGTUNT,
		       S.LENGTH AS LENGTH,
		       S.WIDTHW AS WIDTHW,
		       S.HEIGHT AS HEIGHT,
		       S.CUBICM AS CUBICM,
		       S.CAPACT AS CAPACT,
		       S.WORKID AS WORKID,
		       S.WORKNM AS WORKNM,
		       S.HHTTID AS HHTTID,
		       S.AREAKY AS AREAKY,
		       S.LOTA01 AS LOTA01,
		       S.LOTA02 AS LOTA02,
		       S.LOTA03 AS LOTA03,
		       S.LOTA04 AS LOTA04,
		       S.LOTA05 AS LOTA05,
		       S.LOTA06 AS LOTA06,
		       S.LOTA07 AS LOTA07,
		       S.LOTA08 AS LOTA08,
		       S.LOTA09 AS LOTA09,
		       S.LOTA10 AS LOTA10,
		       S.LOTA11 AS LOTA11,
		       S.LOTA12 AS LOTA12,
		       S.LOTA13 AS LOTA13,
		       S.LOTA14 AS LOTA14,
		       S.LOTA15 AS LOTA15,
		       S.LOTA16 AS LOTA16,
		       S.LOTA17 AS LOTA17,
		       S.LOTA18 AS LOTA18,
		       S.LOTA19 AS LOTA19,
		       S.LOTA20 AS LOTA20,
		       S.AWMSNO AS AWMSNO,
		       S.SMANDT AS SMANDT,
		       S.SEBELN AS SEBELN,
		       S.SEBELP AS SEBELP,
		       S.SZMBLNO AS SZMBLNO,
		       S.SZMIPNO AS SZMIPNO,
		       S.SVBELN AS SVBELN,
		       S.SPOSNR AS SPOSNR,
		       S.STKNUM AS STKNUM,
		       S.STPNUM AS STPNUM,
		       S.SWERKS AS SWERKS,
		       S.SLGORT AS SLGORT,
		       S.SDATBG AS SDATBG,
		       S.STDLNR AS STDLNR,
		       S.STRAID AS STRAID,
		       S.SSORNU AS SSORNU,
		       S.SSORIT AS SSORIT,
		       S.SMBLNR AS SMBLNR,
		       S.SMJAHR AS SMJAHR,
		       S.SZEILE AS SZEILE,
		       S.SXBLNR AS SXBLNR,
		       S.DOORKY AS DOORKY,
		       S.PTLT01 AS PTLT01,
		       S.PTLT02 AS PTLT02,
		       S.PTLT03 AS PTLT03,
		       S.PTLT04 AS PTLT04,
		       S.PTLT05 AS PTLT05,
		       S.PTLT06 AS PTLT06,
		       S.PTLT07 AS PTLT07,
		       S.PTLT08 AS PTLT08,
		       S.PTLT09 AS PTLT09,
		       S.PTLT10 AS PTLT10,
		       S.PTLT11 AS PTLT11,
		       S.PTLT12 AS PTLT12,
		       S.PTLT13 AS PTLT13,
		       S.PTLT14 AS PTLT14,
		       S.PTLT15 AS PTLT15,
		       S.PTLT16 AS PTLT16,
		       S.PTLT17 AS PTLT17,
		       S.PTLT18 AS PTLT18,
		       S.PTLT19 AS PTLT19,
		       S.PTLT20 AS PTLT20,
		       S.PASTKY AS PASTKY,
		       S.ALSTKY AS ALSTKY,
		       S.CREDAT AS CREDAT,
		       S.CRETIM AS CRETIM,
		       S.CREUSR AS CREUSR,
		       S.LMODAT AS LMODAT,
		       S.LMOTIM AS LMOTIM,
		       S.LMOUSR AS LMOUSR,
		       S.INDBZL AS INDBZL,
		       S.INDARC AS INDARC, 
		       S.UPDCHK AS UPDCHK,
		       NVL(SM.QTYSTD,0) AS PLIQTY,
		       NVL(SM.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC(MOD(DECODE( NVL(SUM(S.QTCOMP),0), 0, SUM(S.QTCOMP), NVL(SUM(S.QTCOMP),0)),SM.QTYSTD) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
		       NVL(  TRUNC(DECODE( NVL(SUM(S.QTCOMP),0), 0, SUM(S.QTCOMP), NVL(SUM(S.QTCOMP),0)) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
		       NVL(MOD(DECODE( NVL(SUM(S.QTCOMP),0), 0, SUM(S.QTCOMP), NVL(SUM(S.QTCOMP),0)), DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
		       NVL(SM.GRSWGT,0) * NVL(DECODE( NVL(SUM(S.QTCOMP),0), 0, SUM(S.QTCOMP), NVL(SUM(S.QTCOMP),0)),0)  AS GRSWGT,
		       NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
		       ' ' ARRIVA, 
		       SR.CARDAT CARDAT, 
		       ' ' CARNUM, 
		       SR.SHIPSQ SHIPSQ, 
		       ' ' SORTSQ, 
		       ' ' DRIVER, 
		       ' ' RECAYN, 
		       SR.TASKKY TASKKY
		  FROM TASDH A INNER JOIN TASDI S ON A.TASKKY = S.TASKKY
		               INNER JOIN TASDR R ON S.TASKKY = R.TASKKY AND S.TASKIT = R.TASKIT
		               INNER JOIN SKUMA SM ON SM.OWNRKY = S.OWNRKY AND SM.SKUKEY = S.SKUKEY
		               LEFT OUTER JOIN (SELECT DISTINCT CARDAT, SHIPSQ, TASKKY 
		                                  FROM SHPDR 
		                                 WHERE RECAYN = 'N' AND TASKKY != ' ' AND CARNUM != ' ' ) SR ON SR.TASKKY = A.TASKKY
		               LEFT OUTER JOIN CMCDV C ON C.CMCDKY = 'STATIT' AND C.CMCDVL = S.STATIT
		WHERE 1 = 1
		   AND A.TASKKY IN ( #{TASKKY} )
		   AND S.STATIT IN ('FPC')
		GROUP BY A.WAREKY, S.QTYUOM, S.TASKKY, S.TASKIT, S.TASKTY, S.RSNCOD, S.STATIT, C.CDESC1, S.OWNRKY, S.SKUKEY, S.LOTNUM, 
		         S.ACTCDT, S.ACTCTI, S.TKFLKY, S.STEPNO, S.LSTTFL, S.LOCASR, S.SECTSR, S.PAIDSR, S.TRNUSR, S.STRUTY, S.SMEAKY, 
		         S.SUOMKY, S.QTSPUM, S.SDUOKY, S.QTSDUM, S.LOCATG, S.SECTTG, S.PAIDTG, S.TRNUTG, S.TTRUTY, S.TMEAKY, S.TUOMKY,
		         S.QTTPUM, S.TDUOKY, S.QTTDUM, S.LOCAAC, S.SECTAC, S.PAIDAC, S.TRNUAC, S.ATRUTY, S.AMEAKY, S.AUOMKY, S.QTAPUM,
		         S.ADUOKY, S.QTADUM, S.REFDKY, S.REFDIT, S.REFCAT, S.REFDAT, S.PURCKY, S.PURCIT, S.ASNDKY, S.ASNDIT, S.RECVKY,
		         S.RECVIT, S.SHPOKY, S.SHPOIT, S.GRPOKY, S.GRPOIT, S.SADJKY, S.SADJIT, S.SDIFKY, S.SDIFIT, S.PHYIKY, S.PHYIIT,
		         S.DROPID, S.DESC01, S.DESC02, S.ASKU01, S.ASKU02, S.ASKU03, S.ASKU04, S.ASKU05, S.EANCOD, S.GTINCD, S.SKUG01,
		         S.SKUG02, S.SKUG03, S.SKUG04, S.SKUG05, S.GRSWGT, S.NETWGT, S.WGTUNT, S.LENGTH, S.WIDTHW, S.HEIGHT, S.CUBICM,
		         S.CAPACT, S.WORKID, S.WORKNM, S.HHTTID, S.AREAKY, S.LOTA01, S.LOTA02, S.LOTA03, S.LOTA04, S.LOTA05, S.LOTA06,
		         S.LOTA07, S.LOTA08, S.LOTA09, S.LOTA10, S.LOTA11, S.LOTA12, S.LOTA13, S.LOTA14, S.LOTA15, S.LOTA16, S.LOTA17,
		         S.LOTA18, S.LOTA19, S.LOTA20, S.AWMSNO, S.SMANDT, S.SEBELN, S.SEBELP, S.SZMBLNO, S.SZMIPNO, S.SVBELN, S.SPOSNR,
		         S.STKNUM, S.STPNUM, S.SWERKS, S.SLGORT, S.SDATBG, S.STDLNR, S.STRAID, S.SSORNU, S.SSORIT, S.SMBLNR, S.SMJAHR,
		         S.SZEILE, S.SXBLNR, S.DOORKY, S.PTLT01, S.PTLT02, S.PTLT03, S.PTLT04, S.PTLT05, S.PTLT06, S.PTLT07, S.PTLT08,
		         S.PTLT09, S.PTLT10, S.PTLT11, S.PTLT12, S.PTLT13, S.PTLT14, S.PTLT15, S.PTLT16, S.PTLT17, S.PTLT18, S.PTLT19,
		         S.PTLT20, S.PASTKY, S.ALSTKY, S.CREDAT, S.CRETIM, S.CREUSR, S.LMODAT, S.LMOTIM, S.LMOUSR, S.INDBZL, S.INDARC,
		         S.UPDCHK, SM.QTYSTD, SM.QTDUOM, SM.GRSWGT, SR.CARDAT, SR.SHIPSQ, SR.TASKKY
		ORDER BY 1
  		
  </select>  
  
  <!-- [DL40] 오더피킹완료 : 아이템 조회 :  TASK.CONFIRM.FIND_TARGET_TASDI_ALLNO -->
  <select id="DL40_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT A.WAREKY AS WAREKY,
           B.TASKKY AS TASKKY,
           B.TASKIT AS TASKIT,
           B.TASKTY AS TASKTY,
           B.RSNCOD AS RSNCOD,
           B.TASRSN AS TASRSN,
           B.STATIT AS STATIT,
           (SELECT X.CDESC1 FROM CMCDV X WHERE X.CMCDKY = 'STATIT' AND X.CMCDVL = B.STATIT) AS STATITNM,
           B.QTTAOR AS QTTAOR,
           (CASE
              WHEN B.ACTCDT = '00000000' THEN B.QTTAOR
              ELSE B.QTCOMP END) AS QTCOMP,
           B.OWNRKY AS OWNRKY,
           B.SKUKEY AS SKUKEY,
           B.LOTNUM AS LOTNUM,
           B.ACTCDT AS ACTCDT,
           B.ACTCTI AS ACTCTI,
           B.QTYUOM AS QTYUOM,
           B.TKFLKY AS TKFLKY,
           B.STEPNO AS STEPNO,
           B.LSTTFL AS LSTTFL,
           B.LOCASR AS LOCASR,
           B.SECTSR AS SECTSR,
           B.PAIDSR AS PAIDSR,
           B.TRNUSR AS TRNUSR,
           B.STRUTY AS STRUTY,
           B.SMEAKY AS SMEAKY,
           B.SUOMKY AS SUOMKY,
           B.QTSPUM AS QTSPUM,
           B.SDUOKY AS SDUOKY,
           B.QTSDUM AS QTSDUM,
           B.LOCATG AS LOCATG,
           B.SECTTG AS SECTTG,
           B.PAIDTG AS PAIDTG,
           B.TRNUTG AS TRNUTG,
           B.TTRUTY AS TTRUTY,
           B.TMEAKY AS TMEAKY,
           B.TUOMKY AS TUOMKY,
           B.QTTPUM AS QTTPUM,
           B.TDUOKY AS TDUOKY,
           B.QTTDUM AS QTTDUM,
           (CASE
              WHEN B.ACTCDT = '00000000' THEN B.LOCATG
              ELSE B.LOCAAC END) AS LOCAAC,
           (CASE
              WHEN B.ACTCDT = '00000000' THEN B.SECTTG
              ELSE B.SECTAC END) AS SECTAC,
           (CASE
              WHEN B.ACTCDT = '00000000' THEN B.PAIDTG
              ELSE B.PAIDAC END) AS PAIDAC,
           (CASE
              WHEN B.ACTCDT = '00000000' THEN B.TRNUTG
              ELSE B.TRNUAC END) AS TRNUAC,
           (CASE
              WHEN B.ACTCDT = '00000000' THEN B.TTRUTY
              ELSE B.ATRUTY END) AS ATRUTY,
           DECODE(B.ACTCDT, '00000000', B.TMEAKY, B.AMEAKY) AS AMEAKY,
           DECODE(B.ACTCDT, '00000000', DECODE(B.TASKTY, 'PT', B.SUOMKY, B.TUOMKY), B.AUOMKY) AS AUOMKY,
           DECODE(B.ACTCDT, '00000000', B.QTTPUM, B.QTAPUM) AS QTAPUM,
           DECODE(B.ACTCDT, '00000000', B.TDUOKY, B.ADUOKY) AS ADUOKY,
           DECODE(B.ACTCDT, '00000000', B.QTTDUM, B.QTADUM) AS QTADUM,
           B.REFDKY AS REFDKY,
           B.REFDIT AS REFDIT,
           B.REFCAT AS REFCAT,
           B.REFDAT AS REFDAT,
           B.PURCKY AS PURCKY,
           B.PURCIT AS PURCIT,
           B.ASNDKY AS ASNDKY,
           B.ASNDIT AS ASNDIT,
           B.RECVKY AS RECVKY,
           B.RECVIT AS RECVIT,
           B.SHPOKY AS SHPOKY,
           B.SHPOIT AS SHPOIT,
           B.GRPOKY AS GRPOKY,
           B.GRPOIT AS GRPOIT,
           B.SADJKY AS SADJKY,
           B.SADJIT AS SADJIT,
           B.SDIFKY AS SDIFKY,
           B.SDIFIT AS SDIFIT,
           B.PHYIKY AS PHYIKY,
           B.PHYIIT AS PHYIIT,
           B.DROPID AS DROPID,
           B.DESC01 AS DESC01,
           B.DESC02 AS DESC02,
           B.ASKU01 AS ASKU01,
           B.ASKU02 AS ASKU02,
           B.ASKU03 AS ASKU03,
           B.ASKU04 AS ASKU04,
           B.ASKU05 AS ASKU05,
           B.EANCOD AS EANCOD,
           B.GTINCD AS GTINCD,
           B.SKUG01 AS SKUG01,
           B.SKUG02 AS SKUG02,
           B.SKUG03 AS SKUG03,
           B.SKUG04 AS SKUG04,
           B.SKUG05 AS SKUG05,
           B.GRSWGT AS GRSWGT,
           B.NETWGT AS NETWGT,
           B.WGTUNT AS WGTUNT,
           B.LENGTH AS LENGTH,
           B.WIDTHW AS WIDTHW,
           B.HEIGHT AS HEIGHT,
           B.CUBICM AS CUBICM,
           B.CAPACT AS CAPACT,
           B.WORKID AS WORKID,
           B.WORKNM AS WORKNM,
           B.HHTTID AS HHTTID,
           B.AREAKY AS AREAKY,
           B.LOTA01 AS LOTA01,
           B.LOTA02 AS LOTA02,
           B.LOTA03 AS LOTA03,
           B.LOTA04 AS LOTA04,
           B.LOTA05 AS LOTA05,
           B.LOTA06 AS LOTA06,
           B.LOTA07 AS LOTA07,
           B.LOTA08 AS LOTA08,
           B.LOTA09 AS LOTA09,
           B.LOTA10 AS LOTA10,
           B.LOTA11 AS LOTA11,
           B.LOTA12 AS LOTA12,
           B.LOTA13 AS LOTA13,
           B.LOTA14 AS LOTA14,
           B.LOTA15 AS LOTA15,
           B.LOTA16 AS LOTA16,
           B.LOTA17 AS LOTA17,
           B.LOTA18 AS LOTA18,
           B.LOTA19 AS LOTA19,
           B.LOTA20 AS LOTA20,
           B.AWMSNO AS AWMSNO,
           B.AWMSTS AS AWMSTS,
           B.SMANDT AS SMANDT,
           B.SEBELN AS SEBELN,
           B.SEBELP AS SEBELP,
           B.SZMBLNO AS SZMBLNO,
           B.SZMIPNO AS SZMIPNO,
           B.STRAID AS STRAID,
           B.SVBELN AS SVBELN,
           B.SPOSNR AS SPOSNR,
           B.STKNUM AS STKNUM,
           B.STPNUM AS STPNUM,
           B.SWERKS AS SWERKS,
           B.SLGORT AS SLGORT,
           B.SDATBG AS SDATBG,
           B.STDLNR AS STDLNR,
           B.SSORNU AS SSORNU,
           B.SSORIT AS SSORIT,
           B.SMBLNR AS SMBLNR,
           B.SZEILE AS SZEILE,
           B.SMJAHR AS SMJAHR,
           B.SXBLNR AS SXBLNR,
           B.SAPSTS AS SAPSTS,
           B.DOORKY AS DOORKY,
           B.PTLT01 AS PTLT01,
           B.PTLT02 AS PTLT02,
           B.PTLT03 AS PTLT03,
           B.PTLT04 AS PTLT04,
           B.PTLT05 AS PTLT05,
           B.PTLT06 AS PTLT06,
           B.PTLT07 AS PTLT07,
           B.PTLT08 AS PTLT08,
           B.PTLT09 AS PTLT09,
           B.PTLT10 AS PTLT10,
           B.PTLT11 AS PTLT11,
           B.PTLT12 AS PTLT12,
           B.PTLT13 AS PTLT13,
           B.PTLT14 AS PTLT14,
           B.PTLT15 AS PTLT15,
           B.PTLT16 AS PTLT16,
           B.PTLT17 AS PTLT17,
           B.PTLT18 AS PTLT18,
           B.PTLT19 AS PTLT19,
           B.PTLT20 AS PTLT20,
           C.AUTLOC AS AUTLOC,
           B.CREDAT AS CREDAT,
           B.CRETIM AS CRETIM,
           B.CREUSR AS CREUSR,
           (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = B.CREUSR) AS CUSRNM,
           B.LMODAT AS LMODAT,
           B.LMOTIM AS LMOTIM,
           B.LMOUSR AS LMOUSR,
           (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = B.LMOUSR) AS LUSRNM,
           B.INDBZL AS INDBZL,
           B.INDARC AS INDARC,
           B.UPDCHK AS UPDCHK,
           
           SR.ARRIVA AS ARRIVA,
           SR.CARDAT AS CARDAT,
           SR.CARNUM AS CARNUM,
           SR.SHIPSQ AS SHIPSQ,
           SR.SORTSQ AS SORTSQ,
           SR.DRIVER AS DRIVER,
           SR.RECAYN AS RECAYN              
      FROM TASDH A
      INNER JOIN TASDI B
              ON A.TASKKY = B.TASKKY
      INNER JOIN LOCMA C
              ON A.WAREKY = C.WAREKY
             AND B.LOCASR = C.LOCAKY
    
      LEFT OUTER JOIN (SELECT DISTINCT SHPOKY, SHPOIT,
                                            CARDAT,DRIVER, CARNUM, ARRIVA ,
                                            SHIPSQ, TASKKY,RECAYN,SORTSQ
                              FROM SHPDR)  SR
              ON SR.SHPOKY = B.SHPOKY 
             AND SR.SHPOIT = B.SHPOIT              
      LEFT OUTER JOIN SHPDI SI
              ON SI.SHPOKY = B.SHPOKY 
             AND SI.SHPOIT = B.SHPOIT
                  
     WHERE A.TASKKY = B.TASKKY
    
       AND  A.TASKKY = #{TASKKY}
     ORDER BY B.TASKKY, B.TASKIT
    </select>
  <!-- [DL40] 오더피킹 저장 : 아이템 조회 :  TASK.CONFIRM.FIND_TARGET_TASDI_2 -->
  <select id="DL40_PICK_ITEM_MAP" parameterType="hashmap" resultType="DataMap">
  
        
    SELECT TRIM(' 1 ')||B.TASKIT AS ROWSEQUENCE,
           (CASE
              WHEN D.ROWCK IS NULL THEN ' '
              ELSE D.ROWCK END) AS ROWCK,
           A.WAREKY AS WAREKY,
           B.TASKKY AS TASKKY,
           B.TASKIT AS TASKIT,
           B.TASKTY AS TASKTY,
           B.RSNCOD AS RSNCOD,
           CASE WHEN 'DL40' IN ('GP51','SO96','MV03') THEN B.TASRSN
                ELSE D.TASRSN END AS TASRSN,
           B.STATIT AS STATIT,
           (SELECT X.CDESC1 FROM CMCDV X WHERE X.CMCDKY = 'STATIT' AND X.CMCDVL = B.STATIT) AS STATITNM,
           B.QTTAOR AS QTTAOR,
           
    
     
    (CASE
          WHEN D.QTCOMP IS NULL AND B.ACTCDT = '00000000' THEN B.QTTAOR
          WHEN D.QTCOMP IS NULL THEN B.QTCOMP
          WHEN B.QTCOMP = D.QTCOMP THEN D.QTCOMP
          ELSE D.QTCOMP END)   AS QTCOMP,
     
    
           B.OWNRKY AS OWNRKY,
           B.SKUKEY AS SKUKEY,
           B.LOTNUM AS LOTNUM,
           B.ACTCDT AS ACTCDT,
           B.ACTCTI AS ACTCTI,
           B.QTYUOM AS QTYUOM,
           B.TKFLKY AS TKFLKY,
           B.STEPNO AS STEPNO,
           B.LSTTFL AS LSTTFL,
           B.LOCASR AS LOCASR,
           B.SECTSR AS SECTSR,
           B.PAIDSR AS PAIDSR,
           B.TRNUSR AS TRNUSR,
           B.STRUTY AS STRUTY,
           B.SMEAKY AS SMEAKY,
           B.SUOMKY AS SUOMKY,
           B.QTSPUM AS QTSPUM,
           B.SDUOKY AS SDUOKY,
           B.QTSDUM AS QTSDUM,
           B.LOCATG AS LOCATG,
           B.SECTTG AS SECTTG,
           B.PAIDTG AS PAIDTG,
           B.TRNUTG AS TRNUTG,
           B.TTRUTY AS TTRUTY,
           B.TMEAKY AS TMEAKY,
           B.TUOMKY AS TUOMKY,
           B.QTTPUM AS QTTPUM,
           B.TDUOKY AS TDUOKY,
           B.QTTDUM AS QTTDUM,
           (CASE
              WHEN D.LOCAAC IS NULL AND B.ACTCDT = '00000000' THEN B.LOCATG
              WHEN D.LOCAAC IS NULL THEN B.LOCAAC
              WHEN B.LOCAAC = D.LOCAAC  THEN D.LOCAAC
              ELSE D.LOCAAC END) AS LOCAAC,
           (CASE
              WHEN D.SECTAC IS NULL AND B.ACTCDT = '00000000' THEN B.SECTTG
              WHEN D.SECTAC IS NULL THEN B.SECTAC
              WHEN B.SECTAC = D.SECTAC THEN D.SECTAC
              ELSE D.SECTAC END) AS SECTAC,
           (CASE
              WHEN D.PAIDAC IS NULL AND B.ACTCDT = '00000000' THEN B.PAIDTG
              WHEN D.PAIDAC IS NULL THEN B.PAIDAC
              WHEN B.PAIDAC = D.PAIDAC THEN D.PAIDAC
              ELSE D.PAIDAC END) AS PAIDAC,
           (CASE
              WHEN D.TRNUAC IS NULL AND B.ACTCDT = '00000000' THEN B.TRNUTG
              WHEN D.TRNUAC IS NULL THEN B.TRNUAC
              WHEN B.TRNUAC = D.TRNUAC THEN D.TRNUAC
              ELSE D.TRNUAC END) AS TRNUAC,
           (CASE
              WHEN D.ATRUTY IS NULL AND B.ACTCDT = '00000000' THEN B.TTRUTY
              WHEN D.ATRUTY IS NULL THEN B.ATRUTY
              WHEN B.ATRUTY = D.ATRUTY THEN D.ATRUTY
              ELSE D.ATRUTY END) AS ATRUTY,
           DECODE(B.ACTCDT, '00000000', B.TMEAKY, B.AMEAKY) AS AMEAKY,
           DECODE(B.ACTCDT, '00000000', DECODE(B.TASKTY, 'PT', B.SUOMKY, B.TUOMKY), B.AUOMKY) AS AUOMKY,
           DECODE(B.ACTCDT, '00000000', B.QTTPUM, B.QTAPUM) AS QTAPUM,
           DECODE(B.ACTCDT, '00000000', B.TDUOKY, B.ADUOKY) AS ADUOKY,
           DECODE(B.ACTCDT, '00000000', B.QTTDUM, B.QTADUM) AS QTADUM,
           B.REFDKY AS REFDKY,
           B.REFDIT AS REFDIT,
           B.REFCAT AS REFCAT,
           B.REFDAT AS REFDAT,
           B.PURCKY AS PURCKY,
           B.PURCIT AS PURCIT,
           B.ASNDKY AS ASNDKY,
           B.ASNDIT AS ASNDIT,
           B.RECVKY AS RECVKY,
           B.RECVIT AS RECVIT,
           B.SHPOKY AS SHPOKY,
           B.SHPOIT AS SHPOIT,
           B.GRPOKY AS GRPOKY,
           B.GRPOIT AS GRPOIT,
           B.SADJKY AS SADJKY,
           B.SADJIT AS SADJIT,
           B.SDIFKY AS SDIFKY,
           B.SDIFIT AS SDIFIT,
           B.PHYIKY AS PHYIKY,
           B.PHYIIT AS PHYIIT,
           B.DROPID AS DROPID,
           B.DESC01 AS DESC01,
           B.DESC02 AS DESC02,
           B.ASKU01 AS ASKU01,
           B.ASKU02 AS ASKU02,
           B.ASKU03 AS ASKU03,
           B.ASKU04 AS ASKU04,
           B.ASKU05 AS ASKU05,
           B.EANCOD AS EANCOD,
           B.GTINCD AS GTINCD,
           B.SKUG01 AS SKUG01,
           B.SKUG02 AS SKUG02,
           B.SKUG03 AS SKUG03,
           B.SKUG04 AS SKUG04,
           B.SKUG05 AS SKUG05,
           B.GRSWGT AS GRSWGT,
           B.NETWGT AS NETWGT,
           B.WGTUNT AS WGTUNT,
           B.LENGTH AS LENGTH,
           B.WIDTHW AS WIDTHW,
           B.HEIGHT AS HEIGHT,
           B.CUBICM AS CUBICM,
           B.CAPACT AS CAPACT,
           B.WORKID AS WORKID,
           B.WORKNM AS WORKNM,
           B.HHTTID AS HHTTID,
           B.AREAKY AS AREAKY,
           B.LOTA01 AS LOTA01,
           B.LOTA02 AS LOTA02,
           B.LOTA03 AS LOTA03,
           B.LOTA04 AS LOTA04,
           B.LOTA05 AS LOTA05,
           B.LOTA06 AS LOTA06,
           B.LOTA07 AS LOTA07,
           B.LOTA08 AS LOTA08,
           B.LOTA09 AS LOTA09,
           B.LOTA10 AS LOTA10,
           B.LOTA11 AS LOTA11,
           B.LOTA12 AS LOTA12,
           B.LOTA13 AS LOTA13,
           B.LOTA14 AS LOTA14,
           B.LOTA15 AS LOTA15,
           B.LOTA16 AS LOTA16,
           B.LOTA17 AS LOTA17,
           B.LOTA18 AS LOTA18,
           B.LOTA19 AS LOTA19,
           B.LOTA20 AS LOTA20,
           B.AWMSNO AS AWMSNO,
           B.AWMSTS AS AWMSTS,
           B.SMANDT AS SMANDT,
           B.SEBELN AS SEBELN,
           B.SEBELP AS SEBELP,
           B.SZMBLNO AS SZMBLNO,
           B.SZMIPNO AS SZMIPNO,
           B.STRAID AS STRAID,
           B.SVBELN AS SVBELN,
           B.SPOSNR AS SPOSNR,
           B.STKNUM AS STKNUM,
           B.STPNUM AS STPNUM,
           B.SWERKS AS SWERKS,
           B.SLGORT AS SLGORT,
           B.SDATBG AS SDATBG,
           B.STDLNR AS STDLNR,
           B.SSORNU AS SSORNU,
           B.SSORIT AS SSORIT,
           B.SMBLNR AS SMBLNR,
           B.SZEILE AS SZEILE,
           B.SMJAHR AS SMJAHR,
           B.SXBLNR AS SXBLNR,
           B.SAPSTS AS SAPSTS,
           B.DOORKY AS DOORKY,
           B.PTLT01 AS PTLT01,
           B.PTLT02 AS PTLT02,
           B.PTLT03 AS PTLT03,
           B.PTLT04 AS PTLT04,
           B.PTLT05 AS PTLT05,
           B.PTLT06 AS PTLT06,
           B.PTLT07 AS PTLT07,
           B.PTLT08 AS PTLT08,
           B.PTLT09 AS PTLT09,
           B.PTLT10 AS PTLT10,
           B.PTLT11 AS PTLT11,
           B.PTLT12 AS PTLT12,
           B.PTLT13 AS PTLT13,
           B.PTLT14 AS PTLT14,
           B.PTLT15 AS PTLT15,
           B.PTLT16 AS PTLT16,
           B.PTLT17 AS PTLT17,
           B.PTLT18 AS PTLT18,
           B.PTLT19 AS PTLT19,
           B.PTLT20 AS PTLT20,
           C.AUTLOC AS AUTLOC,
           B.CREDAT AS CREDAT,
           B.CRETIM AS CRETIM,
           B.CREUSR AS CREUSR,
           (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = B.CREUSR) AS CUSRNM,
           B.LMODAT AS LMODAT,
           B.LMOTIM AS LMOTIM,
           B.LMOUSR AS LMOUSR,
           (SELECT X.NMLAST FROM USRMA X WHERE X.USERID = B.LMOUSR) AS LUSRNM,
           B.INDBZL AS INDBZL,
           B.INDARC AS INDARC,
           B.UPDCHK AS UPDCHK,
    
           SM.QTDUOM AS BXIQTY,
           SM.QTYSTD AS PLIQTY,
           TRUNC(B.QTTAOR/SM.QTDUOM) AS BOXQTY,
           NVL(  TRUNC(B.QTTAOR / DECODE(SM.QTYSTD,0, NULL,SM.QTYSTD))  ,0) AS PLTQTY,
           MOD(B.QTTAOR,SM.QTDUOM) AS REMQTY,
           NVL(SM.GRSWGT,0) * NVL(B.QTTAOR,0)  AS GRSWGT,
           NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
           NVL(SM.NETWGT,0) * NVL(B.QTTAOR,0)  AS NETWGT,
           NVL(SM.NETWGT,0)   AS NETWGTCNT   
    
      FROM TASDH A
           INNER JOIN TASDI B
                   ON A.TASKKY = B.TASKKY
           INNER JOIN LOCMA C
                   ON C.WAREKY = A.WAREKY 
                  AND C.LOCAKY = B.LOCASR
           INNER JOIN SKUMA SM
                   ON SM.OWNRKY = B.OWNRKY
                  AND SM.SKUKEY = B.SKUKEY
           LEFT OUTER JOIN 
           ( SELECT 1 AS ROWSEQ,'V' AS ROWCK,#{TASKKY} AS TASKKY,#{TASKIT} AS TASKIT,TO_NUMBER(#{QTCOMP}) AS QTCOMP,#{LOCAAC} AS LOCAAC,#{SECTAC} AS SECTAC,#{PAIDAC} AS PAIDAC,#{TRNUAC} AS TRNUAC,#{RSNCOD} AS RSNCOD,#{TASRSN} AS TASRSN,#{ATRUTY} AS ATRUTY FROM DUAL ) D
                  ON  B.TASKKY = D.TASKKY
                 AND  B.TASKIT = D.TASKIT 
     WHERE 1 = 1
       AND A.TASKKY = #{TASKKY}
       AND B.TASKIT = #{TASKIT}
     
       AND B.ACTCDT = '00000000'
     
     ORDER BY B.TASKKY, B.TASKIT
    </select>   
    
  <!-- [DL40] TASDI : 상세 조회   -->
  <select id="DL40_TASDI_MAP" parameterType="hashmap" resultType="DataMap">
  
    SELECT     
        TASKTY
      , RSNCOD
      , STATIT
      , QTTAOR
      , QTCOMP
      , QTYFCN
      , OWNRKY
      , SKUKEY
      , LOTNUM
      , ACTCDT
      , ACTCTI
      , QTYUOM
      , TKFLKY
      , STEPNO
      , LSTTFL
      , LOCASR
      , SECTSR
      , PAIDSR
      , TRNUSR
      , STRUTY
      , SMEAKY
      , SUOMKY
      , QTSPUM
      , SDUOKY
      , QTSDUM
      , LOCATG
      , SECTTG
      , PAIDTG
      , TRNUTG
      , TTRUTY
      , TMEAKY
      , TUOMKY
      , QTTPUM
      , TDUOKY
      , QTTDUM
      , LOCAAC
      , SECTAC
      , PAIDAC
      , TRNUAC
      , ATRUTY
      , AMEAKY
      , AUOMKY
      , QTAPUM
      , ADUOKY
      , QTADUM
      , REFDKY
      , REFDIT
      , REFCAT
      , REFDAT
      , PURCKY
      , PURCIT
      , ASNDKY
      , ASNDIT
      , RECVKY
      , RECVIT
      , SHPOKY
      , SHPOIT
      , GRPOKY
      , GRPOIT
      , SADJKY
      , SADJIT
      , SDIFKY
      , SDIFIT
      , PHYIKY
      , PHYIIT
      , DROPID
      , DESC01
      , DESC02
      , ASKU01
      , ASKU02
      , ASKU03
      , ASKU04
      , ASKU05
      , EANCOD
      , GTINCD
      , SKUG01
      , SKUG02
      , SKUG03
      , SKUG04
      , SKUG05
      , GRSWGT
      , NETWGT
      , WGTUNT
      , LENGTH
      , WIDTHW
      , HEIGHT
      , CUBICM
      , CAPACT
      , WORKID
      , WORKNM
      , HHTTID
      , AREAKY
      , LOTA01
      , LOTA02
      , LOTA03
      , LOTA04
      , LOTA05
      , LOTA06
      , LOTA07
      , LOTA08
      , LOTA09
      , LOTA10
      , LOTA11
      , LOTA12
      , LOTA13
      , LOTA14
      , LOTA15
      , LOTA16
      , LOTA17
      , LOTA18
      , LOTA19
      , LOTA20
      , AWMSNO
      , AWMSTS
      , SMANDT
      , SEBELN
      , SEBELP
      , SZMBLNO
      , SZMIPNO
      , STRAID
      , SVBELN
      , SPOSNR
      , STKNUM
      , STPNUM
      , SWERKS
      , SLGORT
      , SDATBG
      , STDLNR
      , SSORNU
      , SSORIT
      , SMBLNR
      , SZEILE
      , SMJAHR
      , SXBLNR
      , SAPSTS
      , DOORKY
      , PTLT01
      , PTLT02
      , PTLT03
      , PTLT04
      , PTLT05
      , PTLT06
      , PTLT07
      , PTLT08
      , PTLT09
      , PTLT10
      , PTLT11
      , PTLT12
      , PTLT13
      , PTLT14
      , PTLT15
      , PTLT16
      , PTLT17
      , PTLT18
      , PTLT19
      , PTLT20
      , PASTKY
      , ALSTKY
      , SBKTXT
      , TASRSN
      , CREDAT
      , CRETIM
      , CREUSR
      , LMODAT
      , LMOTIM
      , LMOUSR
      , INDBZL
      , INDARC
      , UPDCHK
    FROM TASDI
    WHERE 1=1
      AND TASKKY = #{TASKKY}
      AND TASKIT = #{TASKIT}
    </select>
    
    <!-- [DL40] LOCMA : 상세 조회   -->
  <select id="DL40_LOCMA_MAP" parameterType="hashmap" resultType="DataMap">
  
    SELECT 
        LOCATY
      , SHORTX
      , TASKTY
      , ZONEKY
      , AREAKY
      , TKZONE
      , FACLTY
      , ARLVLL
      , INDCPC
      , INDTUT
      , IBROUT
      , OBROUT
      , RPROUT
      , STATUS
      , ABCANV
      , LENGTH
      , WIDTHW
      , HEIGHT
      , CUBICM
      , MAXCPC
      , MAXQTY
      , MAXWGT
      , MAXLDR
      , MAXSEC
      , MIXSKU
      , MIXLOT
      , RPNCAT
      , INDQTC
      , QTYCHK
      , NEDSID
      , INDUPA
      , INDUPK
      , AUTLOC
      , CREDAT
      , CRETIM
      , CREUSR
      , LMODAT
      , LMOTIM
      , LMOUSR
      , INDBZL
      , INDARC
      , UPDCHK
      , LOCSKU
      , TEXT01
      FROM LOCMA
      WHERE 1=1
      
       AND WAREKY = #{WAREKY}
       AND LOCAKY = #{LOCAKY}
    </select>

    <!-- [DL40] 아이템 입력 대상  조회 : PUTAWAY : TASK.SO02.STKKY_TASDR.PUTW_FINDLIST   -->
  <select id="DL40_ITEM_PUTW_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT A.TASKKY AS TASKKY,
           A.TASKIT AS TASKIT,
           A.TASKIR AS TASKIR,
           A.STOKKY AS STOKKY,
           A.QTSTKM AS QTSTKM,
           A.QTSTKC AS QTSTKC,
           A.CREDAT AS CREDAT,
           A.CRETIM AS CRETIM,
           A.CREUSR AS CREUSR,
           A.LMODAT AS LMODAT,
           A.LMOTIM AS LMOTIM,
           A.LMOUSR AS LMOUSR,
           A.INDBZL AS INDBZL,
           A.INDARC AS INDARC,
           A.UPDCHK AS UPDCHK,
           B.STOKKY AS STOKKY,
           B.QTSIWH AS QTSIWH,
           B.QTSALO AS QTSALO,
           B.QTSPMO AS QTSPMO,
           B.QTSPMI AS QTSPMI,
           B.QTSBLK AS QTSBLK,
           B.SRCSKY AS SRCSKY
    FROM   TASDR A,
           STKKY B
    WHERE  A.STOKKY = B.STOKKY
    AND    A.TASKKY = #{TASKKY}
    AND    A.TASKIT = #{TASKIT}
    ORDER BY A.TASKIR 
    
    </select>
    
    <!-- [DL40] STKKY : 상세 조회   -->
  <select id="DL40_STKKY_MAP" parameterType="hashmap" resultType="DataMap">
  
    SELECT 
        LOTNUM
      , LOCAKY
      , TRNUID
      , SECTID
      , PACKID
      , QTSIWH
      , QTSALO
      , QTSPMO
      , QTSPMI
      , QTSBLK
      , QTYUOM
      , TRUNTY
      , MEASKY
      , UOMKEY
      , QTPUOM
      , DUOMKY
      , QTDUOM
      , TKFLKY
      , STEPNO
      , LSTTFL
      , SRCSKY
      , UOMDOC
      , CNTBSK
      , NUPDPS
      , REFDKY
      , REFDIT
      , REFCAT
      , REFDAT
      , PURCKY
      , PURCIT
      , ASNDKY
      , ASNDIT
      , RECVKY
      , RECVIT
      , SHPOKY
      , SHPOIT
      , GRPOKY
      , GRPOIT
      , TASKKY
      , TASKIT
      , SADJKY
      , SADJIT
      , SDIFKY
      , SDIFIT
      , PHYIKY
      , PHYIIT
      , OWNRKY
      , SKUKEY
      , LOTA01
      , LOTA02
      , LOTA03
      , LOTA04
      , LOTA05
      , LOTA06
      , LOTA07
      , LOTA08
      , LOTA09
      , LOTA10
      , LOTA11
      , LOTA12
      , LOTA13
      , LOTA14
      , LOTA15
      , LOTA16
      , LOTA17
      , LOTA18
      , LOTA19
      , LOTA20
      , AWMSNO
      , DESC01
      , DESC02
      , ASKU01
      , ASKU02
      , ASKU03
      , ASKU04
      , ASKU05
      , EANCOD
      , GTINCD
      , SKUG01
      , SKUG02
      , SKUG03
      , SKUG04
      , SKUG05
      , GRSWGT
      , NETWGT
      , WGTUNT
      , LENGTH
      , WIDTHW
      , HEIGHT
      , CUBICM
      , CAPACT
      , ZONEKY
      , TKZONE
      , AREAKY
      , SMANDT
      , SEBELN
      , SEBELP
      , SZMBLNO
      , SZMIPNO
      , STRAID
      , SVBELN
      , SPOSNR
      , STKNUM
      , STPNUM
      , SWERKS
      , SLGORT
      , SDATBG
      , STDLNR
      , SSORNU
      , SSORIT
      , SMBLNR
      , SZEILE
      , SMJAHR
      , SXBLNR
      , SAPSTS
      , SBKTXT
      , CREDAT
      , CRETIM
      , CREUSR
      , LMODAT
      , LMOTIM
      , LMOUSR
      , INDBZL
      , INDARC
      , UPDCHK
      , KEEPTS
      FROM STKKY
      WHERE 1=1
      

       AND STOKKY = #{STOKKY}
      AND WAREKY = #{WAREKY}
    </select> 
    
    <!-- [DL40] TASDI : 삭제   -->
  <delete id="DL40_TASDI_DELETE"  parameterType="hashmap">
  
    DELETE FROM TASDI
    WHERE 1=1
      AND TASKKY = #{TASKKY} 
      AND TASKIT = #{TASKIT}
      
  </delete>
        <!-- [DL40] TASDI : 아이템 생성 : TASDI Insert 입력 -->
  <insert id="TASDI_INSERT"  parameterType="hashmap">
    INSERT INTO TASDI
       (TASKKY, TASKIT, TASKTY, RSNCOD, STATIT, QTTAOR, QTCOMP, QTYFCN, OWNRKY, SKUKEY, LOTNUM, ACTCDT, ACTCTI, QTYUOM, TKFLKY, STEPNO, LSTTFL, LOCASR, SECTSR, PAIDSR, TRNUSR, STRUTY, SMEAKY, SUOMKY, QTSPUM, SDUOKY, QTSDUM, LOCATG, SECTTG, PAIDTG, TRNUTG, TTRUTY, TMEAKY, TUOMKY, QTTPUM, TDUOKY, QTTDUM, LOCAAC, SECTAC, PAIDAC, TRNUAC, ATRUTY, AMEAKY, AUOMKY, QTAPUM, ADUOKY, QTADUM, REFDKY, REFDIT, REFCAT, REFDAT, PURCKY, PURCIT, ASNDKY, ASNDIT, RECVKY, RECVIT, SHPOKY, SHPOIT, GRPOKY, GRPOIT, SADJKY, SADJIT, SDIFKY, SDIFIT, PHYIKY, PHYIIT, DROPID, DESC01, DESC02, ASKU01, ASKU02, ASKU03, ASKU04, ASKU05, EANCOD, GTINCD, SKUG01, SKUG02, SKUG03, SKUG04, SKUG05, GRSWGT, NETWGT, WGTUNT, "LENGTH", WIDTHW, HEIGHT, CUBICM, CAPACT, WORKID, WORKNM, HHTTID, AREAKY, LOTA01, LOTA02, LOTA03, LOTA04, LOTA05, LOTA06, LOTA07, LOTA08, LOTA09, LOTA10, LOTA11, LOTA12, LOTA13, LOTA14, LOTA15, LOTA16, LOTA17, LOTA18, LOTA19, LOTA20, AWMSNO, AWMSTS, SMANDT, SEBELN, SEBELP, SZMBLNO, SZMIPNO, STRAID, SVBELN, SPOSNR, STKNUM, STPNUM, SWERKS, SLGORT, SDATBG, STDLNR, SSORNU, SSORIT, SMBLNR, SZEILE, SMJAHR, SXBLNR, SAPSTS, DOORKY, PTLT01, PTLT02, PTLT03, PTLT04, PTLT05, PTLT06, PTLT07, PTLT08, PTLT09, PTLT10, PTLT11, PTLT12, PTLT13, PTLT14, PTLT15, PTLT16, PTLT17, PTLT18, PTLT19, PTLT20, PASTKY, ALSTKY, SBKTXT, TASRSN, CREDAT, CRETIM, CREUSR, LMODAT, LMOTIM, LMOUSR, INDBZL, INDARC, UPDCHK)
      VALUES 
      (
  NVL(#{TASKKY },' ')
, NVL(#{TASKIT },' ')
, NVL(#{TASKTY },' ')
, NVL(#{RSNCOD },' ')
, NVL(#{STATIT },' ')
, NVL(#{QTTAOR },0)
, NVL(#{QTCOMP },0)
, NVL(#{QTYFCN },0)
, NVL(#{OWNRKY },' ')
, NVL(#{SKUKEY },' ')
, NVL(#{LOTNUM },' ')
, TO_CHAR(SYSDATE,'YYYYMMDD')
, NVL(#{ACTCTI },' ')
, NVL(#{QTYUOM },0)
, NVL(#{TKFLKY },' ')
, NVL(#{STEPNO },' ')
, NVL(#{LSTTFL },' ')
, NVL(#{LOCASR },' ')
, NVL(#{SECTSR },' ')
, NVL(#{PAIDSR },' ')
, NVL(#{TRNUSR },' ')
, NVL(#{STRUTY },' ')
, NVL(#{SMEAKY },' ')
, NVL(#{SUOMKY },' ')
, NVL(#{QTSPUM },0)
, NVL(#{SDUOKY },' ')
, NVL(#{QTSDUM },0)
, NVL(#{LOCATG },' ')
, NVL(#{SECTTG },' ')
, NVL(#{PAIDTG },' ')
, NVL(#{TRNUTG },' ')
, NVL(#{TTRUTY },' ')
, NVL(#{TMEAKY },' ')
, NVL(#{TUOMKY },' ')
, NVL(#{QTTPUM },0)
, NVL(#{TDUOKY },' ')
, NVL(#{QTTDUM },0)
, NVL(#{LOCAAC },' ')
, NVL(#{SECTAC },' ')
, NVL(#{PAIDAC },' ')
, NVL(#{TRNUAC },' ')
, NVL(#{ATRUTY },' ')
, NVL(#{AMEAKY },' ')
, NVL(#{AUOMKY },' ')
, NVL(#{QTAPUM },0)
, NVL(#{ADUOKY },' ')
, NVL(#{QTADUM },0)
, NVL(#{REFDKY },' ')
, NVL(#{REFDIT },' ')
, NVL(#{REFCAT },' ')
, NVL(#{REFDAT },' ')
, NVL(#{PURCKY },' ')
, NVL(#{PURCIT },' ')
, NVL(#{ASNDKY },' ')
, NVL(#{ASNDIT },' ')
, NVL(#{RECVKY },' ')
, NVL(#{RECVIT },' ')
, NVL(#{SHPOKY },' ')
, NVL(#{SHPOIT },' ')
, NVL(#{GRPOKY },' ')
, NVL(#{GRPOIT },' ')
, NVL(#{SADJKY },' ')
, NVL(#{SADJIT },' ')
, NVL(#{SDIFKY },' ')
, NVL(#{SDIFIT },' ')
, NVL(#{PHYIKY },' ')
, NVL(#{PHYIIT },' ')
, NVL(#{DROPID },' ')
, NVL(#{DESC01 },' ')
, NVL(#{DESC02 },' ')
, NVL(#{ASKU01 },' ')
, NVL(#{ASKU02 },' ')
, NVL(#{ASKU03 },' ')
, NVL(#{ASKU04 },' ')
, NVL(#{ASKU05 },' ')
, NVL(#{EANCOD },' ')
, NVL(#{GTINCD },' ')
, NVL(#{SKUG01 },' ')
, NVL(#{SKUG02 },' ')
, NVL(#{SKUG03 },' ')
, NVL(#{SKUG04 },' ')
, NVL(#{SKUG05 },' ')
, NVL(#{GRSWGT },0)
, NVL(#{NETWGT },0)
, NVL(#{WGTUNT },' ')
, NVL(#{LENGTH },0)
, NVL(#{WIDTHW },0)
, NVL(#{HEIGHT },0)
, NVL(#{CUBICM },0)
, NVL(#{CAPACT },0)
, NVL(#{WORKID },' ')
, NVL(#{WORKNM },' ')
, NVL(#{HHTTID },' ')
, NVL(#{AREAKY },' ')
, NVL(#{LOTA01 },' ')
, NVL(#{LOTA02 },' ')
, NVL(#{LOTA03 },' ')
, NVL(#{LOTA04 },' ')
, NVL(#{LOTA05 },' ')
, NVL(#{LOTA06 },' ')
, NVL(#{LOTA07 },' ')
, NVL(#{LOTA08 },' ')
, NVL(#{LOTA09 },' ')
, NVL(#{LOTA10 },' ')
, NVL(#{LOTA11 },' ')
, NVL(#{LOTA12 },' ')
, NVL(#{LOTA13 },' ')
, NVL(#{LOTA14 },' ')
, NVL(#{LOTA15 },' ')
, NVL(#{LOTA16 },0)
, NVL(#{LOTA17 },0)
, NVL(#{LOTA18 },0)
, NVL(#{LOTA19 },0)
, NVL(#{LOTA20 },0)
, NVL(#{AWMSNO },' ')
, NVL(#{AWMSTS },' ')
, NVL(#{SMANDT },' ')
, NVL(#{SEBELN },' ')
, NVL(#{SEBELP },' ')
, NVL(#{SZMBLNO},' ')
, NVL(#{SZMIPNO},' ')
, NVL(#{STRAID },' ')
, NVL(#{SVBELN },' ')
, NVL(#{SPOSNR },' ')
, NVL(#{STKNUM },' ')
, NVL(#{STPNUM },' ')
, NVL(#{SWERKS },' ')
, NVL(#{SLGORT },' ')
, NVL(#{SDATBG },' ')
, NVL(#{STDLNR },' ')
, NVL(#{SSORNU },' ')
, NVL(#{SSORIT },' ')
, NVL(#{SMBLNR },' ')
, NVL(#{SZEILE },' ')
, NVL(#{SMJAHR },' ')
, NVL(#{SXBLNR },' ')
, NVL(#{SAPSTS },' ')
, NVL(#{DOORKY },' ')
, NVL(#{PTLT01 },' ')
, NVL(#{PTLT02 },' ')
, NVL(#{PTLT03 },' ')
, NVL(#{PTLT04 },' ')
, NVL(#{PTLT05 },' ')
, NVL(#{PTLT06 },' ')
, NVL(#{PTLT07 },' ')
, NVL(#{PTLT08 },' ')
, NVL(#{PTLT09 },' ')
, NVL(#{PTLT10 },' ')
, NVL(#{PTLT11 },' ')
, NVL(#{PTLT12 },' ')
, NVL(#{PTLT13 },' ')
, NVL(#{PTLT14 },' ')
, NVL(#{PTLT15 },' ')
, NVL(#{PTLT16 },0)
, NVL(#{PTLT17 },0)
, NVL(#{PTLT18 },0)
, NVL(#{PTLT19 },0)
, NVL(#{PTLT20 },0)
, NVL(#{PASTKY },' ')
, NVL(#{ALSTKY },' ')
, NVL(#{SBKTXT },' ')
, NVL(#{TASRSN },' ')
, TO_CHAR(SYSDATE,'YYYYMMDD')
, TO_CHAR(SYSDATE,'HH24MISS')
, #{SES_USER_ID}
, TO_CHAR(SYSDATE,'YYYYMMDD')
, TO_CHAR(SYSDATE,'HH24MISS')
, #{SES_USER_ID}
, NVL(#{INDBZL },' ')
, NVL(#{INDARC },' ')
, NVL(#{UPDCHK },0) 
      )

  
    </insert>
    
  <!-- [DL50] 헤더 조회 : OUTBOUND.PI.FIND_SHPDH_FOR_CLOSE   -->
  <select id="DL50_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT DISTINCT 
           DECODE(SH.SHPMTY, '299', SI.STKNUM, SH.SHPOKY) AS KEY,
           SH.SHPOKY AS SHPOKY,
           SH.WAREKY AS WAREKY,
           WH.NAME01 AS WAREKYNM,
           SH.STATDO AS STATDO,
           CV.CDESC1 AS STATDONM,
           SH.DRELIN AS DRELIN,
           SH.ALSTKY AS ALSTKY,
           SH.DPTNKY AS DPTNKY,
           BP.NAME01 AS DPTNKYNM,
           SH.PTRCVR AS PTRCVR,
           BT.NAME01 AS PTRCVRNM,
           SH.PGRC01 AS PGRC01,
           SH.PGRC02 AS PGRC02,
           SH.PGRC03 AS PGRC03,
           SH.PGRC04 AS PGRC04,
           SH.PGRC05 AS PGRC05,
           ' ' AS PTNBLK,
           SH.OWNRKY AS OWNRKY,
           DECODE(SH.OWNRKY, '2200', SH.DOCDAT, TO_CHAR(SYSDATE,'YYYYMMDD')) AS DOCDAT,
           SH.DOCCAT AS DOCCAT,
           DC.SHORTX AS DOCCATNM,
           SH.SHPMTY AS SHPMTY,
           DT.SHORTX AS SHPMTYNM,
           SH.SHPMTY AS DOCUTY,
           SH.RQSHPD AS RQSHPD,
           SH.RQARRD AS RQARRD,
           SH.RQARRT AS RQARRT,
           SH.OPURKY AS OPURKY,
           DECODE(SH.SHPMTY, '299', ' ', SI.SVBELN) AS SVBELN,
           DECODE(SH.STATDO, 'REF', SI.STKNUM, DECODE(SH.SHPMTY, '299', SI.STKNUM, ' ')) AS STKNUM,
           /* CASE WHEN SH.SHPMTY = '299'
                     THEN NVL((SELECT MAX(SUBSTR(SDATBG,1,8)) FROM IFWMS113 WHERE STKNUM = SI.STKNUM), ' ')
                ELSE ' ' END AS SDATBG, */
           SH.QTAPPO AS QTAPPO,
           
           SH.USRID1 AS USRID1,
           SH.UNAME1 AS UNAME1,
           SH.DEPTID1 AS DEPTID1,
           SH.DNAME1 AS DNAME1,
           ' ' AS USRID2,
           ' ' AS UNAME2,
           ' ' AS DEPTID2,
           ' ' AS DNAME2,
           ' ' AS USRID3,
           ' ' AS UNAME3,
           ' ' AS DEPTID3,
           ' ' AS DNAME3,
           ' ' AS USRID4,
           ' ' AS UNAME4,
           ' ' AS DEPTID4,
           ' ' AS DNAME4,
           SH.DOCTXT AS DOCTXT,
           ' ' AS ERPWHF,
           ' ' AS ERPFNM,
           ' ' AS ERPWHT,
           ' ' AS ERPTNM,
           SH.CREDAT AS CREDAT,
           SH.CRETIM AS CRETIM,
           SH.CREUSR AS CREUSR,
           (SELECT NMLAST FROM USRMA WHERE USERID = SH.CREUSR) AS CUSRNM,
           SH.LMODAT AS LMODAT,
           SH.LMOTIM AS LMOTIM,
           SH.LMOUSR AS LMOUSR,
           (SELECT NMLAST FROM USRMA WHERE USERID = SH.LMOUSR) AS LUSRNM
      FROM SHPDH SH
           INNER JOIN (SELECT DISTINCT
                              SHPOKY AS SHPOKY,
                              SHPOIT AS SHPOIT,
                              SVBELN AS SVBELN,
                              STATIT AS STATIT,
                              STKNUM AS STKNUM
                         FROM SHPDI) SI
                   ON SH.SHPOKY = SI.SHPOKY
           LEFT OUTER JOIN (SELECT DISTINCT SHPOKY, SHPOIT,  
                                            CARDAT, CARNUM, 
                                            SHIPSQ, 
                                            RECAYN
                              FROM SHPDR WHERE RECAYN = 'N')  SR
                   ON SR.SHPOKY = SI.SHPOKY
                  AND SR.SHPOIT = SI.SHPOIT
           INNER JOIN WAHMA WH
                   ON SH.WAREKY = WH.WAREKY
           LEFT OUTER JOIN BZPTN BP
                        ON BP.PTNRKY = SH.DPTNKY
                       AND BP.PTNRTY = DECODE(SH.SHPMTY,'270','0002','0001')
                       AND BP.OWNRKY = SH.OWNRKY
           LEFT OUTER JOIN BZPTN BT
                        ON BT.PTNRKY = SH.PTRCVR
                       AND BT.PTNRTY = DECODE(SH.SHPMTY,'270','0002','0007')
                       AND BT.OWNRKY IN SH.OWNRKY
           INNER JOIN CMCDV CV
                         ON SH.STATDO = CV.CMCDVL
                        AND CV.CMCDKY = 'STATDO'
           INNER JOIN DOCCM DC
                         ON SH.DOCCAT = DC.DOCCAT
           INNER JOIN DOCTM DT
                         ON SH.SHPMTY = DT.DOCUTY
    
     WHERE  1 = 1
    <if test='SHPOKYS != ""'> 
	AND SH.SHPOKY||SI.SHPOIT IN (${SHPOKYS}) 
    </if>  
     AND SH.SHPMTY != '299'
     AND SH.DRELIN = 'V'
  <if test='SHPOKYS == ""'> 
     AND SH.STATDO != 'FSH'
     
     AND SH.INDDCL &lt;&gt; 'V'
     AND (SH.STATDO = 'PPC' OR SH.STATDO = 'FPC' OR SH.STATDO = 'REF')
    </if> 
    AND SH.OWNRKY = #{OWNRKY}
        AND SH.WAREKY = #{WAREKY}
       
    <if test='CLOSE == "V"'>
     AND STATDO &lt;&gt; 'REF'
    </if> 
    <if test='PROGID == "DL18"'>
     AND SH.SHPMTY = '299'
    </if> 
    <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
     ORDER BY SH.SHPOKY ASC

    </select>
    
    
    <!-- [DL50] 아이템 조회 : OUTBOUND.PI.FIND_SHPDI_FOR_CLOSE   -->
  <select id="DL50_ITEM_LIST" parameterType="hashmap" resultType="DataMap">

    SELECT DECODE(SI.STATIT, 'REF', SI.STKNUM, SI.SHPOKY) AS KEY,
           SI.SHPOKY AS SHPOKY,
           SI.SHPOIT AS SHPOIT,
           SI.STATIT AS STATIT,
           CV.CDESC1 AS STATITNM,
           SI.SKUKEY AS SKUKEY,
           SI.QTSHPO AS QTSHPO,
           SI.QTYORG AS QTYORG,
           SI.QTYREF AS QTYREF,
           SI.QTAPPO AS QTAPPO,
           SI.QTALOC AS QTALOC,
           SI.QTJCMP AS QTJCMP,
           SI.QTJCMP AS QTSHPD,
           SI.QTSHPC AS QTSHPC,
           SI.QTYUOM AS QTYUOM,
           SI.MEASKY AS MEASKY,
           SI.UOMKEY AS UOMKEY,
           SI.QTPUOM AS QTPUOM,
           SI.DUOMKY AS DUOMKY,
           SI.QTDUOM AS QTDUOM,
           SI.SASTKY AS SASTKY,
           SI.ALSTKY AS ALSTKY,
           SI.TKFLKY AS TKFLKY,
           SI.ESHPKY AS ESHPKY,
           SI.ESHPIT AS ESHPIT,
           SI.OPURKY AS OPURKY,
           SI.REFDKY AS REFDKY,
           SI.REFDIT AS REFDIT,
           SI.REFCAT AS REFCAT,
           SI.REFDAT AS REFDAT,
           SI.EXSUBS AS EXSUBS,
           SI.DESC01 AS DESC01,
           SI.DESC02 AS DESC02,
           SI.ASKU01 AS ASKU01,
           SI.ASKU02 AS ASKU02,
           SI.ASKU03 AS ASKU03,
           SI.ASKU04 AS ASKU04,
           SI.ASKU05 AS ASKU05,
           SI.EANCOD AS EANCOD,
           SI.GTINCD AS GTINCD,
           SI.SKUG01 AS SKUG01,
           SI.SKUG02 AS SKUG02,
           SI.SKUG03 AS SKUG03,
           SI.SKUG04 AS SKUG04,
           SI.SKUG05 AS SKUG05,
           SI.GRSWGT AS GRSWGT,
           SI.NETWGT AS NETWGT,
           SI.WGTUNT AS WGTUNT,
           SI.LENGTH AS LENGTH,
           SI.WIDTHW AS WIDTHW,
           SI.HEIGHT AS HEIGHT,
           SI.CUBICM AS CUBICM,
           ROUND((SI.QTJCMP/DECODE(SI.QTDUOM, 0, 1))*SI.CUBICM,3) AS CUBICT,
           SI.CAPACT AS CAPACT,
           SI.PROCHA AS PROCHA,
           SI.AREAKY AS AREAKY,
           SI.LOTA01 AS LOTA01,
           SI.LOTA02 AS LOTA02,
           SI.LOTA03 AS LOTA03,
           SI.LOTA04 AS LOTA04,
           SI.LOTA05 AS LOTA05,
           SI.LOTA06 AS LOTA06,
           SI.LOTA07 AS LOTA07,
           SI.LOTA08 AS LOTA08,
           SI.LOTA09 AS LOTA09,
           SI.LOTA10 AS LOTA10,
           SI.LOTA11 AS LOTA11,
           SI.LOTA12 AS LOTA12,
           SI.LOTA13 AS LOTA13,
           SI.LOTA14 AS LOTA14,
           SI.LOTA15 AS LOTA15,
           SI.LOTA16 AS LOTA16,
           SI.LOTA17 AS LOTA17,
           SI.LOTA18 AS LOTA18,
           SI.LOTA19 AS LOTA19,
           SI.LOTA20 AS LOTA20,
           SI.AWMSNO AS AWMSNO,
           SI.SMANDT AS SMANDT,
           SI.SEBELN AS SEBELN,
           SI.SEBELP AS SEBELP,
           SI.STRAID AS STRAID,
           SI.SVBELN AS SVBELN,
           SI.SPOSNR AS SPOSNR,
           SI.STKNUM AS STKNUM,
           SI.STPNUM AS STPNUM,
           SI.SWERKS AS SWERKS,
           SI.SLGORT AS SLGORT,
           SI.SDATBG AS SDATBG,
           SI.STDLNR AS STDLNR,
           SI.SSORNU AS SSORNU,
           SI.SSORIT AS SSORIT,
           SI.SMBLNR AS SMBLNR,
           SI.SZEILE AS SZEILE,
           SI.SMJAHR AS SMJAHR,
           SI.SXBLNR AS SXBLNR,
           SI.SAPSTS AS SAPSTS,
           SI.PTNRKY AS PTNRKY,
           SI.NAME01 AS NAME01,
           SI.SLAND1 AS SLAND1,
           SI.SBKTXT AS SBKTXT,
           SH.SHPMTY AS SHPMTY,
           SI.STRAID AS VGBEL ,
           SR.ARRIVA AS ARRIVA,
           SR.CARDAT AS CARDAT,
           SR.CARNUM AS CARNUM,
           SR.SHIPSQ AS SHIPSQ,
           SR.SORTSQ AS SORTSQ,
           0 AS QTUALO,         
           SR.DRIVER AS DRIVER,
           TRUNC( SI.QTJCMP/SI.QTDUOM , 1) AS BOXQTY
      FROM SHPDH SH
           INNER JOIN SHPDI SI
                   ON    SH.SHPOKY = SI.SHPOKY
           LEFT OUTER JOIN (SELECT DISTINCT SHPOKY, SHPOIT, ARRIVA, 
                                            CARDAT, CARNUM, 
                                            SHIPSQ, SORTSQ, DRIVER, 
                                            RECAYN
                              FROM SHPDR WHERE RECAYN = 'N')  SR
                   ON SR.SHPOKY = SI.SHPOKY
                  AND SR.SHPOIT = SI.SHPOIT
    
           INNER JOIN CMCDV CV
           ON    CV.CMCDKY = 'STATIT'
           AND   CV.CMCDVL = SI.STATIT
    WHERE  1 = 1
    <if test='SHPOKYS == ""'> 
    AND SH.STATDO NOT IN ('FSH')
    </if> 
    <if test='SHPOKYS != ""'> 
	AND SH.SHPOKY||SI.SHPOIT IN (${SHPOKYS}) 
    </if> 
    AND SI.STATIT NOT IN ('DEL')
    AND SI.SHPOKY = #{SHPOKY} 
    <if test='CLOSE != "V"'>
     AND SH.SHPMTY &lt;&gt; '299'
    </if> 
    <if test='WAREKY != "WSZ1"'>
     ORDER  BY SI.SHPOKY, SI.SHPOIT
    </if> 
    <if test='WAREKY == "WSZ1"'>
     ORDER  BY SI.SVBELN, TO_NUMBER(SI.SPOSNR)
    </if> 

    </select>
    
    <!-- [DL50] 출고확정 Validation 01 : OUTBOUND.SHIPMENTORDER.VALI_ADD_REFERENCE_QTY   -->
  <select id="DL50_CLOSE_VALID_01_MAP" parameterType="hashmap" resultType="DataMap">
  
     SELECT SHPDI.SHPOKY, SHPDI.SHPOIT, SHPDI.SKUKEY, SHPDI.QTSHPO, SHPDI.QTSHPD, SHPDI.QTJCMP, SKUWC.OBPROT
       FROM SHPDI SHPDI   
       INNER JOIN SKUWC SKUWC ON SKUWC.OWNRKY = #{OWNRKY} AND SKUWC.WAREKY = #{WAREKY} AND SKUWC.SKUKEY = SHPDI.SKUKEY
      WHERE SHPDI.SHPOKY = #{SHPOKY}
        AND SHPDI.SHPOIT = #{SHPOIT}
        
    </select>
    
    <!-- [DL50] 출고확정 Validation 02 : OUTBOUND.SHIPMENTORDER.FIND_COUNT_TASK   -->
  <select id="DL50_CLOSE_VALID_02_MAP" parameterType="hashmap" resultType="DataMap">
  
      SELECT COUNT(*) AS CNT
      FROM   TASDI
      WHERE SHPOKY = #{SHPOKY}
      AND   ACTCDT = '00000000'
      AND   TASKTY = 'PK'
        
    </select>
    
    <!-- [DL50] 출고확정 SHPDI 저장  : OUTBOUND.SHIPMENTORDER.MODIFY_SHPDI   -->
  <select id="DL50_CLOSE_SHPDI_UPDATE" parameterType="hashmap" resultType="DataMap">
  
      UPDATE SHPDI SHPDI
      SET  QTSHPD = #{QTSHPD},
           ALSTKY = #{ALSTKY},
           LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
           LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'),
             LMOUSR = #{SES_USER_ID}
      WHERE  SHPOKY = #{SHPOKY}
      AND  SHPOIT = #{SHPOIT}
      AND  NOT EXISTS (SELECT 1 FROM SHPDH WHERE SHPOKY = SHPDI.SHPOKY AND INDDCL = 'V')
      
    </select>
    
  <!-- [DL50] 출고확정 SHPDH 저장  : OUTBOUND.SHIPMENTORDER.CLOSE_SHPDH   -->
  <select id="DL50_CLOSE_SHPDH_UPDATE" parameterType="hashmap" resultType="DataMap">
  
        UPDATE SHPDH
         SET INDDCL = 'V',
             DOCDAT = #{DOCDAT},
             LSHPCD = TO_CHAR(SYSDATE, 'YYYYMMDD'),
             LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
             LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'),
               LMOUSR = #{SES_USER_ID}
       WHERE SHPOKY = #{SHPOKY}
         AND QTALOC = QTJCMP
              
    </select>
    
     <!-- [DL50] SHPDH 저장 후 조회  : OUTBOUND.PI.FIND_SHPDH   -->
  <select id="DL50_AFTER_SAVE_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT DISTINCT SH.SHPOKY AS KEY,
		       SH.SHPOKY AS SHPOKY,
		       SH.WAREKY AS WAREKY,
		       WH.NAME01 AS WAREKYNM,
		       SH.STATDO AS STATDO,
		       CV.CDESC1 AS STATDONM,
		       SH.DRELIN AS DRELIN,
		       DECODE(MAX(SR.SHIPSQ),' ',0,'',0,NULL,0,MAX(SR.SHIPSQ)) AS SHIPSQ,
		       DECODE(SH.DRELIN,'V','YES','NO') AS DRELINNM,
		       MAX(SR.CARNUM) AS CARNUM,
		       SH.INDDCL AS INDDCL,
		       SH.ALSTKY AS ALSTKY,
		       SH.DPTNKY AS DPTNKY,
		       DECODE(SH.SHPMTY, '270', RBP.NAME01, BP.NAME01) AS DPTNKYNM,
		       SH.PTRCVR AS PTRCVR,
		       DECODE(SH.SHPMTY, '270', RBT.NAME01, BT.NAME01) AS PTRCVRNM,
		       SH.PGRC01 AS PGRC01,
		       SH.PGRC02 AS PGRC02,
		       SH.PGRC03 AS PGRC03,
		       SH.PGRC04 AS PGRC04,
		       SH.PGRC05 AS PGRC05,
		       ' ' AS PTNBLK,
		       SH.OWNRKY AS OWNRKY,
		       SH.DOCDAT AS DOCDAT,
		       SH.DOCCAT AS DOCCAT,
		       DC.SHORTX AS DOCCATNM,
		       SH.SHPMTY AS SHPMTY,
		       DT.SHORTX AS SHPMTYNM,
		       SH.SHPMTY AS DOCUTY,
		       SH.RQSHPD AS RQSHPD,
		       SH.RQARRD AS RQARRD,
		       SH.RQARRT AS RQARRT,
		       SH.OPURKY AS OPURKY,
		       DECODE(SH.SHPMTY, '299', ' ', SI.SVBELN) AS SVBELN,
		       DECODE(SH.STATDO, 'REF', SI.STKNUM, DECODE(SH.SHPMTY, '299', SI.STKNUM, ' ')) AS STKNUM,
		       CASE WHEN SH.SHPMTY = '299'
		                 THEN NVL((SELECT MAX(SUBSTR(SDATBG,1,8)) FROM IFWMS113 WHERE STKNUM = SI.STKNUM), ' ')
		            ELSE ' ' END AS SDATBG,
		       SH.QTAPPO AS QTAPPO,
		       SH.LOCADT AS LOCADT,
		       SH.LOCADK AS LOCADK,
		       SH.USRID1 AS USRID1,
		       SH.UNAME1 AS UNAME1,
		       SH.DEPTID1 AS DEPTID1,
		       SH.DNAME1 AS DNAME1,
		       SH.USRID2 AS USRID2,
		       SH.UNAME2 AS UNAME2,
		       SH.DEPTID2 AS DEPTID2,
		       SH.DNAME2 AS DNAME2,
		       SH.USRID3 AS USRID3,
		       SH.UNAME3 AS UNAME3,
		       SH.DEPTID3 AS DEPTID3,
		       SH.DNAME3 AS DNAME3,
		       SH.USRID4 AS USRID4,
		       SH.UNAME4 AS UNAME4,
		       SH.DEPTID4 AS DEPTID4,
		       SH.DNAME4 AS DNAME4,
		       SH.DOCTXT AS DOCTXT,
		       SH.CREDAT AS CREDAT,
		       SH.CRETIM AS CRETIM,
		       SH.CREUSR AS CREUSR,
		       (SELECT NMLAST FROM USRMA WHERE USERID = SH.CREUSR) AS CUSRNM,
		       SH.LMODAT AS LMODAT,
		       SH.LMOTIM AS LMOTIM,
		       SH.LMOUSR AS LMOUSR,
		       (SELECT NMLAST FROM USRMA WHERE USERID = SH.LMOUSR) AS LUSRNM,
		       SI.SEBELN AS SEBELN,
		       MAX(NVL(SR.ARRIVA, ' ')) ARRIVA,
		       COUNT(*) AS ITEMCNT,
		       SUM(SI.QTALOC / NVL(SM.QTDUOM, NULL)) AS SUMQTY,
		       (SELECT COUNT(STATIT) FROM SHPDI WHERE SHPOKY = SH.SHPOKY AND STATIT IN ('NEW','DEL')) AS RECOCD 
		  FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
		                LEFT OUTER JOIN SHPDR SR ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
		                INNER JOIN WAHMA WH ON SH.WAREKY = WH.WAREKY
		                INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		                LEFT OUTER JOIN BZPTN BP ON BP.PTNRKY = SH.DPTNKY AND BP.OWNRKY = SH.OWNRKY AND BP.PTNRTY IN ('0001', '0004')
		                LEFT OUTER JOIN BZPTN BT ON BT.PTNRKY = SH.PTRCVR AND BT.OWNRKY = SH.OWNRKY AND BT.PTNRTY IN ('0007', '0004')
		                LEFT OUTER JOIN BZPTN RBP ON RBP.PTNRKY = SH.DPTNKY AND RBP.OWNRKY = SH.OWNRKY AND RBP.PTNRTY = '0002'
		                LEFT OUTER JOIN BZPTN RBT ON RBT.PTNRKY = SH.PTRCVR AND RBT.OWNRKY = SH.OWNRKY AND RBT.PTNRTY = '0002'
		                INNER JOIN CMCDV CV ON SH.STATDO = CV.CMCDVL AND CV.CMCDKY = 'STATDO' 
		                INNER JOIN DOCCM DC ON SH.DOCCAT = DC.DOCCAT
		                INNER JOIN DOCTM DT ON SH.SHPMTY = DT.DOCUTY
		 WHERE 1 = 1
		<if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
		
		<if test="DRELIN != null and DRELIN != ''">
		AND SH.DRELIN LIKE DECODE(#{DRELIN},'N', ' ', 'Y', 'V', #{DRELIN} )
		</if>
		<if test='GRPRL !=null  and GRPRL.equalsIgnoreCase("ERPSO")'>
		   AND SH.SHPMTY IN ('211','212','213','214','215','216' )
		</if>
		<if test='GRPRL !=null  and GRPRL.equalsIgnoreCase("TOTAL")'>
		   AND SH.SHPMTY IN ('299')
		</if>
		<if test='GRPRL !=null  and GRPRL.equalsIgnoreCase("MOVE")'>
		   AND SH.SHPMTY IN ('266','267')
		</if>
		<if test='GRPRL !=null  and GRPRL.equalsIgnoreCase("RTNPUR")'>
		   AND SH.SHPMTY IN ('270')
		</if>
		<if test="SHPOKYS != null and SHPOKYS != ''">
		   AND SH.SHPOKY IN (${SHPOKYS})
		</if>
		<if test="INDDCL != null and INDDCL != ''">
		   AND SH.INDDCL = #{INDDCL}
		</if>
		
		<if test='CLOSE == "V"'>
		    AND STATDO &lt;&gt; 'REF'
		</if> 
		
		GROUP BY SH.SHPOKY, SH.SHPOKY, RBT.NAME01, SH.WAREKY, WH.NAME01, SH.STATDO, CV.CDESC1, SH.DRELIN, RBP.NAME01, SH.PTRCVR,
		         SH.INDDCL, SI.SVBELN, SH.ALSTKY, SH.DPTNKY, BP.NAME01, SH.PGRC01, SH.PGRC02, SH.PGRC03, SH.PGRC04, SH.PGRC05,
		         SH.OWNRKY, SH.DOCDAT, SH.DOCCAT, DC.SHORTX, SH.SHPMTY, DT.SHORTX, SH.SHPMTY, SH.RQSHPD, SH.RQARRD, SH.RQARRT, 
		         SH.OPURKY, SI.STKNUM, SH.QTAPPO, SH.LOCADT, SH.LOCADK, SH.USRID1, SH.UNAME1, SH.DEPTID1, SH.DNAME1, SH.USRID2,
		         SH.UNAME2, SH.DEPTID2, SH.DNAME2, SH.USRID3, SH.UNAME3, SH.DEPTID3, SH.DNAME3, SH.USRID4, SH.UNAME4, SH.DEPTID4,
		         SH.DNAME4, SH.DOCTXT, SH.CREDAT, SH.CRETIM, SH.CREUSR, SH.LMODAT, SH.LMOTIM, SH.LMOUSR, SI.SEBELN, BT.NAME01    
   </select>
   
   <!-- [DL50] SHPDI 저장 후 조회  : OUTBOUND.PI.FIND_SHPDI   -->
  <select id="DL50_AFTER_SAVE_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT SI.SHPOKY AS KEY,
		       SI.SHPOKY AS SHPOKY,
		       SI.SHPOIT AS SHPOIT,
		       SI.STATIT AS STATIT,
		       CV.CDESC1 AS STATITNM,
		       SI.SKUKEY AS SKUKEY,
		       SI.QTSHPO AS QTSHPO,
		       SI.QTSHPO - SI.QTALOC AS QTALLM,
		       SI.QTYORG AS QTYORG,
		       DECODE(SI.STATIT, 'REF', SI.QTJCMP, SI.QTYREF) AS QTYREF,
		       SI.QTAPPO AS QTAPPO,
		       SI.QTALOC AS QTALOC,
		       F_PRE_QTYPRE(SH.OWNRKY, SH.WAREKY, SI.SKUKEY) AS QTYPRE,
		       SI.QTJCMP AS QTJCMP,
		       SI.QTSHPD AS QTSHPD,
		       SI.QTSHPC AS QTSHPC,
		       SI.QTYUOM AS QTYUOM,
		       SI.MEASKY AS MEASKY,
		       SI.UOMKEY AS UOMKEY,
		       SI.QTPUOM AS QTPUOM,
		       SI.DUOMKY AS DUOMKY,
		       SI.QTDUOM AS QTDUOM,
		       SI.SASTKY AS SASTKY,
		       SI.ALSTKY AS ALSTKY,
		       SI.TKFLKY AS TKFLKY,
		       SI.ESHPKY AS ESHPKY,
		       SI.ESHPIT AS ESHPIT,
		       SI.OPURKY AS OPURKY,
		       SI.REFDKY AS REFDKY,
		       SI.REFDIT AS REFDIT,
		       SI.REFCAT AS REFCAT,
		       SI.REFDAT AS REFDAT,
		       SI.EXSUBS AS EXSUBS,
		       SI.DESC01 AS DESC01,
		       SI.DESC02 AS DESC02,
		       SI.ASKU01 AS ASKU01,
		       SI.ASKU02 AS ASKU02,
		       SI.ASKU03 AS ASKU03,
		       SI.ASKU04 AS ASKU04,
		       SI.ASKU05 AS ASKU05,
		       SI.EANCOD AS EANCOD,
		       SI.GTINCD AS GTINCD,
		       SI.SKUG01 AS SKUG01,
		       SI.SKUG02 AS SKUG02,
		       SI.SKUG03 AS SKUG03,
		       SI.SKUG04 AS SKUG04,
		       SI.SKUG05 AS SKUG05,
		       SI.GRSWGT AS GRSWGT,
		       SI.NETWGT AS NETWGT,
		       SI.WGTUNT AS WGTUNT,
		       SI.LENGTH AS LENGTH,
		       SI.WIDTHW AS WIDTHW,
		       SI.HEIGHT AS HEIGHT,
		       SI.CUBICM AS CUBICM,
		       CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
		            ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
		       SI.CAPACT AS CAPACT,
		       SI.PROCHA AS PROCHA,
		       SI.AREAKY AS AREAKY,
		       SI.LOTA01 AS LOTA01,
		       SI.LOTA02 AS LOTA02,
		       SI.LOTA03 AS LOTA03,
		       SI.LOTA04 AS LOTA04,
		       SI.LOTA05 AS LOTA05,
		       SI.LOTA06 AS LOTA06,
		       SI.LOTA07 AS LOTA07,
		       SI.LOTA08 AS LOTA08,
		       SI.LOTA09 AS LOTA09,
		       SI.LOTA10 AS LOTA10,
		       SI.LOTA11 AS LOTA11,
		       SI.LOTA12 AS LOTA12,
		       SI.LOTA13 AS LOTA13,
		       SI.LOTA14 AS LOTA14,
		       SI.LOTA15 AS LOTA15,
		       SI.LOTA16 AS LOTA16,
		       SI.LOTA17 AS LOTA17,
		       SI.LOTA18 AS LOTA18,
		       SI.LOTA19 AS LOTA19,
		       SI.LOTA20 AS LOTA20,
		       SI.AWMSNO AS AWMSNO,
		       SI.SMANDT AS SMANDT,
		       SI.SEBELN AS SEBELN,
		       SI.SEBELP AS SEBELP,
		       SI.STRAID AS STRAID,
		       SI.SVBELN AS SVBELN,
		       SI.SPOSNR AS SPOSNR,
		       SI.STKNUM AS STKNUM,
		       SI.STPNUM AS STPNUM,
		       SI.SWERKS AS SWERKS,
		       SI.SLGORT AS SLGORT,
		       SI.SDATBG AS SDATBG,
		       SI.STDLNR AS STDLNR,
		       SI.SSORNU AS SSORNU,
		       SI.SSORIT AS SSORIT,
		       SI.SMBLNR AS SMBLNR,
		       SI.SZEILE AS SZEILE,
		       SI.SMJAHR AS SMJAHR,
		       SI.SXBLNR AS SXBLNR,
		       SI.SAPSTS AS SAPSTS,
		       SI.PTNRKY AS PTNRKY,
		       SI.NAME01 AS NAME01,
		       SI.SLAND1 AS SLAND1,
		       SI.SBKTXT AS SBKTXT,
		       SH.SHPMTY AS SHPMTY,
		       SI.STRAID AS VGBEL,
		       NVL(SM.QTYSTD,0) AS PLIQTY,
		       NVL(SM.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS BOXQTY,       
		       NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTYSTD, NULL,0,SM.QTYSTD) ) ,0) AS PLTQTY,       
		       NVL(MOD(SI.QTSHPO, DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM)),0) AS REMQTY ,
		            
		       SR.ARRIVA AS ARRIVA,
		       SR.CARDAT AS CARDAT,
		       SR.CARNUM AS CARNUM,
		       SR.SHIPSQ AS SHIPSQ,
		       SR.SORTSQ AS SORTSQ,
		       SR.DRIVER AS DRIVER,
		       SR.RECAYN AS RECAYN,
		       SI.QTYREF AS QTYREF,
		       SI.QTSHPC AS QTSHPC,
		       SI.QTSHPO - SI.QTALOC AS QTUALO,
		       (SELECT COUNT(*) FROM SHPDI WHERE SHPOKY = SH.SHPOKY)  AS ITEMCOUNT
		
		  FROM SHPDH SH
		       INNER JOIN SHPDI SI
		               ON SH.SHPOKY = SI.SHPOKY
		              AND SI.SHPOKY IN (SELECT SHPOKY FROM SHPDI)
		       LEFT OUTER JOIN SHPDR SR
		               ON SR.SHPOKY = SI.SHPOKY
		              AND SR.SHPOIT = SI.SHPOIT
		       INNER JOIN SKUMA SM
		               ON SM.OWNRKY = SH.OWNRKY
		              AND SM.SKUKEY = SI.SKUKEY
		       INNER JOIN CMCDV CV
		               ON CV.CMCDKY = 'STATIT'
		              AND CV.CMCDVL = SI.STATIT
		WHERE  1 = 1
			AND SH.SHPOKY = #{SHPOKY}
		
		<if test='GRPRL !=null  and GRPRL.equalsIgnoreCase("ERPSO")'>
		   AND SH.SHPMTY IN ('211','212','213','214','215','216' )
		</if>
		<if test='GRPRL !=null  and GRPRL.equalsIgnoreCase("TOTAL")'>
		   AND SH.SHPMTY IN ('299')
		</if>
		<if test='GRPRL !=null  and GRPRL.equalsIgnoreCase("MOVE")'>
		   AND SH.SHPMTY IN ('266','267')
		</if>
		<if test='GRPRL !=null  and GRPRL.equalsIgnoreCase("RTNPUR")'>
		   AND SH.SHPMTY IN ('270')
		</if>
		
		
		
		<if test="INDDCL != null and INDDCL != ''">
		   AND SH.INDDCL = #{INDDCL}
		</if>
		<if test="SHPOKYS == null or SHPOKYS == ''">
		  <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
		</if>
		<if test="SHPOKYS != null and SHPOKYS != ''">
		   AND SH.SHPOKY||SI.SHPOIT IN (${ITEMKEY})
		</if>
		
		
		
		ORDER BY SI.SHPOKY, SI.SHPOIT
  </select>
    
  <!-- [DL60] 재배차 헤더 조회  : OUTBOUND.CARALOC_HEADER.FIND -->
  <select id="DL60_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
      SELECT SHPOKY||CARNUM||RECNUM AS KEY,
           SHPOKY AS SHPOKY,
           DPTNKY AS DPTNKY,
           NAME01 AS NAME01,
           DEPART AS DEPART,
           ARRIVA AS ARRIVA,
           CARNUM AS CARNUM, 
           RECNUM AS RECNUM,    
        RECNUM AS TEMNUM,
        DRIVER AS DRIVER,
        TRCMPY AS TRCMPY,
        FORKYN AS FORKYN,
        RETRCP AS RETRCP,
        RETUYN AS RETUYN,       
           CARDAT AS CARDAT,
           RECDAT AS RECDAT,
           CARTYP AS CARTYP,
           RCATYP AS RCATYP,
           CARGBN AS CARGBN,
           RCAGBN AS RCAGBN,
           PERHNO AS PERHNO,
           SHIPSQ AS SHIPSQ, 
           ASKU05   AS  ASKU05,
           SZF_GETCMCDVDESC('PGRC03',PGRC03)  AS PGRC03,
           'O'  AS CHKFIELD,
           USRID1 AS USRID1,
           UNAME1 AS UNAME1 ,
           DEPTID1 AS DEPTID1,
           DNAME1 AS DNAME1,
           USRID2 AS USRID2,
           RECAYN AS RECAYN,       
           CARNUMNM AS CARNUMNM ,
           CARNUMNMRE AS CARNUMNMRE,
           SEBELN AS SEBELN
    FROM (
        SELECT /*+INDEX (R IDX_SHPDR_NEW01)*/ H.SHPOKY,
               H.SHPMTY,
               H.OWNRKY,
               H.WAREKY,
               H.DOCDAT, 
               H.DPTNKY, 
               B.NAME01,
               R.SHPOIT, 
               R.DEPART, 
               R.ARRIVA,
    
    /*20131129 서동원 추가*/
               R.DRIVER,
               R.TRCMPY,
               R.FORKYN,
               R.RETRCP,
               R.RETUYN,
    
               R.CARNUM,
               R.RECNUM,
               R.CARDAT,
               R.RECDAT,
               R.SHIPSQ, 
               R.SORTSQ,
               R.PERHNO,
               I.SEBELN,
               I.SKUKEY,
               I.QTALOC, 
               H.PGRC03,
               H.USRID1,
               H.UNAME1,
               H.DEPTID1,
               H.DNAME1,
               H.USRID2,
               CM.CARGBN,
               CM.CARTYP,
               R.RCAGBN,
               R.RCATYP,
               WM_CONCAT(DISTINCT S.ASKU05) ASKU05,
               R.RECAYN ,
               R.CARNUM || DECODE(R.CARNUM , ' ','', '-') || CM.DESC01 CARNUMNM,
               R.RECNUM || DECODE(R.RECNUM , ' ','', '-') || RM.DESC01 CARNUMNMRE
          FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
                       INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
                       INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
                       INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
                       LEFT OUTER JOIN CARMA CM ON H.WAREKY = CM.WAREKY AND R.CARNUM = CM.CARNUM
                       LEFT OUTER JOIN CARMA RM ON H.WAREKY = RM.WAREKY AND R.RECNUM = RM.CARNUM
         WHERE H.DRELIN = 'V'
           /* AND R.RECAYN = 'N' */
           AND B.PTNRTY != '0002'
           AND I.QTALOC &gt; 0
           AND H.STATDO IN ('FPC','PPC','FSH','PSH')
           AND H.OWNRKY = #{OWNRKY}
           AND H.WAREKY = #{WAREKY}
		<if test="RANGE_SQL != null and RANGE_SQL != ''">${RANGE_SQL}</if>
		<if test="CARGBN != null and CARGBN != ''">
			AND CM.CARGBN = #{CARGBN}
		</if>
		<if test="CARDAT != null and CARDAT != ''">
			AND R.CARDAT = #{CARDAT}
		</if>
		
         GROUP BY H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
                  R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, R.RCATYP,
                  H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1, R.RCAGBN,
                  H.DNAME1, H.USRID2, CM.CARGBN, CM.CARTYP, H.OWNRKY, H.WAREKY, I.SEBELN,
                  R.PERHNO, RM.CARGBN, RM.CARTYP, R.RECNUM, R.RECDAT, R.RECAYN, CM.DESC01, RM.DESC01,
                  R.DRIVER, R.TRCMPY, R.FORKYN, R.RETRCP, R.RETUYN
      )
    WHERE 1=1
    GROUP BY SHPOKY, DPTNKY, NAME01, DEPART, ARRIVA, CARNUM, SHIPSQ, ASKU05, PGRC03, CARDAT, RCATYP, RCAGBN, SEBELN,
             USRID1, UNAME1, DEPTID1, DNAME1, USRID2, CARTYP, CARGBN, PERHNO, RECNUM, RECDAT, RECAYN, CARNUMNM, CARNUMNMRE,
             DRIVER, TRCMPY, FORKYN, RETRCP, RETUYN
    ORDER BY SHPOKY
    
  </select>
  
  <!-- [DL60] 재배차 아이템 조회  : OUTBOUND.CARALOC_ITEM.FIND -->
  <select id="DL60_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
      SELECT /*+  INDEX(R PK_SHPDR_NEW)*/ SHPOKY||CARNUM||RECNUM AS KEY,
           SHPOKY AS SHPOKY,
           SHPOIT AS SHPOIT,
           SHPOIR AS SHPOIR,
           TRCMPY AS TRCMPY,
           DRIVER AS DRIVER,
           RETRCP AS RETRCP,
           FORKYN AS FORKYN,
           DPTNKY AS DPTNKY,
           NAME01 AS NAME01,
           DEPART AS DEPART,
           SKUKEY AS SKUKEY,
           DESC01 AS DESC01,
           ARRIVA AS ARRIVA,
           RECNUM AS RECNUM,
           CARNUM AS CARNUM, 
           CARDAT AS CARDAT,
           RECDAT AS RECDAT,
           CARTYP AS CARTYP,
           RCATYP AS RCATYP,
           CARGBN AS CARGBN,
           RCAGBN AS RCAGBN,
           PERHNO AS PERHNO,
           QTRECN AS QTRECN,
           PRESHP AS PRESHP,
           SHIPSQ AS SHIPSQ, 
           ASKU05   AS  ASKU05,
           SZF_GETCMCDVDESC('PGRC03',PGRC03)  AS PGRC03,
           'O'  AS CHKFIELD,
           USRID1 AS USRID1,
           UNAME1 AS UNAME1 ,
           DEPTID1 AS DEPTID1,
           DNAME1 AS DNAME1,
           USRID2 AS USRID2,
           DOCSEQ AS DOCSEQ,
           RECAYN AS RECAYN,
           RETUYN AS RETUYN,
           CARNUMIF AS CARNUMIF,
           CARNUMNMRE AS CARNUMNMRE,
           SEBELN AS SEBELN
     FROM (
        SELECT /*+INDEX(R PK_SHPDR_NEW)*/ H.OWNRKY, H.WAREKY, H.SHPOKY,
               H.SHPMTY,
               H.DOCDAT, 
               H.DPTNKY, 
               B.NAME01,
               R.SHPOIT,
               R.TRCMPY,
               R.DRIVER,
               R.RETRCP,
               R.FORKYN,
               R.SHPOIR, 
               R.DEPART, 
               R.ARRIVA,
               R.CARNUM,
               R.RECNUM,
               R.CARDAT,
               R.RECDAT, 
               R.SHIPSQ, 
               R.SORTSQ,
               R.RECAYN,
               R.DOCSEQ,
               R.PERHNO,
               MAX(R.QTRECN) QTRECN,
               I.SEBELN,
               I.SKUKEY,
               S.DESC01,
               MAX(I.QTALOC) QTALOC, 
               NVL(TRUNC((MAX(I.QTSHPD) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM) )),1 ) , 0) PRESHP,
               H.PGRC03,
               H.USRID1,
               H.UNAME1,
               H.DEPTID1,
               H.DNAME1,
               H.USRID2,
               CM.CARGBN,
               CM.CARTYP,
               R.RCAGBN,
               R.RCATYP,
               WM_CONCAT(DISTINCT S.ASKU05) ASKU05,
               R.RETUYN,
               R.CARNUM || DECODE(R.CARNUM , ' ','', '-') || CM.DESC01 CARNUMIF,
               R.RECNUM || DECODE(R.RECNUM , ' ','', '-') || RM.DESC01 CARNUMNMRE
          FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
                       INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
                       INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
                       INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
                       LEFT OUTER JOIN CARMA CM ON H.WAREKY = CM.WAREKY AND R.CARNUM = CM.CARNUM
                       LEFT OUTER JOIN CARMA RM ON H.WAREKY = RM.WAREKY AND R.RECNUM = RM.CARNUM
         WHERE H.DRELIN = 'V'
           /*AND R.RECAYN = 'N'*/
           AND B.PTNRTY != '0002'
           /*AND R.TASKKY = ' '*/
           AND I.QTALOC &gt; 0
           AND H.STATDO IN ('FPC','PPC','PSH','FSH')
           AND H.SHPOKY = #{SHPOKY}
			<if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
			<if test="CARGBN != null and CARGBN != ''">
				AND CM.CARGBN = #{CARGBN}
			</if>
			<if test="CARDAT != null and CARDAT != ''">
				AND R.CARDAT = #{CARDAT}
			</if> 
         GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
                  R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
                  H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
                  H.DNAME1, H.USRID2, CM.CARGBN, CM.CARTYP, S.DESC01, R.RECAYN,
                  R.DOCSEQ, R.PERHNO, R.SHPOIR, RM.CARGBN, RM.CARTYP, R.RECNUM,
                  R.QTRECN, R.RECDAT, R.RETUYN, CM.DESC01, RM.DESC01, I.SEBELN, R.RCAGBN, R.RCATYP,
                  R.TRCMPY, R.DRIVER, R.RETRCP, R.FORKYN
    ORDER BY SHPOKY,SHPOIT,SHPOIR
      )
    WHERE 1=1
          
  </select>
  
  <!-- [DL60] 재배차 : 헤더 수정 : OUTBOUND.RECARALLOC.UPDATE -->
  <update id="DL60_HEAD_UPDATE"  parameterType="hashmap">
  
     UPDATE SHPDR
       SET
           DEPART = #{DEPART},
           RECDAT = #{RECDAT},
           RECNUM = #{RECNUM},
           RECAYN = 'Y',
           PERHNO = #{PERHNO},
           LMODAT = TO_CHAR(SYSDATE, 'YYYYMMDD'),
           LMOTIM = TO_CHAR(SYSDATE, 'HH24MISS'),
           LMOUSR = #{SES_USER_ID},
    /**/
    RCATYP = NVL(#{RCATYP}, ' '),
    RCAGBN = NVL(#{RCAGBN}, ' '),
    RETUYN = NVL(#{RETUYN}, ' '),
    RETRCP = NVL(#{RETRCP}, ' '),
    DRIVER = NVL(#{DRIVER}, ' '),
    FORKYN = NVL(#{FORKYN}, ' ')
    /**/
     WHERE 1 = 1
       AND SHPOKY = #{SHPOKY}
       AND RECNUM = #{TEMNUM}
       AND RECAYN = 'N'
  
  </update>

  <!-- [DL60] 차량번호 조회  : COMMON.GETDESC.CARMA_INFO -->
  <select id="DL60_CARMA_INFO_MAP" parameterType="hashmap" resultType="DataMap">
      SELECT CARNUM AS RECNUM,
           CARTYP AS RCATYP,
           CARGBN AS RCAGBN,
           CARNUM ||'-'|| DESC01 AS CARNUMNMRE,
           DRIVER AS DRIVER,
           PERHNO AS PERHNO,
           DCMPNM AS RETRCP
      FROM CARMA
     WHERE OWNRKY = #{OWNRKY}
       AND WAREKY = #{WAREKY}
       AND CARNUM = #{RECNUM}
  </select>
  
  <!-- [DL61] 재배차(일괄) 헤더 조회  : OUTBOUND.RECARMA.FIND -->
  <select id="DL61_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  	SELECT SHPOKY||CARNUM||RECNUM AS KEY,
  	      ' ' AS SVBELN,
  	      0 AS QTRECN,
	       SHPOKY AS SHPOKY,
	       DPTNKY AS DPTNKY,
	       NAME01 AS NAME01,
	       DEPART AS DEPART,
	       ARRIVA AS ARRIVA,
	       CARNUM AS CARNUM, 
	       RECNUM AS RECNUM,
	
			RECNUM AS TEMNUM,
			DRIVER AS DRIVER,
			TRCMPY AS TRCMPY,
			FORKYN AS FORKYN,
			RETRCP AS RETRCP,
			RETUYN AS RETUYN,
	
	       CARDAT AS CARDAT,
	       RECDAT AS RECDAT,
	       CARTYP AS CARTYP,
	       RCATYP AS RCATYP,
	       CARGBN AS CARGBN,
	       RCAGBN AS RCAGBN,
	       PERHNO AS PERHNO,
	       SHIPSQ AS SHIPSQ, 
	       ASKU05   AS  ASKU05,
	       SZF_GETCMCDVDESC('PGRC03',PGRC03)  AS PGRC03,
	       'O'  AS CHKFIELD,
	       USRID1 AS USRID1,
	       UNAME1 AS UNAME1 ,
	       DEPTID1 AS DEPTID1,
	       DNAME1 AS DNAME1,
	       USRID2 AS USRID2,
	       RECAYN AS RECAYN,       
	       CARNUMNM AS CARNUMNM ,
	       CARNUMNMRE AS CARNUMNMRE,
	       SEBELN AS SEBELN
	FROM (
	    SELECT /*+INDEX (R IDX_SHPDR_NEW01)*/ H.SHPOKY,
	           H.SHPMTY,
	           H.OWNRKY,
	           H.WAREKY,
	           H.DOCDAT, 
	           H.DPTNKY, 
	           B.NAME01,
	           R.SHPOIT, 
	           R.DEPART, 
	           R.ARRIVA,
	
	/*20131129 서동원 추가*/
	           R.DRIVER,
	           R.TRCMPY,
	           R.FORKYN,
	           R.RETRCP,
	           R.RETUYN,
	
	           R.CARNUM,
	           R.RECNUM,
	           R.CARDAT,
	           R.RECDAT,
	           R.SHIPSQ, 
	           R.SORTSQ,
	           R.PERHNO,
	           I.SEBELN,
	           I.SKUKEY,
	           I.QTALOC, 
	           H.PGRC03,
	           H.USRID1,
	           H.UNAME1,
	           H.DEPTID1,
	           H.DNAME1,
	           H.USRID2,
	           CM.CARGBN,
	           CM.CARTYP,
	           R.RCAGBN,
	           R.RCATYP,
	           WM_CONCAT(DISTINCT S.ASKU05) ASKU05,
	           R.RECAYN ,
	           R.CARNUM || DECODE(R.CARNUM , ' ','', '-') || CM.DESC01 CARNUMNM,
	           R.RECNUM || DECODE(R.RECNUM , ' ','', '-') || RM.DESC01 CARNUMNMRE
	      FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
	                   INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
	                   INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
	                   INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
	                   LEFT OUTER JOIN CARMA CM ON H.WAREKY = CM.WAREKY AND R.CARNUM = CM.CARNUM
	                   LEFT OUTER JOIN CARMA RM ON H.WAREKY = RM.WAREKY AND R.RECNUM = RM.CARNUM
	     WHERE H.DRELIN = 'V'
	       /* AND R.RECAYN = 'N' */
	       AND B.PTNRTY != '0002'
	       AND I.QTALOC &gt; 0
	       AND H.STATDO IN ('FPC','PPC','FSH','PSH')
	       AND H.OWNRKY = #{OWNRKY}
       	   AND H.WAREKY = #{WAREKY} 
	<if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>
	<if test='CARGBN != ""'> 
        AND CM.CARGBN = #{CARGBN} 
    </if> 
	<if test='CARDAT != ""'> 
        AND R.CARDAT= #{CARDAT} 
    </if> 
	     GROUP BY H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
	              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, R.RCATYP,
	              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1, R.RCAGBN,
	              H.DNAME1, H.USRID2, CM.CARGBN, CM.CARTYP, H.OWNRKY, H.WAREKY, I.SEBELN,
	              R.PERHNO, RM.CARGBN, RM.CARTYP, R.RECNUM, R.RECDAT, R.RECAYN, CM.DESC01, RM.DESC01,
	              R.DRIVER, R.TRCMPY, R.FORKYN, R.RETRCP, R.RETUYN
	  )
	WHERE 1=1
	GROUP BY SHPOKY, DPTNKY, NAME01, DEPART, ARRIVA, CARNUM, SHIPSQ, ASKU05, PGRC03, CARDAT, RCATYP, RCAGBN, SEBELN,
	         USRID1, UNAME1, DEPTID1, DNAME1, USRID2, CARTYP, CARGBN, PERHNO, RECNUM, RECDAT, RECAYN, CARNUMNM, CARNUMNMRE,
	         DRIVER, TRCMPY, FORKYN, RETRCP, RETUYN
	ORDER BY SHPOKY
  </select>
  
  <!-- [DL61] 재배차 : 헤더 수정 : OUTBOUND.RECARCTOT.UPDATE -->
  <update id="DL61_HEAD_UPDATE"  parameterType="hashmap">
  
     UPDATE SHPDR A
		   SET (RECNUM,RCAGBN,RCATYP,RECDAT,PERHNO,QTRECN,LMODAT,LMOTIM,LMOUSR)
		    = (SELECT #{RECNUM},#{RCAGBN},#{RCATYP},#{RECDAT},#{PERHNO},
		                          #{QTRECN}/COUNT(DISTINCT R.SHPOIT),TO_CHAR(SYSDATE, 'YYYYMMDD'),TO_CHAR(SYSDATE, 'HH24MISS'),#{SES_USER_ID}
		                     FROM  SHPDI I
		                          INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY
		                                            AND I.SHPOIT = R.SHPOIT                
		                    WHERE I.SVBELN = #{SVBELN}
		           )
		
		WHERE SHPOKY IN (SELECT SHPOKY FROM SHPDI 
						<if test='SVBELN != " "'> 
					        WHERE SVBELN = #{SVBELN}
					    </if> 
		                <if test='SHPOKY != ""'> 
					        WHERE SHPOKY = #{SHPOKY}
					    </if>
		                
		                )     

  
  </update>
   
  <!-- [DL62] 자동재배차 헤더 조회  : OUTBOUND.RECARMA.FIND -->
  <select id="DL62_HEAD_01_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT CM.OWNRKY AS OWNRKY,
		       CM.WAREKY AS WAREKY,
		       CM.CARNUM AS CARNUM,
		       CM.DESC01 AS DESC01,
		       CM.CARTYP AS CARTYP,
		       CM.CARGBN AS CARGBN,
		       CM.CARTMP AS CARTMP,
		       NVL(SUM(SI.QTALOC), 0) AS QTALOC,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 3), 0) AS PTQTY,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 2), 0) AS BOXQTY,
		       NVL(SUM(DECODE(SM.ASKU05, '001', ROUND(SI.QTALOC / CL.LOQTY1, 2), 0)), 0) AS RT1,       
		       NVL(SUM(DECODE(SM.ASKU05, '001', 0, ROUND(SI.QTALOC / CL.LOQTY1, 2))), 0) AS RT2,         
		       NVL(SUM(DECODE(SM.ASKU05, '001', SM.NETWGT * SI.QTALOC / DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT1, 
		       NVL(SUM(DECODE(SM.ASKU05, '001', 0, SM.NETWGT * SI.QTALOC/ DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT2,
		       COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
		       NVL(CD.USARG1, '20000') AS MAXCARTON
		FROM CARMA CM LEFT OUTER JOIN SHPDR SR ON CM.CARNUM = SR.RECNUM AND SR.RECDAT = #{CARDAT}
		              LEFT OUTER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
		              LEFT OUTER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY AND SH.DOCDAT = #{DOCDAT}
		              LEFT OUTER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		              LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
		              LEFT OUTER JOIN CMCDV CD ON CD.CMCDKY = 'CARTYP'  AND CM.CARTYP = CD.CMCDVL
		WHERE 1 = 1
		  AND CM.DELMAK != '1'
       	 AND CM.OWNRKY = #{OWNRKY}
       	 AND CM.WAREKY = #{WAREKY} 
		<if test='CARGBN != ""'> 
        	 AND CM.CARGBN = #{CARGBN} 
   		</if> 
		<if test='CARTMP != ""'> 
        	 AND CM.CARTMP = #{CARTMP} 
   		</if> 
		
		GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, CM.CARTYP, CM.CARGBN, CM.CARTMP, CD.USARG1
		ORDER BY NVL(SUM(SI.QTALOC), 0) DESC
   
  </select> 
  
  
  <!-- [DL62] 자동재배차 아이템 조회 01  : OUTBOUND.DL62.FINDPT -->
  <select id="DL62_ITEM_01_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.WAREKY AS WAREKY,
		       A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       SUM(A.CNT) AS CNT,
		       COUNT(1) AS SKUCNT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.REGNNM AS ARRIVANM,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.RECNUM AS RECNUM,
		       A.RECDAT AS RECDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       SUM(A.NETWGT) AS GRSWGT,
		       SUM(A.BOXQTY) AS BOXQTY, 
		       0 AS D1T, 
		       0 AS D25T,
		       0 AS D35T,
		       0 AS D5T,
		       0 AS D8T,
		       0 AS D11T,
		       0 AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		        A.USRID1 AS USRID1,
		        A.UNAME1 AS UNAME1 ,
		        A.DEPTID1 AS DEPTID1,
		        A.DNAME1 AS DNAME1,
		        A.USRID2 AS USRID2,
		        B.DESC01 AS DESC01,
		        B.DESC01 AS ODESC01,
		        NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
		        A.PTNG07 AS PTNG07,
		        MAX(A.DOCTXT) AS DOCTXT,
		        B.DCMPNM AS TRCMPY,
		        A.FORKYN AS FORKYN
		 FROM (
		    SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           MAX(H.DOCTXT) DOCTXT,
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           A.REGNNM,
		           R.CARNUM,
		           DECODE(R.RECAYN, 'Y', R.RECNUM, ' ') AS RECNUM,
		           R.RECDAT,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           I.QTALOC, 
		           H.PGRC03,
		           H.USRID1,
		           H.UNAME1,
		           H.DEPTID1,
		           H.DNAME1,
		           H.USRID2,
		          I.QTALOC * S.NETWGT AS NETWGT, 
		          WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
		          TRUNC(I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) ,1) AS BOXQTY,
		          MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
		          B.PTNG07,
		          B.FORKYN 
		      FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
		                   INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
		                   INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
		                   INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
		                   INNER JOIN CMCDV V ON B.PTNG07 = V.CMCDVL AND V.CMCDKY = 'CARTYP'
		                   INNER JOIN SHPMA A ON R.ARRIVA = A.REGNKY
		     WHERE H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND I.QTALOC &gt; 0
		       AND R.CARNUM !=' '
		       AND R.SHIPSQ NOT BETWEEN 20 AND 30
				
			   AND H.OWNRKY = #{OWNRKY}
		       AND H.WAREKY = #{WAREKY}
		       <if test="RANGE_SQL1 != null and RANGE_SQL1 != ''"> ${RANGE_SQL1} </if>
		
		     GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
		              H.DNAME1, H.USRID2, B.PTNG07, I.SVBELN, B.FORKYN, R.RECAYN, R.RECNUM, R.RECDAT, A.REGNNM, S.NETWGT, S.QTDUOM
		  ) A, CARMA B
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  GROUP BY SHPOKY,DPTNKY,NAME01,DEPART,ARRIVA,A.CARNUM, SHIPSQ, ASKU05   ,PGRC03 ,CARDAT,
		           USRID1, UNAME1, DEPTID1, DNAME1, USRID2,B.DESC01,A.PTNG07, A.SVBELN, B.DCMPNM, 
		           A.FORKYN, A.RECNUM, A.RECDAT, A.WAREKY, A.REGNNM
		  ORDER BY A.SHPOKY, A.SHIPSQ
   
  </select> 
  
  <!-- [DL62] 자동재배차 아이템 조회  02: OUTBOUND.DL62.FINDIC -->
  <select id="DL62_ITEM_01_02_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.WAREKY AS WAREKY,
		       A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       SUM(A.CNT) AS CNT,
		       COUNT(1) AS SKUCNT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.REGNNM AS ARRIVANM,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.RECNUM AS RECNUM,
		       A.RECDAT AS RECDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       SUM(A.NETWGT) AS GRSWGT,
		       SUM(A.BOXQTY) AS BOXQTY, 
		       0 AS D1T, 
		       0 AS D25T,
		       0 AS D35T,
		       0 AS D5T,
		       0 AS D8T,
		       0 AS D11T,
		       0 AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		        A.USRID1 AS USRID1,
		        A.UNAME1 AS UNAME1 ,
		        A.DEPTID1 AS DEPTID1,
		        A.DNAME1 AS DNAME1,
		        A.USRID2 AS USRID2,
		        B.DESC01 AS DESC01,
		        B.DESC01 AS ODESC01,
		        NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
		        A.PTNG07 AS PTNG07,
		        MAX(A.DOCTXT) AS DOCTXT,
		        B.DCMPNM AS TRCMPY,
		        A.FORKYN AS FORKYN
		 FROM (
		    SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           MAX(H.DOCTXT) DOCTXT,
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           A.REGNNM,
		           R.CARNUM,
		           DECODE(R.RECAYN, 'Y', R.RECNUM, ' ') AS RECNUM,
		           R.RECDAT,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           I.QTALOC, 
		           H.PGRC03,
		           H.USRID1,
		           H.UNAME1,
		           H.DEPTID1,
		           H.DNAME1,
		           H.USRID2,
		          I.QTALOC * S.NETWGT AS NETWGT, 
		          WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
		          TRUNC(I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) ,1) AS BOXQTY,
		          MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
		          B.PTNG07,
		          B.FORKYN 
		      FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
		                   INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
		                   INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
		                   INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
		                   INNER JOIN CMCDV V ON B.PTNG07 = V.CMCDVL AND V.CMCDKY = 'CARTYP'
		                   INNER JOIN SHPMA A ON R.ARRIVA = A.REGNKY
		     WHERE H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND I.QTALOC &gt; 0
		       AND R.CARNUM !=' '
		       AND H.OWNRKY = #{OWNRKY}
       	 	   AND H.WAREKY = #{WAREKY} 
       		  AND R.SHIPSQ not between 20 and 30
			<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>
		
		     GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
		              H.DNAME1, H.USRID2, B.PTNG07, I.SVBELN, B.FORKYN, R.RECAYN, R.RECNUM, R.RECDAT, A.REGNNM, S.NETWGT, S.QTDUOM
		  ) A, CARMA B
		
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  GROUP BY SHPOKY,DPTNKY,NAME01,DEPART,ARRIVA,A.CARNUM, SHIPSQ, ASKU05   ,PGRC03 ,CARDAT,
		           USRID1, UNAME1, DEPTID1, DNAME1, USRID2,B.DESC01,A.PTNG07, A.SVBELN, B.DCMPNM, 
		           A.FORKYN, A.RECNUM, A.RECDAT, A.WAREKY, A.REGNNM
		  ORDER BY A.SHPOKY, A.SHIPSQ
   
  </select>   
    
  
  <!-- [DL62] 자동재배차 아이템 조회  03: OUTBOUND.DL62.FIND -->
  <select id="DL62_ITEM_01_03_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.WAREKY AS WAREKY,
		       A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       SUM(A.CNT) AS CNT,
		       COUNT(1) AS SKUCNT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.REGNNM AS ARRIVANM,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.RECNUM AS RECNUM,
		       A.RECDAT AS RECDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       SUM(A.NETWGT) AS GRSWGT,
		       SUM(A.BOXQTY) AS BOXQTY, 
		       0 AS D1T, 
		       0 AS D25T,
		       0 AS D35T,
		       0 AS D5T,
		       0 AS D8T,
		       0 AS D11T,
		       0 AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		        A.USRID1 AS USRID1,
		        A.UNAME1 AS UNAME1 ,
		        A.DEPTID1 AS DEPTID1,
		        A.DNAME1 AS DNAME1,
		        A.USRID2 AS USRID2,
		        B.DESC01 AS DESC01,
		        B.DESC01 AS ODESC01,
		        NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
		        A.PTNG07 AS PTNG07,
		        MAX(A.DOCTXT) AS DOCTXT,
		        B.DCMPNM AS TRCMPY,
		        A.FORKYN AS FORKYN,
		       A.RECNUM AS RECNUMOLD
		 FROM (
		    SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           MAX(H.DOCTXT) DOCTXT,
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           A.REGNNM,
		           R.CARNUM,
		           DECODE(R.RECAYN, 'Y', R.RECNUM, ' ') AS RECNUM,
		           R.RECDAT,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           I.QTALOC, 
		           H.PGRC03,
		           H.USRID1,
		           H.UNAME1,
		           H.DEPTID1,
		           H.DNAME1,
		           H.USRID2,
		          I.QTALOC * S.NETWGT AS NETWGT, 
		          WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
		          TRUNC(I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) ,1) AS BOXQTY,
		          MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
		          B.PTNG07,
		          B.FORKYN 
		      FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
		                   INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
		                   INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
		                   INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
		                   INNER JOIN CMCDV V ON B.PTNG07 = V.CMCDVL AND V.CMCDKY = 'CARTYP'
		                   INNER JOIN SHPMA A ON R.ARRIVA = A.REGNKY
		     WHERE H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND I.QTALOC &gt; 0
		       AND R.CARNUM !=' '
		       AND R.SHIPSQ != 0
			   AND H.OWNRKY = #{OWNRKY}
       	 	   AND H.WAREKY = #{WAREKY} 
			<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>
       AND ((H.WAREKY = '2256' AND R.SHIPSQ BETWEEN 20 and 30 ) or H.WAREKY='2254')
		
		GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
		              H.DNAME1, H.USRID2, B.PTNG07, I.SVBELN, B.FORKYN, R.RECAYN, R.RECNUM, R.RECDAT, A.REGNNM, S.NETWGT, S.QTDUOM
		  ) A, CARMA B
		
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  GROUP BY SHPOKY,DPTNKY,NAME01,DEPART,ARRIVA,A.CARNUM, SHIPSQ, ASKU05   ,PGRC03 ,CARDAT,
		           USRID1, UNAME1, DEPTID1, DNAME1, USRID2,B.DESC01,A.PTNG07, A.SVBELN, B.DCMPNM, 
		           A.FORKYN, A.RECNUM, A.RECDAT, A.WAREKY, A.REGNNM
		  ORDER BY A.SHPOKY, A.SHIPSQ
   
  </select> 
  
  <!-- [DL62] 자동재배차 헤더 조회 2 : OUTBOUND.EXRECARMA.FIND -->
  <select id="DL62_HEAD_02_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT CM.OWNRKY AS OWNRKY,
		       CM.WAREKY AS WAREKY,
		       CM.CARNUM AS CARNUM,
		       CM.DESC01 AS DESC01,
		       CM.CARTYP AS CARTYP,
		       CM.CARGBN AS CARGBN,
		       CM.CARTMP AS CARTMP,
		       NVL(SUM(SI.QTALOC), 0) AS QTALOC,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 3), 0) AS PTQTY,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 2), 0) AS BOXQTY,
		       NVL(SUM(DECODE(SM.ASKU05, '001', ROUND(SI.QTALOC / CL.LOQTY1, 2), 0)), 0) AS RT1,       
		       NVL(SUM(DECODE(SM.ASKU05, '001', 0, ROUND(SI.QTALOC / CL.LOQTY1, 2))), 0) AS RT2,         
		       NVL(SUM(DECODE(SM.ASKU05, '001', SM.NETWGT * SI.QTALOC / DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT1, 
		       NVL(SUM(DECODE(SM.ASKU05, '001', 0, SM.NETWGT * SI.QTALOC/ DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT2,
		       COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
		       NVL(CD.USARG1, '20000') AS MAXCARTON
		FROM CARMA CM LEFT OUTER JOIN SHPDR SR ON CM.CARNUM = SR.RECNUM AND SR.CARDAT IN (SELECT RECDAT FROM SHPDR H WHERE 1=1 
		           <if test="RANGE_SQL3 != null and RANGE_SQL3 != ''"> ${RANGE_SQL3} </if>)
		              LEFT OUTER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
		              LEFT OUTER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY
		              LEFT OUTER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		              LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
		              LEFT OUTER JOIN CMCDV CD ON CD.CMCDKY = 'CARTYP'  AND CM.CARTYP = CD.CMCDVL
				WHERE 1 = 1
				 AND CM.DELMAK = ' '
		       	 AND CM.OWNRKY = #{OWNRKY}
		       	 AND CM.WAREKY = #{WAREKY} 
				<if test='CARGBN != ""'> 
		        	 AND CM.CARGBN = #{CARGBN} 
		   		</if> 
				<if test='CARTMP != ""'> 
		        	 AND CM.CARTMP = #{CARTMP} 
		   		</if> 
				<if test="RANGE_SQL0 != null and RANGE_SQL0 != ''"> ${RANGE_SQL0} </if>
		
		GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, CM.CARTYP, CM.CARGBN, CM.CARTMP, CD.USARG1
		ORDER BY NVL(SUM(SI.QTALOC), 0) DESC
   
  </select> 
  
 <!-- [DL62] 자동재배차 아이템 조회  02_01: OUTBOUND.DL62.EXFIND -->
  <select id="DL62_ITEM_02_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.WAREKY AS WAREKY,
		       A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       SUM(A.CNT) AS CNT,
		       COUNT(1) AS SKUCNT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.REGNNM AS ARRIVANM,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.RECNUM AS RECNUM,
		       A.RECDAT AS RECDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       A.NETWGT AS GRSWGT,
		       A.BOXQTY AS BOXQTY, 
		       0 AS D1T, 
		       0 AS D25T,
		       0 AS D35T,
		       0 AS D5T,
		       0 AS D8T,
		       0 AS D11T,
		       0 AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		        A.USRID1 AS USRID1,
		        A.UNAME1 AS UNAME1 ,
		        A.DEPTID1 AS DEPTID1,
		        A.DNAME1 AS DNAME1,
		        A.USRID2 AS USRID2,
		        B.DESC01 AS DESC01,
		        B.DESC01 AS ODESC01,
		        NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
		        A.PTNG07 AS PTNG07,
		        MAX(A.DOCTXT) AS DOCTXT,
		        B.DCMPNM AS TRCMPY,
		        A.FORKYN AS FORKYN,
		       A.RECNUM AS RECNUMOLD
		 FROM (
		    SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           MAX(H.DOCTXT) DOCTXT,
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           A.REGNNM,
		           R.CARNUM,
		           DECODE(R.RECAYN, 'Y', R.RECNUM, ' ') AS RECNUM,
		           R.RECDAT,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           I.QTALOC, 
		           H.PGRC03,
		           H.USRID1,
		            H.UNAME1,
		            H.DEPTID1,
		            H.DNAME1,
		            H.USRID2,
		           S.NETWGT AS NETWGT , 
		           WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
		           I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) AS BOXQTY,
		          MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
		          B.PTNG07,
		          B.FORKYN 
		      FROM SHPDH H, SHPDI I, SHPDR R,
		           BZPTN B, SKUMA S, CMCDV V, SHPMA A
		     WHERE DRELIN = 'V'  
		       AND H.SHPOKY = I.SHPOKY
		       AND I.SHPOKY = R.SHPOKY
		       AND I.SHPOIT = R.SHPOIT
		       AND H.OWNRKY = B.OWNRKY
		       AND H.DPTNKY = B.PTNRKY
		       AND R.ARRIVA = A.REGNKY
		
		       AND V.CMCDKY = 'CARTYP'
		       AND B.PTNG07 = V.CMCDVL
		       AND H.OWNRKY = S.OWNRKY
		       AND I.SKUKEY = S.SKUKEY
		       AND H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND I.QTALOC &gt; 0
		       AND R.CARNUM !=' '
		       AND R.SHIPSQ != 0		
		 	   AND H.OWNRKY = #{OWNRKY}
		       AND H.WAREKY = #{WAREKY} 
			   <if test="RANGE_SQL3 != null and RANGE_SQL3 != ''"> ${RANGE_SQL3} </if>
		
		GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
		              H.DNAME1, H.USRID2, B.PTNG07, I.SVBELN, B.FORKYN, R.RECNUM, R.RECAYN, R.RECDAT, A.REGNNM,S.QTDUOM, S.NETWGT 
		
		  ) A, CARMA B
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  GROUP BY SHPOKY,DPTNKY,NAME01,DEPART,ARRIVA,A.CARNUM, SHIPSQ, ASKU05   ,PGRC03 ,CARDAT,
		           USRID1, UNAME1, DEPTID1, DNAME1, USRID2,B.DESC01,A.PTNG07, A.SVBELN, B.DCMPNM, A.FORKYN, A.RECNUM, A.RECDAT, A.WAREKY, A.REGNNM, A.NETWGT , A.BOXQTY
		  ORDER BY A.SHPOKY, A.SHIPSQ
   
  </select> 
  
  <!-- [DL62] 자동재배차 헤더 조회 3 : OUTBOUND.DL62.UPLOAD -->
  <select id="DL62_HEAD_03_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT OWNRKY AS OWNRKY,
		       WAREKY AS WAREKY,
		       RECDAT AS RECDAT,
		       DPTCNT AS DPTCNT,
		       RECNUM AS RECNUM,
		       DESC01 AS DESC01,
		       PTQTY AS PTQTY,
		       BOXQTY AS BOXQTY,
		       NETWGT AS QTJWGT,
		       DRIVER AS DRIVER,
		       PERHNO AS PERHNO
		FROM 
		(
		
		SELECT CM.OWNRKY AS OWNRKY,
		       CM.WAREKY AS WAREKY,
		       MAX(SR.RECDAT) AS RECDAT,
		       COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
		       CM.CARNUM AS RECNUM,
		       CM.DESC01 AS DESC01,
		       SR.DRIVER AS DRIVER,
		       SR.PERHNO AS PERHNO,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 3), 0) AS PTQTY,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 2), 0) AS BOXQTY,
		       NVL(TRUNC(SUM(SM.NETWGT * SI.QTALOC), 2), 0) AS NETWGT
		       
		FROM CARMA CM LEFT OUTER JOIN SHPDR SR ON CM.CARNUM = SR.RECNUM AND SR.RECDAT = #{CARDAT}
		              LEFT OUTER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
		              LEFT OUTER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY 
		              <if test='DOCDAT != ""'> 
				         AND SH.DOCDAT = #{DOCDAT}
				   	  </if>
		              LEFT OUTER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		              LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
		 WHERE 1 = 1
		   AND CM.OWNRKY = #{OWNRKY}
		   AND CM.WAREKY = #{WAREKY}
		   AND SR.RECDAT = #{RECDAT}
		   AND SH.STATDO IN ('FSH', 'PSH')
		 GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, SR.DRIVER, SR.PERHNO
		 ORDER BY NVL(SUM(SI.QTALOC), 0) DESC
   		)	
  </select> 
  
   <!-- [DL62] 자동재배차 : 저장 : OUTBOUND.DL62RECARALLOC.UPDATE -->
  <update id="DL62_ITEM_UPDATE"  parameterType="hashmap">
  
        UPDATE SHPDR 
		   SET 
		       <if test='RECNUM != ""'> RECNUM = #{RECNUM}, </if>
		       <if test='RECNUM == ""'> RECNUM = ' ', </if>
		       <if test='RECDAT != ""'> RECDAT = #{RECDAT}, </if>
		       <if test='RECDAT == ""'> RECDAT = ' ', </if>
		       
		       LMODAT = TO_CHAR(SYSDATE, 'YYYYMMDD'), 
		       LMOTIM = TO_CHAR(SYSDATE, 'HH24MISS'), 
		       LMOUSR = #{SES_USER_ID},
		       <if test='RECNUM != ""'> RECAYN = 'Y' </if>
		       <if test='RECNUM == ""'> RECAYN = 'N' </if>		  
		 WHERE 1 = 1 
		   AND SHPOKY = #{SHPOKY} 
		   AND ASKU05 = #{ASKU05} 
       
  </update>   
  
  <!-- P_CAR_REDISPATCHING_AUTO 프로시서 실행  -->
  <update id="P_CAR_REDISPATCHING_AUTO_UPDATE" parameterType="hashmap">
      { call P_CAR_REDISPATCHING_AUTO(#{SHPOKY}, #{SES_USER_ID} ) }
  </update>
  
  <!-- P_CAR_REDISPATCHING_FIXED 프로시서 실행 -->
  <update id="P_CAR_REDISPATCHING_FIXED_UPDATE" parameterType="hashmap">
      { call P_CAR_REDISPATCHING_FIXED(#{SHPOKY}, #{SES_USER_ID} ) }
  </update>
  
  <!-- P_CAR_REDISPATCHING_AUTO_IC 프로시서 실행 -->
  <update id="P_CAR_REDISPATCHING_AUTO_IC_UPDATE" parameterType="hashmap">
      { call P_CAR_REDISPATCHING_AUTO_IC(#{SHPOKY}, #{SES_USER_ID} ) }
  </update>
  
   <!-- [DL63] 자동재배차(인천) 헤더 조회  : OUTBOUND.RECARMA.FIND -->
  <select id="DL63_HEAD_01_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT CM.OWNRKY AS OWNRKY,
		       CM.WAREKY AS WAREKY,
		       CM.CARNUM AS CARNUM,
		       CM.DESC01 AS DESC01,
		       CM.CARTYP AS CARTYP,
		       CM.CARGBN AS CARGBN,
		       CM.CARTMP AS CARTMP,
		       NVL(SUM(SI.QTALOC), 0) AS QTALOC,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 3), 0) AS PTQTY,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 2), 0) AS BOXQTY,
		       NVL(SUM(DECODE(SM.ASKU05, '001', ROUND(SI.QTALOC / CL.LOQTY1, 2), 0)), 0) AS RT1,       
		       NVL(SUM(DECODE(SM.ASKU05, '001', 0, ROUND(SI.QTALOC / CL.LOQTY1, 2))), 0) AS RT2,         
		       NVL(SUM(DECODE(SM.ASKU05, '001', SM.NETWGT * SI.QTALOC / DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT1, 
		       NVL(SUM(DECODE(SM.ASKU05, '001', 0, SM.NETWGT * SI.QTALOC/ DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT2,
		       COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
		       NVL(CD.USARG1, '20000') AS MAXCARTON
		FROM CARMA CM LEFT OUTER JOIN SHPDR SR ON CM.CARNUM = SR.RECNUM AND SR.RECDAT = #{CARDAT}
		              LEFT OUTER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
		              LEFT OUTER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY AND SH.DOCDAT = #{DOCDAT}
		              LEFT OUTER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		              LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
		              LEFT OUTER JOIN CMCDV CD ON CD.CMCDKY = 'CARTYP'  AND CM.CARTYP = CD.CMCDVL
		WHERE 1 = 1
		  AND CM.DELMAK != '1'
       	 AND CM.OWNRKY = #{OWNRKY}
       	 AND CM.WAREKY = #{WAREKY} 
		<if test='CARGBN != ""'> 
        	 AND CM.CARGBN = #{CARGBN} 
   		</if> 
		<if test='CARTMP != ""'> 
        	 AND CM.CARTMP = #{CARTMP} 
   		</if> 
		
		GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, CM.CARTYP, CM.CARGBN, CM.CARTMP, CD.USARG1
		ORDER BY NVL(SUM(SI.QTALOC), 0) DESC
   
  </select> 
  
  
  <!-- [DL63] 자동재배차(인천) 아이템 조회 01  : OUTBOUND.DL62.FINDPT -->
  <select id="DL63_ITEM_01_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.WAREKY AS WAREKY,
		       A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       SUM(A.CNT) AS CNT,
		       COUNT(1) AS SKUCNT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.REGNNM AS ARRIVANM,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.RECNUM AS RECNUM,
		       A.RECDAT AS RECDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       SUM(A.NETWGT) AS GRSWGT,
		       SUM(A.BOXQTY) AS BOXQTY, 
		       0 AS D1T, 
		       0 AS D25T,
		       0 AS D35T,
		       0 AS D5T,
		       0 AS D8T,
		       0 AS D11T,
		       0 AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		        A.USRID1 AS USRID1,
		        A.UNAME1 AS UNAME1 ,
		        A.DEPTID1 AS DEPTID1,
		        A.DNAME1 AS DNAME1,
		        A.USRID2 AS USRID2,
		        B.DESC01 AS DESC01,
		        B.DESC01 AS ODESC01,
		        NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
		        A.PTNG07 AS PTNG07,
		        MAX(A.DOCTXT) AS DOCTXT,
		        B.DCMPNM AS TRCMPY,
		        A.FORKYN AS FORKYN
		 FROM (
		    SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           MAX(H.DOCTXT) DOCTXT,
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           A.REGNNM,
		           R.CARNUM,
		           DECODE(R.RECAYN, 'Y', R.RECNUM, ' ') AS RECNUM,
		           R.RECDAT,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           I.QTALOC, 
		           H.PGRC03,
		           H.USRID1,
		           H.UNAME1,
		           H.DEPTID1,
		           H.DNAME1,
		           H.USRID2,
		          I.QTALOC * S.NETWGT AS NETWGT, 
		          WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
		          TRUNC(I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) ,1) AS BOXQTY,
		          MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
		          B.PTNG07,
		          B.FORKYN 
		      FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
		                   INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
		                   INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
		                   INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
		                   INNER JOIN CMCDV V ON B.PTNG07 = V.CMCDVL AND V.CMCDKY = 'CARTYP'
		                   INNER JOIN SHPMA A ON R.ARRIVA = A.REGNKY
		     WHERE H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND I.QTALOC &gt; 0
		       AND R.CARNUM !=' '
		       AND R.SHIPSQ NOT BETWEEN 20 AND 30
				
			   AND H.OWNRKY = #{OWNRKY}
		       AND H.WAREKY = #{WAREKY}
		       <if test="RANGE_SQL1 != null and RANGE_SQL1 != ''"> ${RANGE_SQL1} </if>
		
		     GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
		              H.DNAME1, H.USRID2, B.PTNG07, I.SVBELN, B.FORKYN, R.RECAYN, R.RECNUM, R.RECDAT, A.REGNNM, S.NETWGT, S.QTDUOM
		  ) A, CARMA B
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  GROUP BY SHPOKY,DPTNKY,NAME01,DEPART,ARRIVA,A.CARNUM, SHIPSQ, ASKU05   ,PGRC03 ,CARDAT,
		           USRID1, UNAME1, DEPTID1, DNAME1, USRID2,B.DESC01,A.PTNG07, A.SVBELN, B.DCMPNM, 
		           A.FORKYN, A.RECNUM, A.RECDAT, A.WAREKY, A.REGNNM
		  ORDER BY A.SHPOKY, A.SHIPSQ
   
  </select> 
  
  <!-- [DL63] 자동재배차(인천) 아이템 조회  02: OUTBOUND.DL62.FINDIC -->
  <select id="DL63_ITEM_01_02_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.WAREKY AS WAREKY,
		       A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       SUM(A.CNT) AS CNT,
		       COUNT(1) AS SKUCNT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.REGNNM AS ARRIVANM,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.RECNUM AS RECNUM,
		       A.RECDAT AS RECDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       SUM(A.NETWGT) AS GRSWGT,
		       SUM(A.BOXQTY) AS BOXQTY, 
		       0 AS D1T, 
		       0 AS D25T,
		       0 AS D35T,
		       0 AS D5T,
		       0 AS D8T,
		       0 AS D11T,
		       0 AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		        A.USRID1 AS USRID1,
		        A.UNAME1 AS UNAME1 ,
		        A.DEPTID1 AS DEPTID1,
		        A.DNAME1 AS DNAME1,
		        A.USRID2 AS USRID2,
		        B.DESC01 AS DESC01,
		        B.DESC01 AS ODESC01,
		        NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
		        A.PTNG07 AS PTNG07,
		        MAX(A.DOCTXT) AS DOCTXT,
		        B.DCMPNM AS TRCMPY,
		        A.FORKYN AS FORKYN
		 FROM (
		    SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           MAX(H.DOCTXT) DOCTXT,
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           A.REGNNM,
		           R.CARNUM,
		           DECODE(R.RECAYN, 'Y', R.RECNUM, ' ') AS RECNUM,
		           R.RECDAT,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           I.QTALOC, 
		           H.PGRC03,
		           H.USRID1,
		           H.UNAME1,
		           H.DEPTID1,
		           H.DNAME1,
		           H.USRID2,
		          I.QTALOC * S.NETWGT AS NETWGT, 
		          WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
		          TRUNC(I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) ,1) AS BOXQTY,
		          MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
		          B.PTNG07,
		          B.FORKYN 
		      FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
		                   INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
		                   INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
		                   INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
		                   INNER JOIN CMCDV V ON B.PTNG07 = V.CMCDVL AND V.CMCDKY = 'CARTYP'
		                   INNER JOIN SHPMA A ON R.ARRIVA = A.REGNKY
		     WHERE H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND I.QTALOC &gt; 0
		       AND R.CARNUM !=' '
		       AND H.OWNRKY = #{OWNRKY}
       	 	   AND H.WAREKY = #{WAREKY} 
       		  AND R.SHIPSQ not between 20 and 30
			<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>
		
		     GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
		              H.DNAME1, H.USRID2, B.PTNG07, I.SVBELN, B.FORKYN, R.RECAYN, R.RECNUM, R.RECDAT, A.REGNNM, S.NETWGT, S.QTDUOM
		  ) A, CARMA B
		
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  GROUP BY SHPOKY,DPTNKY,NAME01,DEPART,ARRIVA,A.CARNUM, SHIPSQ, ASKU05   ,PGRC03 ,CARDAT,
		           USRID1, UNAME1, DEPTID1, DNAME1, USRID2,B.DESC01,A.PTNG07, A.SVBELN, B.DCMPNM, 
		           A.FORKYN, A.RECNUM, A.RECDAT, A.WAREKY, A.REGNNM
		  ORDER BY A.SHPOKY, A.SHIPSQ
   
  </select>   
    
  
  <!-- [DL63] 자동재배차(인천) 아이템 조회  03: OUTBOUND.DL62.FIND -->
  <select id="DL63_ITEM_01_03_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.WAREKY AS WAREKY,
		       A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       SUM(A.CNT) AS CNT,
		       COUNT(1) AS SKUCNT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.REGNNM AS ARRIVANM,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.RECNUM AS RECNUM,
		       A.RECDAT AS RECDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       SUM(A.NETWGT) AS GRSWGT,
		       SUM(A.BOXQTY) AS BOXQTY, 
		       0 AS D1T, 
		       0 AS D25T,
		       0 AS D35T,
		       0 AS D5T,
		       0 AS D8T,
		       0 AS D11T,
		       0 AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		        A.USRID1 AS USRID1,
		        A.UNAME1 AS UNAME1 ,
		        A.DEPTID1 AS DEPTID1,
		        A.DNAME1 AS DNAME1,
		        A.USRID2 AS USRID2,
		        B.DESC01 AS DESC01,
		        B.DESC01 AS ODESC01,
		        NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
		        A.PTNG07 AS PTNG07,
		        MAX(A.DOCTXT) AS DOCTXT,
		        B.DCMPNM AS TRCMPY,
		        A.FORKYN AS FORKYN,
		       A.RECNUM AS RECNUMOLD
		 FROM (
		    SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           MAX(H.DOCTXT) DOCTXT,
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           A.REGNNM,
		           R.CARNUM,
		           DECODE(R.RECAYN, 'Y', R.RECNUM, ' ') AS RECNUM,
		           R.RECDAT,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           I.QTALOC, 
		           H.PGRC03,
		           H.USRID1,
		           H.UNAME1,
		           H.DEPTID1,
		           H.DNAME1,
		           H.USRID2,
		          I.QTALOC * S.NETWGT AS NETWGT, 
		          WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
		          TRUNC(I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) ,1) AS BOXQTY,
		          MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
		          B.PTNG07,
		          B.FORKYN 
		      FROM SHPDH H INNER JOIN SHPDI I ON H.SHPOKY = I.SHPOKY
		                   INNER JOIN SHPDR R ON I.SHPOKY = R.SHPOKY AND I.SHPOIT = R.SHPOIT
		                   INNER JOIN BZPTN B ON H.OWNRKY = B.OWNRKY AND H.DPTNKY = B.PTNRKY
		                   INNER JOIN SKUMA S ON H.OWNRKY = S.OWNRKY AND I.SKUKEY = S.SKUKEY
		                   INNER JOIN CMCDV V ON B.PTNG07 = V.CMCDVL AND V.CMCDKY = 'CARTYP'
		                   INNER JOIN SHPMA A ON R.ARRIVA = A.REGNKY
		     WHERE H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND I.QTALOC &gt; 0
		       AND R.CARNUM !=' '
		       AND R.SHIPSQ != 0
			   AND H.OWNRKY = #{OWNRKY}
       	 	   AND H.WAREKY = #{WAREKY} 
			<if test="RANGE_SQL2 != null and RANGE_SQL2 != ''"> ${RANGE_SQL2} </if>
       AND ((H.WAREKY = '2256' AND R.SHIPSQ BETWEEN 20 and 30 ) or H.WAREKY='2254')
		
		GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
		              H.DNAME1, H.USRID2, B.PTNG07, I.SVBELN, B.FORKYN, R.RECAYN, R.RECNUM, R.RECDAT, A.REGNNM, S.NETWGT, S.QTDUOM
		  ) A, CARMA B
		
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  GROUP BY SHPOKY,DPTNKY,NAME01,DEPART,ARRIVA,A.CARNUM, SHIPSQ, ASKU05   ,PGRC03 ,CARDAT,
		           USRID1, UNAME1, DEPTID1, DNAME1, USRID2,B.DESC01,A.PTNG07, A.SVBELN, B.DCMPNM, 
		           A.FORKYN, A.RECNUM, A.RECDAT, A.WAREKY, A.REGNNM
		  ORDER BY A.SHPOKY, A.SHIPSQ
   
  </select> 
  
  <!-- [DL63] 자동재배차(인천) 헤더 조회 2 : OUTBOUND.EXRECARMA.FIND -->
  <select id="DL63_HEAD_02_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT CM.OWNRKY AS OWNRKY,
		       CM.WAREKY AS WAREKY,
		       CM.CARNUM AS CARNUM,
		       CM.DESC01 AS DESC01,
		       CM.CARTYP AS CARTYP,
		       CM.CARGBN AS CARGBN,
		       CM.CARTMP AS CARTMP,
		       NVL(SUM(SI.QTALOC), 0) AS QTALOC,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 3), 0) AS PTQTY,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 2), 0) AS BOXQTY,
		       NVL(SUM(DECODE(SM.ASKU05, '001', ROUND(SI.QTALOC / CL.LOQTY1, 2), 0)), 0) AS RT1,       
		       NVL(SUM(DECODE(SM.ASKU05, '001', 0, ROUND(SI.QTALOC / CL.LOQTY1, 2))), 0) AS RT2,         
		       NVL(SUM(DECODE(SM.ASKU05, '001', SM.NETWGT * SI.QTALOC / DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT1, 
		       NVL(SUM(DECODE(SM.ASKU05, '001', 0, SM.NETWGT * SI.QTALOC/ DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT2,
		       COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
		       NVL(CD.USARG1, '20000') AS MAXCARTON
		FROM CARMA CM LEFT OUTER JOIN SHPDR SR ON CM.CARNUM = SR.RECNUM AND SR.CARDAT IN (SELECT RECDAT FROM SHPDR H WHERE 1=1 
		           <if test="RANGE_SQL3 != null and RANGE_SQL3 != ''"> ${RANGE_SQL3} </if>)
		              LEFT OUTER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
		              LEFT OUTER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY
		              LEFT OUTER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		              LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
		              LEFT OUTER JOIN CMCDV CD ON CD.CMCDKY = 'CARTYP'  AND CM.CARTYP = CD.CMCDVL
				WHERE 1 = 1
				 AND CM.DELMAK = ' '
		       	 AND CM.OWNRKY = #{OWNRKY}
		       	 AND CM.WAREKY = #{WAREKY} 
				<if test='CARGBN != ""'> 
		        	 AND CM.CARGBN = #{CARGBN} 
		   		</if> 
				<if test='CARTMP != ""'> 
		        	 AND CM.CARTMP = #{CARTMP} 
		   		</if> 
				<if test="RANGE_SQL0 != null and RANGE_SQL0 != ''"> ${RANGE_SQL0} </if>
		
		GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, CM.CARTYP, CM.CARGBN, CM.CARTMP, CD.USARG1
		ORDER BY NVL(SUM(SI.QTALOC), 0) DESC
   
  </select> 
  
 <!-- [DL63] 자동재배차(인천) 아이템 조회  02_01: OUTBOUND.DL62.EXFIND -->
  <select id="DL63_ITEM_02_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.WAREKY AS WAREKY,
		       A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       SUM(A.CNT) AS CNT,
		       COUNT(1) AS SKUCNT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.REGNNM AS ARRIVANM,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.RECNUM AS RECNUM,
		       A.RECDAT AS RECDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       A.NETWGT AS GRSWGT,
		       A.BOXQTY AS BOXQTY, 
		       0 AS D1T, 
		       0 AS D25T,
		       0 AS D35T,
		       0 AS D5T,
		       0 AS D8T,
		       0 AS D11T,
		       0 AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',A.PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		        A.USRID1 AS USRID1,
		        A.UNAME1 AS UNAME1 ,
		        A.DEPTID1 AS DEPTID1,
		        A.DNAME1 AS DNAME1,
		        A.USRID2 AS USRID2,
		        B.DESC01 AS DESC01,
		        B.DESC01 AS ODESC01,
		        NVL(TRIM(MAX(MAXCARTON)),'200000') AS MAXCARTON,
		        A.PTNG07 AS PTNG07,
		        MAX(A.DOCTXT) AS DOCTXT,
		        B.DCMPNM AS TRCMPY,
		        A.FORKYN AS FORKYN,
		       A.RECNUM AS RECNUMOLD
		 FROM (
		    SELECT H.OWNRKY, H.WAREKY, H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           COUNT(DECODE(R.TASKKY, ' ', NULL, R.TASKKY)) CNT,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           MAX(H.DOCTXT) DOCTXT,
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           A.REGNNM,
		           R.CARNUM,
		           DECODE(R.RECAYN, 'Y', R.RECNUM, ' ') AS RECNUM,
		           R.RECDAT,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           I.QTALOC, 
		           H.PGRC03,
		           H.USRID1,
		            H.UNAME1,
		            H.DEPTID1,
		            H.DNAME1,
		            H.USRID2,
		           S.NETWGT AS NETWGT , 
		           WM_CONCAT(DISTINCT S.ASKU05) ASKU05,          
		           I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) AS BOXQTY,
		          MAX(DECODE(V.USARG1, ' ', NULL, V.USARG1)) MAXCARTON,
		          B.PTNG07,
		          B.FORKYN 
		      FROM SHPDH H, SHPDI I, SHPDR R,
		           BZPTN B, SKUMA S, CMCDV V, SHPMA A
		     WHERE DRELIN = 'V'  
		       AND H.SHPOKY = I.SHPOKY
		       AND I.SHPOKY = R.SHPOKY
		       AND I.SHPOIT = R.SHPOIT
		       AND H.OWNRKY = B.OWNRKY
		       AND H.DPTNKY = B.PTNRKY
		       AND R.ARRIVA = A.REGNKY
		
		       AND V.CMCDKY = 'CARTYP'
		       AND B.PTNG07 = V.CMCDVL
		       AND H.OWNRKY = S.OWNRKY
		       AND I.SKUKEY = S.SKUKEY
		       AND H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND I.QTALOC &gt; 0
		       AND R.CARNUM !=' '
		       AND R.SHIPSQ != 0		
		 	   AND H.OWNRKY = #{OWNRKY}
		       AND H.WAREKY = #{WAREKY} 
			   <if test="RANGE_SQL3 != null and RANGE_SQL3 != ''"> ${RANGE_SQL3} </if>
		
		GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03 , H.USRID1, H.UNAME1, H.DEPTID1,
		              H.DNAME1, H.USRID2, B.PTNG07, I.SVBELN, B.FORKYN, R.RECNUM, R.RECAYN, R.RECDAT, A.REGNNM,S.QTDUOM, S.NETWGT 
		
		  ) A, CARMA B
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  GROUP BY SHPOKY,DPTNKY,NAME01,DEPART,ARRIVA,A.CARNUM, SHIPSQ, ASKU05   ,PGRC03 ,CARDAT,
		           USRID1, UNAME1, DEPTID1, DNAME1, USRID2,B.DESC01,A.PTNG07, A.SVBELN, B.DCMPNM, A.FORKYN, A.RECNUM, A.RECDAT, A.WAREKY, A.REGNNM, A.NETWGT , A.BOXQTY
		  ORDER BY A.SHPOKY, A.SHIPSQ
   
  </select> 
  
  <!-- [DL63] 자동재배차(인천) 헤더 조회 3 : OUTBOUND.DL62.UPLOAD -->
  <select id="DL63_HEAD_03_01_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT OWNRKY AS OWNRKY,
		       WAREKY AS WAREKY,
		       RECDAT AS RECDAT,
		       DPTCNT AS DPTCNT,
		       RECNUM AS RECNUM,
		       DESC01 AS DESC01,
		       PTQTY AS PTQTY,
		       BOXQTY AS BOXQTY,
		       NETWGT AS QTJWGT,
		       DRIVER AS DRIVER,
		       PERHNO AS PERHNO
		FROM 
		(
		
		SELECT CM.OWNRKY AS OWNRKY,
		       CM.WAREKY AS WAREKY,
		       MAX(SR.RECDAT) AS RECDAT,
		       COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
		       CM.CARNUM AS RECNUM,
		       CM.DESC01 AS DESC01,
		       SR.DRIVER AS DRIVER,
		       SR.PERHNO AS PERHNO,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 3), 0) AS PTQTY,
		       NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 2), 0) AS BOXQTY,
		       NVL(TRUNC(SUM(SM.NETWGT * SI.QTALOC), 2), 0) AS NETWGT
		       
		FROM CARMA CM LEFT OUTER JOIN SHPDR SR ON CM.CARNUM = SR.RECNUM AND SR.RECDAT = #{CARDAT}
		              LEFT OUTER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
		              LEFT OUTER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY 
		              <if test='DOCDAT != ""'> 
				         AND SH.DOCDAT = #{DOCDAT}
				   	  </if>
		              LEFT OUTER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
		              LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
		 WHERE 1 = 1
		   AND CM.OWNRKY = #{OWNRKY}
		   AND CM.WAREKY = #{WAREKY}
		   AND SR.RECDAT = #{RECDAT}
		   AND SH.STATDO IN ('FSH', 'PSH')
		 GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, SR.DRIVER, SR.PERHNO
		 ORDER BY NVL(SUM(SI.QTALOC), 0) DESC
   		)	
  </select> 
  
  <!-- [TM05] 재배차 : 아이템 입력 : OUTBOUND.RECARALLOC.INSERT -->
  <insert id="DL60_ITEM_INSERT"  parameterType="hashmap">
      INSERT INTO SHPDR
    (       SHPOKY
	      , SHPOIT
	      , SHPOIR
	      , ASKU05
	      , STATIT
	      , DEPART
	      , ARRIVA
	      , CARDAT
	      , CARNUM
	      , DRIVER
	      , PERHNO
	      , SHIPSQ
	      , SORTSQ
	      , RECDAT
	      , RECNUM
	      , QTRECN
	      , CASTYN
	      , CASTDT
	      , CASTIM
	      , PRITYN
	      , RECOYN
	      , RECOCD
	      , RECODT
	      , TEXT01
	      , TASKKY
	      , RECAYN
	      , DOCSEQ
	      , CREDAT
	      , CRETIM
	      , CREUSR
	      , LMODAT
	      , LMOTIM
	      , LMOUSR
	      , INDBZL
	      , INDARC
	      , UPDCHK
	      , RETUYN
	      , RCAGBN
	      , RCATYP
	      , FORKYN
	      , TRCMPY
	      , RETRCP
	      , TEXT02
	      , DCNDTN
	      , CARNBR
	      ) VALUES (
	        NVL(#{SHPOKY}, ' ')
	      , NVL(#{SHPOIT}, ' ')
	      , NVL(#{SHPOIR}, ' ')
	      , NVL(#{ASKU05}, ' ')
	      , NVL(#{STATIT}, ' ')
	      , NVL(#{DEPART}, ' ')
	      , NVL(#{ARRIVA}, ' ')
	      , NVL(#{CARDAT}, ' ')
	      , NVL(#{CARNUM}, ' ')
	      , NVL(#{DRIVER}, ' ')
	      , NVL(#{PERHNO}, ' ')
	      , NVL(#{SHIPSQ}, 0)
	      , NVL(#{SORTSQ}, 0)
	      , NVL(#{RECDAT}, ' ')
	      , NVL(#{RECNUM}, ' ')
	      , NVL(#{QTRECN}, 0)
	      , NVL(#{CASTYN}, ' ')
	      , NVL(#{CASTDT}, ' ')
	      , NVL(#{CASTIM}, ' ')
	      , NVL(#{PRITYN}, ' ')
	      , NVL(#{RECOYN}, ' ')
	      , NVL(#{RECOCD}, ' ')
	      , NVL(#{RECODT}, ' ')
	      , NVL(#{TEXT01}, ' ')
	      , NVL(#{TASKKY}, ' ')
	      , NVL(#{RECAYN}, ' ')
	      , NVL(#{DOCSEQ}, ' ')
	      , NVL(#TO_CHAR(SYSDATE, 'YYYYMMDD'), ' ')
	      , NVL(#TO_CHAR(SYSDATE, 'HH24MISS'), ' ')
	      , NVL(#{SES_USER_ID}, ' ')
	      , NVL(#TO_CHAR(SYSDATE, 'YYYYMMDD'), ' ')
	      , NVL(#TO_CHAR(SYSDATE, 'HH24MISS'), ' ')
	      , NVL(#{SES_USER_ID}, ' ')
	      , NVL(#{INDBZL}, ' ')
	      , NVL(#{INDARC}, ' ')
	      , NVL(#{UPDCHK}, 0)
	      , NVL(#{RETUYN}, ' ')
	      , NVL(#{RCAGBN}, ' ')
	      , NVL(#{RCATYP}, ' ')
	      , NVL(#{FORKYN}, ' ')
	      , NVL(#{TRCMPY}, ' ')
	      , NVL(#{RETRCP}, ' ')
	      , NVL(#{TEXT02}, ' ')
	      , NVL(#{DCNDTN}, ' ')
	      , NVL(#{CARNBR}, ' ')
	)
	      
  </insert> 
  
    <!-- [DL60] 재배차 : 헤더 수정 : OUTBOUND.RECARALLOC.UPDATE1 -->
  <update id="DL60_ITEM_UPDATE"  parameterType="hashmap">
  
     UPDATE SHPDR
       SET
           DEPART = #{DEPART},
           RECDAT = #{RECDAT},
           RECNUM = #{RECNUM},
           RCATYP = #{RCATYP},
           DRIVER = NVL(#{DRIVER}, ' '),
           FORKYN = NVL(#{FORKYN}, ' '),
           RETRCP = NVL(#{RETRCP}, ' '),
           RCAGBN = #{RCAGBN},
           PERHNO = #{PERHNO},
           QTRECN = #{QTRECN},
           RECAYN = 'Y',
           RETUYN = #{RETUYN},
           LMODAT = TO_CHAR(SYSDATE, 'YYYYMMDD'),
           LMOTIM = TO_CHAR(SYSDATE, 'HH24MISS'),
           LMOUSR = #{SES_USER_ID}
     WHERE 1 = 1
       AND SHPOKY = #{SHPOKY}
       AND SHPOIT = #{SHPOIT}
       AND SHPOIR = #{SHPOIR}
  
  </update>
  
  <!-- [DL60] 재배차 아이템 : 삭제 : OUTBOUND.RECARALLOC.DELETE-->
  <delete id="DL60_ITEM_DELETE"  parameterType="hashmap">
        DELETE FROM SHPDR
       WHERE 1 = 1
         AND SHPOKY = #{SHPOKY}
         AND SHPOIT = #{SHPOIT}
         AND SHPOIR = #{SHPOIR}
         AND RECAYN = 'Y'
  </delete>

  <!-- [TM03] 이고요청 헤더 조회   -->
  <select id="TM03_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT #{OWNRKY} AS OWNRKY      
           , #{ORDDAT} AS ORDDAT
           , #{ORDDAT} AS OTRQDT
           , #{SHPMTY} AS DOCUTY
           , #{SVBELN} AS SVBELN
           , #{WARERQ} AS WAREKY
           , #{WARERQ} AS WARESR
           , #{WARETG} AS WARETG
           , 'SAP' AS MANDT
           , 'UB' AS ORDTYP
           , 'N' AS C00102
           , 'IF' AS C00101
        FROM DUAL 
        
  </select>
  
    <!-- [TM03] 이고요청 아이템 조회   -->
  <select id="TM03_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT ' ' AS SKUKEY
             , #{WARESR} AS WAREKY
           , ' ' AS DESC01
           , ' ' AS DESC02
           , ' ' AS DUOMKY
           , 0 AS QTYORG
           , 0 AS TOQTSIWH
           , 0 AS PLIQTY
           , 0 AS PLTQTY
           , 0 AS BXIQTY
           , 0 AS BOXQTY
           , 0 AS REMQTY
           , 0 AS FMQTSIWH
           , 0 AS TOQTSIWH
           , 0 AS TOLACQTY
           , ' ' AS TEXT01
        FROM DUAL  
        
  </select>
  
   <!-- [TM03] 제품번호 서치헬프  조회   -->
  <select id="TM03_SKUKEY_SHELP_MAP" parameterType="hashmap" resultType="DataMap">
      
      SELECT 'SAP'  MANDT,
             #{WARETG} WAREKY,
             SM.SKUKEY SKUKEY,
             SM.DESC01 DESC01,
             SM.DESC02 DESC02,
             SM.DUOMKY DUOMKY,
             SM.QTDUOM BXIQTY,
             SM.NETWGT NETWGT,
             SM.SKUG01 SKUG01,
             SM.SKUG02 SKUG02,
             SM.SKUG03 SKUG03,
             SM.QTYSTD PLIQTY,
             NVL(ST1.STKQTY, 0) AS FMQTSIWH,
             NVL(ST2.STKQTY, 0) AS TOQTSIWH,
             ABS((NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - NVL(EX1.OUTQTY, 0))) AS QTYORG,
             DECODE(SM.QTDUOM,0,0,TRUNC(ABS((NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - NVL(EX1.OUTQTY, 0))) / SM.QTDUOM,0)) AS BOXQTY,
             DECODE(SM.QTDUOM,0,0,MOD(ABS((NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - NVL(EX1.OUTQTY, 0))) , SM.QTDUOM)) AS REMQTY,
             (NVL(ST2.STKQTY, 0) + NVL(EX2.INNQTY, 0) + NVL(EX2.TRFQTY, 0) - NVL(EX2.OUTQTY, 0)) AS TOLACQTY
        FROM SKUMA SM 
                         LEFT OUTER JOIN IFWMS113 IT ON IT.OWNRKY = SM.OWNRKY AND IT.SKUKEY = SM.SKUKEY AND  IT.MANDT = 'SAP'  AND IT.XSTAT = 'R' AND IT.ORDDAT = TO_CHAR(SYSDATE, 'YYYYMMDD')  AND IT.OWNRKY = #{OWNRKY}  AND IT.WAREKY = #{WARETG}
  
                         LEFT OUTER JOIN V_WMS_EXP_STOCK_DR EX1 ON IT.OWNRKY = EX1.OWNRKY AND IT.WAREKY = EX1.WAREKY AND IT.SKUKEY = EX1.SKUKEY AND IT.ORDDAT = EX1.EXPDAT
                         LEFT OUTER JOIN V_WMS_EXP_STOCK_DR EX2 ON IT.OWNRKY = EX2.OWNRKY AND EX2.WAREKY = '' AND IT.SKUKEY = EX2.SKUKEY AND IT.ORDDAT = EX2.EXPDAT
                         LEFT OUTER JOIN V_WMS_STOCK_TOSS ST1 ON IT.OWNRKY = ST1.OWNRKY AND IT.WAREKY = ST1.WAREKY AND IT.SKUKEY = ST1.SKUKEY
                         LEFT OUTER JOIN V_WMS_STOCK_TOSS ST2 ON IT.OWNRKY = ST2.OWNRKY AND ST2.WAREKY = '' AND IT.SKUKEY = ST2.SKUKEY
       WHERE 1=1
         AND SM.SKUKEY = #{SKUKEY}
         AND SM.OWNRKY = #{OWNRKY}
       GROUP BY SM.SKUKEY, SM.DESC01, SM.DESC02, SM.DUOMKY, SM.QTDUOM, SM.NETWGT, SM.SKUG01, SM.SKUG02, SM.SKUG03, ST1.STKQTY, ST2.STKQTY, 
                EX1.INNQTY, EX1.TRFQTY, EX1.OUTQTY, EX2.INNQTY, EX2.TRFQTY, EX2.OUTQTY, SM.QTYSTD
              
  </select>  
  
   <!-- [TM04] 이고요청 관리 헤더 조회   : OUTBOUND.TM.ORDER.HEADER.LIST-->
  <select id="TM04_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT A.MANDT,
           A.OWNRKY,
           A.WAREKY,
           A.WARESR,
           A.WARETG,
           A.DOCUTY,
           B.SHORTX,
           A.ORDTYP,
           A.ORDDAT,
           A.SVBELN,
           A.OTRQDT,
           A.PTNRTO,
           A.DIRDVY,
           A.DIRSUP,
           A.PTNROD,
           A.CUSRID,
           A.CUNAME,
           A.CUPOST,
           A.CUNATN,
           A.CUTEL1,
           A.CUTEL2,
           A.CUMAIL,
           A.CUADDR,
           A.CTNAME,
           A.CTTEL1,
           A.SALENM,
           A.SALTEL,
           A.C00102,
           A.XSTAT,
           ' ' "TEXT01"
      FROM IFWMS113 A INNER JOIN DOCTM B ON A.DOCUTY = B.DOCUTY
     WHERE A.DOCUTY IN ('266', '267')
       AND A.XSTAT = 'R'
       AND A.C00102 LIKE DECODE(#{C00102}, 'ALL', '%', '', ' ', #{C00102})
       AND A.OWNRKY = #{OWNRKY}
       AND A.DOCUTY = '266'
       <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
    GROUP BY A.MANDT, A.OWNRKY, A.WAREKY, A.WARESR, A.WARETG, A.DOCUTY, B.SHORTX, A.ORDTYP, A.ORDDAT,
         A.SVBELN, A.OTRQDT, A.PTNRTO, A.DIRDVY,A.DIRSUP, A.PTNROD, A.CUSRID, A.CUNAME, A.CUPOST, 
         A.CUNATN, A.CUTEL1, A.CUTEL2, A.CUMAIL, A.CUADDR, A.CTNAME, A.CTTEL1, A.SALENM, A.SALTEL,
             A.C00102, A.XSTAT
    ORDER BY SVBELN     
      
  </select> 
   
   <!-- [TM04] 이고요청 관리 아이템 조회   : OUTBOUND.TM.ORDER.ITEM.LIST-->
  <select id="TM04_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
  
           SELECT A.*
        , S.DESC01 
        , S.DESC02 
        , S.SKUG02 
        , S.SKUG03 
        , S.ASKU02 
        , S.SKUG05 
        , S.GRSWGT 
        , S.NETWGT 
        , S.SKUG04 
        , S.ASKU03 
        , S.LENGTH 
        , S.WIDTHW 
        , S.HEIGHT 
        , S.CUBICM 
        , S.CAPACT 
        , S.DUOMKY 
        , S.QTDUOM 
        , S.ASKU01 
        , S.WGTUNT 
        , S.DUOMKY 
        , S.ASKU04 
        , S.ASKU05 
        , S.EANCOD 
        , S.GTINCD 
        , S.SKUG01 
        , S.QTDUOM AS BXIQTY
        , S.QTYSTD AS PLIQTY
        , NVL(  TRUNC((A.QTYREQ) / DECODE(S.QTYSTD, 0, NULL, S.QTYSTD )) ,0) PLTQTY
        , NVL(  TRUNC((A.QTYREQ) / DECODE(S.QTDUOM, 0, NULL, S.QTDUOM )) ,0) BOXQTY
        , NVL(MOD(A.QTYREQ, S.QTDUOM),0) AS REMQTY
        , NVL((SELECT SUM(SU.QTSIWH) FROM STKKY SU 
            WHERE SU.OWNRKY = A.OWNRKY 
              AND SU.WAREKY = A.WAREKY 
              AND SU.SKUKEY = A.SKUKEY
              AND SU.AREAKY NOT IN ('SHP','SYS')
              AND (SU.QTSIWH > 0 OR SU.QTSPMI >0) 
              AND ( CASE WHEN A.DOCUTY = '266' THEN '00' 
                         WHEN A.DOCUTY = '267' THEN '20' END ) = SU.LOTA06
        
        ),0) TOQTSIWH
          FROM IFWMS113 A
        INNER JOIN DOCTM B
            ON A.DOCUTY = B.DOCUTY
        INNER JOIN SKUMA S
            ON S.OWNRKY = A.OWNRKY
           AND S.SKUKEY = A.SKUKEY
        WHERE A.DOCUTY IN ( '266','267')
        AND A.XSTAT = 'R'
        AND A.SVBELN = #{SVBELN}

  </select>
  
  <!-- [TM04] 이고요청 관리 입력 VALID : SZF_GETIFWMS113_CHECK  -->
  <select id="SZF_GETIFWMS113_CHECK_MAP" parameterType="hashmap" resultType="DataMap">
    SELECT SZF_GETIFWMS113_CHECK(#{SVBELN},#{SPOSNR}) AS CHK FROM DUAL
  </select>
     
  <!-- [TM05] 이고생성 (1 Step) 헤더 조회   -->
  <select id="TM05_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT #{OWNRKY} AS OWNRKY      
           , #{ORDDAT} AS ORDDAT
           , #{ORDDAT} AS OTRQDT
           , #{ORDDAT} AS DOCDAT
           , #{DOCUTY} AS DOCUTY
           , #{SVBELN} AS SVBELN
           , #{WARERQ} AS WAREKY
           , #{WARERQ} AS WARESR
           , #{WARETG} AS WARETG
           , 'Y' AS C00102
        FROM DUAL 
        
  </select>
  
   <!-- [TM05] 이고등록 저장후 헤더 조회   -->
  <select id="TM05_AFTER_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
	SELECT A.MANDT,
	       A.OWNRKY,
	       A.WAREKY,
	       A.WARESR,
	       A.WARETG,
	       A.DOCUTY,
	       B.SHORTX AS DOCUTYNM,
	       A.ORDTYP,
	       A.ORDDAT,
	       A.SVBELN,
	       A.OTRQDT,
	       A.PTNRTO,
	       A.DIRDVY,
	       A.DIRSUP,
	       A.PTNROD,
	       A.CUSRID,
	       A.CUNAME,
	       A.CUPOST,
	       A.CUNATN,
	       A.CUTEL1,
	       A.CUTEL2,
	       A.CUMAIL,
	       A.CUADDR,
	       A.CTNAME,
	       A.CTTEL1,
	       A.SALENM,
	       A.SALTEL,
	       A.C00102
	  FROM IFWMS113 A INNER JOIN DOCTM B ON A.DOCUTY = B.DOCUTY
	 WHERE A.DOCUTY = #{DOCUTY}
	<if test="SVBELN != null and SVBELN != ''">
	   AND A.SVBELN LIKE #{SVBELN}
	</if>
	   AND A.XSTAT = 'R' 
	   <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
	 GROUP BY A.MANDT, A.OWNRKY, A.WAREKY, A.WARESR, A.WARETG, A.DOCUTY, B.SHORTX, A.ORDTYP, A.ORDDAT,
	          A.SVBELN, A.OTRQDT, A.PTNRTO, A.DIRDVY, A.DIRSUP, A.PTNROD, A.CUSRID, A.CUNAME, A.CUPOST,
	          A.CUNATN, A.CUTEL1, A.CUTEL2, A.CUMAIL, A.CUADDR, A.CTNAME, A.CTTEL1, A.SALENM, A.SALTEL, A.C00102
	 ORDER BY SVBELN 
        
  </select>
  
    <!-- [TM05] 이고생성 (1 Step) 아이템 조회   -->
  <select id="TM05_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT ' ' AS SKUKEY
             , #{WARESR} AS WAREKY
           , ' ' AS DESC01
           , ' ' AS DESC02
           , ' ' AS DUOMKY
           , ' ' AS SVBELN
           , ' ' AS TEXT01
           , 0 AS QTYORG
           , 0 AS TOQTSIWH
           , 0 AS PLIQTY
           , 0 AS PLTQTY
           , 0 AS BXIQTY
           , 0 AS BOXQTY
           , 0 AS REMQTY
        FROM DUAL  
        
  </select>
  
      <!-- [TM05] 조회후 아이템 조회   -->
  <select id="TM05_AFTER_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
  
		SELECT A.*
		, S.DESC01 
		, S.DESC02 
		, S.SKUG02 
		, S.SKUG03 
		, S.ASKU02 
		, S.SKUG05 
		, S.GRSWGT 
		, S.NETWGT 
		, S.SKUG04 
		, S.ASKU03 
		, S.LENGTH 
		, S.WIDTHW 
		, S.HEIGHT 
		, S.CUBICM 
		, S.CAPACT 
		, S.DUOMKY 
		, S.QTDUOM 
		, S.ASKU01 
		, S.WGTUNT 
		, S.DUOMKY 
		, S.ASKU04 
		, S.ASKU05 
		, S.EANCOD 
		, S.GTINCD 
		, S.SKUG01 
		, S.QTDUOM AS BXIQTY
		, S.QTYSTD AS PLIQTY
		, NVL(  TRUNC((A.QTYREQ) / DECODE(S.QTYSTD, 0, NULL, S.QTYSTD )) ,0) PLTQTY
		, NVL(  TRUNC((A.QTYREQ) / DECODE(S.QTDUOM, 0, NULL, S.QTDUOM )) ,0) BOXQTY
		, NVL(MOD(A.QTYREQ, S.QTDUOM),0) AS REMQTY
		, NVL((SELECT SUM(SU.QTSIWH) FROM STKKY SU 
		    WHERE SU.OWNRKY = A.OWNRKY 
		      AND SU.WAREKY = A.WAREKY 
		      AND SU.SKUKEY = A.SKUKEY
		      AND SU.AREAKY NOT IN ('SHP','SYS')
		      AND (SU.QTSIWH > 0 OR SU.QTSPMI >0) 
		      AND ( CASE WHEN A.DOCUTY = '266' THEN '00' 
		                 WHEN A.DOCUTY = '267' THEN '20' END ) = SU.LOTA06
		
		),0) TOQTSIWH
		  FROM IFWMS113 A
		INNER JOIN DOCTM B
		    ON A.DOCUTY = B.DOCUTY
		INNER JOIN SKUMA S
		    ON S.OWNRKY = A.OWNRKY
		   AND S.SKUKEY = A.SKUKEY
		WHERE A.DOCUTY IN ( '266','267')
		AND A.XSTAT = 'R'
		AND A.SVBELN = #{SVBELN}
        
  </select>
  
  
  <!-- [TM05] 제품번호 서치헬프  조회   -->
  <select id="TM05_SKUKEY_SHELP_MAP" parameterType="hashmap" resultType="DataMap">
      
    SELECT 
      SKUKEY AS SKUKEY,
      REPLACE(DESC01, '&amp;','&amp;') AS DESC01,
      REPLACE(DESC02, '&amp;','&amp;') AS DESC02,
      SKUG02 AS SKUG02,
      SKUG03 AS SKUG03,
      ASKU02 AS ASKU02,
      SKUG05 AS SKUG05,
      GRSWGT AS GRSWGT,
      NETWGT AS NETWGT,
      SKUG04 AS SKUG04,
      ASKU03 AS ASKU03,
      LENGTH AS LENGTH,
      WIDTHW AS WIDTHW,
      HEIGHT AS HEIGHT,
      CUBICM AS CUBICM,
      CAPACT AS CAPACT,
      DUOMKY AS DUOMKY,
      QTDUOM AS QTDUOM,
      MEASKY AS MEASKY,
      QTPUOM AS QTPUOM,
      ASKU01 AS ASKU01,
      WGTUNT AS WGTUNT,
      UOMKEY AS UOMKEY,
      ASKU04 AS ASKU04,
      ASKU05 AS ASKU05,
      EANCOD AS EANCOD,
      GTINCD AS GTINCD,
      SKUG01 AS SKUG01,
      BXIQTY AS BXIQTY,
      PLIQTY AS PLIQTY,
      NVL((SELECT SUM(QTSIWH) AS TOQTSIWH 
         FROM STKKY WHERE 1=1  
     <if test='OWNRKY == "2200" or OWNRKY == "2500"'>
          AND OWNRKY IN ('2200','2500')
     </if> 
     <if test='OWNRKY != "2200"'>
       <if test='OWNRKY == "2500"'>
            AND OWNRKY = #{OWNRKY}
       </if> 
     </if> 
   
          AND SKUKEY = #{SKUKEY}
          AND AREAKY NOT IN ('SHP','SYS')
          AND (QTSIWH > 0 OR QTSPMI >0)
          AND LOTA07 != '21SV'    
     <if test='DOCUTY == "267"'>  
          AND LOTA06 = '20'
          AND WAREKY = #{WAREKY}
     </if>  
     <if test='DOCUTY != "267"'>  
          AND LOTA06 = '00'
          AND WAREKY = #{WARERQ} 
     </if>               
          ),0) AS TOQTSIWH  
      FROM V_SKU_INFO
     WHERE 1=1 
     <if test='OWNRKY == "2200" or OWNRKY == "2500"'>
          AND OWNRKY IN ('2200','2500')
     </if> 
     <if test='OWNRKY != "2200"'>
       <if test='OWNRKY == "2500"'>
            AND OWNRKY = #{OWNRKY}
       </if> 
     </if> 

       AND WAREKY = #{WAREKY}
       AND SKUKEY = #{SKUKEY}
  </select>  
  <!-- [TM06] 이고등록 헤더 조회   -->
  <select id="TM06_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT #{OWNRKY} AS OWNRKY      
           , #{ORDDAT} AS ORDDAT
           , #{ORDDAT} AS OTRQDT
           , #{ORDDAT} AS DOCDAT
           , #{DOCUTY} AS DOCUTY
           , #{SVBELN} AS SVBELN
           , #{WARERQ} AS WAREKY
           , #{WARERQ} AS WARESR
           , #{WARETG} AS WARETG
           , 'Y' AS C00102
        FROM DUAL 
        
  </select>
  <!-- [TM06] 이고등록 저장후 헤더 조회   -->
  <select id="TM06_AFTER_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
	SELECT A.MANDT,
	       A.OWNRKY,
	       A.WAREKY,
	       A.WARESR,
	       A.WARETG,
	       A.DOCUTY,
	       B.SHORTX AS DOCUTYNM,
	       A.ORDTYP,
	       A.ORDDAT,
	       A.SVBELN,
	       A.OTRQDT,
	       A.PTNRTO,
	       A.DIRDVY,
	       A.DIRSUP,
	       A.PTNROD,
	       A.CUSRID,
	       A.CUNAME,
	       A.CUPOST,
	       A.CUNATN,
	       A.CUTEL1,
	       A.CUTEL2,
	       A.CUMAIL,
	       A.CUADDR,
	       A.CTNAME,
	       A.CTTEL1,
	       A.SALENM,
	       A.SALTEL,
	       A.C00102
	  FROM IFWMS113 A INNER JOIN DOCTM B ON A.DOCUTY = B.DOCUTY
	 WHERE A.DOCUTY = #{DOCUTY}
	<if test="SVBELN != null and SVBELN != ''">
	   AND A.SVBELN LIKE #{SVBELN}
	</if>
	   AND A.XSTAT = 'R' 
	   <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
	 GROUP BY A.MANDT, A.OWNRKY, A.WAREKY, A.WARESR, A.WARETG, A.DOCUTY, B.SHORTX, A.ORDTYP, A.ORDDAT,
	          A.SVBELN, A.OTRQDT, A.PTNRTO, A.DIRDVY, A.DIRSUP, A.PTNROD, A.CUSRID, A.CUNAME, A.CUPOST,
	          A.CUNATN, A.CUTEL1, A.CUTEL2, A.CUMAIL, A.CUADDR, A.CTNAME, A.CTTEL1, A.SALENM, A.SALTEL, A.C00102
	 ORDER BY SVBELN 
        
  </select>
  
    <!-- [TM06] 아이템 조회   -->
  <select id="TM06_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT ' ' AS SKUKEY
           , #{WARESR} AS WAREKY
           , ' ' AS DESC01
           , ' ' AS DESC02
           , ' ' AS DUOMKY
           , ' ' AS SVBELN
           , ' ' AS TEXT01
           , 0 AS QTYORG
           , 0 AS TOQTSIWH
           , 0 AS PLIQTY
           , 0 AS PLTQTY
           , 0 AS BXIQTY
           , 0 AS BOXQTY
           , 0 AS REMQTY
        FROM DUAL  
        
  </select>
  
    <!-- [TM06] 조회후 아이템 조회   -->
  <select id="TM06_AFTER_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
  
		SELECT A.*
		, S.DESC01 
		, S.DESC02 
		, S.SKUG02 
		, S.SKUG03 
		, S.ASKU02 
		, S.SKUG05 
		, S.GRSWGT 
		, S.NETWGT 
		, S.SKUG04 
		, S.ASKU03 
		, S.LENGTH 
		, S.WIDTHW 
		, S.HEIGHT 
		, S.CUBICM 
		, S.CAPACT 
		, S.DUOMKY 
		, S.QTDUOM 
		, S.ASKU01 
		, S.WGTUNT 
		, S.DUOMKY 
		, S.ASKU04 
		, S.ASKU05 
		, S.EANCOD 
		, S.GTINCD 
		, S.SKUG01 
		, S.QTDUOM AS BXIQTY
		, S.QTYSTD AS PLIQTY
		, NVL(  TRUNC((A.QTYREQ) / DECODE(S.QTYSTD, 0, NULL, S.QTYSTD )) ,0) PLTQTY
		, NVL(  TRUNC((A.QTYREQ) / DECODE(S.QTDUOM, 0, NULL, S.QTDUOM )) ,0) BOXQTY
		, NVL(MOD(A.QTYREQ, S.QTDUOM),0) AS REMQTY
		, NVL((SELECT SUM(SU.QTSIWH) FROM STKKY SU 
		    WHERE SU.OWNRKY = A.OWNRKY 
		      AND SU.WAREKY = A.WAREKY 
		      AND SU.SKUKEY = A.SKUKEY
		      AND SU.AREAKY NOT IN ('SHP','SYS')
		      AND (SU.QTSIWH > 0 OR SU.QTSPMI >0) 
		      AND ( CASE WHEN A.DOCUTY = '266' THEN '00' 
		                 WHEN A.DOCUTY = '267' THEN '20' END ) = SU.LOTA06
		
		),0) TOQTSIWH
		  FROM IFWMS113 A
		INNER JOIN DOCTM B
		    ON A.DOCUTY = B.DOCUTY
		INNER JOIN SKUMA S
		    ON S.OWNRKY = A.OWNRKY
		   AND S.SKUKEY = A.SKUKEY
		WHERE A.DOCUTY IN ( '266','267')
		AND A.XSTAT = 'R'
		AND A.SVBELN = #{SVBELN}
        
  </select>
  
  
  <!-- [TM06] 제품번호 서치헬프  조회   -->
  <select id="TM06_SKUKEY_SHELP_MAP" parameterType="hashmap" resultType="DataMap">
      
    SELECT 
      SKUKEY AS SKUKEY,
      REPLACE(DESC01, '&amp;','&amp;') AS DESC01,
      REPLACE(DESC02, '&amp;','&amp;') AS DESC02,
      SKUG02 AS SKUG02,
      SKUG03 AS SKUG03,
      ASKU02 AS ASKU02,
      SKUG05 AS SKUG05,
      GRSWGT AS GRSWGT,
      NETWGT AS NETWGT,
      SKUG04 AS SKUG04,
      ASKU03 AS ASKU03,
      LENGTH AS LENGTH,
      WIDTHW AS WIDTHW,
      HEIGHT AS HEIGHT,
      CUBICM AS CUBICM,
      CAPACT AS CAPACT,
      DUOMKY AS DUOMKY,
      QTDUOM AS QTDUOM,
      MEASKY AS MEASKY,
      QTPUOM AS QTPUOM,
      ASKU01 AS ASKU01,
      WGTUNT AS WGTUNT,
      UOMKEY AS UOMKEY,
      ASKU04 AS ASKU04,
      ASKU05 AS ASKU05,
      EANCOD AS EANCOD,
      GTINCD AS GTINCD,
      SKUG01 AS SKUG01,
      BXIQTY AS BXIQTY,
      PLIQTY AS PLIQTY,
      NVL((SELECT SUM(QTSIWH) AS TOQTSIWH 
         FROM STKKY WHERE 1=1  
     <if test='OWNRKY == "2200" or OWNRKY == "2500"'>
          AND OWNRKY IN ('2200','2500')
     </if> 
     <if test='OWNRKY != "2200"'>
       <if test='OWNRKY == "2500"'>
            AND OWNRKY = #{OWNRKY}
       </if> 
     </if> 
   
          AND SKUKEY = #{SKUKEY}
          AND AREAKY NOT IN ('SHP','SYS')
          AND (QTSIWH > 0 OR QTSPMI >0)
          AND LOTA07 != '21SV'    
     <if test='DOCUTY == "267"'>  
          AND LOTA06 = '20'
          AND WAREKY = #{WAREKY}
     </if>  
     <if test='DOCUTY != "267"'>  
          AND LOTA06 = '00'
          AND WAREKY = #{WARERQ} 
     </if>               
          ),0) AS TOQTSIWH  
      FROM V_SKU_INFO
     WHERE 1=1 
     <if test='OWNRKY == "2200" or OWNRKY == "2500"'>
          AND OWNRKY IN ('2200','2500')
     </if> 
     <if test='OWNRKY != "2200"'>
       <if test='OWNRKY == "2500"'>
            AND OWNRKY = #{OWNRKY}
       </if> 
     </if> 

       AND WAREKY = #{WAREKY}
       AND SKUKEY = #{SKUKEY}
  </select>  
  
  <!-- [TM08] 부산발주등록 헤더 조회   -->
  <select id="TM08_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
  	SELECT   #{OWNRKY} AS OWNRKY      
		    ,TO_CHAR(TO_DATE(#{ORDDAT}) + DECODE(#{WARETG}, '2213' , 2 , '2214' , 2 , 1), 'YYYYMMDD') AS OTRQDT
		    ,TO_CHAR(TO_DATE(#{ORDDAT}) + 1, 'YYYYMMDD') AS ORDDAT
		    ,#{ORDDAT} AS DOCDAT
		    ,#{DOCUTY} AS DOCUTY
		    ,' ' AS SVBELN
		    ,#{WARERQ} AS WAREKY
		    ,#{WARERQ} AS WARESR
		    ,#{WARETG} AS WARETG
		    ,'Y' AS C00102
	FROM DUAL 
  
  </select>
 
   <!-- [TM08] 부산발주등록 아이템 조회   : OUTBOUND.TM03.DISPLAY_2119 -->
  <select id="TM08_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
  
           SELECT SM.SKUKEY AS SKUKEY,
             SM.DESC01 DESC01,
             SM.DESC02 DESC02,
             SM.DUOMKY DUOMKY,
             SM.QTYSTD PLIQTY,
             SM.QTDUOM BXIQTY,
             SM.NETWGT NETWGT,
             SM.SKUG01 SKUG01,
             SM.SKUG02 SKUG02,
             SM.SKUG03 SKUG03,
             NVL(MAX(STD.PREQTY), 0) AS STDQTY,
             NVL(MAX(STD.SHPQTY), 0) AS QTSHPD,    
             NVL(MAX(STD.INNQTY), 0) + NVL(MAX(STD.TRFQTY), 0) AS QTYRCV,
             NVL(MAX(STD.ADJQTY), 0) AS ADJQTY,
             NVL(MAX(STD.STKQTY), 0) AS STKQTY,
             NVL(MAX(STD2.SHPQTY), 0) AS NUM01,    
             NVL(MAX(STD2.INNQTY), 0) + NVL(MAX(STD2.TRFQTY), 0) AS NUM02,
             NVL(MAX(STD2.STKQTY), 0) AS NUM03,
             NVL(ST1.STKQTY, 0) AS FMQTSIWH,
             NVL(ST2.STKQTY, 0) AS TOQTSIWH,
             0 AS QTYORG,
             0 AS BOXQTY,
             0 AS PLTQTY,
             0 AS REMQTY,
             (NVL(ST2.STKQTY, 0) + NVL(EX2.INNQTY, 0) + NVL(EX2.TRFQTY, 0) - NVL(EX2.OUTQTY, 0)) AS TOLACQTY,
             NVL(TRUNC(MAX(STD3.SHPQTY) / 7),0) AS TOTSHP
        FROM TRFSK TS INNER JOIN SKUMA SM ON SM.OWNRKY = '2200' AND TS.SKUKEY = SM.SKUKEY
                      LEFT OUTER JOIN V_WMS_EXP_STOCK_DR EX1 ON SM.OWNRKY = EX1.OWNRKY AND EX1.WAREKY = #{WARETG} AND TS.SKUKEY = EX1.SKUKEY AND EX1.EXPDAT = #{ORDDAT}
                      LEFT OUTER JOIN V_WMS_EXP_STOCK_DR EX2 ON SM.OWNRKY = EX2.OWNRKY AND EX2.WAREKY = '2219' AND TS.SKUKEY = EX2.SKUKEY AND EX2.EXPDAT = #{ORDDAT}
                      LEFT OUTER JOIN V_WMS_STOCK_TOSS ST1 ON SM.OWNRKY = ST1.OWNRKY AND ST1.WAREKY = #{WARETG} AND TS.SKUKEY = ST1.SKUKEY
                      LEFT OUTER JOIN V_WMS_STOCK_TOSS ST2 ON SM.OWNRKY = ST2.OWNRKY AND ST2.WAREKY = '2219' AND TS.SKUKEY = ST2.SKUKEY
                      LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, PREQTY, INNQTY, TRFQTY, SHPQTY, ADJQTY, STKQTY 
                                         FROM WMSSTK
                                        WHERE WAREKY = #{WARETG}
                                          AND STDDAT = #{ORDDAT}) STD ON #{WARETG} = STD.WAREKY AND TS.SKUKEY = STD.SKUKEY
                      LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, PREQTY, INNQTY, TRFQTY, SHPQTY, ADJQTY, STKQTY 
                                         FROM WMSSTK
                                        WHERE WAREKY = #{WARETG}
                                          AND STDDAT = TO_CHAR(TO_DATE(#{ORDDAT})+1, 'YYYYMMDD')) STD2 ON #{WARETG} = STD2.WAREKY AND TS.SKUKEY = STD2.SKUKEY
                      LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, SUM(SHPQTY) AS SHPQTY
                                         FROM WMSSTK
                                        WHERE WAREKY = #{WARETG}
                                          AND STDDAT BETWEEN TO_CHAR(TO_DATE(#{ORDDAT})-6, 'YYYYMMDD') AND TO_CHAR(TO_DATE(#{ORDDAT}), 'YYYYMMDD')
                                          GROUP BY WAREKY, SKUKEY) STD3 ON #{WARETG} = STD3.WAREKY AND TS.SKUKEY = STD3.SKUKEY
        WHERE TS.WAREKY = '2219'       
        GROUP BY SM.SKUKEY, SM.DESC01, SM.DESC02, SM.DUOMKY, SM.QTDUOM, SM.QTYSTD, SM.SKUG01, SM.SKUG02, SM.SKUG03, SM.NETWGT,
                 ST1.STKQTY, ST2.STKQTY, EX1.INNQTY, EX1.TRFQTY, EX1.OUTQTY, EX2.INNQTY, EX2.TRFQTY, EX2.OUTQTY, TS.TRFTYP
        ORDER BY TS.TRFTYP, SM.SKUG03, REGEXP_REPLACE(REPLACE(UPPER(SM.DESC01), 'G', ''), '[0-9]'), SM.NETWGT

  </select>
    
    <!-- **[JT01] 제떼 출고조회  조회 -->                                                                                                                                                       
  <select id="JT01_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT /*+ ORDERED */I.WAREKY AS WAREKY,
           I.PTNRTO AS PTNRTO,
           B.NAME01 AS PTNRTONM,
           I.PTNROD AS PTNROD,
           B2.NAME01 AS PTNRODNM,
           (SELECT CDESC1 FROM CMCDV WHERE CMCDV.CMCDVL =  B.PTNG08 AND CMCDV.CMCDKY = 'PTNG08')   AS PTNG08,
           I.SKUKEY AS SKUKEY,
           SM.DESC01 AS DESC01,
           SM.DESC02 AS  DESC02,
           SM.DUOMKY AS DUOMKY,
           SM.QTDUOM AS BXIQTY,
           SM.NETWGT AS NETWGT,
           SM.SKUG03 AS SKUG03,
           SUM(I.QTYREQ) / SM.QTDUOM AS BOXQTY1,
           SUM(I.QTYREQ) AS QTSIWH1,
           (NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0)) / SM.QTDUOM AS BOXQTY2,
           NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) AS QTSIWH2,
           CASE WHEN NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - SUM(DECODE(I.XSTAT, 'D', 0, I.QTYREQ)) &lt; 0 
                    THEN (NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - SUM(DECODE(I.XSTAT, 'D', 0, I.QTYREQ))) / SM.QTDUOM ELSE 0 END AS BOXQTY3,
           CASE WHEN NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - SUM(DECODE(I.XSTAT, 'D', 0, I.QTYREQ)) &lt; 0 
                    THEN NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - SUM(DECODE(I.XSTAT, 'D', 0, I.QTYREQ)) ELSE 0 END AS QTSIWH3,
           NVL(EX1.INNQTY, 0) / SM.QTDUOM AS BOXQTY4,
           NVL(EX1.INNQTY, 0) AS QTSIWH4,
           NVL(EX1.TRFQTY, 0) / SM.QTDUOM AS BOXQTY5,
           NVL(EX1.TRFQTY, 0) AS QTSIWH5,
           SUM(DECODE(I.XSTAT, 'R', 0, I.QTYREQ)) / SM.QTDUOM AS BOXQTY6,
           SUM(DECODE(I.XSTAT, 'R', 0, I.QTYREQ)) AS QTSIWH6
      FROM IFWMS113 I INNER JOIN SKUMA SM ON I.OWNRKY = SM.OWNRKY AND I.SKUKEY = SM.SKUKEY AND SM.DELMAK = ' '
                      LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY='0007'
                      LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
                      LEFT OUTER JOIN PICSK PK ON PK.OWNRKY = I.OWNRKY AND PK.WAREKY = '2213' AND PK.SKUKEY = I.SKUKEY
                      LEFT OUTER JOIN SKUWC W ON W.OWNRKY = I.OWNRKY AND W.WAREKY = I.WAREKY AND W.SKUKEY = I.SKUKEY
                      LEFT OUTER JOIN V_WMS_EXP_STOCK_DR EX1 ON I.OWNRKY = EX1.OWNRKY AND I.WAREKY = EX1.WAREKY AND I.SKUKEY = EX1.SKUKEY AND TO_CHAR(SYSDATE, 'YYYYMMDD') = EX1.EXPDAT
                      LEFT OUTER JOIN V_WMS_STOCK_TOSS ST1 ON I.OWNRKY = ST1.OWNRKY AND I.WAREKY = ST1.WAREKY AND I.SKUKEY = ST1.SKUKEY
                      LEFT OUTER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
                                 FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
                                WHERE 1 = 1
                                  AND F.OWNRKY = #{OWNRKY}
                                  AND F.WAREKY = #{WAREKY}
                          ) C ON I.OWNRKY = C.OWNRKY AND I.PTNRTO = C.PTNRKY
     WHERE I.MANDT = 'SAP'
       AND I.OWNRKY = #{OWNRKY}
       AND I.WAREKY = #{WAREKY}
       AND I.QTYREQ > 0
       AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267') 
       AND I.C00102 IN ('Y', 'N')
       AND I.XSTAT IN ('R', 'D')
       AND ((B.PTNG08 = '33') OR (B2.PTNG08 = '33'))
       <!-- range1 -->
       <if test="RANGE_SQL != null and RANGE_SQL != ''">
       ${RANGE_SQL}                         
     </if> 
     GROUP BY I.WAREKY, I.SKUKEY, I.SKUKEY, SM.DESC01, SM.DESC02, SM.DUOMKY, SM.QTDUOM, SM.NETWGT, SM.SKUG01, SM.SKUG02, SM.SKUG03, ST1.STKQTY,
              EX1.INNQTY, EX1.TRFQTY, EX1.OUTQTY,I.PTNRTO , B.NAME01, I.PTNROD, B2.NAME01,B.PTNG08
    ORDER BY SM.SKUG03, Regexp_replace(REPLACE(UPPER(SM.DESC01), 'G', ''), '[0-9,+,*,-]', ''), SM.NETWGT

  
  </select>
  
  <!-- [TM05] 이고 시퀀스 생성 : OUTBOUND.MOVEWAREHOUSE.SEQ   -->
  <select id="TM05_MOVE_SEQ_MAP" parameterType="hashmap" resultType="DataMap">
  
      SELECT SEQMOVEWAREHOUSE_NEW.NEXTVAL AS SVBELN FROM DUAL
      
  </select>
  
  <!-- [TM05] 이고생성 : 입력 : OUTBOUND.TM.IFWMS113.INSERT -->
  <insert id="TM05_MOVE_INSERT"  parameterType="hashmap">
    INSERT INTO IFWMS113
    (                
           MANDT,
           SEQNO,
           ORDTYP,
           ORDDAT,
           CHKSEQ,
           ORDSEQ,
           SVBELN,
           SPOSNR,
           DOCUTY,
           ERPCDT,
           ERPCTM,
           ERPMDT,
           OTRQDT,
           PTNRTO,
           PTNROD,
           OWNRKY,
           WAREKY,
           WARESR,
           WARETG,
           SKUKEY,
           QTYORG,
           QTYREQ,
           WMSMGT,
           QTSHPD,
           DUOMKY,
           NETPR,
           SALDPT,
           REFDKY,
           REDKIT,
           REDDAT,
           STKNUM,
           SDATBG,
           DIRDVY,
           DIRSUP,
           SALEPR,
           DISRAT,
           SELLPR,
           SELAMT,
           VATAMT,
           CUSRID,
           CUNAME,
           CUPOST,
           CUNATN,
           CUTEL1,
           CUTEL2,
           CUMAIL,
           CUADDR,
           CTNAME,
           CTTEL1,
           SALENM,
           SALTEL,
           TEXT01,
           TEXT02,
           TEXT03,
           C00101,
           C00102,
           C00103,
           C00104,
           C00105,
           C00106,
           C00107,
           C00108,
           C00109,
           C00110,
           N00101,
           N00102,
           N00103,
           N00104,
           N00105,
           N00106,
           N00107,
           N00108,
           N00109,
           N00110,
           USRID1,
           DEPTID1,
           USRID2,
           DEPTID2,
           USRID3,
           DEPTID3,
           USRID4,
           DEPTID4,
           CREDAT,
           CRETIM,
           LMODAT,
           LMOTIM,
           STATUS,
           TDATE,
           XDATS,
           XTIMS,
           XSTAT,
           ERTXT )
    VALUES (
           'SAP',
           SEQ_IFWMS113.NEXTVAL,
           'UB',
           #{ORDDAT},
           #{CHKSEQ},
           #{ORDSEQ},
           #{SVBELN},
           #{SPOSNR},
           #{DOCUTY},
           TO_CHAR(SYSDATE,'YYYYMMDD'), 
           TO_CHAR(SYSDATE,'HH24MISS'),
           TO_CHAR(SYSDATE,'YYYYMMDD'), 
           #{OTRQDT},
           #{WARETG},
           #{WARETG},
           #{OWNRKY},
           #{WAREKY},
           #{WARESR},
           #{WARETG},
           #{SKUKEY},
           #{QTYORG},
           #{QTYREQ},
           #{WMSMGT},
           #{QTSHPD},
           #{DUOMKY},
           #{NETPR},
           #{SALDPT},
           #{REFDKY},
           #{REDKIT},
           #{REDDAT},
           #{STKNUM},
           #{SDATBG},
           #{DIRDVY},
           #{DIRSUP},
           #{SALEPR},
           #{DISRAT},
           #{SELLPR},
           #{SELAMT},
           #{VATAMT},
           NVL(#{CUSRID}, ' '),
           NVL(#{CUNAME}, ' '),
           NVL(#{CUPOST}, ' '),
           NVL(#{CUNATN}, ' '),
           NVL(#{CUTEL1}, ' '),
           NVL(#{CUTEL2}, ' '),
           NVL(#{CUMAIL}, ' '),
           NVL(#{CUADDR}, ' '),
           NVL(#{CTNAME}, ' '),
           NVL(#{CTTEL1}, ' '),
           NVL(#{SALENM}, ' '),
           NVL(#{SALTEL}, ' '),
           NVL(#{TEXT01}, ' '),
           NVL(#{TEXT02}, ' '),
           NVL(#{TEXT03}, ' '),
           NVL(#{C00101}, ' '),
           NVL(#{C00102}, ' '),
           NVL(#{C00103}, ' '),
           NVL(#{C00104}, ' '),
           NVL(#{C00105}, ' '),
           NVL(#{C00106}, ' '),
           NVL(#{C00107}, ' '),
           NVL(#{C00108}, ' '),
           NVL(CONCAT(TO_CHAR(SYSDATE,'YYYYMMDD'), TO_CHAR(SYSDATE,'HH24MISS')), ' '),
           NVL(#{C00110}, ' '),
           NVL(#{N00101}, 0),
           NVL(#{N00102}, 0),
           NVL(#{N00103}, 0),
           NVL(#{N00104}, 0),
           NVL(#{N00105}, 0),
           NVL(#{N00106}, 0),
           NVL(#{N00107}, 0),
           NVL(#{N00108}, 0),
           NVL(#{N00109}, 0),
           NVL(#{N00110}, 0),
           NVL(#{SES_USER_ID}, ' '),
           NVL(#{DEPTID1}, ' '),
           NVL(#{USRID2}, ' '),
           NVL(#{DEPTID2}, ' '),
           NVL(#{USRID3}, ' '),
           NVL(#{DEPTID3}, ' '),
           NVL(#{USRID4}, ' '),
           NVL(#{DEPTID4}, ' '),
           TO_CHAR(SYSDATE,'YYYYMMDD'), 
           TO_CHAR(SYSDATE,'HH24MISS'),
           TO_CHAR(SYSDATE,'YYYYMMDD'), 
           TO_CHAR(SYSDATE,'HH24MISS'),
           #{STATUS},
           NVL(CONCAT(TO_CHAR(SYSDATE,'YYYYMMDD'), TO_CHAR(SYSDATE,'HH24MISS')), ' '),
           #{XDATS},
           #{XTIMS},
           #{XSTAT},
           NVL(#{ERTXT}, ' ')
        )
  
  </insert> 
  
  <!-- [DL85] 송장 회수관리 헤더 조회 : OUTBOUND.RETURNINVOICE.FIND_HEADER   -->
  <select id="DL85_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
     SELECT DISTINCT 
           (SH.SHPOKY||NVL(SR.CARNUM,' ')||TO_CHAR(NVL(SR.SHIPSQ,0))||NVL(SR.CARDAT,' ')) AS KEY,
           (NVL(SR.CARNUM,' ')||TO_CHAR(NVL(SR.SHIPSQ,0))||NVL(SR.CARDAT,' ')) AS EZKEY,
           SH.SHPOKY AS SHPOKY,
           SH.WAREKY AS WAREKY,
           WH.NAME01 AS WAREKYNM,
           NVL(SR.CARNUM,' ') AS CARNUM,
           NVL(SR.SHIPSQ,0) AS SHIPSQ,
           NVL(SR.CARDAT,' ') AS CARDAT,
           NVL(SR.DOCSEQ,' ') AS DOCSEQ,
           (SELECT CARGBN FROM CARMA WHERE OWNRKY = SH.OWNRKY AND WAREKY = SH.WAREKY AND CARNUM = SR.CARNUM) AS CARGBN,
           DECODE(SR.RECNUM,' ','N','Y') AS RECAYN,
           SH.STATDO AS STATDO,
           CV.CDESC1 AS STATDONM,
           SH.DRELIN AS DRELIN,
           DECODE(SH.DRELIN,'V','YES','NO') AS DRELINNM,
           SH.INDDCL AS INDDCL,
           SH.ALSTKY AS ALSTKY,
           SH.PTRCVR AS DPTNKY,
           ( DECODE( SH.SHPMTY, '266',  (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.WAREKY ) , 
                                '270',  RBP.NAME01,
                                 BP.NAME01) ) AS DPTNKYNM,
           SH.PTRCVR AS PTRCVR,
           ( DECODE( SH.SHPMTY, '266',  (SELECT NAME01 FROM WAHMA WHERE WAREKY = SH.WAREKY ) , 
                                '270',  RBT.NAME01,
                                 BP.NAME01) ) AS PTRCVRNM,
           SH.PGRC01 AS PGRC01,
           SH.PGRC02 AS PGRC02,
           SH.PGRC03 AS PGRC03,
           SH.PGRC04 AS PGRC04,
           SH.PGRC05 AS PGRC05,
           ' ' AS PTNBLK,
           SH.OWNRKY AS OWNRKY,
           SH.DOCDAT AS DOCDAT,
           SH.DOCCAT AS DOCCAT,
           DC.SHORTX AS DOCCATNM,
           SH.SHPMTY AS SHPMTY,
           DT.SHORTX AS SHPMTYNM,
           SH.SHPMTY AS DOCUTY,
           SH.RQSHPD AS RQSHPD,
           SH.RQARRD AS RQARRD,
           SH.RQARRT AS RQARRT,
           SH.OPURKY AS OPURKY,
           DECODE(SH.SHPMTY, '299', ' ', SI.SVBELN) AS SVBELN,
           DECODE(SH.STATDO, 'REF', SI.STKNUM, DECODE(SH.SHPMTY, '299', SI.STKNUM, ' ')) AS STKNUM,
           CASE WHEN SH.SHPMTY = '299' THEN ' '
                  /*   THEN NVL((SELECT MAX(SUBSTR(SDATBG,1,8)) FROM IFWMS113 WHERE STKNUM = SI.STKNUM), ' ') */
                ELSE ' ' END AS SDATBG,
           SH.QTAPPO AS QTAPPO,
    
           SH.LOCADT AS LOCADT,
           SH.LOCADK AS LOCADK,
           
           SH.USRID1 AS USRID1,
           SH.UNAME1 AS UNAME1,
           SH.DEPTID1 AS DEPTID1,
           SH.DNAME1 AS DNAME1,
           SH.USRID2 AS USRID2,
           SH.UNAME2 AS UNAME2,
           SH.DEPTID2 AS DEPTID2,
           SH.DNAME2 AS DNAME2,
           SH.USRID3 AS USRID3,
           SH.UNAME3 AS UNAME3,
           SH.DEPTID3 AS DEPTID3,
           SH.DNAME3 AS DNAME3,
           SH.USRID4 AS USRID4,
           SH.UNAME4 AS UNAME4,
           SH.DEPTID4 AS DEPTID4,
           SH.DNAME4 AS DNAME4,
           SH.DOCTXT AS DOCTXT,
           SH.CREDAT AS CREDAT,
           SH.CRETIM AS CRETIM,
           SH.CREUSR AS CREUSR,
           (SELECT NMLAST FROM USRMA WHERE USERID = SH.CREUSR) AS CUSRNM,
           SH.LMODAT AS LMODAT,
           SH.LMOTIM AS LMOTIM,
           SH.LMOUSR AS LMOUSR,
           (SELECT NMLAST FROM USRMA WHERE USERID = SH.LMOUSR) AS LUSRNM,
           SI.SEBELN AS SEBELN,
           RECOYN AS RECOYN,
           RECOCD AS RECOCD,
           RECODT AS RECODT,
           TEXT01 AS TEXT01,
           SH.PGRC04 AS WARESR,
           BZ.NAME01 AS NAME01,
           (SELECT COUNT(*) FROM SHPDI WHERE SHPOKY = SH.SHPOKY) AS ITEMCOUNT,
           (SELECT ROUND(SUM((I.QTSHPD - I.QTYREF - I.QTSHPC) / NVL(M.QTDUOM, NULL)),2) 
            FROM SHPDI I INNER JOIN SKUMA M ON I.SKUKEY = M.SKUKEY AND M.OWNRKY = #{OWNRKY}
            WHERE I.SHPOKY = SH.SHPOKY) AS SUMQTY,
    NVL(SR.RECNUM,' ') AS RECNUM,
           NVL(SR.TEXT02,' ') AS TEXT02
      FROM SHPDH SH
             INNER JOIN SHPDI SI
                   ON SH.SHPOKY = SI.SHPOKY
           LEFT OUTER JOIN SHPDR SR
                   ON SR.SHPOKY = SI.SHPOKY
                  AND SR.SHPOIT = SI.SHPOIT
                  AND SR.DOCSEQ != ' '
           
           LEFT OUTER JOIN CARMA CM ON CM.OWNRKY = SH.OWNRKY AND CM.WAREKY = SH.WAREKY AND CM.CARNUM = SR.CARNUM
           INNER JOIN WAHMA WH
                   ON SH.WAREKY = WH.WAREKY
           LEFT OUTER JOIN BZPTN BP
                        ON BP.PTNRKY = SH.PTRCVR
                       AND BP.OWNRKY = SH.OWNRKY
                       AND BP.PTNRTY = '0001'
           LEFT OUTER JOIN BZPTN RBP
                        ON RBP.PTNRKY = SH.DPTNKY
                       AND RBP.OWNRKY = SH.OWNRKY
                       AND RBP.PTNRTY = '0002'
           LEFT OUTER JOIN BZPTN RBT
                        ON RBT.PTNRKY = SH.PTRCVR
                       AND RBT.OWNRKY = SH.OWNRKY
                       AND RBT.PTNRTY = '0002'  
           LEFT OUTER JOIN BZPTN BZ
                         ON BZ.OWNRKY = SH.OWNRKY
                         AND BZ.PTNRKY = SH.PGRC04
                         AND BZ.PTNRTY IN ('0003', '0004', '0006')
           INNER JOIN CMCDV CV
                         ON SH.STATDO = CV.CMCDVL
                        AND CV.CMCDKY = 'STATDO'
           INNER JOIN DOCCM DC
                         ON SH.DOCCAT = DC.DOCCAT
           INNER JOIN DOCTM DT
                         ON SH.SHPMTY = DT.DOCUTY
     WHERE
     	SH.OWNRKY = #{OWNRKY}
       AND SH.WAREKY = #{WAREKY}
       AND STATDO  IN ('FSH', 'PSH')
       AND SH.SHPMTY IN ('211','212','213','214','216','266','267')
       AND SR.RECOYN LIKE DECODE(#{RECOYN},'ALL','%',#{RECOYN}) ||'%'
       AND SR.RECNUM = DECODE(#{RECAYN},'N',' ','Y',DECODE(SR.RECNUM,' ','X',SR.RECNUM),SR.RECNUM)
       AND SH.INDDCL = 'V'
       
       <if test='SHPOKYS != ""'> 
        AND SH.SHPOKY IN (${SHPOKYS}) 
       </if>  
       <if test='SHPOKYS == ""'> 
          <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
     </if> 
     ORDER BY SH.SHPOKY
     
  </select>
  
  <!-- [DL85] 송장 회수관리 헤더 조회 : OUTBOUND.RETURNINVOICE.FIND_ITEM   -->
  <select id="DL85_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
         
    SELECT /*+ INDEX(SR IDX_SHPDR_NEW01) */ (SH.SHPOKY||NVL(SR.CARNUM,' ')||TO_CHAR(NVL(SR.SHIPSQ,0))||NVL(SR.CARDAT,' ')) AS KEY,
           SI.SHPOKY AS SHPOKY,
           SI.SHPOIT AS SHPOIT,
           SI.STATIT AS STATIT,
           CV.CDESC1 AS STATITNM,
           SI.SKUKEY AS SKUKEY,
           SI.QTSHPO AS QTSHPO,
           SI.QTSHPO - SI.QTALOC AS QTALLM,
           SI.QTSHPO - SI.QTALOC AS QTUALO,
           SI.QTYORG AS QTYORG,
           DECODE(SI.STATIT, 'REF', SI.QTJCMP, SI.QTYREF) AS QTYREF,
           SI.QTAPPO AS QTAPPO,
           SI.QTALOC AS QTALOC,
           SI.QTJCMP AS QTJCMP,
           SI.QTSHPD AS QTSHPD,
           SI.QTSHPC AS QTSHPC,
           SI.QTYUOM AS QTYUOM,
           SI.MEASKY AS MEASKY,
           SI.UOMKEY AS UOMKEY,
           SI.QTPUOM AS QTPUOM,
           SI.DUOMKY AS DUOMKY,
           SI.QTDUOM AS QTDUOM,
           SI.SASTKY AS SASTKY,
           SI.ALSTKY AS ALSTKY,
           SI.TKFLKY AS TKFLKY,
           SI.ESHPKY AS ESHPKY,
           SI.ESHPIT AS ESHPIT,
           SI.OPURKY AS OPURKY,
           SI.REFDKY AS REFDKY,
           SI.REFDIT AS REFDIT,
           SI.REFCAT AS REFCAT,
           SI.REFDAT AS REFDAT,
           SI.EXSUBS AS EXSUBS,
           SI.DESC01 AS DESC01,
           SI.DESC02 AS DESC02,
           SI.ASKU01 AS ASKU01,
           SI.ASKU02 AS ASKU02,
           SI.ASKU03 AS ASKU03,
           SI.ASKU04 AS ASKU04,
           SI.ASKU05 AS ASKU05,
           SI.EANCOD AS EANCOD,
           SI.GTINCD AS GTINCD,
           SI.SKUG01 AS SKUG01,
           SI.SKUG02 AS SKUG02,
           SI.SKUG03 AS SKUG03,
           SI.SKUG04 AS SKUG04,
           SI.SKUG05 AS SKUG05,
           SI.GRSWGT AS GRSWGT,
           SI.NETWGT AS NETWGT,
           SI.WGTUNT AS WGTUNT,
           SI.LENGTH AS LENGTH,
           SI.WIDTHW AS WIDTHW,
           SI.HEIGHT AS HEIGHT,
           SI.CUBICM AS CUBICM,
           CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
                ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT, 
           SI.CAPACT AS CAPACT,
           SI.PROCHA AS PROCHA,
           SI.AREAKY AS AREAKY,
           SI.LOTA01 AS LOTA01,
           SI.LOTA02 AS LOTA02,
           SI.LOTA03 AS LOTA03,
           SI.LOTA04 AS LOTA04,
           SI.LOTA05 AS LOTA05,
           SI.LOTA06 AS LOTA06,
           SI.LOTA07 AS LOTA07,
           SI.LOTA08 AS LOTA08,
           SI.LOTA09 AS LOTA09,
           SI.LOTA10 AS LOTA10,
           SI.LOTA11 AS LOTA11,
           SI.LOTA12 AS LOTA12,
           SI.LOTA13 AS LOTA13,
           SI.LOTA14 AS LOTA14,
           SI.LOTA15 AS LOTA15,
           SI.LOTA16 AS LOTA16,
           SI.LOTA17 AS LOTA17,
           SI.LOTA18 AS LOTA18,
           SI.LOTA19 AS LOTA19,
           SI.LOTA20 AS LOTA20,
           SI.AWMSNO AS AWMSNO,
           SI.SMANDT AS SMANDT,
           SI.SEBELN AS SEBELN,
           SI.SEBELP AS SEBELP,
           SI.STRAID AS STRAID,
           SI.SVBELN AS SVBELN,
           SI.SPOSNR AS SPOSNR,
           SI.STKNUM AS STKNUM,
           SI.STPNUM AS STPNUM,
           SI.SWERKS AS SWERKS,
           SI.SLGORT AS SLGORT,
           SI.SDATBG AS SDATBG,
           SI.STDLNR AS STDLNR,
           SI.SSORNU AS SSORNU,
           SI.SSORIT AS SSORIT,
           SI.SMBLNR AS SMBLNR,
           SI.SZEILE AS SZEILE,
           SI.SMJAHR AS SMJAHR,
           SI.SXBLNR AS SXBLNR,
           SI.SAPSTS AS SAPSTS,
           SI.PTNRKY AS PTNRKY,
           SI.NAME01 AS NAME01,
           SI.SLAND1 AS SLAND1,
           SI.SBKTXT AS SBKTXT,
           SH.SHPMTY AS SHPMTY,
           SI.STRAID AS VGBEL,
           NVL(SM.QTYSTD,0) AS PLIQTY,
           NVL(SM.QTDUOM,0) AS BXIQTY,
           NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS BOXQTY,       
           NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTYSTD, NULL,0,SM.QTYSTD) ) ,0) AS PLTQTY,       
           NVL(MOD(SI.QTSHPO, DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM)),0) AS REMQTY ,            
           SR.ARRIVA AS ARRIVA,
           NVL(SR.CARDAT,' ') AS CARDAT,
           NVL(SR.CARNUM,' ') AS CARNUM,
           NVL(SR.SHIPSQ,0) AS SHIPSQ,
           SR.SORTSQ AS SORTSQ,
           SR.DRIVER AS DRIVER,
           SR.RECAYN AS RECAYN,
           SI.QTYREF AS QTYREF,
           SI.QTSHPC AS QTSHPC,
           DECODE(SR.RECNUM , ' ', '1', '0') AS VGBEL,
           (SELECT COUNT(*) FROM SHPDI WHERE SHPOKY = SH.SHPOKY) ITEMCOUNT,
    NVL(SR.RECNUM,' ') AS RECNUM
      FROM SHPDH SH
           INNER JOIN SHPDI SI
                   ON SH.SHPOKY = SI.SHPOKY
           LEFT OUTER JOIN SHPDR SR
                   ON SR.SHPOKY = SI.SHPOKY
                  AND SR.SHPOIT = SI.SHPOIT
           INNER JOIN SKUMA SM
                   ON SM.OWNRKY = SH.OWNRKY
                  AND SM.SKUKEY = SI.SKUKEY
           INNER JOIN CMCDV CV
                   ON CV.CMCDKY = 'STATIT'
                  AND CV.CMCDVL = SI.STATIT
    WHERE  1 = 1
    AND SH.SHPOKY = #{SHPOKY}
    ORDER BY SR.RECNUM, SI.SHPOKY, SI.SHPOIT
     
  </select>
  
  <!-- [DL85] 송장회수관리 : 헤더 수정 : UPDATE.RETURNINVOICE2-->
  <update id="DL85_HEAD_UPDATE"  parameterType="hashmap">
  
     UPDATE SHPDR
      SET RECOYN = #{RECOYN},
          RECOCD = #{RECOCD},
          RECODT = #{RECODT},
          TEXT01 = #{TEXT01}
      WHERE (SHPOKY||NVL(CARNUM,' ')||TO_CHAR(NVL(SHIPSQ,0))||NVL(CARDAT,' ')) = #{KEY}
         AND SHPOKY = #{SHPOKY}
         AND SHIPSQ = #{SHIPSQ}
         AND CARNUM = #{CARNUM}
         AND CARDAT = #{CARDAT}
  
  </update>
  
  
  <!-- [DL90] 배송량조정 헤더 조회 : INVENTORY.ADJUSTMENT.FIND_RCV_BY_TSK_HEADER   -->
  <select id="DL90_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
  
	    SELECT ' ' AS SADJKY,
		       #{WAREKY} AS WAREKY,
		       WH.NAME01 AS WAREKYNM,
		       #{ADJUTY} AS ADJUTY,
		       DT.SHORTX AS ADJUTYNM,
		       TO_CHAR(SYSDATE,'YYYYMMDD') AS DOCDAT,
		       #{ADJUCA} AS DOCCAT,
		       DC.SHORTX AS DOCCATNM,
		       #{ADJUCA} AS ADJUCA,
		       DC.SHORTX AS ADJUCANM
		  FROM DUAL
		       LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = #{WAREKY}
		       LEFT OUTER JOIN DOCCM DC
		               ON DC.DOCCAT = #{ADJUCA}
		       LEFT OUTER JOIN DOCTM DT
		               ON DT.DOCUTY = #{ADJUTY}	
  </select>

  <!-- [DL90] 배송량조정 아이템 조회 : INVENTORY.ADJUSTMENT.FIND_RCV_BY_TSK_ITEMLIST   -->
  <select id="DL90_ITEM_01_LIST" parameterType="hashmap" resultType="DataMap">
	  SELECT ' ' AS SADJKY,
		       ' ' AS SADJIT,
		       ' ' AS RSNADJ,
		       ' ' AS STOKKY,
		       TI.LOTNUM AS LOTNUM,
		       NVL(TRIM( (SELECT MAX(LOCAKY) FROM LOCMA WHERE WAREKY = SH.WAREKY AND LOCSKU = SI.SKUKEY ) ),'')  AS LOCAKY,
		       TI.TRNUAC AS TRNUID,
		       ' ' AS SECTID,
		       ' ' AS PACKID,
		       0 AS QTADJU,
		       LEAST(TI.QTCOMP,SI.QTSHPD)-TI.QTYFCN AS QTCALC,
		       0 AS QTBLKD,
		       LEAST(TI.QTCOMP,SI.QTSHPD)-TI.QTYFCN AS QTYUOM,
		       ' ' AS TRUNTY,
		       SI.MEASKY AS MEASKY,
		       SI.UOMKEY AS UOMKEY,
		       TI.QTTPUM AS QTPUOM,
		       TI.AUOMKY AS DUOMKY,
		       TI.QTTPUM AS QTDUOM,
		       ' ' AS SUBSIT,
		       ' ' AS SUBSFL,
		       SI.SHPOKY AS REFDKY,
		       SI.SHPOIT AS REFDIT,
		       SI.SHPOKY,
		       SI.SHPOIT,
		       SH.DOCCAT AS REFCAT,
		       SH.OWNRKY AS OWNRKY,
		       SI.SKUKEY AS SKUKEY,
		       TI.PTLT01 AS LOTA01,
		       TI.PTLT02 AS LOTA02,
		       TI.PTLT03 AS LOTA03,
		       TI.PTLT04 AS LOTA04,
		       TI.PTLT05 AS LOTA05,
		       TI.PTLT06 AS LOTA06,
		       TI.PTLT07 AS LOTA07,
		       TI.PTLT08 AS LOTA08,
		       TI.PTLT09 AS LOTA09,
		       TI.PTLT10 AS LOTA10,
		       TI.PTLT11 AS LOTA11,
		       TI.PTLT12 AS LOTA12,
		       TI.PTLT13 AS LOTA13,
		       TI.PTLT14 AS LOTA14,
		       TI.PTLT15 AS LOTA15,
		       TI.PTLT16 AS LOTA16,
		       TI.PTLT17 AS LOTA17,
		       TI.PTLT18 AS LOTA18,
		       TI.PTLT19 AS LOTA19,
		       TI.PTLT20 AS LOTA20,
		       SI.AWMSNO AS AWMSNO,
		       ' ' AS AREAKY,
		       TI.DESC01 AS DESC01,
		       TI.DESC02 AS DESC02,
		       TI.ASKU01 AS ASKU01,
		       TI.ASKU02 AS ASKU02,
		       TI.ASKU03 AS ASKU03,
		       TI.ASKU04 AS ASKU04,
		       TI.ASKU05 AS ASKU05,
		       TI.EANCOD AS EANCOD,
		       TI.GTINCD AS GTINCD,
		       TI.SKUG01 AS SKUG01,
		       TI.SKUG02 AS SKUG02,
		       TI.SKUG03 AS SKUG03,
		       TI.SKUG04 AS SKUG04,
		       TI.SKUG05 AS SKUG05,
		       TI.GRSWGT AS GRSWGT,
		       TI.NETWGT AS NETWGT,
		       TI.WGTUNT AS WGTUNT,
		       TI.LENGTH AS LENGTH,
		       TI.WIDTHW AS WIDTHW,
		       TI.HEIGHT AS HEIGHT,
		       TI.CUBICM AS CUBICM,
		       TI.CAPACT AS CAPACT,
		       ' ' AS WORKID,
		       ' ' AS WORKNM,
		       ' ' AS HHTTID,
		       SI.SMANDT AS SMANDT,
		       SI.SEBELN AS SEBELN,
		       SI.SEBELP AS SEBELP,
		       SI.SZMBLNO AS SZMBLNO,
		       SI.SZMIPNO AS SZMIPNO,
		       SI.STRAID AS STRAID,
		       SI.SVBELN AS SVBELN,
		       SI.SPOSNR AS SPOSNR,
		       SI.STKNUM AS STKNUM,
		       SI.STPNUM AS STPNUM,
		       SI.SWERKS AS SWERKS,
		       SI.SLGORT AS SLGORT,
		       SI.SDATBG AS SDATBG,
		       SI.STDLNR AS STDLNR,
		       SI.SSORNU AS SSORNU,
		       SI.SSORIT AS SSORIT,
		       SI.SMBLNR AS SMBLNR,
		       SI.SZEILE AS SZEILE,
		       SI.SMJAHR AS SMJAHR,
		       SI.SXBLNR AS SXBLNR,
		       SI.SAPSTS AS SAPSTS,
		       SI.SBKTXT AS SBKTXT,
		       ' ' AS ADJRSN,
		       ' ' AS RELRSN,
		       ' ' AS RELDAT,
		       ' ' AS RELUSR,
		       
		       SI.QTSHPD AS QTSHPD,
		       TI.QTCOMP AS QTCOMP,
		       TI.QTYFCN AS QTYFCN,
		       LEAST(TI.QTCOMP,SI.QTSHPD)-TI.QTYFCN AS QTCAVL,
		       TI.TASKKY AS TASKKY,
		       TI.TASKIT AS TASKIT,
		
		       NVL(SM.QTYSTD,0) AS PLIQTY,
		       NVL(SM.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC((TI.QTCOMP-TI.QTYFCN ) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
		       NVL(  TRUNC((TI.QTCOMP-TI.QTYFCN ) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
		       NVL(MOD(TI.QTCOMP-TI.QTYFCN , DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
		       NVL(SM.GRSWGT,0) * NVL(TI.QTCOMP-TI.QTYFCN ,0)  AS GRSWGT,
		       NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
		       
		       SR.ARRIVA AS ARRIVA,
		       SR.CARDAT AS CARDAT,
		       SR.CARNUM AS CARNUM,
		      SR.SHIPSQ AS SHIPSQ,
		       SR.SORTSQ AS SORTSQ,
		       SR.DRIVER AS DRIVER,
		       SR.RECAYN AS RECAYN,
		       SH.SHPMTY AS SHPMTY,
		       D.SHORTX  AS SHPMTYNM,
		       SH.DPTNKY AS DPTNKY, 
		       NVL(BZ.NAME01,WH.NAME01 ) AS DPTNKYNM,
		       SH.DOCTXT AS DOCTXT,
		       SH.PGRC02 AS PGRC02,
		       (SELECT DISTINCT ORDDAT FROM IFWMS113 WHERE SVBELN = SI.SVBELN AND XSTAT = 'D') AS ORDDAT,
		       SM.OUTDMT
		  FROM SHPDH SH
		       INNER JOIN SHPDI SI
		               ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN DOCTM D
		               ON D.DOCUTY = SH.SHPMTY
		       LEFT OUTER JOIN TASDI TI
		               ON TI.SHPOKY = SI.SHPOKY
		              AND TI.SHPOIT = SI.SHPOIT
		       INNER JOIN IFWMS113 I 
		                    ON I.OWNRKY = SH.OWNRKY
		                   AND I.WAREKY = SH.WAREKY
		                   AND I.SPOSNR = SI.SPOSNR
		                   AND I.SVBELN = SI.SVBELN
		                   AND I.XSTAT='D'
		       INNER JOIN SKUMA SM
		               ON SM.OWNRKY = SH.OWNRKY
		              AND SM.SKUKEY = SI.SKUKEY
		  LEFT OUTER JOIN BZPTN BZ
		                   ON BZ.OWNRKY = SH.OWNRKY
		                  AND BZ.PTNRKY = SH.DPTNKY
		                  AND BZ.PTNRTY = '0001'   
		  LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = SH.WAREKY
		
		      LEFT OUTER JOIN (SELECT DISTINCT SHPOKY, SHPOIT, ARRIVA, 
		                                CARDAT, CARNUM, 
		                                SHIPSQ, SORTSQ, DRIVER, 
		                                RECAYN, TASKKY
		                  FROM SHPDR)  SR
		              ON SR.SHPOKY = SI.SHPOKY
		             AND SR.SHPOIT = SI.SHPOIT              
		 WHERE SH.SHPMTY ='216'
		
		   AND SH.INDDCL = 'V'
		   AND SI.STATIT IN ('PSH','FSH')
		   AND SI.QTSHPD-(SI.QTYREF+SI.QTSHPC)  &gt; 0
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}		                  
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		ORDER BY 1, 2
		
  </select>
  
  <!-- [DL90] 배송량조정 아이템 조회 : INVENTORY.ADJUSTMENT.FIND_RCV_BY_TSK_ITEMLISTWMS   -->
  <select id="DL90_ITEM_02_LIST" parameterType="hashmap" resultType="DataMap">
	    SELECT ' ' AS SADJKY,
		       ' ' AS SADJIT,
		       ' ' AS RSNADJ,
		       ' ' AS STOKKY,
		       TI.LOTNUM AS LOTNUM,
		       'SHPLOC'  AS LOCAKY,
		       TI.TRNUAC AS TRNUID,
		       ' ' AS SECTID,
		       ' ' AS PACKID,
		       TI.QTCOMP-TI.QTYFCN AS QTADJU,
		       0 AS QTBLKD,
		       TI.QTCOMP-TI.QTYFCN AS QTYUOM,
		       ' ' AS TRUNTY,
		       TI.AMEAKY AS MEASKY,
		       TI.AUOMKY AS UOMKEY,
		       TI.QTTPUM AS QTPUOM,
		       TI.AUOMKY AS DUOMKY,
		       TI.QTTPUM AS QTDUOM,
		       ' ' AS SUBSIT,
		       ' ' AS SUBSFL,
		       TI.TASKKY AS REFDKY,
		       TI.TASKIT AS REFDIT,
		       TH.DOCCAT AS REFCAT,
		       TI.OWNRKY AS OWNRKY,
		       TI.SKUKEY AS SKUKEY,
		       TI.PTLT01 AS LOTA01,
		       TI.PTLT02 AS LOTA02,
		       TI.PTLT03 AS LOTA03,
		       TI.PTLT04 AS LOTA04,
		       TI.PTLT05 AS LOTA05,
		       TI.PTLT06 AS LOTA06,
		       TI.PTLT07 AS LOTA07,
		       TI.PTLT08 AS LOTA08,
		       TI.PTLT09 AS LOTA09,
		       TI.PTLT10 AS LOTA10,
		       TI.PTLT11 AS LOTA11,
		       TI.PTLT12 AS LOTA12,
		       TI.PTLT13 AS LOTA13,
		       TI.PTLT14 AS LOTA14,
		       TI.PTLT15 AS LOTA15,
		       TI.PTLT16 AS LOTA16,
		       TI.PTLT17 AS LOTA17,
		       TI.PTLT18 AS LOTA18,
		       TI.PTLT19 AS LOTA19,
		       TI.PTLT20 AS LOTA20,
		       TI.AWMSNO AS AWMSNO,
		       ' ' AS AREAKY,
		       TI.DESC01 AS DESC01,
		       TI.DESC02 AS DESC02,
		       TI.ASKU01 AS ASKU01,
		       TI.ASKU02 AS ASKU02,
		       TI.ASKU03 AS ASKU03,
		       TI.ASKU04 AS ASKU04,
		       TI.ASKU05 AS ASKU05,
		       TI.EANCOD AS EANCOD,
		       TI.GTINCD AS GTINCD,
		       TI.SKUG01 AS SKUG01,
		       TI.SKUG02 AS SKUG02,
		       TI.SKUG03 AS SKUG03,
		       TI.SKUG04 AS SKUG04,
		       TI.SKUG05 AS SKUG05,
		       TI.GRSWGT AS GRSWGT,
		       TI.NETWGT AS NETWGT,
		       TI.WGTUNT AS WGTUNT,
		       TI.LENGTH AS LENGTH,
		       TI.WIDTHW AS WIDTHW,
		       TI.HEIGHT AS HEIGHT,
		       TI.CUBICM AS CUBICM,
		       TI.CAPACT AS CAPACT,
		       ' ' AS WORKID,
		       ' ' AS WORKNM,
		       ' ' AS HHTTID,
		       TI.SMANDT AS SMANDT,
		       TI.SEBELN AS SEBELN,
		       TI.SEBELP AS SEBELP,
		       TI.SZMBLNO AS SZMBLNO,
		       TI.SZMIPNO AS SZMIPNO,
		       TI.STRAID AS STRAID,
		       TI.SVBELN AS SVBELN,
		       TI.SPOSNR AS SPOSNR,
		       TI.STKNUM AS STKNUM,
		       TI.STPNUM AS STPNUM,
		       TI.SWERKS AS SWERKS,
		       TI.SLGORT AS SLGORT,
		       TI.SDATBG AS SDATBG,
		       TI.STDLNR AS STDLNR,
		       TI.SSORNU AS SSORNU,
		       TI.SSORIT AS SSORIT,
		       TI.SMBLNR AS SMBLNR,
		       TI.SZEILE AS SZEILE,
		       TI.SMJAHR AS SMJAHR,
		       TI.SXBLNR AS SXBLNR,
		       TI.SAPSTS AS SAPSTS,
		       TI.SBKTXT AS SBKTXT,
		       NVL(ADJRSN,' ') AS ADJRSN,
		       ' ' AS RELRSN,
		       ' ' AS RELDAT,
		       ' ' AS RELUSR,
		       
		       TI.QTCOMP AS QTSHPD,
		       TI.QTYFCN AS QTYFCN,
		       TI.QTCOMP-TI.QTYFCN AS QTCAVL,
		       TI.TASKKY AS TASKKY,
		       TI.TASKIT AS TASKIT,
		
		       NVL(SM.QTYSTD,0) AS PLIQTY,
		       NVL(SM.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC((TI.QTCOMP-TI.QTYFCN ) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
		       NVL(  TRUNC((TI.QTCOMP-TI.QTYFCN ) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
		       NVL(MOD(TI.QTCOMP-TI.QTYFCN , DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
		       NVL(SM.GRSWGT,0) * NVL(TI.QTCOMP-TI.QTYFCN ,0)  AS GRSWGT,
		       NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
		       TH.TASOTY AS SHPMTY,
		       DM.SHORTX AS SHPMTYNM
		
		  FROM TASDH TH
		       INNER JOIN TASDI TI
		               ON TI.TASKKY = TH.TASKKY
		       INNER JOIN SKUMA SM
		               ON SM.OWNRKY = TI.OWNRKY
		              AND SM.SKUKEY = TI.SKUKEY
		       INNER JOIN DOCTM DM
		               ON DM.DOCUTY = TH.TASOTY
		            
		 WHERE TH.TASOTY IN ( '331','332','333','334','335','380' )
		   AND TI.STATIT IN ('FPC','PPC')
		   AND TI.QTCOMP - TI.QTYFCN  > 0
		   <if test='OWNRKY != ""'>  
		       AND TH.OWNRKY = #{OWNRKY}  
		   </if>  
		   <if test='WAREKY != ""'>  
		       AND TH.WAREKY = #{WAREKY}  
		   </if>  
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
		
  </select>
  
  <!-- [DL90] 배송량 조정 헤더 : 입력 -->
  <insert id="DL90_ADJDH_INSERT"  parameterType="hashmap">

    INSERT INTO ADJDH
	(     SADJKY
		, WAREKY
		, ADJUTY
		, DOCDAT
		, DOCCAT
		, ADJUCA
		, USRID1
		, UNAME1
		, DEPTID1
		, DNAME1
		, USRID2
		, UNAME2
		, DEPTID2
		, DNAME2
		, USRID3
		, UNAME3
		, DEPTID3
		, DNAME3
		, USRID4
		, UNAME4
		, DEPTID4
		, DNAME4
		, DOCTXT
		, CREDAT
		, CRETIM
		, CREUSR
		, LMODAT
		, LMOTIM
		, LMOUSR
		, INDBZL
		, INDARC
		, UPDCHK
		) VALUES(
		  NVL(#{SADJKY},' ')
	    , NVL(#{WAREKY},' ')
	    , NVL(#{ADJUTY},' ')
	    , NVL(#{DOCDAT},' ')
	    , NVL(#{DOCCAT},' ')
	    , NVL(#{ADJUCA},' ')
	    , NVL(#{USRID1},' ')
	    , NVL(#{UNAME1},' ')
	    , NVL(#{DEPTID1},' ')
	    , NVL(#{DNAME1},' ')
	    , NVL(#{USRID2},' ')
	    , NVL(#{UNAME2},' ')
	    , NVL(#{DEPTID2},' ')
	    , NVL(#{DNAME2},' ')
	    , NVL(#{USRID3},' ')
	    , NVL(#{UNAME3},' ')
	    , NVL(#{DEPTID3},' ')
	    , NVL(#{DNAME3},' ')
	    , NVL(#{USRID4},' ')
	    , NVL(#{UNAME4},' ')
	    , NVL(#{DEPTID4},' ')
	    , NVL(#{DNAME4},' ')
	    , NVL(#{DOCTXT},' ')
	    , NVL(TO_CHAR(SYSDATE,'YYYYMMDD'),' ')
	    , NVL(TO_CHAR(SYSDATE,'HH24MISS'),' ')
	    , NVL(#{SES_USER_ID},' ')
	    , NVL(TO_CHAR(SYSDATE,'YYYYMMDD'),' ')
	    , NVL(TO_CHAR(SYSDATE,'HH24MISS'),' ')
	    , NVL(#{SES_USER_ID},' ')
	    , NVL(#{INDBZL},' ')
	    , NVL(#{INDARC},' ')
	    , NVL(#{UPDCHK}, 0)
		)
		
  </insert>
    
  <!-- [DL90] 배송량 조정 아이템 : 입력 -->
  <insert id="DL90_ADJDI_INSERT"  parameterType="hashmap">

    INSERT INTO ADJDI
	(     SADJKY
		, SADJIT
		, RSNADJ
		, STOKKY
		, LOTNUM
		, LOCAKY
		, TRNUID
		, SECTID
		, PACKID
		, QTADJU
		, QTBLKD
		, QTYUOM
		, TRUNTY
		, MEASKY
		, UOMKEY
		, QTPUOM
		, DUOMKY
		, QTDUOM
		, SUBSIT
		, SUBSFL
		, REFDKY
		, REFDIT
		, REFCAT
		, OWNRKY
		, SKUKEY
		, LOTA01
		, LOTA02
		, LOTA03
		, LOTA04
		, LOTA05
		, LOTA06
		, LOTA07
		, LOTA08
		, LOTA09
		, LOTA10
		, LOTA11
		, LOTA12
		, LOTA13
		, LOTA14
		, LOTA15
		, LOTA16
		, LOTA17
		, LOTA18
		, LOTA19
		, LOTA20
		, AWMSNO
		, AREAKY
		, DESC01
		, DESC02
		, ASKU01
		, ASKU02
		, ASKU03
		, ASKU04
		, ASKU05
		, EANCOD
		, GTINCD
		, SKUG01
		, SKUG02
		, SKUG03
		, SKUG04
		, SKUG05
		, GRSWGT
		, NETWGT
		, WGTUNT
		, LENGTH
		, WIDTHW
		, HEIGHT
		, CUBICM
		, CAPACT
		, WORKID
		, WORKNM
		, HHTTID
		, SMANDT
		, SEBELN
		, SEBELP
		, SZMBLNO
		, SZMIPNO
		, STRAID
		, SVBELN
		, SPOSNR
		, STKNUM
		, STPNUM
		, SWERKS
		, SLGORT
		, SDATBG
		, STDLNR
		, SSORNU
		, SSORIT
		, SMBLNR
		, SZEILE
		, SMJAHR
		, SXBLNR
		, SAPSTS
		, SBKTXT
		, ADJRSN
		, RELRSN
		, RELDAT
		, RELUSR
		, CREDAT
		, CRETIM
		, CREUSR
		, LMODAT
		, LMOTIM
		, LMOUSR
		, INDBZL
		, INDARC
		, UPDCHK
		) VALUES(
	      NVL(#{SADJKY},' ')
		, NVL(#{SADJIT},' ')
		, NVL(#{RSNADJ},' ')
		, NVL(#{STOKKY},' ')
		, NVL(#{LOTNUM},' ')
		, NVL(#{LOCAKY},' ')
		, NVL(#{TRNUID},' ')
		, NVL(#{SECTID},' ')
		, NVL(#{PACKID},' ')
		, NVL(#{QTADJU},' ')
		, NVL(#{QTBLKD},' ')
		, NVL(#{QTYUOM},' ')
		, NVL(#{TRUNTY},' ')
		, NVL(#{MEASKY},' ')
		, NVL(#{UOMKEY},' ')
		, NVL(#{QTPUOM},' ')
		, NVL(#{DUOMKY},' ')
		, NVL(#{QTDUOM},' ')
		, NVL(#{SUBSIT},' ')
		, NVL(#{SUBSFL},' ')
		, NVL(#{REFDKY},' ')
		, NVL(#{REFDIT},' ')
		, NVL(#{REFCAT},' ')
		, NVL(#{OWNRKY},' ')
		, NVL(#{SKUKEY},' ')
		, NVL(#{LOTA01},' ')
		, NVL(#{LOTA02},' ')
		, NVL(#{LOTA03},' ')
		, NVL(#{LOTA04},' ')
		, NVL(#{LOTA05},' ')
		, NVL(#{LOTA06},' ')
		, NVL(#{LOTA07},' ')
		, NVL(#{LOTA08},' ')
		, NVL(#{LOTA09},' ')
		, NVL(#{LOTA10},' ')
		, NVL(#{LOTA11},' ')
		, NVL(#{LOTA12},' ')
		, NVL(#{LOTA13},' ')
		, NVL(#{LOTA14},' ')
		, NVL(#{LOTA15},' ')
		, NVL(#{LOTA16}, 0)
		, NVL(#{LOTA17}, 0)
		, NVL(#{LOTA18}, 0)
		, NVL(#{LOTA19}, 0)
		, NVL(#{LOTA20}, 0)
		, NVL(#{AWMSNO},' ')
		, NVL(#{AREAKY},' ')
		, NVL(#{DESC01},' ')
		, NVL(#{DESC02},' ')
		, NVL(#{ASKU01},' ')
		, NVL(#{ASKU02},' ')
		, NVL(#{ASKU03},' ')
		, NVL(#{ASKU04},' ')
		, NVL(#{ASKU05},' ')
		, NVL(#{EANCOD},' ')
		, NVL(#{GTINCD},' ')
		, NVL(#{SKUG01},' ')
		, NVL(#{SKUG02},' ')
		, NVL(#{SKUG03},' ')
		, NVL(#{SKUG04},' ')
		, NVL(#{SKUG05},' ')
		, NVL(#{GRSWGT}, 0)
		, NVL(#{NETWGT}, 0)
		, NVL(#{WGTUNT},' ')
		, NVL(#{LENGTH}, 0)
		, NVL(#{WIDTHW}, 0)
		, NVL(#{HEIGHT}, 0)
		, NVL(#{CUBICM}, 0)
		, NVL(#{CAPACT}, 0)
		, NVL(#{WORKID},' ')
		, NVL(#{WORKNM},' ')
		, NVL(#{HHTTID},' ')
		, NVL(#{SMANDT},' ')
		, NVL(#{SEBELN},' ')
		, NVL(#{SEBELP},' ')
		, NVL(#{SZMBLNO},' ')
		, NVL(#{SZMIPNO},' ')
		, NVL(#{STRAID},' ')
		, NVL(#{SVBELN},' ')
		, NVL(#{SPOSNR},' ')
		, NVL(#{STKNUM},' ')
		, NVL(#{STPNUM},' ')
		, NVL(#{SWERKS},' ')
		, NVL(#{SLGORT},' ')
		, NVL(#{SDATBG},' ')
		, NVL(#{STDLNR},' ')
		, NVL(#{SSORNU},' ')
		, NVL(#{SSORIT},' ')
		, NVL(#{SMBLNR},' ')
		, NVL(#{SZEILE},' ')
		, NVL(#{SMJAHR},' ')
		, NVL(#{SXBLNR},' ')
		, NVL(#{SAPSTS},' ')
		, NVL(#{SBKTXT},' ')
		, NVL(#{ADJRSN},' ')
		, NVL(#{RELRSN},' ')
		, NVL(#{RELDAT},' ')
		, NVL(#{RELUSR},' ')
		, NVL(TO_CHAR(SYSDATE,'YYYYMMDD'),' ')
		, NVL(TO_CHAR(SYSDATE,'HH24MISS'),' ')
		, NVL(#{SES_USER_ID},' ')
		, NVL(TO_CHAR(SYSDATE,'YYYYMMDD'),' ')
		, NVL(TO_CHAR(SYSDATE,'HH24MISS'),' ')
		, NVL(#{SES_USER_ID},' ')
		, NVL(#{INDBZL},' ')
		, NVL(#{INDARC},' ')
		, NVL(#{UPDCHK}, 0)

		)

  </insert>
  
  <!-- [DL90] 배송량 조정 입력 저장 : INVENTORY.ADJUSTMENT.UPDATE_SHPCANCEL_UPDATE -->
  <update id="DL90_SHPCANCEL_UPDATE"  parameterType="hashmap">
     BEGIN  
		  BEGIN 
		    UPDATE TASDI 
		       SET QTYFCN = QTYFCN  + TO_NUMBER(#{QTYFCN})  
		     WHERE TASKKY = #{TASKKY}  
		       AND TASKIT = #{TASKIT};
		       IF SQL%ROWCOUNT = 0 THEN  RAISE_APPLICATION_ERROR(-20011, 'TASDI QTYFCN UPDATE ERROR'); END IF; 
		  END; 
		  BEGIN 
		    UPDATE SHPDI  
		       SET QTSHPC = QTSHPC + TO_NUMBER(#{QTYFCN}),  
		           AWMSNO = #{AWMSNO},  
		           LMOUSR = #{SES_USER_ID}
		     WHERE SHPOKY = #{SHPOKY}    
		       AND SHPOIT = #{SHPOIT}; 
		       IF SQL%ROWCOUNT = 0 THEN  RAISE_APPLICATION_ERROR(-20011, 'SHPDI QTYFCN UPDATE ERROR'); END IF; 
		  END;  
		  EXCEPTION   WHEN OTHERS THEN   RAISE_APPLICATION_ERROR(-20002, SUBSTR(SQLERRM,1,240));  
	 END;
  </update>
  
  <!-- [DL90] 배송량 조정 입력 저장 : INVENTORY.ADJUSTMENT.UPDATE_SHPMODIFY_UPDATE -->
  <update id="DL90_SHPMODIFY_UPDATE"  parameterType="hashmap">
		BEGIN 
		    BEGIN   
		        UPDATE TASDI  SET QTYFCN = QTYFCN + TO_NUMBER(#{QTYFCN})  
		         WHERE TASKKY = #{TASKKY}    
		           AND TASKIT = #{TASKIT};  
		           IF SQL%ROWCOUNT = 0 THEN RAISE_APPLICATION_ERROR(-20011, 'TASDI UPDATE ERROR');  END IF;    
		    END;   
		    BEGIN   
		        UPDATE SHPDI  
		           SET QTYREF = QTYREF + TO_NUMBER(#{QTYFCN}) ,  STRAID = #{STRAID},  AWMSNO = #{AWMSNO}, LMOUSR = #{SES_USER_ID} 
		        WHERE SHPOKY = #{SHPOKY}   AND SHPOIT = #{SHPOIT}; 
		        IF SQL%ROWCOUNT = 0 THEN RAISE_APPLICATION_ERROR(-20011, 'SHPDI UPDATE ERROR');  END IF;   
		    END; 
		    EXCEPTION  WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20002, SUBSTR(SQLERRM, 1, 240));  
		END; 
  </update>
   
  <!-- [DL90] 배송량 조정 입력 저장 : INVENTORY.ADJUSTMENT.UPDATE_TASKYCAN_UPDATE -->
  <update id="DL90_TASKYCAN_UPDATE"  parameterType="hashmap">
		BEGIN 
		    BEGIN   
		        UPDATE TASDI  SET QTYFCN = QTYFCN + TO_NUMBER(#{QTYFCN})  
		         WHERE TASKKY = #{TASKKY}    
		           AND TASKIT = #{TASKIT};  
		           IF SQL%ROWCOUNT = 0 THEN RAISE_APPLICATION_ERROR(-20011, 'TASDI UPDATE ERROR');  END IF;    
		    END;   
		    BEGIN   
		        UPDATE SHPDI  
		           SET QTYREF = QTYREF + TO_NUMBER(#{QTYFCN}) ,  STRAID = #{STRAID},  AWMSNO = #{AWMSNO}, LMOUSR = #{SES_USER_ID}  
		        WHERE SHPOKY = #{SHPOKY}   AND SHPOIT = #{SHPOIT}; 
		        IF SQL%ROWCOUNT = 0 THEN RAISE_APPLICATION_ERROR(-20011, 'SHPDI UPDATE ERROR');  END IF;   
		    END; 
		    EXCEPTION  WHEN OTHERS THEN RAISE_APPLICATION_ERROR(-20002, SUBSTR(SQLERRM, 1, 240));  
		END; 
  </update>
  
  <!-- [DL90] 배송량 조정 입력 Validation : INVENTORY.ADJUSTMENT.TASKQTYCHK  -->
  <select id="DL90_VALID_01_LIST" parameterType="hashmap" resultType="DataMap">

      SELECT  QTCOMP-QTYFCN AS QTYFCN
		FROM TASDI
		WHERE TASKKY = #{TASKKY}
		  AND TASKIT = #{TASKIT}
       
  </select>
   
  <!-- [DL90] 배송량 조정 입력 Validation : INVENTORY.ADJUSTMENT.TASKQTYCHK2  -->
  <select id="DL90_VALID_02_LIST" parameterType="hashmap" resultType="DataMap">

     SELECT QTSHPD-QTYREF+QTSHPC AS QTSHPD
			FROM SHPDI
			WHERE SHPOKY = #{SHPOKY}
			  AND SHPOIT = #{SHPOIT}
       
  </select>
  
     
  <!-- [DL90] 배송량 조정 입력 Validation : DBL.ADJUSTMENT.TOSSCHK1  -->
  <select id="DL90_VALID_03_MAP" parameterType="hashmap" resultType="DataMap">

      SELECT DECODE(NVL(TOS.SAP_DOC_NO,' '),' ','Y','N')  AS RESULTMSG 
		FROM SA_ORDER_MST@WMSTOTOS TOS
		WHERE TOS.ORD_NO =  #{SVBELN}
		       
  </select>
    
  <!-- [DL91] 주문집계표(미확정주문) 조회 : INVENTORY.ADJUSTMENT.FIND_RCV_BY_TSK_HEADER   -->
  <select id="DL91_ALL_LIST" parameterType="hashmap" resultType="DataMap">
 
    SELECT /*+ ORDERED INDEX(DH IDX_SHPDH_NEW09)  */  DH.OWNRKY AS OWNRKY,
           DH.WAREKY AS WAREKY,
           DI.SVBELN AS SVBELN,
           DH.SHPOKY AS SHPOKY,
           BZ2.POSTCD AS POSTCD,
           DH.DPTNKY AS DPTNKY,
           BZ.NAME01 AS DPTNKYNM, 
           DH.PTRCVR AS PTRCVR,
           BZ2.NAME01 AS PTRCVRNM, 
           DH.PGRC04 AS PGRC04 ,
           SA.NAME01 AS PGRC04NM,
           SM.DESC01 AS DESC01,
           DI.SKUKEY AS SKUKEY,
           DI.QTSHPD AS QTSHPD,
           DI.QTSHPO AS QTSHPO,
           DI.QTALOC AS QTALOC,
           DI.QTYREF AS QTYREF,
           DI.QTALOC - DI.QTYREF AS QTYCAL,
           NVL(DR.CARNUM,' ') AS CARNUM,
           NVL(DR.RECNUM,' ') AS RECNUM,
           DH.DOCTXT AS DOCTXT,
           DH.PGRC03 AS DIRSUP,
           BZ.ADDR01||BZ.ADDR02 AS ADDR01,
           SM.QTDUOM AS QTDUOM,
           ' ' AS PRC,
           DH.INDDCL AS INDDCL,
           (SELECT DM.SBWART FROM DOCTM DM WHERE DH.DOCUTY = DM.DOCUTY)  AS SBWART,
           DH.RQSHPD AS RQSHPD,
           DH.RQARRD AS RQARRD,
           ' ' AS NO,
           DH.UNAME1 AS UNAME01,
           DR.CARDAT AS CARDAT,
           DH.DNAME4 AS DNAME4,
           DH.UNAME4 AS UNAME4,
           DH.USRID1 AS USRID1,
           DH.DNAME1 AS DNAME1,
           LA.LOCAKY AS LOCAKY,
           SM.EANCOD AS EANCOD,
           CF.CARNUM AS TC05NM,
           DR.ARRIVA AS REGNKY,
           (SELECT /*+ INDEX(SP IDX_SHPMA_IDX03) */ MAX(SP.REGNNM) FROM SHPMA SP
             WHERE DH.USRID1 = SP.POSTCD AND DH.OWNRKY = SP.OWNRKY AND DR.ARRIVA = SP.REGNKY) 
             AS REGNNM,
           DR.SHIPSQ AS SHIPSQ,
           SM.DESC03 AS DESC03,
           ROUND((DI.QTSHPD - DI.QTSHPC - DI.QTYREF) * SM.NETWGT) AS TOTWGT,
           NVL( TRUNC((DI.QTSHPO) / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) ) , 0) AS BOXQTY1,
           NVL( TRUNC((DI.QTSHPD) / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) ) , 0) AS BOXQTY4,
          F_CAR_MATCH_SHPOKY_NEW(DH.SHPOKY,' ',0)  AS TC06NM,
           DI.QTYORG AS QTYORG,
            ' ' AS PLTHPD,
            ' ' AS BOXCAL,
            ' ' AS LMODAT
      FROM SHPDH DH INNER JOIN SHPDI DI ON DH.SHPOKY = DI.SHPOKY
               LEFT OUTER JOIN SHPDR DR ON DI.SHPOKY = DR.SHPOKY AND DI.SHPOIT = DR.SHPOIT
               LEFT OUTER JOIN SKUMA SM ON DI.SKUKEY = SM.SKUKEY AND DH.OWNRKY = SM.OWNRKY
               LEFT OUTER JOIN BZPTN BZ ON DH.OWNRKY = BZ.OWNRKY AND DH.DPTNKY = BZ.PTNRKY AND BZ.PTNRTY = '0001'
               LEFT OUTER JOIN BZPTN BZ2 ON DH.OWNRKY = BZ2.OWNRKY AND DH.PTRCVR = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
               LEFT OUTER JOIN BZPTN SA ON  DH.OWNRKY = SA.OWNRKY AND DH.PGRC04 = SA.PTNRKY AND SA.PTNRTY = '0003'
               LEFT OUTER JOIN CARMA CA ON DR.CARNUM = CA.CARNUM AND DH.OWNRKY = CA.OWNRKY AND DH.WAREKY = CA.WAREKY
               LEFT OUTER JOIN LOCMA LA ON LA.WAREKY = DH.WAREKY AND LOCSKU = DI.SKUKEY
               LEFT OUTER JOIN CARFX CF ON DH.OWNRKY = CF.OWNRKY AND CF.WAREKY = DH.WAREKY AND CF.PTNRKY = DH.DPTNKY
               LEFT OUTER JOIN CARFX CF2 ON DH.OWNRKY = CF2.OWNRKY AND DH.WAREKY = CA.WAREKY AND DH.PTRCVR = CF2.PTNRKY
    /*
               LEFT OUTER JOIN (SELECT C.OWNRKY, C.WAREKY, C.CARNUM, CS.REGNKY
                                FROM CARMA C LEFT OUTER JOIN CARSH CS ON C.OWNRKY = CS.OWNRKY AND C.CARNUM = CS.CARNUM AND C.WAREKY = CS.WAREKY
                                WHERE C.DELMAK != '1') CR ON DH.OWNRKY = CR.OWNRKY AND CR.WAREKY = DH.WAREKY AND BZ2.EXPTNK = CR.REGNKY
               */
      WHERE 1 = 1
        AND DR.RECAYN = 'N'
        AND DH.STATDO IN('FSH','PSH','FPC','FAL','PAL')
        AND DH.OWNRKY = #{OWNRKY}
            AND DH.WAREKY = #{WAREKY}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
     
     UNION ALL
     SELECT 
      IF113.OWNRKY AS OWNRKY, 
      IF113.WAREKY AS WAREKY, 
      IF113.SVBELN AS SVBELN, 
      IF113.SHPOKY AS SHPOKY,
      IF113.POSTCD AS POSTCD, 
      IF113.DPTNKY AS DPTNKY, 
      IF113.NAME01 AS DPTNKYNM,
      IF113.PTRCVR AS PTRCVR, 
      IF113.NAME01 AS PTRCVRNM,
      IF113.PGRC04 AS PGRC04,
      IF113.NAME01 AS PGRC04NM,
      IF113.DESC01 AS DESC01,
      IF113.SKUKEY AS SKUKEY,
      IF113.QTSHPD AS QTSHPD, 
      IF113.QTSHPO AS QTSHPO, 
      IF113.QTALOC AS QTALOC, 
      IF113.QTYREF AS QTYREF, 
      IF113.QTYCAL AS QTYCAL,
      IF113.CARNUM AS CARNUM,
      IF113.RECNUM AS RECNUM,
      IF113.DOCTXT AS DOCTXT, 
      IF113.DIRSUP AS DIRSUP, 
      IF113.ADDR01 AS ADDR01,
      IF113.QTDUOM AS QTDUOM,
      IF113.PRC AS PRC,
      IF113.INDDCL AS INDDCL,
      IF113.SBWART AS SBWART,
      IF113.RQSHPD AS RQSHPD, 
      IF113.RQARRD AS RQARRD, 
      IF113.NO AS NO,
      IF113.UNAME01 AS UNAME01,
      IF113.CARDAT AS CARDAT,
      IF113.DNAME4 AS DNAME4,
      IF113.UNAME4 AS UNAME4,
      IF113.USRID1 AS USRID1,
      IF113.DNAME1 AS DNAME1,
      IF113.LOCAKY AS LOCAKY,
      IF113.EANCOD AS EANCOD,
      IF113.TC05NM AS TC05NM,
      IF113.REGNKY AS REGNKY,
      IF113.REGNNM AS REGNNM,
      IF113.SHIPSQ AS SHIPSQ,
      IF113.DESC03 AS DESC03,
      IF113.TOTWGT AS TOTWGT,
      IF113.BOXQTY1 AS BOXQTY1,
      IF113.BOXQTY4 AS BOXQTY4,
      IF113.TC06NM AS TC06NM,
      IF113.QTYORG AS QTYORG,
            ' ' AS PLTHPD,
            ' ' AS BOXCAL,
            ' ' AS LMODAT
    FROM( 
         SELECT 
          IF.OWNRKY AS OWNRKY, 
          IF.WAREKY AS WAREKY, 
          IF.SVBELN AS SVBELN, 
          ' ' AS SHPOKY,
          IF.CUPOST AS POSTCD, 
          IF.PTNRTO AS DPTNKY, 
          BZ.NAME01 AS DPTNKYNM,
          SA.NAME01 AS NAME01,
          NVL(BZ.EXPTNK, ' ') AS PTRCVR, 
          BZ2.NAME01 AS PTRCVRNM,
          NVL(MAX(IF.WARESR), ' ') AS PGRC04,
          SA.NAME01 AS PGRC04NM,
          SM.DESC01 AS DESC01,
          IF.SKUKEY AS SKUKEY,
          0 AS QTSHPD, 
          0 AS QTSHPO, 
          0 AS QTALOC, 
          0 AS QTYREF, 
          0 AS QTYCAL,
          ' ' AS CARNUM,
          ' ' AS RECNUM,
          MAX(IF.TEXT01) AS DOCTXT, 
          NVL(MAX(DIRSUP), ' ') AS DIRSUP, 
          MAX(BZ.ADDR01)||MAX(BZ.ADDR02) AS ADDR01,
          SM.QTDUOM AS QTDUOM,
          ' ' AS PRC,
          'N' AS INDDCL,
          ' ' AS SBWART,
          IF.OTRQDT AS RQSHPD, 
          IF.ERPCDT AS RQARRD, 
          ' ' AS NO,
          IF.CUADDR AS UNAME01,
          IF.OTRQDT AS CARDAT,
          IF.SALTEL AS DNAME4,
          IF.SALENM AS UNAME4,
          ' ' AS USRID1,
          IF.CTTEL1 AS DNAME1 ,
          LA.LOCAKY AS LOCAKY,
          SM.EANCOD AS EANCOD,
          CF.CARNUM AS TC05NM,
          BZ2.EXPTNK AS REGNKY,
          (SELECT MAX(SP.REGNNM) FROM SHPMA SP
             WHERE IF.CUPOST = SP.POSTCD AND IF.OWNRKY = SP.OWNRKY AND BZ2.EXPTNK = SP.REGNKY) AS REGNNM,
          0 AS SHIPSQ,
          ' ' AS DESC03,
          ROUND(SUM(IF.QTYORG) * MAX(SM.NETWGT)) AS TOTWGT,
          0 AS BOXQTY1,
          0 AS BOXQTY4,
          F_CAR_MATCH_SVBELN(IF.OWNRKY, IF.SVBELN, IF.SPOSNR, IF.SKUKEY, ' ', 0) AS TC06NM,
          SUM(IF.QTYORG) AS QTYORG
         
         FROM IFWMS113 IF INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY 
                         LEFT OUTER JOIN DOCTM DT ON DT.DOCUTY = IF.DOCUTY 
                         LEFT OUTER JOIN BZPTN BZ ON BZ.PTNRKY = IF.PTNRTO AND BZ.OWNRKY = IF.OWNRKY AND BZ.PTNRTY = '0001' 
                         LEFT OUTER JOIN BZPTN BZ2 ON IF.OWNRKY = BZ2.OWNRKY AND IF.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
                         LEFT OUTER JOIN BZPTN SA ON  IF.OWNRKY = SA.OWNRKY AND IF.WARESR = SA.PTNRKY AND SA.PTNRTY = '0003'
                         LEFT OUTER JOIN SKUMA SM ON IF.SKUKEY = SM.SKUKEY AND IF.OWNRKY = SM.OWNRKY
                         LEFT OUTER JOIN LOCMA LA ON LA.WAREKY = IF.WAREKY AND LOCSKU = IF.SKUKEY
                         LEFT OUTER JOIN CARFX CF ON IF.OWNRKY = CF.OWNRKY AND CF.WAREKY = IF.WAREKY AND BZ.PTNRKY = CF.PTNRKY
                        /*
                        LEFT OUTER JOIN (SELECT C.OWNRKY, C.WAREKY, C.CARNUM, CS.REGNKY
                                          FROM CARMA C LEFT OUTER JOIN CARSH CS ON C.OWNRKY = CS.OWNRKY AND C.CARNUM = CS.CARNUM AND C.WAREKY = CS.WAREKY
                                          WHERE C.DELMAK != '1'
                                          ) CR ON IF.OWNRKY = CR.OWNRKY AND CR.WAREKY = IF.WAREKY AND BZ2.EXPTNK = CR.REGNKY
                        */
          WHERE 1=1
          AND IF.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267') 
          AND IF.XSTAT = 'R' 
          AND IF.C00102 IN ('X','N','Y')
          AND IF.QTYREQ - IF.WMSMGT - IF.QTSHPD > 0 
          AND IF.OWNRKY = #{OWNRKY}
              AND IF.WAREKY = #{WAREKY}
    <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">  ${RANGE_SQL2} </if> 
     GROUP BY IF.OWNRKY, 
          IF.WAREKY, 
          IF.OTRQDT, 
          IF.ERPCDT, 
          IF.PTNRTO, 
          IF.SVBELN, 
          BZ.NAME01,
          BZ2.NAME01,
          BZ2.EXPTNK,
          SA.NAME01,
          SM.DESC01,
          IF.SKUKEY,
          SM.QTDUOM,
          NVL(BZ.EXPTNK, ' '), 
          NVL(BZ.PTNG01, ' '), 
          NVL(BZ.PTNG02, ' '), 
          NVL(BZ.PTNG03, ' '), 
          IF.CUPOST,
          /*IF.DIRSUP,*/
          /*IF.DOCUTY,*/
          IF.CUADDR,
          IF.SALTEL,
          IF.SALENM,
          IF.CTTEL1,
          LA.LOCAKY,
          SM.EANCOD,
          CF.CARNUM,
          IF.SVBELN, 
          IF.SPOSNR
              ) IF113
                         
      WHERE 1 = 1

  </select>
    
  <!-- [DL91] 주문집계표(미확정주문) 조회 : REPORT.DL91.FINDWMS   -->
  <select id="DL91_WMS_LIST" parameterType="hashmap" resultType="DataMap">
      SELECT DH.OWNRKY AS OWNRKY,
           DH.WAREKY AS WAREKY,
           DI.SVBELN AS SVBELN,
           DH.SHPOKY AS SHPOKY,
           BZ2.POSTCD AS POSTCD,
           DH.DPTNKY AS DPTNKY,
           BZ.NAME01 AS DPTNKYNM,
           DH.PTRCVR AS PTRCVR,
           BZ2.NAME01 AS PTRCVRNM,
           DH.PGRC04 AS PGRC04,
           SA.NAME01 AS PGRC04NM,
           SM.DESC01 AS DESC01,
           DI.SKUKEY AS SKUKEY,
           DI.QTSHPD AS QTSHPD,
           DI.QTSHPO AS QTSHPO,
           DI.QTALOC AS QTALOC,
           DI.QTYREF AS QTYREF,
           DI.QTALOC - DI.QTYREF AS QTYCAL,
           NVL(DR.CARNUM,' ') AS CARNUM,
           NVL(DR.RECNUM,' ') AS RECNUM,
           DH.DOCTXT AS DOCTXT,
           DH.PGRC03 AS DIRSUP,
           BZ.ADDR01||BZ.ADDR02 AS ADDR01,
           SM.QTDUOM AS QTDUOM,
           ' ' AS PRC,
           DH.INDDCL AS INDDCL,
           DM.SBWART AS SBWART,
           DH.RQSHPD AS RQSHPD,
           DH.RQARRD AS RQARRD,
           ' ' AS NO,
           DH.UNAME1 AS UNAME01,
           DR.CARDAT AS CARDAT,
           DH.DNAME1 AS DNAME1,
           DH.DNAME4 AS DNAME4,
           DH.UNAME4 AS UNAME4,
           DH.USRID1 AS USRID1,
           DH.DNAME1 AS DNAME1,
           LA.LOCAKY AS LOCAKY,
           SM.EANCOD AS EANCOD,
           CF.CARNUM AS TC05NM,
           DR.ARRIVA AS REGNKY,
           (SELECT MAX(SP.REGNNM) FROM SHPMA SP
             WHERE DH.USRID1 = SP.POSTCD AND DH.OWNRKY = SP.OWNRKY AND DR.ARRIVA = SP.REGNKY) AS REGNNM,
           DR.SHIPSQ AS SHIPSQ,
           SM.DESC03 AS DESC03,
           ROUND((DI.QTSHPD - DI.QTSHPC - DI.QTYREF) * SM.NETWGT) AS TOTWGT,
           NVL( TRUNC((DI.QTSHPO) / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) ) , 0) AS BOXQTY1,
           NVL( TRUNC((DI.QTSHPD) / DECODE(SM.QTDUOM, NULL, 0, SM.QTDUOM) ) , 0) AS BOXQTY4,
           F_CAR_MATCH_SHPOKY(DH.SHPOKY,' ',0) AS TC06NM,
           DI.QTYORG AS QTYORG
      FROM SHPDH DH INNER JOIN SHPDI DI ON DH.SHPOKY = DI.SHPOKY
                    LEFT OUTER JOIN SHPDR DR ON DI.SHPOKY = DR.SHPOKY AND DI.SHPOIT = DR.SHPOIT
                    LEFT OUTER JOIN SKUMA SM ON DI.SKUKEY = SM.SKUKEY AND DH.OWNRKY = SM.OWNRKY
                    LEFT OUTER JOIN BZPTN BZ ON DH.OWNRKY = BZ.OWNRKY AND DH.DPTNKY = BZ.PTNRKY AND BZ.PTNRTY = '0001'
                    LEFT OUTER JOIN BZPTN BZ2 ON DH.OWNRKY = BZ2.OWNRKY AND DH.PTRCVR = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
                    LEFT OUTER JOIN BZPTN SA ON DH.PGRC04 = SA.PTNRKY AND SA.PTNRTY = '0003'
                    LEFT OUTER JOIN DOCTM DM ON DH.DOCUTY = DM.DOCUTY
                    LEFT OUTER JOIN CARMA CA ON DR.CARNUM = CA.CARNUM AND DH.OWNRKY = CA.OWNRKY AND DH.WAREKY = CA.WAREKY
                    LEFT OUTER JOIN LOCMA LA ON LA.WAREKY = DH.WAREKY AND LOCSKU = DI.SKUKEY
                    LEFT OUTER JOIN CARFX CF ON CA.OWNRKY = CF.OWNRKY AND CF.WAREKY = CA.WAREKY AND BZ.PTNRKY = CF.PTNRKY
                    LEFT OUTER JOIN CARFX CF2 ON CA.OWNRKY = CF2.OWNRKY AND CF2.WAREKY = CA.WAREKY AND BZ2.PTNRKY = CF2.PTNRKY
                   /*
                   LEFT OUTER JOIN (SELECT C.OWNRKY, C.WAREKY, C.CARNUM, CS.REGNKY
                                    FROM CARMA C LEFT OUTER JOIN CARSH CS ON C.OWNRKY = CS.OWNRKY AND C.CARNUM = CS.CARNUM AND C.WAREKY = CS.WAREKY
                                    WHERE C.DELMAK != '1') CR ON DH.OWNRKY = CR.OWNRKY AND CR.WAREKY = DH.WAREKY AND BZ2.EXPTNK = CR.REGNKY
                                    
                    */
      WHERE 1 = 1
        AND DR.RECAYN = 'N'
        AND DI.STATIT IN('FSH','PSH','FPC','FAL','PAL')
        AND DH.OWNRKY = #{OWNRKY}
            AND DH.WAREKY = #{WAREKY}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
     ORDER BY 1
  </select>
  
  <!-- [DL91] 주문집계표(미확정주문) 조회 : REPORT.DL91.FINDSO   -->
  <select id="DL91_SO_LIST" parameterType="hashmap" resultType="DataMap">
      
    SELECT 
        IF113.OWNRKY AS OWNRKY, 
        IF113.WAREKY AS WAREKY, 
        IF113.SVBELN AS SVBELN, 
        IF113.SHPOKY AS SHPOKY,
        IF113.POSTCD AS POSTCD, 
        IF113.DPTNKY AS DPTNKY, 
        IF113.NAME01 AS DPTNKYNM,
        IF113.PTRCVR AS PTRCVR, 
        IF113.NAME01 AS PTRCVRNM,
        IF113.PGRC04 AS PGRC04,
        IF113.NAME01 AS PGRC04NM,
        IF113.DESC01 AS DESC01,
        IF113.SKUKEY AS SKUKEY,
        IF113.QTSHPD AS QTSHPD, 
        IF113.QTSHPO AS QTSHPO, 
        IF113.QTALOC AS QTALOC, 
        IF113.QTYREF AS QTYREF, 
        IF113.QTYCAL AS QTYCAL,
        IF113.CARNUM AS CARNUM,
        IF113.RECNUM AS RECNUM,
        IF113.DOCTXT AS DOCTXT, 
        IF113.DIRSUP AS DIRSUP, 
        IF113.ADDR01 AS ADDR01,
        IF113.QTDUOM AS QTDUOM,
        IF113.PRC AS PRC,
        IF113.INDDCL AS INDDCL,
        IF113.SBWART AS SBWART,
        IF113.RQSHPD AS RQSHPD, 
        IF113.RQARRD AS RQARRD, 
        IF113.NO AS NO,
        IF113.UNAME01 AS UNAME01,
        IF113.CARDAT AS CARDAT,
        IF113.DNAME4 AS DNAME4,
        IF113.UNAME4 AS UNAME4,
        IF113.USRID1 AS USRID1,
        IF113.DNAME1 AS DNAME1,
        IF113.LOCAKY AS LOCAKY,
        IF113.EANCOD AS EANCOD,
        IF113.TC05NM AS TC05NM,
        IF113.REGNKY AS REGNKY,
        IF113.TOTWGT AS TOTWGT,
        IF113.BOXQTY1 AS BOXQTY1,
        IF113.BOXQTY4 AS BOXQTY4,
        IF113.TC06NM AS TC06NM,
        IF113.QTYORG AS QTYORG
      FROM( 
           SELECT 
            IF.OWNRKY AS OWNRKY, 
            IF.WAREKY AS WAREKY, 
            IF.SVBELN AS SVBELN, 
            ' ' AS SHPOKY,
            IF.CUPOST AS POSTCD, 
            IF.PTNRTO AS DPTNKY, 
            BZ.NAME01 AS DPTNKYNM,
            SA.NAME01 AS NAME01,
            NVL(IF.PTNRTO, ' ') AS PTRCVR, 
            BZ2.NAME01 AS PTRCVRNM,
            NVL(MAX(IF.WARESR), ' ') AS PGRC04,
            SA.NAME01 AS PGRC04NM,
            SM.DESC01 AS DESC01,
            IF.SKUKEY AS SKUKEY,
            0 AS QTSHPD, 
            0 AS QTSHPO, 
            0 AS QTALOC, 
            0 AS QTYREF, 
            0 AS QTYCAL,
            ' ' AS CARNUM,
            ' ' AS RECNUM,
            MAX(IF.TEXT01) AS DOCTXT, 
            NVL(MAX(DIRSUP), ' ') AS DIRSUP, 
            MAX(BZ.ADDR01)||MAX(BZ.ADDR02) AS ADDR01,
            SM.QTDUOM AS QTDUOM,
            ' ' AS PRC,
            'N' AS INDDCL,
            ' ' AS SBWART,
            IF.OTRQDT AS RQSHPD, 
            IF.ERPCDT AS RQARRD, 
            ' ' AS NO,
            IF.CUADDR AS UNAME01,
            IF.OTRQDT AS CARDAT,
            IF.SALTEL AS DNAME4,
            IF.SALENM AS UNAME4,
            ' ' AS USRID1,
            IF.CTTEL1 AS DNAME1 ,
            LA.LOCAKY AS LOCAKY,
            SM.EANCOD AS EANCOD,
            CF.CARNUM AS TC05NM,
            BZ2.EXPTNK AS REGNKY,
            (SELECT MAX(SP.REGNNM) FROM SHPMA SP
               WHERE IF.CUPOST = SP.POSTCD AND IF.OWNRKY = SP.OWNRKY AND BZ2.EXPTNK = SP.REGNKY) AS REGNNM,
            0 AS SHIPSQ,
            ' ' AS DESC03,
            ROUND(SUM(IF.QTYORG) * MAX(SM.NETWGT)) AS TOTWGT,
            0 AS BOXQTY1,
            0 AS BOXQTY4,
            F_CAR_MATCH_SVBELN(IF.OWNRKY, IF.SVBELN, IF.SPOSNR, IF.SKUKEY, ' ', 0) AS TC06NM,
            SUM(IF.QTYORG) AS QTYORG
           FROM IFWMS113 IF INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY 
                           LEFT OUTER JOIN DOCTM DT ON DT.DOCUTY = IF.DOCUTY 
                           LEFT OUTER JOIN BZPTN BZ ON BZ.PTNRKY = IF.PTNRTO AND BZ.OWNRKY = IF.OWNRKY AND BZ.PTNRTY = '0001' 
                           LEFT OUTER JOIN BZPTN BZ2 ON IF.OWNRKY = BZ2.OWNRKY AND IF.PTNRTO = BZ2.PTNRKY AND BZ2.PTNRTY = '0007'
                           LEFT OUTER JOIN BZPTN SA ON IF.WARESR = SA.PTNRKY AND SA.PTNRTY = '0003'
                           LEFT OUTER JOIN SKUMA SM ON IF.SKUKEY = SM.SKUKEY AND IF.OWNRKY = SM.OWNRKY
                           LEFT OUTER JOIN LOCMA LA ON LA.WAREKY = IF.WAREKY AND LOCSKU = IF.SKUKEY
                           LEFT OUTER JOIN CARFX CF ON IF.OWNRKY = CF.OWNRKY AND CF.WAREKY = IF.WAREKY AND BZ.PTNRKY = CF.PTNRKY
            WHERE 1=1
            AND IF.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267') 
            AND IF.XSTAT = 'R' 
            AND IF.C00102 IN ('X','N','Y')
            AND IF.QTYREQ - IF.WMSMGT - IF.QTSHPD > 0 
       GROUP BY IF.OWNRKY, 
            IF.WAREKY, 
            IF.OTRQDT, 
            IF.ERPCDT, 
            IF.PTNRTO, 
            IF.SVBELN, 
            BZ.NAME01,
            BZ2.NAME01,
            BZ2.EXPTNK,
            SA.NAME01,
            SM.DESC01,
            IF.SKUKEY,
            SM.QTDUOM,
            NVL(BZ.EXPTNK, ' '), 
            NVL(BZ.PTNG01, ' '), 
            NVL(BZ.PTNG02, ' '), 
            NVL(BZ.PTNG03, ' '), 
            IF.CUPOST,
            /*IF.DIRSUP,*/
            /*IF.DOCUTY,*/
            IF.CUADDR,
            IF.SALTEL,
            IF.SALENM,
            IF.CTTEL1,
            LA.LOCAKY,
            SM.EANCOD,
            CF.CARNUM,
            IF.SVBELN, 
            IF.SPOSNR
                ) IF113
                           
        WHERE 1 = 1
        AND OWNRKY = #{OWNRKY}
              AND WAREKY = #{WAREKY}
      <if test="RANGE_SQL2 != null and RANGE_SQL2 != ''">  ${RANGE_SQL2} </if>  
         
       ORDER BY  1
  </select>
  
  <!-- [DL93] DAS파일생성 조회 : OUTBOUND.DAS.FIND  -->
  <select id="DL93_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT ORDDAT AS ORDDAT,
		       PTNROD AS PTNROD,
		       PTNRODNM AS PTNRODNM,
		       PTNRTO AS PTNRTO,
		       PTNRTONM AS PTNRTONM,
		       CARNUM AS CARNUM,
		       CARNM AS CARNM
		 FROM (
		        SELECT /*+ ordered*/I.WAREKY AS WAREKY,
		               I.ORDDAT AS ORDDAT,
		               I.PTNROD AS PTNROD,
		               B.NAME01 AS PTNRODNM,
		               I.PTNRTO AS PTNRTO,
		               B2.NAME01 AS PTNRTONM,
		               C.CARNUM AS CARNUM,
		               C.DESC01 AS CARNM
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE 1 = 1
		                                         AND F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                         AND C.CARNUM NOT IN ('15호차','16호차')
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = '2213'
		           AND I.C00102 = 'Y'
		           AND I.DIRDVY = '01'
		           AND I.XSTAT IN ('R', 'D')
               AND I.ORDDAT = #{ORDDAT}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
		         
		         UNION ALL
		         
		        SELECT /*+ ordered*/I.WAREKY AS WAREKY,
		               I.ORDDAT AS ORDDAT,
		               I.PTNROD AS PTNROD,
		               B.NAME01 AS PTNRODNM,
		               I.PTNRTO AS PTNRTO,
		               B2.NAME01 AS PTNRTONM,
		               C.CARNUM AS CARNUM,
		               C.DESC01 AS CARNM
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN DASSK DS ON DS.DASTYP = '03' AND DS.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE 1 = 1
		                                         AND F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                         AND C.CARNUM NOT IN ('15호차','16호차')
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = #{WAREKY}
		           AND I.C00102 = 'Y'
		           AND I.DIRDVY = '01'
		           AND I.XSTAT IN ('R', 'D')
               AND I.ORDDAT = #{ORDDAT}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
		       )
		 GROUP BY ORDDAT, PTNROD, PTNRODNM, PTNRTO, PTNRTONM, CARNUM, CARNM
  </select>
  
  
  <!-- [DL93] DAS파일생성 조회 : OUTBOUND.DAS.FIND  -->
  <select id="DL93_2_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT ORDDAT AS ORDDAT,
		       PTNROD AS PTNROD,
		       PTNRODNM AS PTNRODNM,
		       PTNRTO AS PTNRTO,
		       PTNRTONM AS PTNRTONM,
		       CARNUM AS CARNUM,
		       CARNM AS CARNM
		 FROM (
		        SELECT /*+ ordered*/I.WAREKY AS WAREKY,
		               I.ORDDAT AS ORDDAT,
		               I.PTNROD AS PTNROD,
		               B.NAME01 AS PTNRODNM,
		               I.PTNRTO AS PTNRTO,
		               B2.NAME01 AS PTNRTONM,
		               C.CARNUM AS CARNUM,
		               C.DESC01 AS CARNM
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE 1 = 1
		                                         AND F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = '2213'
		           AND I.C00102 = 'Y'
		           AND I.DIRDVY = '01'
		           AND I.XSTAT IN ('R', 'D')
               AND I.ORDDAT = #{ORDDAT}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
		         
		         UNION ALL
		         
		        SELECT /*+ ordered*/I.WAREKY AS WAREKY,
		               I.ORDDAT AS ORDDAT,
		               I.PTNROD AS PTNROD,
		               B.NAME01 AS PTNRODNM,
		               I.PTNRTO AS PTNRTO,
		               B2.NAME01 AS PTNRTONM,
		               C.CARNUM AS CARNUM,
		               C.DESC01 AS CARNM
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN DASSK DS ON DS.DASTYP = '04' AND DS.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE 1 = 1
		                                         AND F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY != '2213'
		           AND I.C00102 = 'Y'
		           AND I.DIRDVY = '01'
		           AND I.XSTAT IN ('R', 'D')
               AND I.ORDDAT = #{ORDDAT}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
		       )
		 GROUP BY ORDDAT, PTNROD, PTNRODNM, PTNRTO, PTNRTONM, CARNUM, CARNM
  </select>
  
  
  <!-- [DL93] DAS파일생성 조회 : OUTBOUND.DAS.FIND  -->
  <select id="DL93_3_LIST" parameterType="hashmap" resultType="DataMap">
	SELECT ORDDAT AS ORDDAT,
	       PTNROD AS PTNROD,
	       PTNRODNM AS PTNRODNM,
	       PTNRTO AS PTNRTO,
	       PTNRTONM AS PTNRTONM,
	       CARNUM AS CARNUM,
	       CARNM AS CARNM
	 FROM (
	        SELECT /*+ ordered*/I.WAREKY AS WAREKY,
	               I.ORDDAT AS ORDDAT,
	               I.PTNROD AS PTNROD,
	               B.NAME01 AS PTNRODNM,
	               I.PTNRTO AS PTNRTO,
	               B2.NAME01 AS PTNRTONM,
	               C.CARNUM AS CARNUM,
	               C.DESC01 AS CARNM
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = '2218'
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2213'
	           AND I.C00102 = 'Y'
	           AND I.DIRDVY = '01'
	           AND I.DIRSUP IN ('000', '004')
	           AND I.XSTAT IN ('R', 'D')
	           AND S.ASKU05 != '003'
	           AND I.PTNROD IN (SELECT PTNRKY FROM CARFX WHERE OWNRKY = '2200' AND WAREKY = '2213' AND CARNUM IN ('센-8호차','센-9호차','센-10호차'))
               AND I.ORDDAT = #{ORDDAT}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
	         
	         UNION ALL
	         
	        SELECT /*+ ordered*/I.WAREKY AS WAREKY,
	               I.ORDDAT AS ORDDAT,
	               I.PTNROD AS PTNROD,
	               B.NAME01 AS PTNRODNM,
	               I.PTNRTO AS PTNRTO,
	               B2.NAME01 AS PTNRTONM,
	               C.CARNUM AS CARNUM,
	               C.DESC01 AS CARNM
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = '2218'
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2214'
	           AND I.C00102 = 'Y'
	           AND I.DIRDVY = '01'
	           AND I.DIRSUP IN ('000', '004')
	           AND I.XSTAT IN ('R', 'D')
	           AND S.ASKU05 != '003'
	           AND I.PTNROD IN (SELECT PTNRKY FROM CARFX WHERE OWNRKY = '2200' AND WAREKY = '2214' AND CARNUM = '16호차')
               AND I.ORDDAT = #{ORDDAT}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
	       )
	 GROUP BY ORDDAT, PTNROD, PTNRODNM, PTNRTO, PTNRTONM, CARNUM, CARNM
  </select>
  
  
  <!-- [DL93] DAS파일생성 조회 : OUTBOUND.DAS.FIND  -->
  <select id="DL93_4_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT ORDDAT AS ORDDAT,
		       PTNROD AS PTNROD,
		       PTNRODNM AS PTNRODNM,
		       PTNRTO AS PTNRTO,
		       PTNRTONM AS PTNRTONM,
		       CARNUM AS CARNUM,
		       CARNM AS CARNM
		 FROM (
		        SELECT /*+ ordered*/I.WAREKY AS WAREKY,
		               I.ORDDAT AS ORDDAT,
		               I.PTNROD AS PTNROD,
		               B.NAME01 AS PTNRODNM,
		               I.PTNRTO AS PTNRTO,
		               B2.NAME01 AS PTNRTONM,
		               C.CARNUM AS CARNUM,
		               C.DESC01 AS CARNM
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE 1 = 1
		                                         AND F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = '2213'
		           AND I.C00102 = 'Y'
		           AND I.DIRDVY = '01'
		           AND I.XSTAT IN ('R', 'D')
               AND I.ORDDAT = #{ORDDAT}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
		         
		         UNION ALL
		         
		        SELECT /*+ ordered*/I.WAREKY AS WAREKY,
		               I.ORDDAT AS ORDDAT,
		               I.PTNROD AS PTNROD,
		               B.NAME01 AS PTNRODNM,
		               I.PTNRTO AS PTNRTO,
		               B2.NAME01 AS PTNRTONM,
		               C.CARNUM AS CARNUM,
		               C.DESC01 AS CARNM
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN DASSK DS ON DS.DASTYP = '06' AND DS.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE 1 = 1
		                                         AND F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = #{WAREKY}
		           AND I.C00102 = 'Y'
		           AND I.DIRDVY = '01'
		           AND I.XSTAT IN ('R', 'D')
               AND I.ORDDAT = #{ORDDAT}
     <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if> 
		       )
		 GROUP BY ORDDAT, PTNROD, PTNRODNM, PTNRTO, PTNRTONM, CARNUM, CARNM
  </select>
  
  
  <!-- [DL93] DAS파일 생성 3-1 : OUTBOUND.DAS.CREATE_FILE03_1-->
  <select id="CREATE_DASFILE03_1_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') AS ORDDAT,
		       PTNROD AS PTNROD,
		       SKUKEY AS SKUKEY,
		       VATGUB AS VATGUB,
		       ASKU05 AS ASKU05,
		       MAX(SPOSNR) AS SPOSNR,
		       ORDTYP AS ORDTYP,
		       SUM(QTYREQ) AS QTYREQ,
		       SUM(TOTAMT) AS TOTAMT,
		       MAX(SVBELN) AS SVBELN
		  FROM (
		        SELECT /*+ ordered*/I.ORDDAT AS "ORDDAT",
		               DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS "PTNROD",
		               DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS "SKUKEY",
		               DECODE(I.VATAMT, 0, '*', ' ') AS "VATGUB",
		               DECODE(S.ASKU05, '003', '*', ' ') AS "ASKU05",
		               SUBSTR(I.SPOSNR, 5, 2) AS "SPOSNR",
		               SUBSTR(I.ORDTYP, 1, 2) AS "ORDTYP",
		               I.QTYREQ AS "QTYREQ",
		               I.SELAMT + I.VATAMT AS "TOTAMT",
		               I.SVBELN AS "SVBELN"
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                         AND C.CARNUM NOT IN ('15호차','16호차')
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD         
		         WHERE I.MANDT = 'SAP'
		           AND I.XSTAT IN ('R', 'D')
		           AND I.C00102 = 'Y'
		           AND I.DOCUTY  IN ('211', '212', '213', '214')
		           AND I.DIRDVY = '01'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY != #{WAREKY}
		           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		
		        UNION ALL
		
		        SELECT /*+ ordered*/I.ORDDAT AS "ORDDAT",
		               DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS "PTNROD",
		               DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS "SKUKEY",
		               DECODE(I.VATAMT, 0, '*', ' ') AS "VATGUB",
		               DECODE(S.ASKU05, '003', '*', ' ') AS "ASKU05",
		               SUBSTR(I.SPOSNR, 5, 2) AS "SPOSNR",
		               SUBSTR(I.ORDTYP, 1, 2) AS "ORDTYP",
		               I.QTYREQ AS "QTYREQ",
		               I.SELAMT + I.VATAMT AS "TOTAMT",
		               I.SVBELN AS "SVBELN"
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN DASSK DS ON DS.DASTYP = '03' AND DS.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                         AND C.CARNUM NOT IN ('15호차','16호차')
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD         
		         WHERE I.MANDT = 'SAP'
		           AND I.XSTAT IN ('R', 'D')
		           AND I.C00102 = 'Y'
		           AND I.DOCUTY IN ('211', '212', '213', '214')
		           AND I.DIRDVY = '01'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = #{WAREKY}
		           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		        )
		 GROUP BY PTNROD, SKUKEY, VATGUB, ASKU05, ORDTYP
		 ORDER BY PTNROD, SKUKEY
  </select>
 
  <!-- [DL93] DAS파일 생성 3-2 : OUTBOUND.DAS.CREATE_FILE03_2-->
  <select id="CREATE_DASFILE03_2_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT PTNROD AS PTNROD,
	       PTNRODNM AS PTNRODNM
	  FROM (
	        SELECT /*+ ORDERED*/DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.NAME01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS PTNRODNM
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                         AND C.CARNUM NOT IN ('15호차','16호차')
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212', '213', '214')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY != #{WAREKY}
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	           
	        UNION ALL
	           
	        SELECT /*+ ORDERED*/DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.NAME01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS PTNRODNM
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN DASSK DS ON DS.DASTYP = '03' AND DS.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                         AND C.CARNUM NOT IN ('15호차','16호차')
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY  IN ('211', '212', '213', '214')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = #{WAREKY}
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	        )
	 GROUP BY PTNROD, PTNRODNM
	 ORDER BY PTNROD
  </select>

  <!-- [DL93] DAS파일 생성 3-3 : OUTBOUND.DAS.CREATE_FILE03_3-->
  <select id="CREATE_DASFILE03_3_LIST" parameterType="hashmap" resultType="DataMap">
    SELECT SKUKEY AS SKUKEY,
	       DESC01 AS DESC01,
	       EANCOD AS EANCOD,
	       EANCOD2 AS EANCOD2,
	       ASKL04 AS ASKL04,
	       NETWGT AS NETWGT,
	       QTDUOM AS QTDUOM,
	       VATGUB AS VATGUB
	  FROM (
	        SELECT /*+ ORDERED*/DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
	               S.LOTL01 AS EANCOD,
	               DECODE(SUBSTR(S.LOTL01, 8, 6), '', SUBSTR(I.SKUKEY, 0, 6), SUBSTR(S.LOTL01, 8, 6)) AS EANCOD2,
	               NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' ') AS ASKL04,
	               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
	               S.QTDUOM AS QTDUOM,
	               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                         AND C.CARNUM NOT IN ('15호차','16호차')
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212', '213', '214')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY != #{WAREKY}
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	         
	        UNION ALL
	
	        SELECT /*+ ORDERED*/DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
	               S.LOTL01 AS EANCOD,
	               DECODE(SUBSTR(S.LOTL01, 8, 6), '', SUBSTR(I.SKUKEY, 0, 6), SUBSTR(S.LOTL01, 8, 6)) AS EANCOD2,
	               NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' ') AS ASKL04,
	               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
	               S.QTDUOM AS QTDUOM,
	               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN DASSK DS ON DS.DASTYP = '03' AND DS.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                         AND C.CARNUM NOT IN ('15호차','16호차')
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212', '213', '214')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = #{WAREKY}
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	        )
	 GROUP BY SKUKEY, DESC01, EANCOD, EANCOD2, ASKL04, NETWGT, QTDUOM, VATGUB
	 ORDER BY NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' '), SKUKEY
  </select>

  <!-- [DL93] DAS파일 생성 4-1 : OUTBOUND.DAS.CREATE_FILE04_1-->
  <select id="CREATE_DASFILE04_1_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') AS ORDDAT,
	       PTNROD AS PTNROD,
	       SKUKEY AS SKUKEY,
	       VATGUB AS VATGUB,
	       ASKU05 AS ASKU05,
	       MAX(SPOSNR) AS SPOSNR,
	       ORDTYP AS ORDTYP,
	       SUM(QTYREQ) AS QTYREQ,
	       SUM(QTYREQ1) AS QTYREQ1,
	       SUM(QTYREQ2) AS QTYREQ2,
	       SUM(TOTAMT) AS TOTAMT,
	       MAX(SVBELN) AS SVBELN
	  FROM (
	        SELECT /*+ ORDERED*/I.ORDDAT AS ORDDAT,
	               DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
	               DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
	               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB,
	               DECODE(S.ASKU05, '003', '*', ' ') AS ASKU05,
	               SUBSTR(I.SPOSNR, 5, 2) AS SPOSNR,
	               SUBSTR(I.ORDTYP, 1, 2) AS ORDTYP,
	               I.QTYREQ AS QTYREQ,
	               I.QTYREQ AS QTYREQ1,
	               0 AS QTYREQ2,
	               I.SELAMT + I.VATAMT AS TOTAMT,
	               I.SVBELN AS SVBELN
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD         
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2213'
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	
	        UNION ALL
	
	        SELECT /*+ ORDERED*/I.ORDDAT AS ORDDAT,
	               DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
	               DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
	               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB,
	               DECODE(S.ASKU05, '003', '*', ' ') AS ASKU05,
	               SUBSTR(I.SPOSNR, 5, 2) AS SPOSNR,
	               SUBSTR(I.ORDTYP, 1, 2) AS ORDTYP,
	               I.QTYREQ AS QTYREQ,
	               0 AS QTYREQ1,
	               I.QTYREQ AS QTYREQ2,
	               I.SELAMT + I.VATAMT AS TOTAMT,
	               I.SVBELN AS SVBELN
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD         
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY != '2213'
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	        )
	 GROUP BY PTNROD, SKUKEY, VATGUB, ASKU05, ORDTYP
	 ORDER BY PTNROD, SKUKEY
	 
  </select>
  
  <!-- [DL93] DAS파일 생성 4-2 : OUTBOUND.DAS.CREATE_FILE04_2-->
  <select id="CREATE_DASFILE04_2_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT PTNROD AS PTNROD,
	       PTNRODNM AS PTNRODNM
	  FROM (
	        SELECT /*+ ORDERED*/DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.NAME01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS PTNRODNM
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2213'
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	           
	        UNION ALL
	           
	        SELECT /*+ ORDERED*/DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.NAME01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS PTNRODNM
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY != '2213'
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	        )
	 GROUP BY PTNROD, PTNRODNM
	 ORDER BY PTNROD
	 
  </select>
  
  <!-- [DL93] DAS파일 생성 4-3 : OUTBOUND.DAS.CREATE_FILE04_3-->
  <select id="CREATE_DASFILE04_3_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT SKUKEY AS SKUKEY,
	       DESC01 AS DESC01,
	       EANCOD AS EANCOD,
	       EANCOD2 AS EANCOD2,
	       ASKL04 AS ASKL04,
	       NETWGT AS NETWGT,
	       QTDUOM AS QTDUOM,
	       VATGUB AS VATGUB
	  FROM (
	        SELECT /*+ ORDERED*/DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
	               S.LOTL01 AS EANCOD,
	               DECODE(SUBSTR(S.LOTL01, 8, 6), '', SUBSTR(I.SKUKEY, 0, 6), SUBSTR(S.LOTL01, 8, 6)) AS EANCOD2,
	               NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' ') AS ASKL04,
	               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
	               S.QTDUOM AS QTDUOM,
	               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2213'
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	         
	        UNION ALL
	
	        SELECT /*+ ORDERED*/DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
	               S.LOTL01 AS EANCOD,
	               DECODE(SUBSTR(S.LOTL01, 8, 6), '', SUBSTR(I.SKUKEY, 0, 6), SUBSTR(S.LOTL01, 8, 6)) AS EANCOD2,
	               NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' ') AS ASKL04,
	               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
	               S.QTDUOM AS QTDUOM,
	               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY != '2213'
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	        )
	 GROUP BY SKUKEY, DESC01, EANCOD, EANCOD2, ASKL04, NETWGT, QTDUOM, VATGUB
	 ORDER BY NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' '), SKUKEY
	 
  </select>
  
  <!-- [DL93] DAS파일 생성 5-1 : OUTBOUND.DAS.CREATE_FILE05_1-->
  <select id="CREATE_DASFILE05_1_LIST" parameterType="hashmap" resultType="DataMap">
  
    SELECT PTNROD AS PTNROD,
	       PTNRODNM AS PTNRODNM,
	       VATREG AS VATREG,
	       NAME02 AS NAME02,
	       PTNL06 AS PTNL06,
	       PTNL07 AS PTNL07,
	       POSTCD1 AS POSTCD1,
	       POSTCD2 AS POSTCD2,
	       ADDRESS AS ADDRESS
	  FROM (
	        SELECT /*+ ORDERED*/DISTINCT DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.NAME01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS PTNRODNM,
	               B.VATREG AS VATREG,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(REPLACE(B.NAME02, ' ', '미등록'))),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS NAME02,
                   REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(REPLACE(B.PTNL06, ' ', '미등록'))),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS PTNL06,
                   REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(REPLACE(B.PTNL07, ' ', '미등록'))),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS PTNL07,
	               SUBSTR(B.POSTCD, 0, 3) AS POSTCD1,
	               SUBSTR(B.POSTCD, 3, 3) AS POSTCD2,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.ADDR01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') || 
                   REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.ADDR02)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS ADDRESS
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = '2213'
	                                         AND C.CARNUM IN ('센-8호차', '센-9호차', '센-10호차')
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.DIRSUP IN ('000', '004')
	           AND S.ASKU05 IN ('001', '002')
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2213'
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	
	        UNION ALL
	
	        SELECT /*+ ORDERED*/DISTINCT DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.NAME01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS PTNRODNM,
	               B.VATREG AS VATREG,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(REPLACE(B.NAME02, ' ', '미등록'))),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS NAME02,
                   REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(REPLACE(B.PTNL06, ' ', '미등록'))),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS PTNL06,
                   REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(REPLACE(B.PTNL07, ' ', '미등록'))),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS PTNL07,
	               SUBSTR(B.POSTCD, 0, 3) AS POSTCD1,
	               SUBSTR(B.POSTCD, 3, 3) AS POSTCD2,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.ADDR01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') || 
                   REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.ADDR02)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS ADDRESS
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = '2214'
	                                         AND C.CARNUM IN ('15호차', '16호차')
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.DIRSUP IN ('000', '004')
	           AND S.ASKU05 IN ('001', '002')
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2214'
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	        )
	GROUP BY PTNROD, PTNRODNM, VATREG, NAME02, PTNL06, PTNL07, POSTCD1, POSTCD2, ADDRESS
	ORDER BY PTNROD 
  </select>
  
  <!-- [DL93] DAS파일 생성 5-2 : OUTBOUND.DAS.CREATE_FILE05_2-->
  <select id="CREATE_DASFILE05_2_LIST" parameterType="hashmap" resultType="DataMap">
  
	SELECT SKUKEY AS SKUKEY,
	       DESC01 AS DESC01,
	       EANCOD AS EANCOD,
	       EANCOD2 AS EANCOD2,
	       ASKU05 AS ASKU05,
	       ASKL04 AS ASKL04,
	       NETWGT AS NETWGT,
	       QTDUOM AS QTDUOM,
	       VATGUB AS VATGUB
	  FROM (
	        SELECT /*+ ORDERED*/DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
	               S.LOTL01 AS EANCOD,
	               DECODE(SUBSTR(S.LOTL01, 8, 6), '', SUBSTR(I.SKUKEY, 0, 6), SUBSTR(S.LOTL01, 8, 6)) AS EANCOD2,
	               DECODE(S.ASKU05, '003', '*', ' ') AS ASKU05,
	               NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' ') AS ASKL04,
	               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
	               S.QTDUOM AS QTDUOM,
	               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = '2213'
	                                         AND C.CARNUM IN ('센-8호차', '센-9호차', '센-10호차')
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.DIRSUP IN ('000', '004')
	           AND S.ASKU05 IN ('001', '002')
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2213'
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	           
	        UNION ALL
	           
	        SELECT /*+ ORDERED*/DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
	               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
	               S.LOTL01 AS EANCOD,
	               DECODE(SUBSTR(S.LOTL01, 8, 6), '', SUBSTR(I.SKUKEY, 0, 6), SUBSTR(S.LOTL01, 8, 6)) AS EANCOD2,
	               DECODE(S.ASKU05, '003', '*', ' ') AS ASKU05,
	               NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' ') AS ASKL04,
	               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
	               S.QTDUOM AS QTDUOM,
	               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE 1 = 1
	                                         AND F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = '2214'
	                                         AND C.CARNUM IN ('15호차', '16호차')
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211', '212')
	           AND I.DIRDVY = '01'
	           AND I.DIRSUP IN ('000', '004')
	           AND S.ASKU05 IN ('001', '002')
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = '2214'
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	        )
	 GROUP BY SKUKEY, DESC01, EANCOD, EANCOD2, ASKU05, ASKL04, NETWGT, QTDUOM, VATGUB
	 ORDER BY ASKL04, SKUKEY

  </select>
  
  <!-- [DL93] DAS파일 생성 5-3 : OUTBOUND.DAS.CREATE_FILE05_3-->
  <select id="CREATE_DASFILE05_3_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') AS ORDDAT,
		       PTNROD AS PTNROD,
		       SKUKEY AS SKUKEY,
		       VATGUB AS VATGUB,
		       ASKU05 AS ASKU05,
		       MAX(SPOSNR) AS SPOSNR,
		       ORDTYP AS ORDTYP,
		       SUM(QTYREQ) AS QTYREQ,
		       SUM(TOTAMT) AS TOTAMT,
		       MAX(SVBELN) AS SVBELN,
		       DESC01 AS DESC01,
		       NETWGT AS NETWGT,
		       QTDUOM AS QTDUOM,
		       OUTDMT AS OUTDMT,
		       EANCOD AS EANCOD,
		       LENGTH AS LENGTH,
		       WIDTHW AS WIDTHW,
		       HEIGHT AS HEIGHT,
		       SALENM AS SALENM,
		       PGRC04NM AS PGRC04NM,
		       SHIPSQ AS SHIPSQ
		  FROM (
		        SELECT /*+ ORDERED*/I.ORDDAT AS ORDDAT,
		               DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
		               DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
		               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB,
		               DECODE(S.ASKU05, '003', '*', ' ') AS ASKU05,
		               LPAD(TO_NUMBER(I.SPOSNR), 2, '0') AS SPOSNR,
		               SUBSTR(I.ORDTYP, 1, 2) AS ORDTYP,
		               I.QTYREQ AS QTYREQ,
		               I.SELAMT + I.VATAMT AS TOTAMT,
		               SUBSTR(I.SVBELN, 2, 10) AS SVBELN,
		               regexp_replace(Regexp_replace(trim(lower(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
		               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
		               S.QTDUOM AS QTDUOM,
		               S.OUTDMT AS OUTDMT,
		               DECODE(S.LOTL01, '', I.SKUKEY, S.LOTL01) AS EANCOD,
		               S.LENGTH AS LENGTH,
		               S.WIDTHW AS WIDTHW,
		               S.HEIGHT AS HEIGHT,
		               I.SALENM AS SALENM,
		               NVL(B.NAME01, ' ') AS PGRC04NM,
		               C.SORTSQ AS SHIPSQ
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01, F.SORTSQ
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = '2213'
		                                         AND C.CARNUM IN ('센-8호차', '센-9호차', '센-10호차')
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.XSTAT IN ('R', 'D')
		           AND I.C00102 = 'Y'
		           AND I.DOCUTY IN ('211', '212')
		           AND I.DIRDVY = '01'
		           AND I.DIRSUP IN ('000', '004')
		           AND S.ASKU05 IN ('001', '002')
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = '2213'
		           AND I.QTYREQ &gt; 0
		           AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		           
		        UNION ALL
		
		        SELECT /*+ ordered*/I.ORDDAT AS ORDDAT,
		               DECODE(B.PTNL10, ' ', SUBSTR(I.PTNROD, 3, 7), B.PTNL10) AS PTNROD,
		               DECODE(S.DESC03, ' ', I.SKUKEY, S.DESC03) AS SKUKEY,
		               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB,
		               DECODE(S.ASKU05, '003', '*', ' ') AS ASKU05,
		               LPAD(TO_NUMBER(I.SPOSNR), 2, '0') AS SPOSNR,
		               SUBSTR(I.ORDTYP, 1, 2) AS ORDTYP,
		               I.QTYREQ AS QTYREQ,
		               I.SELAMT + I.VATAMT AS TOTAMT,
		               SUBSTR(I.SVBELN, 2, 10) AS SVBELN,
		               regexp_replace(Regexp_replace(trim(lower(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
		               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
		               S.QTDUOM AS QTDUOM,
		               S.OUTDMT AS OUTDMT,
		               DECODE(S.LOTL01, '', I.SKUKEY, S.LOTL01) AS EANCOD,
		               S.LENGTH AS LENGTH,
		               S.WIDTHW AS WIDTHW,
		               S.HEIGHT AS HEIGHT,
		               I.SALENM AS SALENM,
		               NVL(B.NAME01, ' ') AS PGRC04NM,
		               C.SORTSQ AS SHIPSQ
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01, F.SORTSQ
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = '2214'
		                                         AND C.CARNUM IN ('15호차', '16호차')
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.XSTAT IN ('R', 'D')
		           AND I.C00102 = 'Y'
		           AND I.DOCUTY IN ('211', '212')
		           AND I.DIRDVY = '01'
		           AND I.DIRSUP IN ('000', '004')
		           AND S.ASKU05 IN ('001', '002')
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = '2214'
		           AND I.QTYREQ &gt; 0
		           AND I.ORDDAT = #{ORDDAT}
	           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		        )
		 GROUP BY PTNROD, SKUKEY, VATGUB, ASKU05, ORDTYP, ORDDAT, DESC01, NETWGT, QTDUOM, OUTDMT, EANCOD, LENGTH, WIDTHW, HEIGHT, SALENM, PGRC04NM, SHIPSQ
		 ORDER BY 10, 6, PTNROD, SKUKEY  
  
  </select>
  
  <!-- [DL93] DAS파일 생성 6-1 : OUTBOUND.DAS.CREATE_FILE06_1-->
  <select id="CREATE_DASFILE06_1_LIST" parameterType="hashmap" resultType="DataMap">
  
	SELECT TO_CHAR(SYSDATE, 'YYYYMMDD') AS OTRQDT,
	       PTNROD AS PTNROD,
	       SKUKEY AS SKUKEY,
	       VATGUB AS VATGUB,
	       ASKU05 AS ASKU05,
	       SPOSNR AS SPOSNR,
	       ORDTYP AS ORDTYP,
	       QTYREQ AS QTYREQ,
	       TOTAMT AS TOTAMT,
	       TO_CHAR(SYSDATE, 'YYYYMMDD') AS ORDDAT,
	       SVBELN AS SVBELN
	 FROM (
	        SELECT /*+ ordered*/I.OTRQDT AS "OTRQDT",
	               SUBSTR(I.PTNROD, 3, 7) AS "PTNROD",
	               I.SKUKEY AS "SKUKEY",
	               DECODE(I.VATAMT, 0, '*', ' ') AS "VATGUB",
	               DECODE(S.ASKU05, '003', '*', ' ') AS "ASKU05",
	               SUBSTR(I.SPOSNR, 5, 2) AS "SPOSNR",
	               SUBSTR(I.ORDTYP, 1, 2) AS "ORDTYP",
	               I.QTYREQ AS "QTYREQ",
	               I.SELAMT + I.VATAMT AS "TOTAMT",
	               I.ORDDAT AS "ORDDAT",
	               I.SVBELN AS "SVBELN"
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211','212')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY != #{WAREKY}
	           AND I.QTYREQ &gt; 0
	           AND S.ASKU05 != '03'
               AND I.ORDDAT = #{ORDDAT}
		           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	           
	        UNION ALL
	           
	        SELECT /*+ ordered*/I.OTRQDT AS "OTRQDT",
	               SUBSTR(I.PTNROD, 3, 7) AS "PTNROD",
	               I.SKUKEY AS "SKUKEY",
	               DECODE(I.VATAMT, 0, '*', ' ') AS "VATGUB",
	               DECODE(S.ASKU05, '003', '*', ' ') AS "ASKU05",
	               SUBSTR(I.SPOSNR, 5, 2) AS "SPOSNR",
	               SUBSTR(I.ORDTYP, 1, 2) AS "ORDTYP",
	               I.QTYREQ AS "QTYREQ",
	               I.SELAMT + I.VATAMT AS "TOTAMT",
	               I.ORDDAT AS "ORDDAT",
	               I.SVBELN AS "SVBELN"
	          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
	                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
	                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
	                          INNER JOIN DASSK DS ON DS.DASTYP = '06' AND DS.SKUKEY = I.SKUKEY
	                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
	                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
	                                       WHERE F.OWNRKY = #{OWNRKY}
	                                         AND F.WAREKY = #{WAREKY}
	                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
	         WHERE I.MANDT = 'SAP'
	           AND I.XSTAT IN ('R', 'D')
	           AND I.C00102 = 'Y'
	           AND I.DOCUTY IN ('211','212')
	           AND I.DIRDVY = '01'
	           AND I.OWNRKY = #{OWNRKY}
	           AND I.WAREKY = #{WAREKY}
	           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
		           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
	       )
	 GROUP BY PTNROD, SKUKEY, VATGUB, ASKU05, SPOSNR, ORDTYP, QTYREQ, TOTAMT, ORDDAT, SVBELN
	 ORDER BY PTNROD, SKUKEY  
  

  </select>

  <!-- [DL93] DAS파일 생성 6-2 : OUTBOUND.DAS.CREATE_FILE06_2-->
  <select id="CREATE_DASFILE06_2_LIST" parameterType="hashmap" resultType="DataMap">
  
        SELECT PTNROD AS PTNROD,
		       PTNRODNM AS PTNRODNM
		  FROM (
		        SELECT /*+ ORDERED*/SUBSTR(I.PTNROD, 3, 7) AS PTNROD,
		               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.NAME01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS PTNRODNM
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.XSTAT IN ('R', 'D')
		           AND I.C00102 = 'Y'
		           AND I.DOCUTY IN ('211','212')
		           AND I.DIRDVY = '01'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY != #{WAREKY}
		           AND I.QTYREQ &gt; 0
		           AND S.ASKU05 != '03'
               AND I.ORDDAT = #{ORDDAT}
		           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		           
		        UNION ALL
		
		        SELECT /*+ ORDERED*/SUBSTR(I.PTNROD, 3, 7) AS PTNROD,
		               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(B.NAME01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,),(]',''),'[[:space:]]{1,}',' ') AS PTNRODNM
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN DASSK DS ON DS.DASTYP = '06' AND DS.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.XSTAT IN ('R', 'D')
		           AND I.C00102 = 'Y'
		           AND I.DOCUTY IN ('211','212')
		           AND I.DIRDVY = '01'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = #{WAREKY}
		           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
		           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		
		       )
		 GROUP BY PTNROD, PTNRODNM
		 ORDER BY PTNROD

  </select>

  <!-- [DL93] DAS파일 생성 6-3 : OUTBOUND.DAS.CREATE_FILE06_3-->
  <select id="CREATE_DASFILE06_3_LIST" parameterType="hashmap" resultType="DataMap">
  
		SELECT SKUKEY AS SKUKEY,
		       DESC01 AS DESC01,
		       EANCOD AS EANCOD,
		       EANCOD2 AS EANCOD2,
		       ASKL04 AS ASKL04,
		       NETWGT AS NETWGT,
		       QTDUOM AS QTDUOM,
		       VATGUB AS VATGUB
		  FROM (
		        SELECT /*+ ORDERED*/I.SKUKEY AS SKUKEY,
		               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
		               S.LOTL01 AS EANCOD,
		               DECODE(SUBSTR(S.LOTL01, 8, 6), '', SUBSTR(I.SKUKEY, 0, 6), SUBSTR(S.LOTL01, 8, 6)) AS EANCOD2,
		               NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' ') AS ASKL04,
		               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
		               S.QTDUOM AS QTDUOM,
		               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.XSTAT IN ('R', 'D')
		           AND I.C00102 = 'Y'
		           AND I.DOCUTY IN ('211','212')
		           AND I.DIRDVY = '01'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY != #{WAREKY}
		           AND I.QTYREQ &gt; 0
		           AND S.ASKU05 != '03'
               AND I.ORDDAT = #{ORDDAT}
		           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		           
		        UNION ALL
		
		        SELECT /*+ ORDERED*/I.SKUKEY AS SKUKEY,
		               REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.DESC01)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' ') AS DESC01,
		               S.LOTL01 AS EANCOD,
		               DECODE(SUBSTR(S.LOTL01, 8, 6), '', SUBSTR(I.SKUKEY, 0, 6), SUBSTR(S.LOTL01, 8, 6)) AS EANCOD2,
		               NVL(REGEXP_REPLACE(REGEXP_REPLACE(TRIM(LOWER(S.ASKL04)),'[^a-z,A-Z,0-9,ㄱ-ㅎ,가-힐,0-9,),(]',''),'[[:space:]]{1,}',' '), ' ') AS ASKL04,
		               REPLACE(S.NETWGT * 1000, '.', '') AS NETWGT,
		               S.QTDUOM AS QTDUOM,
		               DECODE(I.VATAMT, 0, '*', ' ') AS VATGUB
		          FROM IFWMS113 I INNER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNROD AND B.PTNRTY = '0001'
		                          INNER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNRTO AND B2.PTNRTY = '0007'
		                          INNER JOIN SKUMA S ON S.OWNRKY = I.OWNRKY AND S.SKUKEY = I.SKUKEY
		                          INNER JOIN DASSK DS ON DS.DASTYP = '06' AND DS.SKUKEY = I.SKUKEY
		                          INNER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
		                                        FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
		                                       WHERE F.OWNRKY = #{OWNRKY}
		                                         AND F.WAREKY = #{WAREKY}
		                                      ) C ON C.OWNRKY = I.OWNRKY AND C.PTNRKY = I.PTNROD
		         WHERE I.MANDT = 'SAP'
		           AND I.XSTAT IN ('R', 'D')
		           AND I.C00102 = 'Y'
		           AND I.DOCUTY IN ('211','212')
		           AND I.DIRDVY = '01'
		           AND I.OWNRKY = #{OWNRKY}
		           AND I.WAREKY = #{WAREKY}
		           AND I.QTYREQ &gt; 0
               AND I.ORDDAT = #{ORDDAT}
		           <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>
		       )
		 GROUP BY SKUKEY, DESC01, EANCOD, EANCOD2, ASKL04, NETWGT, QTDUOM, VATGUB
		 ORDER BY ASKL04, DESC01

  </select>
               
  <!-- [DL95] 출고조정(품목) 헤더 조회 : DAERIM.DL95.HEADERFIND   -->
  <select id="DL95_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
      SELECT /*+ ORDERED */I.WAREKY WAREKY,   
             I.SKUKEY SKUKEY,
             SM.DESC01 DESC01,
             SM.DESC02 DESC02,
             SM.DUOMKY DUOMKY,
             SM.QTDUOM BXIQTY,
             SM.NETWGT NETWGT,
             SM.SKUG03 SKUG03,
             SUM(I.QTYREQ) / SM.QTDUOM AS BOXQTY1,
             SUM(I.QTYREQ) AS QTSIWH1,
             TRUNC((NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0)) / SM.QTDUOM, 1) AS BOXQTY2,
             NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) AS QTSIWH2,
             TRUNC(CASE WHEN NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - SUM(DECODE(I.XSTAT, 'D', 0, I.QTYREQ)) &lt; 0 
                      THEN (NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - SUM(DECODE(I.XSTAT, 'D', 0, I.QTYREQ))) / SM.QTDUOM ELSE 0 END, 1) AS BOXQTY3,
             TRUNC(CASE WHEN NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - SUM(DECODE(I.XSTAT, 'D', 0, I.QTYREQ)) &lt; 0 
                      THEN NVL(ST1.STKQTY, 0) + NVL(EX1.INNQTY, 0) + NVL(EX1.TRFQTY, 0) - SUM(DECODE(I.XSTAT, 'D', 0, I.QTYREQ)) ELSE 0 END, 1) AS QTSIWH3,
             TRUNC(NVL(EX1.INNQTY, 0) / SM.QTDUOM, 1) AS BOXQTY4,
             NVL(EX1.INNQTY, 0) AS QTSIWH4,
             TRUNC(NVL(EX1.TRFQTY, 0) / SM.QTDUOM, 1) AS BOXQTY5,
             NVL(EX1.TRFQTY, 0) AS QTSIWH5,
             TRUNC(SUM(DECODE(I.XSTAT, 'R', 0, I.QTYREQ)) / SM.QTDUOM, 1) AS BOXQTY6,
             SUM(DECODE(I.XSTAT, 'R', 0, I.QTYREQ)) AS QTSIWH6
        FROM IFWMS113 I INNER JOIN SKUMA SM ON I.OWNRKY = SM.OWNRKY AND I.SKUKEY = SM.SKUKEY AND SM.DELMAK = ' '
                        LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY='0007'
                        LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
                        LEFT OUTER JOIN PICSK PK ON PK.OWNRKY = I.OWNRKY AND PK.WAREKY = '2213' AND PK.SKUKEY = I.SKUKEY
                        LEFT OUTER JOIN SKUWC W ON W.OWNRKY = I.OWNRKY AND W.WAREKY = I.WAREKY AND W.SKUKEY = I.SKUKEY
                        LEFT OUTER JOIN V_WMS_EXP_STOCK_DR EX1 ON I.OWNRKY = EX1.OWNRKY AND I.WAREKY = EX1.WAREKY AND I.SKUKEY = EX1.SKUKEY AND TO_CHAR(SYSDATE, 'YYYYMMDD') = EX1.EXPDAT
                        LEFT OUTER JOIN V_WMS_STOCK_TOSS ST1 ON I.OWNRKY = ST1.OWNRKY AND I.WAREKY = ST1.WAREKY AND I.SKUKEY = ST1.SKUKEY
                        LEFT OUTER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
                                   FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
                                  WHERE 1 = 1
                                    AND F.OWNRKY = #{OWNRKY}
                                    AND F.WAREKY = #{LOGIN_WAREKY}
                            ) C ON I.OWNRKY = C.OWNRKY AND I.PTNRTO = C.PTNRKY
       WHERE I.MANDT = 'SAP'
         AND I.OWNRKY = #{OWNRKY}
         AND I.WAREKY = #{WAREKY}
         AND I.QTYREQ &gt; 0
         AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267') 
         AND I.C00102 IN ('Y', 'N')
         AND I.XSTAT IN ('R', 'D')
         <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>  
       GROUP BY I.WAREKY, I.SKUKEY, I.SKUKEY, SM.DESC01, SM.DESC02, SM.DUOMKY, SM.QTDUOM, SM.NETWGT, SM.SKUG01, SM.SKUG02, SM.SKUG03, ST1.STKQTY,
                EX1.INNQTY, EX1.TRFQTY, EX1.OUTQTY
      ORDER BY SM.SKUG03, REGEXP_REPLACE(REPLACE(UPPER(SM.DESC01), 'G', ''), '[0-9,+,*,-]', ''), SM.NETWGT
  </select>
  
  
  <!-- [DL95] 출고조정(품목) 아이템 조회 : DAERIM.DL95.ITEMFIND   -->
  <select id="DL95_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
      SELECT TO_NUMBER(I.ORDTOT) ORDTOT,
           TO_NUMBER(NVL(I.USEQTY, 0)) USEQTY,
           I.MANDT MANDT,
           I.SEQNO SEQNO,
           I.ORDTYP ORDTYP,
           I.ORDDAT ORDDAT,
           I.SVBELN SVBELN,
           I.SPOSNR SPOSNR,
           I.DOCUTY DOCUTY,
           I.OTRQDT OTRQDT,
           I.PTNG08 PTNG08,
           I.PTNRTO PTNRTO,
           I.PTNRTONM PTNRTONM,
           I.PTNROD PTNROD,
           I.PTNRODNM PTNRODNM,
           I.OWNRKY OWNRKY,
           I.WAREKY WAREKY,
           I.WARESR WARESR,
           I.WARETG WARETG,
           I.SKUKEY SKUKEY,
           I.QTYORG QTYORG,
           I.QTYREQ QTYREQ,
           I.QTYREQ - I.QTSHPD QTYREQ2,
           I.WMSMGT WMSMGT,
           I.QTSHPD QTSHPD,
           I.QTYREQ - I.QTSHPD SHPQTY,
           I.QTYREQ TOTSHP,
           I.DUOMKY DUOMKY,
           I.NETPR NETPR,
           I.SALDPT SALDPT,
           I.REFDKY REFDKY,
           I.DIRDVY DIRDVY,
           I.DIRSUP DIRSUP,
           I.SALEPR SALEPR,
           I.DISRAT DISRAT,
           I.SELLPR SELLPR,
           I.SELAMT SELAMT,
           I.VATAMT VATAMT,
           I.CUSRID CUSRID,
           I.CUNAME CUNAME,
           I.CUPOST CUPOST,
           I.CUNATN CUNATN,
           I.CUTEL1 CUTEL1,
           I.CUTEL2 CUTEL2,
           I.CUMAIL CUMAIL,
           I.CUADDR CUADDR,
           I.CTNAME CTNAME,
           I.CTTEL1 CTTEL1,
           I.SALENM SALENM,
           I.SALTEL SALTEL,
           I.TEXT01 TEXT01,
           I.TEXT02 TEXT02,
           I.TEXT03 TEXT03,
           I.C00101 C00101,
           I.C00102 C00102,
           I.C00103 C00103,
           I.USRID1 USRID1,
           I.DEPTID1 DEPTID1,
           SF_GET_USERNM(I.USRID2) USRID2,
           I.CREDAT CREDAT,
           I.CRETIM CRETIM,
           I.LMODAT LMODAT,
           I.LMOTIM LMOTIM,
           I.XDATS CDATE,
           I.XSTAT IFFLG,
           I.DESC01 DESC01,
           I.BXIQTY BXIQTY,
           I.BOXQTY BOXQTY,
           I.REMQTY REMQTY
      FROM (SELECT /*+ ORDERED */SUM(I.QTYREQ) OVER (PARTITION BY I.OWNRKY, I.WAREKY, I.SKUKEY ORDER BY I.OTRQDT, I.SVBELN) AS ORDTOT,
                   S.USEQTY USEQTY,
                   I.MANDT MANDT,
                   I.SEQNO SEQNO,
                   I.ORDTYP ORDTYP,
                   I.ORDDAT ORDDAT,
                   I.SVBELN SVBELN,
                   I.SPOSNR SPOSNR,
                   I.DOCUTY DOCUTY,
                   I.OTRQDT OTRQDT,
                   CC.CDESC1 PTNG08,
                   I.PTNRTO PTNRTO,
                   B.NAME01 PTNRTONM,
                   I.PTNROD PTNROD,
                   B2.NAME01 PTNRODNM,
                   I.OWNRKY OWNRKY,
                   I.WAREKY WAREKY,
                   I.WARESR WARESR,
                   I.WARETG WARETG,
                   I.SKUKEY SKUKEY,
                   I.QTYORG QTYORG,
                   I.QTYREQ QTYREQ,
                   I.WMSMGT WMSMGT,
                   I.QTSHPD QTSHPD,
                   I.DUOMKY DUOMKY,
                   I.NETPR NETPR,
                   I.SALDPT SALDPT,
                   I.REFDKY REFDKY,
                   I.DIRDVY DIRDVY,
                   I.DIRSUP DIRSUP,
                   I.SALEPR SALEPR,
                   I.DISRAT DISRAT,
                   I.SELLPR SELLPR,
                   I.SELAMT SELAMT,
                   I.VATAMT VATAMT,
                   I.CUSRID CUSRID,
                   I.CUNAME CUNAME,
                   I.CUPOST CUPOST,
                   I.CUNATN CUNATN,
                   I.CUTEL1 CUTEL1,
                   I.CUTEL2 CUTEL2,
                   I.CUMAIL CUMAIL,
                   I.CUADDR CUADDR,
                   I.CTNAME CTNAME,
                   I.CTTEL1 CTTEL1,
                   I.SALENM SALENM,
                   I.SALTEL SALTEL,
                   I.TEXT01 TEXT01,
                   I.TEXT02 TEXT02,
                   I.TEXT03 TEXT03,
                   I.C00101 C00101,
                   I.C00102 C00102,
                   I.C00103 C00103,
                   I.USRID1 USRID1,
                   I.DEPTID1 DEPTID1,
                   I.USRID2 USRID2,
                   I.CREDAT CREDAT,
                   I.CRETIM CRETIM,
                   I.LMODAT LMODAT,
                   I.LMOTIM LMOTIM,
                   I.XDATS XDATS,
                   I.XSTAT XSTAT,
                   SM.DESC01 DESC01,
                   NVL(SM.QTDUOM, 0) BXIQTY,
                   NVL( TRUNC((I.QTYREQ - I.QTSHPD) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ), 0) AS BOXQTY,
                   NVL(MOD(I.QTYREQ, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)), 0) AS REMQTY
              FROM IFWMS113 I LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, SUM(QTSIWH-QTSBLK-GREATEST(QTSALO, QTSPMO)) AS USEQTY
                                                 FROM STKKY 
                                                WHERE OWNRKY = #{OWNRKY}
                                                  AND WAREKY = #{WAREKY}
                                                  AND AREAKY NOT IN ('SHP', 'SYS')
                                                  AND LOCAKY != 'SETLOC'
                                                  AND LOTA06 = '00'
                                                  AND QTSIWH > 0
                                                GROUP BY OWNRKY, WAREKY, SKUKEY) S ON I.OWNRKY = S.OWNRKY AND I.WAREKY = S.WAREKY 
                                                                                  AND I.SKUKEY = S.SKUKEY 
                              INNER JOIN SKUMA SM ON SM.OWNRKY = I.OWNRKY AND SM.SKUKEY = I.SKUKEY
                              LEFT OUTER JOIN SKUWC W ON W.OWNRKY = I.OWNRKY AND W.WAREKY = I.WAREKY AND W.SKUKEY = I.SKUKEY
                              LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY IN ('0007', '0004')
                              LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY IN ('0007', '0004')
                              LEFT OUTER JOIN (SELECT F.OWNRKY, F.WAREKY, F.PTNRKY, C.CARNUM, C.DESC01
                                                    FROM CARFX F INNER JOIN CARMA C ON F.OWNRKY = C.OWNRKY AND F.WAREKY = C.WAREKY AND F.CARNUM = C.CARNUM
                                                   WHERE 1 = 1
                                                     AND F.OWNRKY = '2200'
                                                     AND F.WAREKY = #{LOGIN_WAREKY}
                                               ) C ON I.OWNRKY = C.OWNRKY AND I.PTNRTO = C.PTNRKY
                              LEFT OUTER JOIN PICSK PK ON PK.OWNRKY = I.OWNRKY AND PK.WAREKY = '2213' AND PK.SKUKEY = I.SKUKEY
                              LEFT OUTER JOIN CMCDV CC ON B.PTNG08 = CC.CMCDVL AND CC.CMCDKY = 'PTNG08'
    
    
             WHERE 1=1
               AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267') 
               AND I.C00102 IN ('N', 'Y')
               AND I.XSTAT IN ('R','D')
               AND I.OWNRKY = #{OWNRKY}
               AND I.WAREKY = #{WAREKY}
               <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>     
    
    ) I
     WHERE I.SKUKEY = #{SKUKEY}
     ORDER BY I.SPOSNR
  </select>
       
  <!-- [DL95] 출고조정(품목) 저장 : IFWMS113.MODIFYITEM.SAVES -->
  <update id="DL95_UPDATE"  parameterType="hashmap">
		UPDATE IFWMS113
		SET  QTYREQ = #{QTYREQ},
		   WAREKY = #{WAREKY},
		   OTRQDT = #{OTRQDT},
		
		   C00103 = (CASE WHEN QTYORG = QTYREQ THEN #{C00103}
		                 ELSE ' ' END),
		
		   DIRSUP= #{DIRSUP},
		   C00101 = 'IF',
		   LMODAT = TO_CHAR(SYSDATE,'YYYYMMDD'),
		   LMOTIM = TO_CHAR(SYSDATE,'HH24MISS'),
		   USRID2 = NVL(#{SES_USER_ID}, ' ')
		WHERE SVBELN = #{SVBELN}
		  AND SPOSNR = #{SPOSNR}
		  AND OWNRKY = #{OWNRKY}
		  AND XSTAT = 'R'
		  AND C00102 = 'Y'
  </update>
  
  	<!-- **[DL95] 출고조정(품목))  벨리데이터 조회 -->                                                                                                                                                       
	<select id="DL95_VALI_MAP" parameterType="hashmap" resultType="DataMap">
		SELECT SVBELN AS SVBELN, 
		       SPOSNR AS SPOSNR,
		       XSTAT  AS IFFLG,
		       WMSMGT AS WMSMGT
		  FROM IFWMS113
		 WHERE SVBELN = #{SVBELN}
		   AND SPOSNR = #{SPOSNR}
		   AND (QTYREQ != QTSHPD OR WMSMGT + QTSHPD > 0)
		   AND XSTAT IN ('R','D')
	</select>

    <!-- [DL55] 주문집계표(마케팅팀) : 헤더 조회 -->
  <select id="DL55_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
    select /*+ ordered first_rows */ORD.OWNRKY OWNRKY,
           ORD.SKUKEY SKUKEY ,
           ORD.WAREKY WAREKY,
           ORD.DESC01 DESC01,
           ORD.DESC04 DESC04,
           NVL(MAX(ORD.PLIQTY), 0) / NVL(MAX(ORD.BXIQTY), 0) PLTBOX ,
           NVL(MAX(ORD.PLIQTY), 0) PLIQTY ,
           NVL(MAX(ORD.BXIQTY), 0) BXIQTY ,
           NVL(MAX(ORD.BOXQTY1), 0) BOXQTY1 ,
           NVL(MAX(ORD.QTSIWH1), 0) QTSIWH1 ,
           NVL(MAX(STK.BOXQTY2), 0) BOXQTY2 ,
           NVL(MAX(STK.QTSIWH2), 0) QTSIWH2 ,
           CASE WHEN MAX(NVL(STK.BOXQTY2, 0) - NVL(ORD.BOXQTY1, 0)) &gt; 0 THEN 0  ELSE MAX(NVL(STK.BOXQTY2, 0) - NVL(ORD.BOXQTY1, 0)) END BOXQTY3 ,
           CASE WHEN MAX(NVL(STK.QTSIWH2, 0) - NVL(ORD.QTSIWH1, 0)) &gt; 0 THEN 0  ELSE MAX(NVL(STK.QTSIWH2, 0) - NVL(ORD.QTSIWH1, 0)) END QTSIWH3 ,
           NVL(MAX(ASN.BOXQTY4), 0) BOXQTY4 ,
           NVL(MAX(ASN.QTSIWH4), 0) QTSIWH4 ,
           NVL(MAX(TRF.BOXQTY5), 0) BOXQTY5 ,
           NVL(MAX(TRF.QTSIWH5), 0) QTSIWH5 ,
           NVL(MAX(BLK.BOXQTY6), 0) BOXQTY6 ,
           NVL(MAX(BLK.QTSIWH6), 0) QTSIWH6 ,
           NVL(MAX(RCV.BOXQTY7), 0) BOXQTY7 ,
           NVL(MAX(RCV.QTSIWH7), 0) QTSIWH7 ,
           NVL(MAX(REQ.BOXQTY8), 0) BOXQTY8 ,
           NVL(MAX(REQ.QTSIWH8), 0) QTSIWH8 ,
           NVL(MAX(PRD.BOXQTY9), 0) BOXQTY9 ,
           NVL(MAX(PRD.QTSIWH9), 0) QTSIWH9 ,
           NVL(MAX(PRE.QTYPRE) / MAX(ORD.BXIQTY), 0) AS QTYPRE,
           NVL(TRUNC(MAX(PRE.QTYPRE2) / MAX(ORD.BXIQTY), 1), 0) AS BOXPRE2,
           NVL(MAX(PRE.QTYPRE2), 0) AS QTYPRE2,
           NVL(MAX(WH.QTY1), 0) AS QTYWH1,
           NVL(TRUNC(MAX(WH.QTY1) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH1,
           NVL(MAX(WH.QTY2), 0) AS QTYWH2,
           NVL(TRUNC(MAX(WH.QTY2) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH2,
           NVL(MAX(WH.QTY3), 0) AS QTYWH3,
           NVL(TRUNC(MAX(WH.QTY3) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH3,
           NVL(MAX(WH.QTY4), 0) AS QTYWH4,
           NVL(TRUNC(MAX(WH.QTY4) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH4,
           NVL(MAX(WH.QTY5), 0) AS QTYWH5,
           NVL(TRUNC(MAX(WH.QTY5) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH5,
           NVL(MAX(WH.QTY6), 0) AS QTYWH6,
           NVL(TRUNC(MAX(WH.QTY6) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH6,
           NVL(MAX(WH.WH4_1QTY), 0) AS QTYWH4_1,
           NVL(TRUNC(MAX(WH.WH4_1QTY) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH4_1,
           NVL(MAX(WH.NUM01), 0) AS NUM01,
           NVL(TRUNC(MAX(WH.NUM01) / MAX(ORD.BXIQTY), 1), 0) AS NUM01_BOX,
           NVL(MAX(TOS.ORD_QTY), 0) AS QTYWH4_2,
           NVL(TRUNC(MAX(TOS.ORD_QTY) / MAX(ORD.BXIQTY), 1), 0) AS BOXWH4_2,
           NVL(MAX(ORD.QTSIWH1), 0) + NVL(MAX(TOS.ORD_QTY), 0) AS QTYORD,
           NVL(MAX(ORD.BOXQTY1), 0) + NVL(TRUNC(MAX(TOS.ORD_QTY) / MAX(ORD.BXIQTY), 1), 0) AS BOXORD,
           NVL(SUM(PRE.QTYSTK30), 0) AS QTYS30,
           NVL(TRUNC(SUM(PRE.QTYSTK30) / MAX(ORD.BXIQTY), 1), 0) AS BOXS30,
           ORD.SLCPDI AS SHPQTY
      FROM (SELECT S.OWNRKY OWNRKY ,
                   W.WAREKY WAREKY ,
                   S.SKUKEY SKUKEY ,
                   S.DESC01 DESC01 ,
                   S.DESC04 DESC04 ,
                   NVL(S.QTDUOM, 0) AS BXIQTY ,
                   NVL(S.QTYSTD, 0) AS PLIQTY ,
                   NVL(TRUNC((SUM(I.QTYREQ-I.WMSMGT-I.QTSHPD) / DECODE(S.QTDUOM, 0, NULL, S.QTDUOM)), 1 ) , 0) AS BOXQTY1 ,
                   NVL(SUM(I.QTYREQ-I.WMSMGT-I.QTSHPD), 0 ) AS QTSIWH1,
                   W.SLCPDI AS SLCPDI
              FROM SKUMA S INNER JOIN SKUWC W ON S.OWNRKY = W.OWNRKY AND S.SKUKEY = W.SKUKEY 
                           LEFT OUTER JOIN (SELECT I.SVBELN, I.OWNRKY, I.WAREKY, I.SKUKEY, SUM(I.QTYREQ) AS QTYREQ, SUM(I.WMSMGT) AS WMSMGT, SUM(I.QTSHPD) AS QTSHPD
                                                   ,I.PTNRTO, I.PTNROD
                                              FROM IFWMS113 I 
                                             WHERE 1=1 AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267' ) 
                                               AND I.XSTAT = 'R'
                                               AND I.MANDT = 'SAP'
                                               AND I.QTYREQ - I.WMSMGT - I.QTSHPD &gt; 0 
                                               AND I.CHKSEQ != ' '
                                               AND I.QTYORG &gt; 0
                                               AND I.C00102 IN ('N', 'Y') 
                                               <if test="RANGESEARCH1 != null and RANGESEARCH1 != ''">
                            ${RANGESEARCH1}
                           </if>   

                                             GROUP BY I.OWNRKY, I.WAREKY, I.SKUKEY, I.SVBELN, I.PTNRTO, I.PTNROD ) I ON S.OWNRKY = I.OWNRKY AND W.WAREKY = I.WAREKY AND S.SKUKEY = I.SKUKEY
                           LEFT OUTER JOIN BZPTN B ON B.OWNRKY = I.OWNRKY AND B.PTNRKY = I.PTNRTO AND B.PTNRTY='0007'
                           LEFT OUTER JOIN BZPTN B2 ON B2.OWNRKY = I.OWNRKY AND B2.PTNRKY = I.PTNROD AND B2.PTNRTY = '0001'
             WHERE 1 = 1
               AND S.SKUG01 != 'Z' 
               <if test="RANGEITEM3 != null and RANGEITEM3 != ''">
                 ${RANGEITEM3}
               </if>
               <if test="SKUG05 != null and SKUG05 != ''">
                 AND S.ASKU02 = #SKUG05# 
               </if>
           <if test="RANGEITEM2 != null and RANGEITEM2 != ''">
                 ${RANGEITEM2}
               </if>
               <if test="RANGEITEM != null and RANGEITEM != ''">
                 ${RANGEITEM}
               </if>
               AND I.SVBELN 
               <if test="FLAG == 'NOT'">
                NOT IN
               </if>
               <if test="FLAG == 'IN'">
                IN
               
                                (SELECT /*+ INDEX(I IDX_IFWMS113K04)*/ SVBELN
                                   FROM IFWMS113 I 
                                  WHERE I.MANDT = 'SAP'
                                    AND I.DOCUTY IN ('211', '212', '213', '214', '215', '216', '266', '267' )
                                    AND I.XSTAT = 'R'
                                    AND I.C00102 IN ('N','Y')
                                    AND I.QTYREQ - I.WMSMGT - I.QTSHPD &gt; 0 
                                    <if test="RANGESEARCH1 != null and RANGESEARCH1 != ''">
                      ${RANGESEARCH1}
                      </if>  
                      <if test="RANGEITEM != null and RANGEITEM != ''">
                      ${RANGEITEM}
                      </if>  
           </if>
             GROUP BY S.OWNRKY , W.WAREKY , S.SKUKEY , S.DESC01 , S.DESC04 , S.QTDUOM, S.QTYSTD, W.SLCPDI ) ORD 
           LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , M.DESC01 DESC01, 
                                   NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY2 , 
                                   SUM(S.QTSIWH) QTSIWH2 
                              FROM SKUMA M INNER JOIN STKKY S ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                           INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                             WHERE 1 = 1
                               AND S.OWNRKY = #{OWNRKY}
                               AND S.AREAKY NOT IN ('SYS', 'SHP')
                               AND S.LOCAKY NOT IN ('SETLOC', '1J01101')
                               AND S.QTSIWH > 0
                               AND S.QTSALO = 0
                               AND S.QTSPMO = 0
                               AND S.QTSPMI = 0
                               AND S.QTSBLK = 0 
                              <if test="RANGE != null and RANGE != ''">
                       ${RANGE}
                  </if> 
                             GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, M.DESC01 ) STK ON ORD.OWNRKY = STK.OWNRKY AND ORD.WAREKY = STK.WAREKY AND ORD.SKUKEY = STK.SKUKEY 
           LEFT OUTER JOIN (SELECT H.OWNRKY AS OWNRKY , H.WAREKY AS WAREKY , I.SKUKEY AS SKUKEY , I.DESC01 AS DESC01, 
                                   NVL( SUM(TRUNC( (I.QTYASN / DECODE(I.QTDUOM, 0, NULL, I.QTDUOM )), 1 )) , 0) AS BOXQTY4 , SUM(I.QTYASN) AS QTSIWH4
                              FROM ASNDH H INNER JOIN ASNDI I ON H.ASNDKY = I.ASNDKY
                             WHERE 1 = 1
                               AND I.STATIT = 'NEW'
                               AND H.STATDO NOT IN ('RCN')
                               AND H.DOCDAT &gt; '20170301'
                             GROUP BY H.OWNRKY, H.WAREKY, I.SKUKEY, I.DESC01) ASN ON ORD.OWNRKY = ASN.OWNRKY AND ORD.WAREKY = ASN.WAREKY AND ORD.SKUKEY = ASN.SKUKEY 
           LEFT OUTER JOIN (SELECT I.OWNRKY OWNRKY , I.WARETG WAREKY , I.SKUKEY SKUKEY , I.DESC01 DESC01 , 
                                   NVL( TRUNC( SUM((I.QTYTRF / DECODE(M.QTDUOM, 0, NULL, M.QTDUOM )) ) , 1 ) , 0) AS BOXQTY5 , SUM(I.QTYTRF) AS QTSIWH5
                              FROM TRFIT I INNER JOIN SKUMA M ON M.OWNRKY = I.OWNRKY
                               AND M.SKUKEY = I.SKUKEY
                             WHERE 1 = 1
                               AND M.OWNRKY = #{OWNRKY}
                               AND I.STATIT = 'NEW'
                             GROUP BY I.OWNRKY, I.WARETG, I.SKUKEY, I.DESC01 ) TRF ON ORD.OWNRKY = TRF.OWNRKY AND ORD.WAREKY = TRF.WAREKY AND ORD.SKUKEY = TRF.SKUKEY 
           LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , S.DESC01 DESC01 , 
                                   NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY6 , SUM(S.QTSIWH) QTSIWH6
                              FROM SKUMA M INNER JOIN STKKY S ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                           INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                             WHERE 1 = 1
                               AND S.OWNRKY = #{OWNRKY}
                               AND S.AREAKY NOT IN ('SYS', 'SHP')
                               AND S.LOCAKY NOT IN ('SETLOC', '1J01101')
                               AND S.QTSIWH > 0
                               AND S.QTSBLK > 0
                               AND S.LOTA06 = '00'
                             GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, S.DESC01 ) BLK ON ORD.OWNRKY = BLK.OWNRKY AND ORD.WAREKY = BLK.WAREKY AND ORD.SKUKEY = BLK.SKUKEY 
           LEFT OUTER JOIN (SELECT S.OWNRKY OWNRKY , S.WAREKY WAREKY , S.SKUKEY SKUKEY , S.DESC01 DESC01 , 
                                   NVL( TRUNC( (SUM(S.QTSIWH) / DECODE(MAX(S.QTDUOM), 0, NULL, MAX(S.QTDUOM))), 1 ) , 0) AS BOXQTY7 , SUM(S.QTSIWH) QTSIWH7
                              FROM SKUMA M INNER JOIN STKKY S ON M.OWNRKY = S.OWNRKY AND M.SKUKEY = S.SKUKEY 
                                           INNER JOIN SKUWC W ON W.OWNRKY = S.OWNRKY AND W.SKUKEY = S.SKUKEY AND W.WAREKY = S.WAREKY
                             WHERE 1 = 1
                               AND M.OWNRKY = #{OWNRKY}
                               AND S.AREAKY NOT IN ('SYS', 'SHP')
                               AND S.QTSIWH > 0
                               AND S.QTSALO = 0
                               AND S.QTSPMO = 0
                               AND S.QTSPMI = 0
                               AND S.QTSBLK = 0
                               AND S.LOTA06 = '00'
                               /*AND S.LOCAKY = 'RCVLOC'*/
                               /* 생산 입고 자동으로 RCVFAC 로케이션도 미적치 수량에 포함*/
                               AND S.LOCAKY IN('RCVLOC','RCVFAC')
                             GROUP BY S.OWNRKY, S.WAREKY, S.SKUKEY, S.DESC01 ) RCV ON ORD.OWNRKY = RCV.OWNRKY AND ORD.WAREKY = RCV.WAREKY AND ORD.SKUKEY = RCV.SKUKEY 
           LEFT OUTER JOIN (SELECT SKUMA.OWNRKY, WAREKY, SKUMA.SKUKEY, SKUMA.DESC01 , 
                                   NVL( TRUNC( (SUM(ORDQTY - ASNQTY - INNQTY) / DECODE(MAX(SKUMA.QTDUOM), 0, NULL, MAX(SKUMA.QTDUOM))), 1 ) , 0) AS BOXQTY8 , 
                                   SUM(ORDQTY - ASNQTY - INNQTY) QTSIWH8
                              FROM IFWMS103 INNER JOIN SKUMA ON IFWMS103.OWNRKY = SKUMA.OWNRKY AND IFWMS103.SKUKEY = SKUMA.SKUKEY
                             WHERE 1 = 1
                               AND XSTAT = 'R'
                               AND IFWMS103.OWNRKY = #{OWNRKY}
                               AND MANDT = 'SAP'
                               AND ORDTYP !='002'
                               AND POCLOS = ' '
                               AND ORDQTY - ASNQTY - INNQTY > 0
                             GROUP BY SKUMA.OWNRKY, WAREKY, SKUMA.SKUKEY, SKUMA.DESC01 ) REQ ON ORD.OWNRKY = REQ.OWNRKY AND ORD.WAREKY = REQ.WAREKY AND ORD.SKUKEY = REQ.SKUKEY 
           LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, SKUKEY, DECODE(LOCAKY, 'DOCLOC', SUM(QTSIWH)-SUM(QTSALO), 0) AS QTYPRE,
                                                           DECODE(LOTA05, '29', SUM(QTSIWH) -SUM(QTSALO), 0) AS QTYPRE2,
                                                           DECODE(LOTA06, '30', SUM(NVL(QTSIWH, 0)), 0) AS QTYSTK30,
                                                           DECODE(LOTA06, '00', DECODE(WAREKY, '2117', DECODE(LOCAKY, '1Y01101', SUM(QTSIWH - QTSBLK - GREATEST(QTSALO , QTSPMO)), 0)
                                                                                             , '2257', DECODE(LOCAKY, '1Y01101', SUM(QTSIWH - QTSBLK - GREATEST(QTSALO , QTSPMO)), 0), 0), 0) AS BAKARM
                              FROM STKKY
                             WHERE OWNRKY = #{OWNRKY}
                               AND QTSIWH > 0
                               AND AREAKY NOT IN ('SHP', 'SYS')
                               AND LOCAKY NOT IN ('SETLOC', '1J01101')
                             GROUP BY OWNRKY, WAREKY, SKUKEY, LOCAKY, LOTA05, LOTA06 ) PRE ON ORD.OWNRKY = PRE.OWNRKY AND ORD.WAREKY = PRE.WAREKY AND ORD.SKUKEY = PRE.SKUKEY
           LEFT OUTER JOIN (SELECT SKUKEY, SUM(QTY1) AS QTY1, SUM(QTY2) AS QTY2, SUM(QTY3) AS QTY3, SUM(QTY4) AS QTY4, SUM(QTY5) AS QTY5, SUM(QTY6) AS QTY6,
                                           SUM(WH4_1QTY) AS WH4_1QTY, SUM(NUM01) AS NUM01
                              FROM (SELECT STK.SKUKEY,
                                           DECODE(STK.WAREKY, '2116', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                            , '2256', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY1,
                                           DECODE(STK.WAREKY, '2115', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                            , '2255', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY2,
                                           DECODE(STK.WAREKY, '2114', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                            , '2254', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY3,
                                           DECODE(STK.WAREKY, '2117', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                            , '2257', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY4,
                                           DECODE(STK.WAREKY, '2118', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                            , '2258', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY5,
                                           DECODE(STK.WAREKY, '2121', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                            , '2259', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS QTY6,
                                 DECODE(STK.WAREKY, '2120', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                            , '2261', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS WH4_1QTY,
                                           DECODE(STK.WAREKY, '2101', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0)
                                                            , '2263', NVL(STK.STKQTY, 0) + NVL(ASN.ASNQTY, 0) + NVL(TRF.TRFQTY, 0) - NVL(IFT.OUTQTY, 0), 0) AS NUM01
                                      FROM (SELECT WAREKY, SKUKEY, SUM(QTSIWH - QTSBLK - GREATEST(QTSALO, QTSPMO)) AS STKQTY
                                                         FROM STKKY
                                                        WHERE LOTA06 = '00'
                                                          AND (QTSIWH > 0 OR QTSPMI > 0)
                                                          AND AREAKY NOT IN ('SHP', 'SYS')
                                                          AND LOCAKY NOT IN ('SETLOC', '1J01101')
                                                          AND OWNRKY = #{OWNRKY}
                                                        GROUP BY OWNRKY, WAREKY, SKUKEY) STK
                                      LEFT OUTER JOIN (SELECT H.WAREKY, I.SKUKEY, SUM(I.QTYASN) AS ASNQTY
                                                         FROM ASNDH H, ASNDI I
                                                        WHERE 1 = 1
                                                          AND H.ASNDKY = I.ASNDKY
                                                          AND H.STATDO != 'RCN'
                                                          AND I.STATIT = 'NEW'
                                                          AND H.OWNRKY = #{OWNRKY}
                                                          AND H.DOCDAT BETWEEN TO_CHAR(SYSDATE-30, 'YYYYMMDD') AND TO_CHAR(SYSDATE+30, 'YYYYMMDD')
                                                        GROUP BY H.OWNRKY, H.WAREKY, I.SKUKEY) ASN ON STK.WAREKY = ASN.WAREKY AND STK.SKUKEY = ASN.SKUKEY
                                      LEFT OUTER JOIN (SELECT WARETG, SKUKEY, SUM(QTYTRF) AS TRFQTY
                                                         FROM TRFIT
                                                        WHERE OWNRKY = #{OWNRKY}
                                                          AND STATIT = 'NEW'
                                                          AND TRFOTY = '121'
                                                          AND QTYTRF > 0
                                                          AND DOCDAT BETWEEN TO_CHAR(SYSDATE-30, 'YYYYMMDD') AND TO_CHAR(SYSDATE+30, 'YYYYMMDD')
                                                        GROUP BY WARETG, SKUKEY) TRF ON STK.WAREKY = TRF.WARETG AND STK.SKUKEY = TRF.SKUKEY
                                      LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, SUM(QTYREQ - WMSMGT - QTSHPD) AS OUTQTY
                                                         FROM IFWMS113
                                                        WHERE XSTAT = 'R'
                                                          AND MANDT = 'SAP'
                                                          AND C00102 IN ('N', 'Y')
                                                          AND DOCUTY IN ('211', '212', '213', '214', '215', '216', '266')
                                                          AND OWNRKY = #{OWNRKY}
                                                        GROUP BY OWNRKY, WAREKY, SKUKEY) IFT ON STK.WAREKY = IFT.WAREKY AND STK.SKUKEY = IFT.SKUKEY)
                            GROUP BY SKUKEY ) WH ON ORD.SKUKEY = WH.SKUKEY 
                            LEFT OUTER JOIN (SELECT WAREKY, SKUKEY, SUM(QTYREQ) AS ORD_QTY
                                               FROM IFWMS113
                                              WHERE MANDT = 'SAP'
                                                AND OWNRKY = #{OWNRKY}
                                                AND WAREKY = #{WAREKY}
                                                AND C00102 = 'X'
                                                AND XSTAT  = 'R'
                                                AND DOCUTY IN ('211','212','213','214','215','216')
                                              GROUP BY WAREKY, SKUKEY) TOS ON ORD.WAREKY = TOS.WAREKY AND ORD.SKUKEY = TOS.SKUKEY
                            LEFT OUTER JOIN (SELECT IT.WARETG, IT.SKUKEY, TRUNC(NVL(SUM(NVL(IT.QTYRCV, 0)), 0) /  M.QTDUOM,0) AS BOXQTY9,
                                                     NVL(SUM(NVL(IT.QTYRCV, 0)), 0) AS QTSIWH9 
                                               FROM IFWMS403 IT INNER JOIN SKUMA M ON M.OWNRKY = IT.OWNRKY AND M.SKUKEY = IT.SKUKEY 
                                              WHERE IT.OWNRKY = '2500'
                                                AND IT.MANDT = 'POP'
                                                AND IT.XSTAT = 'R'
                                                AND IT.WARETG = #{WAREKY}
                                              GROUP BY IT.WARETG, IT.SKUKEY, M.QTDUOM) PRD ON PRD.WARETG = ORD.WAREKY AND PRD.SKUKEY = ORD.SKUKEY
     WHERE 1 = 1
     GROUP BY ORD.OWNRKY , ORD.WAREKY , ORD.SKUKEY , ORD.DESC01 , ORD.DESC04, ORD.SLCPDI 
    <if test="CHKMAK != '1'">
     HAVING SUM(ORD.QTSIWH1) &gt; 0
    </if> 
    <if test="CHKMAK == '1'">
    HAVING ( SUM(STK.QTSIWH2) &gt; 0 OR SUM(ASN.QTSIWH4) &gt; 0  OR SUM(TRF.QTSIWH5) &gt; 0 
             OR SUM(BLK.QTSIWH6) &gt; 0  OR SUM(RCV.QTSIWH7) &gt; 0  OR SUM(ORD.QTSIWH1) &gt; 0 
             OR SUM(PRE.QTYPRE) &gt; 0 OR SUM(TOS.ORD_QTY) &gt; 0 OR NVL(MAX(WH.QTY1), 0) &gt; 0 OR NVL(MAX(WH.QTY2), 0) &gt; 0 OR NVL(MAX(WH.QTY3), 0) &gt; 0
             OR NVL(MAX(WH.QTY4), 0) &gt; 0  OR NVL(MAX(WH.QTY5), 0) &gt; 0 OR NVL(MAX(WH.QTY6), 0) &gt; 0 OR NVL(MAX(WH.WH4_1QTY), 0) &gt; 0
             OR NVL(MAX(WH.NUM01), 0) &gt; 0  )
    </if> 
     ORDER BY ORD.SKUKEY
  </select>
         
         
  <!-- [DL53] 상차리스트 조회1-->
  <select id="DL53_GRID1_LIST" parameterType="hashmap" resultType="DataMap">
  	SELECT SH.OWNRKY AS OWNRKY,
	       SH.WAREKY AS WAREKY,
	       SR.RECDAT AS RECDAT,
	       SR.RECNUM AS RECNUM,
	       CM.CARTYP AS CARTYP,
	       CM.CARGBN AS CARGBN,
	       CM.CARTMP AS CARTMP,
	       SH.DPTNKY AS DPTNKY,
	       SR.SHIPSQ AS SHIPSQ,
	       DECODE(BZ1.NAME01, NULL, BZ2.NAME01, BZ1.NAME01) AS NAME01,
	       DECODE(BZ1.NAME01, NULL, BZ2.PTNG07, BZ1.PTNG07) AS PTNG07,
	       DECODE(BZ1.NAME01, NULL, BZ2.FORKYN, BZ1.FORKYN) AS FORKYN,
	       SR.CARDAT AS CARDAT,
	       SR.CARNUM AS CARNUM,
	       SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) AS QTJCMP,
	       NVL(TRUNC(SUM((SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SM.QTDUOM)), 0) AS BOXQTY,
	       NVL(TRUNC(SUM((SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SM.QTYSTD)), 0) AS PLTQTY,
	       ROUND(SUM((SI.QTSHPD - SI.QTYREF - SI.QTSHPC) * SM.NETWGT), 3) AS QTJWGT
	  FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
	                INNER JOIN SHPDR SR ON SH.SHPOKY = SR.SHPOKY AND SI.SHPOIT = SR.SHPOIT
	                INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
	                LEFT OUTER JOIN BZPTN BZ1 ON SH.OWNRKY = BZ1.OWNRKY AND SH.DPTNKY = BZ1.PTNRKY AND BZ1.PTNRTY = '0001'
	                LEFT OUTER JOIN BZPTN BZ2 ON SH.OWNRKY = BZ2.OWNRKY AND SH.DPTNKY = BZ2.PTNRKY AND BZ2.PTNRTY = '0004'
	                LEFT OUTER JOIN CARMA CM ON SH.OWNRKY = CM.OWNRKY AND SH.WAREKY = CM.WAREKY AND SR.RECNUM = CM.CARNUM
	 WHERE 1 = 1
	   AND SH.OWNRKY = #{OWNRKY}
	   AND SH.WAREKY = #{WAREKY}
	   AND SR.RECDAT = #{RECDAT}
	   AND SH.STATDO IN ('FSH', 'PSH')
	 <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>  
	 GROUP BY SH.OWNRKY, SH.WAREKY, SR.RECDAT, SR.RECNUM, CM.CARTYP, CM.CARGBN, CM.CARTMP, SH.DPTNKY, SR.SHIPSQ, 
	          BZ1.NAME01, BZ2.NAME01, BZ1.PTNG07, BZ2.PTNG07, BZ1.FORKYN, BZ2.FORKYN, SR.CARDAT, SR.CARNUM
	 ORDER BY SR.RECNUM, SH.DPTNKY
	  	
  </select>
  
  <!-- [DL53] 상차리스트 조회2-->
  <select id="DL53_GRID2_LIST" parameterType="hashmap" resultType="DataMap">
  	SELECT SH.OWNRKY AS OWNRKY,
	       SH.WAREKY AS WAREKY,
	       SR.RECDAT AS RECDAT,
	       SR.RECNUM AS RECNUM,
	       CM.CARTYP AS CARTYP,
	       CM.CARGBN AS CARGBN,
	       CM.CARTMP AS CARTMP,
	       SH.DPTNKY AS DPTNKY,
	       SR.SHIPSQ AS SHIPSQ,
	       DECODE(BZ1.NAME01, NULL, BZ2.NAME01, BZ1.NAME01) AS NAME01,
	       DECODE(BZ1.NAME01, NULL, BZ2.PTNG07, BZ1.PTNG07) AS PTNG07,
	       DECODE(BZ1.NAME01, NULL, BZ2.FORKYN, BZ1.FORKYN) AS FORKYN,
	       SR.CARDAT AS CARDAT,
	       SR.CARNUM AS CARNUM,
	       SI.SKUKEY AS SKUKEY,
	       SM.DESC01 AS DESC01,
	       SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) AS QTJCMP,
	       TRUNC(DECODE(SM.QTDUOM, NULL, 0, SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SM.QTDUOM) , 0) AS BOXQTY,
	       TRUNC(DECODE(SM.QTYSTD, NULL, 0, SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) / SM.QTYSTD) , 0) AS PLTQTY,
	       ROUND(SUM(SI.QTSHPD - SI.QTYREF - SI.QTSHPC) * SM.NETWGT, 3) AS QTJWGT
	  FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
	                INNER JOIN SHPDR SR ON SH.SHPOKY = SR.SHPOKY AND SI.SHPOIT = SR.SHPOIT
	                INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
	                LEFT OUTER JOIN BZPTN BZ1 ON SH.OWNRKY = BZ1.OWNRKY AND SH.DPTNKY = BZ1.PTNRKY AND BZ1.PTNRTY = '0001'
	                LEFT OUTER JOIN BZPTN BZ2 ON SH.OWNRKY = BZ2.OWNRKY AND SH.DPTNKY = BZ2.PTNRKY AND BZ2.PTNRTY = '0004'
	                LEFT OUTER JOIN CARMA CM ON SH.OWNRKY = CM.OWNRKY AND SH.WAREKY = CM.WAREKY AND SR.RECNUM = CM.CARNUM
	 WHERE 1 = 1
	   AND SH.OWNRKY = #{OWNRKY}
	   AND SH.WAREKY = #{WAREKY}
	   AND SR.RECDAT = #{RECDAT}
	   AND SH.STATDO IN ('FSH', 'PSH')
	 <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>  
	 GROUP BY SH.OWNRKY, SH.WAREKY, SR.RECDAT, SR.RECNUM, CM.CARTYP, CM.CARGBN, CM.CARTMP, SH.DPTNKY, SR.SHIPSQ, 
	          BZ1.NAME01, BZ2.NAME01, BZ1.PTNG07, BZ2.PTNG07, BZ1.FORKYN, BZ2.FORKYN,
	          SR.CARDAT, SR.CARNUM, SI.SKUKEY, SM.DESC01, SM.QTDUOM, SM.QTYSTD, SM.NETWGT
	 ORDER BY SR.RECNUM, SH.DPTNKY, SI.SKUKEY
	  	
  </select>
    
  <!-- [TO30] 출고완료처리 헤더 조회 : TASK.TASKORDER.FIND_CONFIRM_TARGET_TASDH  -->
  <select id="TO30_HEAD_LIST" parameterType="hashmap" resultType="DataMap">

		SELECT DISTINCT
		       TASDH.TASKKY  AS TASKKY,
		       TASDH.WAREKY  AS WAREKY,
		       WH.NAME01     AS WAREKYNM,
		       TASDH.TASOTY  AS TASOTY,
		       DT.SHORTX     AS TASOTYNM,
		       TASDH.DOCDAT  AS DOCDAT,
		       TASDH.DOCCAT  AS DOCCAT,
		       DC.SHORTX     AS DOCCATNM,
		       TASDH.DRELIN  AS DRELIN,
		       TASDH.STATDO  AS STATDO,
		       ST.CDESC1     AS STATDONM,
		       TASDH.QTTAOR  AS QTTAOR,
		       TASDH.QTCOMP  AS QTCOMP,
		       TASDH.TSPKEY  AS TSPKEY,
		       TASDH.DOORKY  AS DOORKY,
		       TASDH.WARETG  AS WARETG,
		       WT.NAME01     AS WARETGNM,
		       TASDH.PTNRKY  AS PTNRKY,
		       ' '           AS PTNRKYNM,
		       TASDH.PTNRTY  AS PTNRTY,
		       TASDH.PTNRNM  AS PTNRNM,
		       TASDH.USRID1  AS USRID1,
		       TASDH.UNAME1  AS UNAME1,
		       TASDH.DEPTID1 AS DEPTID1,
		       TASDH.DNAME1  AS DNAME1,
		       TASDH.USRID2  AS USRID2,
		       TASDH.UNAME2  AS UNAME2,
		       TASDH.DEPTID2 AS DEPTID2,
		       TASDH.DNAME2  AS DNAME2,
		       TASDH.USRID3  AS USRID3,
		       TASDH.UNAME3  AS UNAME3,
		       TASDH.DEPTID3 AS DEPTID3,
		       TASDH.DNAME3  AS DNAME3,
		       TASDH.USRID4  AS USRID4,
		       TASDH.UNAME4  AS UNAME4,
		       TASDH.DEPTID4 AS DEPTID4,
		       TASDH.DNAME4  AS DNAME4,
		       TASDH.DOCTXT  AS DOCTXT,
		       TASDH.CREDAT  AS CREDAT,
		       TASDH.CRETIM  AS CRETIM,
		       TASDH.CREUSR  AS CREUSR,
		       CU.NMLAST     AS CUSRNM,
		       TASDH.LMODAT  AS LMODAT,
		       TASDH.LMOTIM  AS LMOTIM,
		       TASDH.LMOUSR  AS LMOUSR,
		       LU.NMLAST     AS LUSRNM,
		       0 AS COMPLETECNT
		  FROM TASDH
		       INNER JOIN TASDI
		               ON TASDI.TASKKY = TASDH.TASKKY
		       LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = TASDH.WAREKY
		       LEFT OUTER JOIN WAHMA WT
		               ON WT.WAREKY = TASDH.WARETG
		       LEFT OUTER JOIN DOCTM DT
		               ON DT.DOCUTY = TASDH.TASOTY
		       LEFT OUTER JOIN DOCCM DC
		               ON DC.DOCCAT = TASDH.DOCCAT
		       LEFT OUTER JOIN CMCDV ST
		               ON ST.CMCDKY = 'STATDO'
		              AND ST.CMCDVL = TASDH.STATDO
		       LEFT OUTER JOIN USRMA CU
		               ON CU.USERID = TASDH.CREUSR
		       LEFT OUTER JOIN USRMA LU
		               ON LU.USERID = TASDH.LMOUSR
		 WHERE  TASDH.QTTAOR > 0
		   <if test="RANGE_SQL != null and RANGE_SQL != ''">  ${RANGE_SQL} </if>  
		   <if test="TASKKY != ''">
     			AND TASDH.TASKKY = #{TASKKY}
   	 	   </if> 
   	 	   AND TASDI.OWNRKY = #{OWNRKY}
           AND TASDH.WAREKY = #{WAREKY}
		   
  </select> 
    
  <!-- [TO30] 출고완료처리 헤더 조회 : TASK.TASKORDER.FIND_AVAILABLE_STOCKAPP   -->
  <select id="TO30_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
		    SELECT TASDI.TASKKY AS TASKKY,
			       TASDI.TASKIT AS TASKIT,
			       TASDI.TASKTY AS TASKTY,
			       TASDI.RSNCOD AS RSNCOD,
			       TASDI.STATIT AS STATIT,
			       TASDI.QTTAOR AS QTTAOR,
			       DECODE(TASDI.STATIT,'NEW', TASDI.QTTAOR, TASDI.QTCOMP) AS QTCOMP,
			       TASDI.OWNRKY AS OWNRKY,
			       TASDI.SKUKEY AS SKUKEY,
			       TASDI.LOTNUM AS LOTNUM,
			       TASDI.ACTCDT AS ACTCDT,
			       TASDI.ACTCTI AS ACTCTI,
			       TASDI.QTYUOM AS QTYUOM,
			       TASDI.TKFLKY AS TKFLKY,
			       TASDI.STEPNO AS STEPNO,
			       TASDI.LSTTFL AS LSTTFL,
			       TASDI.LOCASR AS LOCASR,
			       TASDI.SECTSR AS SECTSR,
			       TASDI.PAIDSR AS PAIDSR,
			       TASDI.TRNUSR AS TRNUSR,
			       TASDI.STRUTY AS STRUTY,
			       TASDI.SMEAKY AS SMEAKY,
			       TASDI.SUOMKY AS SUOMKY,
			       TASDI.QTSPUM AS QTSPUM,
			       TASDI.SDUOKY AS SDUOKY,
			       TASDI.QTSDUM AS QTSDUM,
			       TASDI.LOCATG AS LOCATG,
			       TASDI.SECTTG AS SECTTG,
			       TASDI.PAIDTG AS PAIDTG,
			       TASDI.TRNUTG AS TRNUTG,
			       TASDI.TTRUTY AS TTRUTY,
			       TASDI.TMEAKY AS TMEAKY,
			       TASDI.TUOMKY AS TUOMKY,
			       TASDI.QTTPUM AS QTTPUM,
			       TASDI.TDUOKY AS TDUOKY,
			       TASDI.QTTDUM AS QTTDUM,
			       TASDI.LOCAAC AS LOCAAC,
			       TASDI.SECTAC AS SECTAC,
			       TASDI.PAIDAC AS PAIDAC,
			       TASDI.TRNUAC AS TRNUAC,
			       TASDI.ATRUTY AS ATRUTY,
			       TASDI.AMEAKY AS AMEAKY,
			       TASDI.AUOMKY AS AUOMKY,
			       TASDI.QTAPUM AS QTAPUM,
			       TASDI.ADUOKY AS ADUOKY,
			       TASDI.QTADUM AS QTADUM,
			       TASDI.REFDKY AS REFDKY,
			       TASDI.REFDIT AS REFDIT,
			       TASDI.REFCAT AS REFCAT,
			       TASDI.REFDAT AS REFDAT,
			       TASDI.PURCKY AS PURCKY,
			       TASDI.PURCIT AS PURCIT,
			       TASDI.ASNDKY AS ASNDKY,
			       TASDI.ASNDIT AS ASNDIT,
			       TASDI.RECVKY AS RECVKY,
			       TASDI.RECVIT AS RECVIT,
			       TASDI.SHPOKY AS SHPOKY,
			       TASDI.SHPOIT AS SHPOIT,
			       TASDI.GRPOKY AS GRPOKY,
			       TASDI.GRPOIT AS GRPOIT,
			       TASDI.SADJKY AS SADJKY,
			       TASDI.SADJIT AS SADJIT,
			       TASDI.SDIFKY AS SDIFKY,
			       TASDI.SDIFIT AS SDIFIT,
			       TASDI.PHYIKY AS PHYIKY,
			       TASDI.PHYIIT AS PHYIIT,
			       TASDI.DROPID AS DROPID,
			       TASDI.DESC01 AS DESC01,
			       TASDI.DESC02 AS DESC02,
			       TASDI.ASKU01 AS ASKU01,
			       TASDI.ASKU02 AS ASKU02,
			       TASDI.ASKU03 AS ASKU03,
			       TASDI.ASKU04 AS ASKU04,
			       TASDI.ASKU05 AS ASKU05,
			       TASDI.EANCOD AS EANCOD,
			       TASDI.GTINCD AS GTINCD,
			       TASDI.SKUG01 AS SKUG01,
			       TASDI.SKUG02 AS SKUG02,
			       TASDI.SKUG03 AS SKUG03,
			       TASDI.SKUG04 AS SKUG04,
			       TASDI.SKUG05 AS SKUG05,
			       TASDI.GRSWGT AS GRSWGT,
			       TASDI.NETWGT AS NETWGT,
			       TASDI.WGTUNT AS WGTUNT,
			       TASDI.LENGTH AS LENGTH,
			       TASDI.WIDTHW AS WIDTHW,
			       TASDI.HEIGHT AS HEIGHT,
			       TASDI.CUBICM AS CUBICM,
			       TASDI.CAPACT AS CAPACT,
			       TASDI.WORKID AS WORKID,
			       TASDI.WORKNM AS WORKNM,
			       TASDI.HHTTID AS HHTTID,
			       TASDI.AREAKY AS AREAKY,
			       TASDI.LOTA01 AS LOTA01,
			       TASDI.LOTA02 AS LOTA02,
			       TASDI.LOTA03 AS LOTA03,
			       TASDI.LOTA04 AS LOTA04,
			       TASDI.LOTA05 AS LOTA05,
			       TASDI.LOTA06 AS LOTA06,
			       TASDI.LOTA07 AS LOTA07,
			       TASDI.LOTA08 AS LOTA08,
			       TASDI.LOTA09 AS LOTA09,
			       TASDI.LOTA10 AS LOTA10,
			       TASDI.LOTA11 AS LOTA11,
			       TASDI.LOTA12 AS LOTA12,
			       TASDI.LOTA13 AS LOTA13,
			       TASDI.LOTA14 AS LOTA14,
			       TASDI.LOTA15 AS LOTA15,
			       TASDI.LOTA16 AS LOTA16,
			       TASDI.LOTA17 AS LOTA17,
			       TASDI.LOTA18 AS LOTA18,
			       TASDI.LOTA19 AS LOTA19,
			       TASDI.LOTA20 AS LOTA20,
			       TASDI.AWMSNO AS AWMSNO,
			       TASDI.AWMSTS AS AWMSTS,
			       TASDI.SMANDT AS SMANDT,
			       TASDI.SEBELN AS SEBELN,
			       TASDI.SEBELP AS SEBELP,
			       TASDI.SZMBLNO AS SZMBLNO,
			       TASDI.SZMIPNO AS SZMIPNO,
			       TASDI.STRAID AS STRAID,
			       TASDI.SVBELN AS SVBELN,
			       TASDI.SPOSNR AS SPOSNR,
			       TASDI.STKNUM AS STKNUM,
			       TASDI.STPNUM AS STPNUM,
			       TASDI.SWERKS AS SWERKS,
			       TASDI.SLGORT AS SLGORT,
			       TASDI.SDATBG AS SDATBG,
			       TASDI.STDLNR AS STDLNR,
			       TASDI.SSORNU AS SSORNU,
			       TASDI.SSORIT AS SSORIT,
			       TASDI.SMBLNR AS SMBLNR,
			       TASDI.SZEILE AS SZEILE,
			       TASDI.SMJAHR AS SMJAHR,
			       TASDI.SXBLNR AS SXBLNR,
			       TASDI.SAPSTS AS SAPSTS,
			       TASDI.DOORKY AS DOORKY,
			       TASDI.PTLT01 AS PTLT01,
			       TASDI.PTLT02 AS PTLT02,
			       TASDI.PTLT03 AS PTLT03,
			       TASDI.PTLT04 AS PTLT04,
			       TASDI.PTLT05 AS PTLT05,
			       TASDI.PTLT06 AS PTLT06,
			       TASDI.PTLT07 AS PTLT07,
			       TASDI.PTLT08 AS PTLT08,
			       TASDI.PTLT09 AS PTLT09,
			       TASDI.PTLT10 AS PTLT10,
			       TASDI.PTLT11 AS PTLT11,
			       TASDI.PTLT12 AS PTLT12,
			       TASDI.PTLT13 AS PTLT13,
			       TASDI.PTLT14 AS PTLT14,
			       TASDI.PTLT15 AS PTLT15,
			       TASDI.PTLT16 AS PTLT16,
			       TASDI.PTLT17 AS PTLT17,
			       TASDI.PTLT18 AS PTLT18,
			       TASDI.PTLT19 AS PTLT19,
			       TASDI.PTLT20 AS PTLT20,
			       TASDI.PASTKY AS PASTKY,
			       TASDI.ALSTKY AS ALSTKY,
			       TASDI.SBKTXT AS SBKTXT,
			       TASDI.TASRSN AS TASRSN,
			       NVL(SM.QTYSTD,0) AS PLIQTY,
			       NVL(SM.QTDUOM,0) AS BXIQTY,
			       BZ.NAME01 AS LOTA03NM,
			       NVL(  TRUNC(TASDI.QTTAOR / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
			       NVL(  TRUNC(TASDI.QTTAOR / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
			       NVL(MOD(TASDI.QTTAOR , DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY,
			       NVL(SM.GRSWGT,0) * NVL(TASDI.QTCOMP ,0)  AS GRSWGT,
			       NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
			       TASDI.QTYFCN AS GTYFCN,
			       NVL(TO_DATE(TRIM(TASDI.LOTA13),'YYYYMMDD') - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')), 0) AS DTREMDAT,
			       NVL(TRUNC((TO_NUMBER(TO_DATE(TRIM(TASDI.LOTA13),'YYYYMMDD') - TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD')))/SM.OUTDMT) * 100), 0) AS DTREMRAT
			  FROM TASDH
			       INNER JOIN TASDI
			               ON TASDI.TASKKY = TASDH.TASKKY
			       INNER JOIN SKUMA SM
			              ON SM.OWNRKY = TASDI.OWNRKY
			             AND SM.SKUKEY = TASDI.SKUKEY
			       LEFT OUTER JOIN (SELECT PTNRKY, NAME01 FROM BZPTN WHERE PTNRTY = '0002' AND OWNRKY = #{OWNRKY}
			                 UNION ALL
			                 SELECT WAREKY, NAME01 FROM WAHMA) BZ
			                    ON BZ.PTNRKY = TASDI.LOTA03
			 WHERE TASDI.QTTAOR > 0
			 <if test="TASKKY != ''">
     			AND TASDH.TASKKY = #{TASKKY}
   	 	     </if> 
			   
  </select> 
  
  <!-- [TO30] 출고완료처리 저장  VALIDATION 조회  : PS0A.SHIPMENTORDER.CLOSE -->
  <select id="TO30_HEAD_VALID_MAP" parameterType="hashmap" resultType="DataMap">

         SELECT CLS_YN AS RESULTMSG
		  FROM ZSTCLS3T
		 WHERE 1=1
		   AND YYYYMM = SUBSTR(#{CARDAT},1,6)
		   AND TYPE = 'FN'

  </select>   
  
  <!-- [TO30] 출고완료처리 저장  VALIDATION 조회  : TASK.TASKORDER.SELECT_TASDR -->
  <select id="TO30_TASDR_MAP" parameterType="hashmap" resultType="DataMap">

        SELECT TASKKY AS TASKKY,
		       TASKIT AS TASKIT,
		       TASKIR AS TASKIR,
		       NVL((SELECT SRCSKY FROM STKKY WHERE STKKY.STOKKY = TASDR.STOKKY),' ') AS STOKKY,
		       QTSTKM AS QTSTKM,
		       QTSTKC AS QTSTKC,
		       CREDAT AS CREDAT,
		       CRETIM AS CRETIM,
		       CREUSR AS CREUSR,
		       LMODAT AS LMODAT,
		       LMOTIM AS LMOTIM,
		       LMOUSR AS LMOUSR
		  FROM TASDR
		 WHERE TASKKY = #{TASKKY}
		   AND TASKIT = #{TASKIT}
		   AND TASKIR = #{TASKIR}

  </select>   
  
   <!-- [TO30] 출고완료처리 : 헤더 삭제 : SHPDH   -->
  <delete id="TO30_TASDI_DELETE"  parameterType="hashmap">
  
	    DELETE FROM TASDI
	    WHERE 1=1
	      AND TASKKY = #{TASKKY} 
	      AND TASKIT = #{TASKIT}  
      
  </delete> 
  
  <!-- [TO30] 출고완료처리 : 입력 -->
  <insert id="TASDR_INSERT"  parameterType="hashmap">

    INSERT INTO TASDR (
              TASKKY
			, TASKIT
			, TASKIR
			, STOKKY
			, QTSTKM
			, QTSTKC
			, CREDAT, CRETIM, CREUSR
      		, LMODAT, LMOTIM, LMOUSR
			, INDBZL
			, INDARC
			, UPDCHK
    )
    VALUES(
               NVL(#{TASKKY}, ' ')
			,  NVL(#{TASKIT}, ' ')
			,  NVL(#{TASKIR}, ' ')
			,  NVL(#{STOKKY}, ' ')
			,  NVL(#{QTSTKM}, ' ')
			,  NVL(#{QTSTKC}, ' ')
			, TO_CHAR(SYSDATE,'YYYYMMDD'), TO_CHAR(SYSDATE,'HH24MISS'), #{SES_USER_ID}
      		, TO_CHAR(SYSDATE,'YYYYMMDD'), TO_CHAR(SYSDATE,'HH24MISS'), #{SES_USER_ID}
			,  NVL(#{INDBZL}, ' ')
			,  NVL(#{INDARC}, ' ')
			,  NVL(#{UPDCHK}, 0)
    )
    
  </insert>
  
  
  

  <!-- [DL30] 할당관리 헤더 조회 -->
  <select id="DL30_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
	SELECT DISTINCT SH.SHPOKY AS KEY,
	       SH.SHPOKY AS SHPOKY,
	       SH.WAREKY AS WAREKY,
	       WH.NAME01 AS WAREKYNM,
	       SH.STATDO AS STATDO,
	       CV.CDESC1 AS STATDONM,
	       SH.DRELIN AS DRELIN,
	       DECODE(MAX(SR.SHIPSQ),' ',0,'',0,NULL,0,MAX(SR.SHIPSQ)) AS SHIPSQ,
	       DECODE(SH.DRELIN,'V','YES','NO') AS DRELINNM,
	       MAX(SR.CARNUM) AS CARNUM,
	       SH.INDDCL AS INDDCL,
	       SH.ALSTKY AS ALSTKY,
	       SH.PTRCVR AS DPTNKY,
	       DECODE(SH.SHPMTY, '270', RBT.NAME01, BT.NAME01) AS DPTNKYNM,
	       SH.DPTNKY AS PTRCVR,
	       DECODE(SH.SHPMTY, '270', RBP.NAME01, BP.NAME01) AS PTRCVRNM,
	       SH.PGRC01 AS PGRC01,
	       SH.PGRC02 AS PGRC02,
	       SH.PGRC03 AS PGRC03,
	       SH.PGRC04 AS PGRC04,
	       SH.PGRC05 AS PGRC05,
	       ' ' AS PTNBLK,
	       SH.OWNRKY AS OWNRKY,
	       SH.DOCDAT AS DOCDAT,
	       SH.DOCCAT AS DOCCAT,
	       DC.SHORTX AS DOCCATNM,
	       SH.SHPMTY AS SHPMTY,
	       DT.SHORTX AS SHPMTYNM,
	       SH.SHPMTY AS DOCUTY,
	       SH.RQSHPD AS RQSHPD,
	       SH.RQARRD AS RQARRD,
	       SH.RQARRT AS RQARRT,
	       SH.OPURKY AS OPURKY,
	       DECODE(SH.SHPMTY, '299', ' ', SI.SVBELN) AS SVBELN,
	       DECODE(SH.STATDO, 'REF', SI.STKNUM, DECODE(SH.SHPMTY, '299', SI.STKNUM, ' ')) AS STKNUM,
	       CASE WHEN SH.SHPMTY = '299'
	                 THEN NVL((SELECT MAX(SUBSTR(SDATBG,1,8)) FROM IFWMS113 WHERE STKNUM = SI.STKNUM), ' ')
	            ELSE ' ' END AS SDATBG,
	       SH.QTAPPO AS QTAPPO,
	       SH.LOCADT AS LOCADT,
	       SH.LOCADK AS LOCADK,
	       SH.USRID1 AS USRID1,
	       SH.UNAME1 AS UNAME1,
	       SH.DEPTID1 AS DEPTID1,
	       SH.DNAME1 AS DNAME1,
	       SH.USRID2 AS USRID2,
	       SH.UNAME2 AS UNAME2,
	       SH.DEPTID2 AS DEPTID2,
	       SH.DNAME2 AS DNAME2,
	       SH.USRID3 AS USRID3,
	       SH.UNAME3 AS UNAME3,
	       SH.DEPTID3 AS DEPTID3,
	       SH.DNAME3 AS DNAME3,
	       SH.USRID4 AS USRID4,
	       SH.UNAME4 AS UNAME4,
	       SH.DEPTID4 AS DEPTID4,
	       SH.DNAME4 AS DNAME4,
	       SH.DOCTXT AS DOCTXT,
	       SH.CREDAT AS CREDAT,
	       SH.CRETIM AS CRETIM,
	       SH.CREUSR AS CREUSR,
	       (SELECT NMLAST FROM USRMA WHERE USERID = SH.CREUSR) AS CUSRNM,
	       SH.LMODAT AS LMODAT,
	       SH.LMOTIM AS LMOTIM,
	       SH.LMOUSR AS LMOUSR,
	       (SELECT NMLAST FROM USRMA WHERE USERID = SH.LMOUSR) AS LUSRNM,
	       SI.SEBELN AS SEBELN,
	       MAX(NVL(SR.ARRIVA, ' ')) ARRIVA,
	       COUNT(*) AS ITEMCNT,
	       SUM(SI.QTALOC / NVL(SM.QTDUOM, NULL)) AS SUMQTY,
	       (SELECT COUNT(STATIT) FROM SHPDI WHERE SHPOKY = SH.SHPOKY AND STATIT IN ('NEW','DEL')) AS RECOCD 
	  FROM SHPDH SH INNER JOIN SHPDI SI ON SH.SHPOKY = SI.SHPOKY
	                LEFT OUTER JOIN SHPDR SR ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
	                INNER JOIN WAHMA WH ON SH.WAREKY = WH.WAREKY
	                INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
	                LEFT OUTER JOIN BZPTN BP ON BP.PTNRKY = SH.PTRCVR AND BP.OWNRKY = SH.OWNRKY AND BP.PTNRTY IN ('0001', '0004')
	                LEFT OUTER JOIN BZPTN BT ON BT.PTNRKY = SH.DPTNKY AND BT.OWNRKY = SH.OWNRKY AND BT.PTNRTY IN ('0007', '0004')
	                LEFT OUTER JOIN BZPTN RBP ON RBP.PTNRKY = SH.PTRCVR AND RBP.OWNRKY = SH.OWNRKY AND RBP.PTNRTY = '0002'
	                LEFT OUTER JOIN BZPTN RBT ON RBT.PTNRKY = SH.DPTNKY AND RBT.OWNRKY = SH.OWNRKY AND RBT.PTNRTY = '0002'
	                INNER JOIN CMCDV CV ON SH.STATDO = CV.CMCDVL AND CV.CMCDKY = 'STATDO' 
	                INNER JOIN DOCCM DC ON SH.DOCCAT = DC.DOCCAT
	                INNER JOIN DOCTM DT ON SH.SHPMTY = DT.DOCUTY
	 WHERE 1 = 1
     <if test='SHPOKYS != ""'> 
        AND SH.SHPOKY IN (${SHPOKYS}) 
       </if>  
       <if test='SHPOKYS == ""'> 
        AND SH.OWNRKY = #{OWNRKY}
        AND SH.WAREKY = #{WAREKY}
        
      
        <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>  
      <if test="DRELIN != ''">
        AND SH.DRELIN LIKE DECODE(#{DRELIN},'N', ' ', 'Y', 'V', #{DRELIN} )
      </if>  
      <if test="GRPRL == 'ERPSO'">
        AND SH.SHPMTY IN ('211','212','213','214','215','216' )
      </if>  
      <if test="GRPRL == 'TOTAL'">
        AND SH.SHPMTY IN ('299')
      </if>  
      <if test="GRPRL == 'MOVE'">
        AND SH.SHPMTY IN ('266','267')
      </if>  
      <if test="GRPRL == 'PTNPUR'">
        AND SH.SHPMTY IN ('270')
      </if>  
      <if test="INDDCL != ''">
        AND SH.INDDCL = #{INDDCL}
      </if>  
      <if test="CLOSE == 'V'">
        AND STATDO &lt;&gt; 'REF'
      </if>     
      </if>  
    
    GROUP BY SH.SHPOKY, SH.SHPOKY, RBT.NAME01, SH.WAREKY, WH.NAME01, SH.STATDO, CV.CDESC1, SH.DRELIN, RBP.NAME01, SH.PTRCVR,
             SH.INDDCL, SI.SVBELN, SH.ALSTKY, SH.DPTNKY, BP.NAME01, SH.PGRC01, SH.PGRC02, SH.PGRC03, SH.PGRC04, SH.PGRC05,
             SH.OWNRKY, SH.DOCDAT, SH.DOCCAT, DC.SHORTX, SH.SHPMTY, DT.SHORTX, SH.SHPMTY, SH.RQSHPD, SH.RQARRD, SH.RQARRT, 
             SH.OPURKY, SI.STKNUM, SH.QTAPPO, SH.LOCADT, SH.LOCADK, SH.USRID1, SH.UNAME1, SH.DEPTID1, SH.DNAME1, SH.USRID2,
             SH.UNAME2, SH.DEPTID2, SH.DNAME2, SH.USRID3, SH.UNAME3, SH.DEPTID3, SH.DNAME3, SH.USRID4, SH.UNAME4, SH.DEPTID4,
             SH.DNAME4, SH.DOCTXT, SH.CREDAT, SH.CRETIM, SH.CREUSR, SH.LMODAT, SH.LMOTIM, SH.LMOUSR, SI.SEBELN, BT.NAME01
             
    </select>
  

  <!-- [DL30] 할당관리 아이템 조회 -->
  <select id="DL30_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
	SELECT SI.SHPOKY AS KEY,
	       SI.SHPOKY AS SHPOKY,
	       SI.SHPOIT AS SHPOIT,
	       SI.STATIT AS STATIT,
	       CV.CDESC1 AS STATITNM,
	       SI.SKUKEY AS SKUKEY,
	       SI.QTSHPO AS QTSHPO,
	       SI.QTSHPO - SI.QTALOC AS QTUALO,
	       SI.QTYORG AS QTYORG,
	       DECODE(SI.STATIT, 'REF', SI.QTJCMP, SI.QTYREF) AS QTYREF,
	       SI.QTAPPO AS QTAPPO,
	       SI.QTALOC AS QTALOC,
	       F_PRE_QTYPRE(SH.OWNRKY, SH.WAREKY, SI.SKUKEY) AS QTYPRE,
	       SI.QTJCMP AS QTJCMP,
	       DECODE(SI.EXSUBS,' ',SI.QTJCMP,SI.QTSHPD) AS QTSHPD,
	       SI.QTSHPD AS QTSHPD,
	       SI.QTSHPC AS QTSHPC,
	       SI.QTYUOM AS QTYUOM,
	       SI.MEASKY AS MEASKY,
	       SI.UOMKEY AS UOMKEY,
	       SI.QTPUOM AS QTPUOM,
	       SI.DUOMKY AS DUOMKY,
	       SI.QTDUOM AS QTDUOM,
	       SI.SASTKY AS SASTKY,
	       SI.ALSTKY AS ALSTKY,
	       SI.TKFLKY AS TKFLKY,
	       SI.ESHPKY AS ESHPKY,
	       SI.ESHPIT AS ESHPIT,
	       SI.OPURKY AS OPURKY,
	       SI.REFDKY AS REFDKY,
	       SI.REFDIT AS REFDIT,
	       SI.REFCAT AS REFCAT,
	       SI.REFDAT AS REFDAT,
	       SI.EXSUBS AS EXSUBS,
	       SI.DESC01 AS DESC01,
	       SI.DESC02 AS DESC02,
	       SI.ASKU01 AS ASKU01,
	       SI.ASKU02 AS ASKU02,
	       SI.ASKU03 AS ASKU03,
	       SI.ASKU04 AS ASKU04,
	       SI.ASKU05 AS ASKU05,
	       SI.EANCOD AS EANCOD,
	       SI.GTINCD AS GTINCD,
	       SI.SKUG01 AS SKUG01,
	       SI.SKUG02 AS SKUG02,
	       SI.SKUG03 AS SKUG03,
	       SI.SKUG04 AS SKUG04,
	       SI.SKUG05 AS SKUG05,
	       SI.GRSWGT AS GRSWGT,
	       SI.NETWGT AS NETWGT,
	       SI.WGTUNT AS WGTUNT,
	       SI.LENGTH AS LENGTH,
	       SI.WIDTHW AS WIDTHW,
	       SI.HEIGHT AS HEIGHT,
	       SI.CUBICM AS CUBICM,
	       CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
	            ELSE ROUND(SI.QTALOC * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
	       CASE WHEN SI.QTDUOM IN (0,9999999) OR SI.CUBICM = 0 THEN 0
	            ELSE ROUND(SI.QTSHPD * (SI.CUBICM / SI.QTDUOM),3) END AS CUBICT,
	       SI.CAPACT AS CAPACT,
	       SI.PROCHA AS PROCHA,
	       SI.AREAKY AS AREAKY,
	       SI.LOTA01 AS LOTA01,
	       SI.LOTA02 AS LOTA02,
	       SI.LOTA03 AS LOTA03,
	       SI.LOTA04 AS LOTA04,
	       SI.LOTA05 AS LOTA05,
	       SI.LOTA06 AS LOTA06,
	       SI.LOTA07 AS LOTA07,
	       SI.LOTA08 AS LOTA08,
	       SI.LOTA09 AS LOTA09,
	       SI.LOTA10 AS LOTA10,
	       SI.LOTA11 AS LOTA11,
	       SI.LOTA12 AS LOTA12,
	       SI.LOTA13 AS LOTA13,
	       SI.LOTA14 AS LOTA14,
	       SI.LOTA15 AS LOTA15,
	       SI.LOTA16 AS LOTA16,
	       SI.LOTA17 AS LOTA17,
	       SI.LOTA18 AS LOTA18,
	       SI.LOTA19 AS LOTA19,
	       SI.LOTA20 AS LOTA20,
	       SI.AWMSNO AS AWMSNO,
	       SI.SMANDT AS SMANDT,
	       SI.SEBELN AS SEBELN,
	       SI.SEBELP AS SEBELP,
	       SI.STRAID AS STRAID,
	       SI.SVBELN AS SVBELN,
	       SI.SPOSNR AS SPOSNR,
	       SI.STKNUM AS STKNUM,
	       SI.STPNUM AS STPNUM,
	       SI.SWERKS AS SWERKS,
	       SI.SLGORT AS SLGORT,
	       SI.SDATBG AS SDATBG,
	       SI.STDLNR AS STDLNR,
	       SI.SSORNU AS SSORNU,
	       SI.SSORIT AS SSORIT,
	       SI.SMBLNR AS SMBLNR,
	       SI.SZEILE AS SZEILE,
	       SI.SMJAHR AS SMJAHR,
	       SI.SXBLNR AS SXBLNR,
	       SI.SAPSTS AS SAPSTS,
	       SI.PTNRKY AS PTNRKY,
	       SI.NAME01 AS NAME01,
	       SI.SLAND1 AS SLAND1,
	       SI.SBKTXT AS SBKTXT,
	       SH.SHPMTY AS SHPMTY,
	       SI.STRAID AS VGBEL,
	       NVL(SM.QTYSTD,0) AS PLIQTY,
	       NVL(SM.QTDUOM,0) AS BXIQTY,
	       NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM) ) ,0) AS BOXQTY,       
	       NVL(  TRUNC((SI.QTSHPO) / DECODE(SM.QTYSTD, NULL,0,SM.QTYSTD) ) ,0) AS PLTQTY,       
	       NVL(MOD(SI.QTSHPO, DECODE(SM.QTDUOM, NULL,0,SM.QTDUOM)),0) AS REMQTY ,
	            
	       SR.ARRIVA AS ARRIVA,
	       SR.CARDAT AS CARDAT,
	       SR.CARNUM AS CARNUM,
	       SR.SHIPSQ AS SHIPSQ,
	       SR.SORTSQ AS SORTSQ,
	       SR.DRIVER AS DRIVER,
	       SR.RECAYN AS RECAYN,
	       SI.QTYREF AS QTYREF,
	       SI.QTSHPC AS QTSHPC,
	       (SELECT COUNT(*) FROM SHPDI WHERE SHPOKY = SH.SHPOKY)  AS ITEMCOUNT
	
	  FROM SHPDH SH
	       INNER JOIN SHPDI SI
	               ON SH.SHPOKY = SI.SHPOKY
	              AND SI.SHPOKY = #{SHPOKY}
	       LEFT OUTER JOIN SHPDR SR
	               ON SR.SHPOKY = SI.SHPOKY
	              AND SR.SHPOIT = SI.SHPOIT
	       INNER JOIN SKUMA SM
	               ON SM.OWNRKY = SH.OWNRKY
	              AND SM.SKUKEY = SI.SKUKEY
	       INNER JOIN CMCDV CV
	               ON CV.CMCDKY = 'STATIT'
	              AND CV.CMCDVL = SI.STATIT
	WHERE  1 = 1
	  AND SH.SHPOKY = #{SHPOKY}
        <if test="RANGE_SQL != null and RANGE_SQL != ''"> ${RANGE_SQL} </if>  
      <if test="GRPRL == 'ERPSO'">
        AND SH.SHPMTY IN ('211','212','213','214','215','216' )
      </if>  
      <if test="GRPRL == 'TOTAL'">
        AND SH.SHPMTY IN ('299')
      </if>  
      <if test="GRPRL == 'MOVE'">
        AND SH.SHPMTY IN ('266','267')
      </if>  
      <if test="GRPRL == 'PTNPUR'">
        AND SH.SHPMTY IN ('270')
      </if>  
      <if test="INDDCL != ''">
        AND SH.INDDCL = #{INDDCL}
      </if>  
	
	ORDER BY SI.SHPOKY, SI.SHPOIT
    </select>
  

  <!-- [DL30] 할당관리 아이템 부족재고 조회 -->
  <select id="DL30_ITEM_02_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT DISTINCT PTNRTO AS PTNRKY,
		       BN.NAME01 AS PTNRNM,
		       BN.TELN01 AS TELN01,
		       SVBELN AS SVBELN,
		       REFDKY AS SVGBEL,
		       TMP.SKUKEY AS SKUKEY,
		       SA.DESC01 AS DESC01,
		       QTYORG AS QTSHPO,
		       QTYORG - (DECODE(SIGN(ALLOC-CULSUM), -1, LEAST(QTYORG, ABS(ALLOC-CULSUM)), 0)) AS QTALOC,
		       DECODE(SIGN(ALLOC-CULSUM), -1, LEAST(QTYORG, ABS(ALLOC-CULSUM)), 0) AS QTUALO,
		       CULSUM,
		       ALLOC,
		       ALLOC-CULSUM GAP,
		       CUSRID    AS CUSRID,
		       CUNAME    AS CUNAME,
		       CUPOST    AS CPSTLZ,
		       CUNATN     AS LAND1,
		       CUTEL1     AS TELF1,
		       CUTEL2     AS TELE2,
		       CUMAIL    AS SMTP_ADDR,
		       DIRSUP     AS KUKLA,
		       DIRDVY     AS VTEXT,
		       CUADDR     AS ADDR,
		       CTNAME     AS CNAME,
		       CTTEL1     AS CPHON,
		       SALENM     AS BNAME,
		       SALTEL     AS BPHON
		  FROM (SELECT OWNRKY, SVBELN, PTNRTO, A.SKUKEY, CREDAT, USRID1 , QTYORG, REFDKY,
		               SUM(QTYORG) OVER ( PARTITION BY A.SKUKEY ORDER BY SVBELN) CULSUM,
		               ALLOC, 
		               CUSRID, CUNAME, CUPOST, CUNATN, CUTEL1, CUTEL2, CUMAIL, 
		               DIRSUP, DIRDVY, CUADDR, CTNAME, CTTEL1, SALENM, SALTEL
		          FROM IFWMS113 A, 
		               (SELECT STKNUM, SKUKEY , SHPDI.QTALOC ALLOC, DPTNKY
		                  FROM SHPDH,SHPDI
		                 WHERE SHPDH.SHPOKY = SHPDI.SHPOKY
		                   AND STKNUM = DECODE(#{STKNUM}, '', ' ', #{STKNUM})
		                   AND SHPDH.SHPOKY = #{SHPOKY}
		                   AND SHPDI.QTSHPO - SHPDI.QTALOC > 0
		                   AND STATIT != 'REF' ) B
		         WHERE A.STKNUM =  DECODE(#{STKNUM}, '', ' ', #{STKNUM})
		           AND A.STKNUM = B.STKNUM
		           AND A.SKUKEY = B.SKUKEY
		           AND A.PTNRTO = B.DPTNKY
		         ORDER BY 3, 1) TMP,
		        SKUMA SA,
		        BZPTN BN
		 WHERE TMP.SKUKEY = SA.SKUKEY(+)
		   AND TMP.OWNRKY = SA.OWNRKY(+)
		   AND TMP.PTNRTO = BN.PTNRKY(+)
		   AND TMP.OWNRKY = BN.OWNRKY(+) 
		   AND BN.PTNRTY = '0007' 
      <if test="SKUKEY != ''">
        AND TMP.SKUKEY = #{SKUKEY}
      </if>    
		 ORDER BY 4, 3
    </select>
    
  
  <!-- [DL30] D/O전송시 아이템 임시 조회 -->
  <select id="DL30_ITEM_DOC_CONFIRM_LIST" parameterType="hashmap" resultType="DataMap">
	  SELECT * 
	    FROM SHPDI 
	   WHERE 1=1
	   <if test="SHPOKY != ''">
	     AND SHPOKY = #{SHPOKY}
	   </if>	 
	   <if test="SVBELN != ''">    
	     AND SVBELN = #{SVBELN}
	   </if>
  </select>
 
  <!-- [DL90] DL90 저장후 조회 헤더 -->
  <select id="DL90_HEAD_SAVED_LIST" parameterType="hashmap" resultType="DataMap">
	SELECT SADJKY
	     , WAREKY
	     , (SELECT NAME01 FROM WAHMA WHERE WAREKY = AH.WAREKY) AS WAREKYNM 
	     , ADJUTY
	     , (SELECT SHORTX FROM DOCTM WHERE DOCUTY = AH.ADJUTY) AS ADJUTYNM
	     , DOCDAT
	     , DOCCAT
	     , (SELECT SHORTX FROM DOCCM WHERE DOCCAT = AH.DOCCAT) AS DOCCATNM
	     , ADJUCA
	     , (SELECT SHORTX FROM DOCCM WHERE DOCCAT = AH.ADJUCA) AS ADJUCANM
	  FROM ADJDH AH  	
	 WHERE AH.SADJKY = #{SADJKY}
  </select>

  <!-- [DL90] 배송량조정 아이템 조회 : INVENTORY.ADJUSTMENT.FIND_RCV_BY_TSK_ITEMLIST   -->
  <select id="DL90_ITEM_SAVED_LIST" parameterType="hashmap" resultType="DataMap">
	  SELECT AI.SADJKY AS SADJKY,
		       AI.SADJIT AS SADJIT,
		       AI.RSNADJ AS RSNADJ,
		       AI.STOKKY AS STOKKY,
		       AI.LOTNUM AS LOTNUM,
		       AI.LOCAKY AS LOCAKY,
		       AI.TRNUID AS TRNUID,
		       AI.SECTID AS SECTID,
		       AI.PACKID AS PACKID,
		       AI.QTADJU AS QTADJU,
		       AI.QTADJU AS QTCALC,
		       0 AS QTBLKD,
		       AI.QTADJU AS QTYUOM,
		       AI.TRUNTY AS TRUNTY,
		       SI.MEASKY AS MEASKY,
		       SI.UOMKEY AS UOMKEY,
		       AI.QTPUOM AS QTPUOM,
		       AI.DUOMKY AS DUOMKY,
		       AI.QTDUOM AS QTDUOM,
		       AI.SUBSIT AS SUBSIT,
		       AI.SUBSFL AS SUBSFL,
		       SI.SHPOKY AS REFDKY,
		       SI.SHPOIT AS REFDIT,
		       SI.SHPOKY,
		       SI.SHPOIT,
		       SH.DOCCAT AS REFCAT,
		       SH.OWNRKY AS OWNRKY,
		       SI.SKUKEY AS SKUKEY,
		       AI.LOTA01 AS LOTA01,
		       AI.LOTA02 AS LOTA02,
		       AI.LOTA03 AS LOTA03,
		       AI.LOTA04 AS LOTA04,
		       AI.LOTA05 AS LOTA05,
		       AI.LOTA06 AS LOTA06,
		       AI.LOTA07 AS LOTA07,
		       AI.LOTA08 AS LOTA08,
		       AI.LOTA09 AS LOTA09,
		       AI.LOTA10 AS LOTA10,
		       AI.LOTA11 AS LOTA11,
		       AI.LOTA12 AS LOTA12,
		       AI.LOTA13 AS LOTA13,
		       AI.LOTA14 AS LOTA14,
		       AI.LOTA15 AS LOTA15,
		       AI.LOTA16 AS LOTA16,
		       AI.LOTA17 AS LOTA17,
		       AI.LOTA18 AS LOTA18,
		       AI.LOTA19 AS LOTA19,
		       AI.LOTA20 AS LOTA20,
		       SI.AWMSNO AS AWMSNO,
		       ' ' AS AREAKY,
		       AI.DESC01 AS DESC01,
		       AI.DESC02 AS DESC02,
		       AI.ASKU01 AS ASKU01,
		       AI.ASKU02 AS ASKU02,
		       AI.ASKU03 AS ASKU03,
		       AI.ASKU04 AS ASKU04,
		       AI.ASKU05 AS ASKU05,
		       AI.EANCOD AS EANCOD,
		       AI.GTINCD AS GTINCD,
		       AI.SKUG01 AS SKUG01,
		       AI.SKUG02 AS SKUG02,
		       AI.SKUG03 AS SKUG03,
		       AI.SKUG04 AS SKUG04,
		       AI.SKUG05 AS SKUG05,
		       AI.GRSWGT AS GRSWGT,
		       AI.NETWGT AS NETWGT,
		       AI.WGTUNT AS WGTUNT,
		       AI.LENGTH AS LENGTH,
		       AI.WIDTHW AS WIDTHW,
		       AI.HEIGHT AS HEIGHT,
		       AI.CUBICM AS CUBICM,
		       AI.CAPACT AS CAPACT,
		       ' ' AS WORKID,
		       ' ' AS WORKNM,
		       ' ' AS HHTTID,
		       SI.SMANDT AS SMANDT,
		       SI.SEBELN AS SEBELN,
		       SI.SEBELP AS SEBELP,
		       SI.SZMBLNO AS SZMBLNO,
		       SI.SZMIPNO AS SZMIPNO,
		       SI.STRAID AS STRAID,
		       SI.SVBELN AS SVBELN,
		       SI.SPOSNR AS SPOSNR,
		       SI.STKNUM AS STKNUM,
		       SI.STPNUM AS STPNUM,
		       SI.SWERKS AS SWERKS,
		       SI.SLGORT AS SLGORT,
		       SI.SDATBG AS SDATBG,
		       SI.STDLNR AS STDLNR,
		       SI.SSORNU AS SSORNU,
		       SI.SSORIT AS SSORIT,
		       SI.SMBLNR AS SMBLNR,
		       SI.SZEILE AS SZEILE,
		       SI.SMJAHR AS SMJAHR,
		       SI.SXBLNR AS SXBLNR,
		       SI.SAPSTS AS SAPSTS,
		       SI.SBKTXT AS SBKTXT,
		       ' ' AS ADJRSN,
		       ' ' AS RELRSN,
		       ' ' AS RELDAT,
		       ' ' AS RELUSR,
		       
		       SI.QTSHPD AS QTSHPD,
		       AI.QTADJU AS QTCOMP,
		       AI.QTADJU AS QTYFCN,
		       AI.QTADJU AS QTCAVL,
		       ' ' AS TASKKY,
		       ' ' AS TASKIT,
		
		       NVL(SM.QTYSTD,0) AS PLIQTY,
		       NVL(SM.QTDUOM,0) AS BXIQTY,
		       NVL(  TRUNC((AI.QTADJU ) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY,       
		       NVL(  TRUNC((AI.QTADJU ) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY,       
		      0 AS REMQTY,
		       0  AS GRSWGT,
		       NVL(SM.GRSWGT,0)   AS GRSWGTCNT,
		       
		       SR.ARRIVA AS ARRIVA,
		       SR.CARDAT AS CARDAT,
		       SR.CARNUM AS CARNUM,
		      SR.SHIPSQ AS SHIPSQ,
		       SR.SORTSQ AS SORTSQ,
		       SR.DRIVER AS DRIVER,
		       SR.RECAYN AS RECAYN,
		       SH.SHPMTY AS SHPMTY,
		       D.SHORTX  AS SHPMTYNM,
		       SH.DPTNKY AS DPTNKY, 
		       NVL(BZ.NAME01,WH.NAME01 ) AS DPTNKYNM,
		       SH.DOCTXT AS DOCTXT,
		       SH.PGRC02 AS PGRC02,
		       (SELECT DISTINCT ORDDAT FROM IFWMS113 WHERE SVBELN = SI.SVBELN AND XSTAT = 'D') AS ORDDAT,
		       SM.OUTDMT
		  FROM SHPDH SH
		       INNER JOIN SHPDI SI
		               ON SI.SHPOKY = SH.SHPOKY
		       INNER JOIN DOCTM D
		               ON D.DOCUTY = SH.SHPMTY
		       INNER JOIN IFWMS113 I 
		                    ON I.OWNRKY = SH.OWNRKY
		                   AND I.WAREKY = SH.WAREKY
		                   AND I.SPOSNR = SI.SPOSNR
		                   AND I.SVBELN = SI.SVBELN
		                   AND I.XSTAT='D'
		       INNER JOIN SKUMA SM
		               ON SM.OWNRKY = SH.OWNRKY
		              AND SM.SKUKEY = SI.SKUKEY
		       INNER JOIN ADJDI AI ON AI.REFDKY = SI.SHPOKY AND AI.REFDIT = SI.SHPOIT
		       INNER JOIN ADJDH AH ON AH.SADJKY = AI.SADJKY
		  LEFT OUTER JOIN BZPTN BZ
		                   ON BZ.OWNRKY = SH.OWNRKY
		                  AND BZ.PTNRKY = SH.DPTNKY
		                  AND BZ.PTNRTY = '0001'   
		  LEFT OUTER JOIN WAHMA WH
		               ON WH.WAREKY = SH.WAREKY
		
		      LEFT OUTER JOIN (SELECT DISTINCT SHPOKY, SHPOIT, ARRIVA, 
		                                CARDAT, CARNUM, 
		                                SHIPSQ, SORTSQ, DRIVER, 
		                                RECAYN, TASKKY
		                  FROM SHPDR)  SR
		              ON SR.SHPOKY = SI.SHPOKY
		             AND SR.SHPOIT = SI.SHPOIT              
		 WHERE SH.SHPMTY ='216'
		
		   AND SH.INDDCL = 'V'
		   AND SI.STATIT IN ('PSH','FSH')
		   AND SI.QTSHPD-(SI.QTYREF+SI.QTSHPC)  &gt; 0 
		   AND SH.OWNRKY = #{OWNRKY}
		   AND SH.WAREKY = #{WAREKY}		                  
	       AND AH.SADJKY = #{SADJKY}
		ORDER BY 1, 2
		
  </select>
  

  <!-- [TM03] 이고요청 헤더 저장후 조회   -->
  <select id="TM03_HEAD_SAVED_LIST" parameterType="hashmap" resultType="DataMap">
        SELECT DISTINCT OWNRKY      
		      , ORDDAT
		      , OTRQDT
		      , DOCUTY
		      , SVBELN
		      , WAREKY
		      , WARESR
		      , WARETG
		      , MANDT
		      , ORDTYP
		   FROM IFWMS113
		  WHERE SVBELN = #{SVBELN}
		    AND XSTAT IN ('R','D')
  </select>

    
  <!-- [DL30]  선택한 STOKKY로 STKKY조회   만든다  -->
  <select id="DL30_POP_STKKY_LIST" parameterType="hashmap" resultType="DataMap">
	SELECT DISTINCT S.STOKKY  AS STOKKY,
	       S.WAREKY  AS WAREKY,
	       S.LOTNUM  AS LOTNUM,
	       S.LOCAKY  AS LOCAKY,
	       S.TRNUID  AS TRNUID,
	       S.SECTID  AS SECTID,
	       S.PACKID  AS PACKID,
	       S.QTSIWH  AS QTSIWH,
	       S.QTSALO  AS QTSALO,
	       S.QTSPMO  AS QTSPMO,
	       S.QTSPMI  AS QTSPMI,
	       S.QTSBLK  AS QTSBLK,
	       S.QTYUOM  AS QTYUOM,
	       S.TRUNTY  AS TRUNTY,
	       S.MEASKY  AS MEASKY,
	       S.UOMKEY  AS UOMKEY,
	       S.QTPUOM  AS QTPUOM,
	       S.DUOMKY  AS DUOMKY,
	       S.QTDUOM  AS QTDUOM,
	       S.TKFLKY  AS TKFLKY,
	       S.STEPNO  AS STEPNO,
	       S.LSTTFL  AS LSTTFL,
	       S.SRCSKY  AS SRCSKY,
	       S.UOMDOC  AS UOMDOC,
	       S.CNTBSK  AS CNTBSK,
	       S.NUPDPS  AS NUPDPS,
	       S.REFDKY  AS REFDKY,
	       S.REFDIT  AS REFDIT,
	       S.REFCAT  AS REFCAT,
	       S.REFDAT  AS REFDAT,
	       S.PURCKY  AS PURCKY,
	       S.PURCIT  AS PURCIT,
	       S.ASNDKY  AS ASNDKY,
	       S.ASNDIT  AS ASNDIT,
	       S.RECVKY  AS RECVKY,
	       S.RECVIT  AS RECVIT,
	       S.SHPOKY  AS SHPOKY,
	       S.SHPOIT  AS SHPOIT,
	       S.GRPOKY  AS GRPOKY,
	       S.GRPOIT  AS GRPOIT,
	       S.TASKKY  AS TASKKY,
	       S.TASKIT  AS TASKIT,
	       S.SADJKY  AS SADJKY,
	       S.SADJIT  AS SADJIT,
	       S.SDIFKY  AS SDIFKY,
	       S.SDIFIT  AS SDIFIT,
	       S.PHYIKY  AS PHYIKY,
	       S.PHYIIT  AS PHYIIT,
	       S.OWNRKY  AS OWNRKY,
	       S.SKUKEY  AS SKUKEY,
	       S.LOTA01  AS LOTA01,
	       S.LOTA02  AS LOTA02,
	       S.LOTA03  AS LOTA03,
	       S.LOTA04  AS LOTA04,
	       S.LOTA05  AS LOTA05,
	       S.LOTA06  AS LOTA06,
	       S.LOTA07  AS LOTA07,
	       S.LOTA08  AS LOTA08,
	       S.LOTA09  AS LOTA09,
	       S.LOTA10  AS LOTA10,
	       S.LOTA11  AS LOTA11,
	       S.LOTA12  AS LOTA12,
	       S.LOTA13  AS LOTA13,
	       S.LOTA14  AS LOTA14,
	       S.LOTA15  AS LOTA15,
	       S.LOTA16  AS LOTA16,
	       S.LOTA17  AS LOTA17,
	       S.LOTA18  AS LOTA18,
	       S.LOTA19  AS LOTA19,
	       S.LOTA20  AS LOTA20,
	       S.LOTA01  AS PTLT01,
	       S.LOTA02  AS PTLT02,
	       S.LOTA03  AS PTLT03,
	       S.LOTA04  AS PTLT04,
	       S.LOTA05  AS PTLT05,
	       S.LOTA06  AS PTLT06,
	       S.LOTA07  AS PTLT07,
	       S.LOTA08  AS PTLT08,
	       S.LOTA09  AS PTLT09,
	       S.LOTA10  AS PTLT10,
	       S.LOTA11  AS PTLT11,
	       S.LOTA12  AS PTLT12,
	       S.LOTA13  AS PTLT13,
	       S.LOTA14  AS PTLT14,
	       S.LOTA15  AS PTLT15,
	       S.LOTA16  AS PTLT16,
	       S.LOTA17  AS PTLT17,
	       S.LOTA18  AS PTLT18,
	       S.LOTA19  AS PTLT19,
	       S.LOTA20  AS PTLT20,
	       S.AWMSNO  AS AWMSNO,
	       S.DESC01  AS DESC01,
	       S.DESC02  AS DESC02,
	       S.ASKU01  AS ASKU01,
	       S.ASKU02  AS ASKU02,
	       S.ASKU03  AS ASKU03,
	       S.ASKU04  AS ASKU04,
	       S.ASKU05  AS ASKU05,
	       S.EANCOD  AS EANCOD,
	       S.GTINCD  AS GTINCD,
	       S.SKUG01  AS SKUG01,
	       S.SKUG02  AS SKUG02,
	       S.SKUG03  AS SKUG03,
	       S.SKUG04  AS SKUG04,
	       S.SKUG05  AS SKUG05,
	       S.GRSWGT  AS GRSWGT,
	       S.NETWGT  AS NETWGT,
	       S.WGTUNT  AS WGTUNT,
	       S.LENGTH  AS LENGTH,
	       S.WIDTHW  AS WIDTHW,
	       S.HEIGHT  AS HEIGHT,
	       S.CUBICM  AS CUBICM,
	       S.CAPACT  AS CAPACT,
	       S.ZONEKY  AS ZONEKY,
	       S.TKZONE  AS TKZONE,
	       S.AREAKY  AS AREAKY,
	       S.SMANDT  AS SMANDT,
	       S.SEBELN  AS SEBELN,
	       S.SEBELP  AS SEBELP,
	       S.SZMBLNO AS SZMBLNO,
	       S.SZMIPNO AS SZMIPNO,
	       S.STRAID  AS STRAID,
	       S.SVBELN  AS SVBELN,
	       S.SPOSNR  AS SPOSNR,
	       S.STKNUM  AS STKNUM,
	       S.STPNUM  AS STPNUM,
	       S.SWERKS  AS SWERKS,
	       S.SLGORT  AS SLGORT,
	       S.SDATBG  AS SDATBG,
	       S.STDLNR  AS STDLNR,
	       S.SSORNU  AS SSORNU,
	       S.SSORIT  AS SSORIT,
	       S.SMBLNR  AS SMBLNR,
	       S.SZEILE  AS SZEILE,
	       S.SMJAHR  AS SMJAHR,
	       S.SXBLNR  AS SXBLNR,
	       S.SAPSTS  AS SAPSTS,
	       S.SBKTXT  AS SBKTXT,
	       S.CREDAT  AS CREDAT,
	       S.CRETIM  AS CRETIM,
	       S.CREUSR  AS CREUSR,
	       S.LMODAT  AS LMODAT,
	       S.LMOTIM  AS LMOTIM,
	       S.LMOUSR  AS LMOUSR,
	       S.MEASKY AS TMEAKY,
           S.UOMKEY AS TUOMKY,
           S.QTPUOM AS QTSPUM,
           S.UOMKEY AS SUOMKY
	  FROM STKKY S
	       INNER JOIN LOCMA L
	               ON L.WAREKY = S.WAREKY
	              AND L.LOCAKY = S.LOCAKY
	 WHERE S.WAREKY = #{WAREKY}
	   AND S.OWNRKY = #{OWNRKY}
	   AND S.SKUKEY = #{SKUKEY}
	   AND ( (S.QTSIWH > 0 AND S.QTSALO = 0 AND S.QTSPMO = 0 AND S.QTSPMI = 0 AND S.QTSBLK = 0) OR (S.QTSIWH > 0 AND S.QTSALO > 0 AND S.SHPOKY = #{SHPOKY} AND S.SHPOIT = #{SHPOIT}) )
	   AND S.QTSIWH > 0
	   AND S.QTSALO = 0
	   AND S.QTSPMO = 0
	   AND S.QTSPMI = 0
	   AND S.QTSBLK = 0
	   AND S.AREAKY = #{AREAKY}
	   AND S.ZONEKY = #{ZONEKY}
	   AND S.LOCAKY = #{LOCAKY}
	   AND S.ASKU01 = #{ASKU01}
	   AND S.DESC01 = #{DESC01}
	   AND S.DESC02 = #{DESC02}
	   AND S.MEASKY = #{MEASKY}
	   AND S.UOMKEY = #{UOMKEY}
	   AND S.TRNUID = #{TRNUID}
	   AND S.LOTNUM = #{LOTNUM}
	   AND S.QTSIWH > #{QTTAOR}
	
	    AND S.LOTA06 = ( CASE WHEN '270' = (SELECT MAX(SHPMTY) FROM SHPDH SH WHERE  SH.SHPOKY = #{SHPOKY} ) THEN '20'
	                          WHEN '267' = (SELECT MAX(SHPMTY) FROM SHPDH SH WHERE  SH.SHPOKY = #{SHPOKY} ) THEN '20'
	              ELSE '00'
	       END )
	   AND L.INDUPK = 'V'
	 ORDER BY S.STOKKY  
  </select>
  
  
  
  <!-- [DL30]  선택한 STOKKY로 STKKY조회   만든다  -->
  <select id="MANUAL_ALLOC_SHPDH_MAP" parameterType="hashmap" resultType="DataMap">
	SELECT WAREKY AS WAREKY
	     , DOCDAT
	     , DRELIN
	     , WAREKY AS WARETG
	     , USRID1
	     , UNAME1
	     , DEPTID1
	     , DNAME1
	     , USRID2
	     , UNAME2
	     , DEPTID2
	     , DNAME2
	     , USRID3
	     , UNAME3
	     , DEPTID3
	     , DNAME3
	     , USRID4
	     , UNAME4
	     , DEPTID4
	     , DNAME4
	     , DOCDAT
	  FROM SHPDH
	 WHERE SHPOKY = #{SHPOKY}
  </select>
  
  
  
  <!-- [DL30]  선택한 STOKKY로 STKKY조회   만든다  -->
  <select id="MANUAL_ALLOC_SHPDI_MAP" parameterType="hashmap" resultType="DataMap">
	SELECT AWMSNO
	     , SMANDT
	     , SEBELN
	     , SEBELP
	     , SZMBLNO
	     , SZMIPNO
	     , STRAID
	     , SVBELN
	     , SPOSNR
	     , STKNUM
	     , STPNUM
	     , SWERKS
	     , SLGORT
	     , SDATBG
	     , STDLNR
	     , SSORNU
	     , SSORIT
	     , SMBLNR
	     , SZEILE
	     , SMJAHR
	     , SXBLNR
	     , SAPSTS
	  FROM SHPDI
	 WHERE SHPOKY = #{SHPOKY}
	   AND SHPOIT = #{SHPOIT} 
  </select>
  
     <!-- [DL01] 영업오더할당 : 저장 후 아이템 조회 : Group Type = ERPSO -->
  <select id="DL19_ITEM_SAVED_LIST" parameterType="hashmap" resultType="DataMap">
  
  SELECT DISTINCT DI.SHPOKY AS SHPOKY
          , DI.SHPOIT AS SHPOIT
          , DI.STATIT AS STATIT
          , DI.ALSTKY AS ALSTKY
          , DI.SKUKEY AS SKUKEY
          , SM.DESC01 AS DESC01
          , SM.DESC02 AS DESC02
          , DI.UOMKEY AS UOMKEY
          , 0 AS QTYPRE
          , DI.QTYORG AS QTYORG
          , DI.QTSHPO AS QTSHPO       
          , NVL(SM.QTYSTD,0) AS PLIQTY
          , NVL(SM.QTDUOM,0) AS BXIQTY
          , NVL(TRUNC((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM) ) ,0) AS BOXQTY       
          , NVL(TRUNC((IF.QTYREQ-IF.WMSMGT-IF.QTSHPD) / DECODE(SM.QTYSTD, 0, NULL, SM.QTYSTD) ) ,0) AS PLTQTY       
          , NVL(MOD(IF.QTYREQ-IF.WMSMGT-IF.QTSHPD, DECODE(SM.QTDUOM, 0, NULL, SM.QTDUOM)),0) AS REMQTY
          , DI.QTALOC AS QTALOC
          , DI.QTSHPO - DI.QTALOC AS QTUALO
          , IF.SVBELN  AS SVBELN
          , IF.SPOSNR AS SPOSNR
          , IF.TEXT01 AS NAME01       
          , SM.SKUKEY AS SKUKEY
          , SM.DESC01 AS DESC01
          , SM.ASKU01 AS ASKU01
          , SM.ASKU02 AS ASKU02
          , SM.ASKU03 AS ASKU03
          , SM.ASKU04 AS ASKU04
          , SM.ASKU05 AS ASKU05
          , SM.EANCOD AS EANCOD
          , SM.GTINCD AS GTINCD
          , SM.SKUG01 AS SKUG01
          , SM.SKUG02 AS SKUG02
          , SM.SKUG03 AS SKUG03
          , SM.SKUG04 AS SKUG04
          , SM.SKUG05 AS SKUG05
          , SM.GRSWGT AS GRSWGT
          , SM.NETWGT AS NETWGT
          , SM.WGTUNT AS WGTUNT
          , SM.LENGTH AS LENGTH
          , SM.WIDTHW AS WIDTHW
          , SM.HEIGHT AS HEIGHT
          , SM.CUBICM AS CUBICM
          , SM.CAPACT AS CAPACT
          , SW.MEASKY AS MEASKY
          , NVL(SM.GRSWGT,0)   AS GRSWGTCNT
          , SW.OBPROT AS OBLKYN
          , CASE IF.OWNRKY WHEN '2200' THEN NVL(C.CARNUM, ' ') ELSE ' ' END AS SXBLNR 
       FROM SHPDI DI INNER JOIN SHPDH SH ON SH.SHPOKY = DI.SHPOKY 
                     INNER JOIN SKUMA SM    ON SM.SKUKEY = DI.SKUKEY AND SM.OWNRKY = SH.OWNRKY 
                     INNER JOIN IFWMS113 IF ON IF.OWNRKY = SH.OWNRKY AND IF.SKUKEY = DI.SKUKEY AND DI.SVBELN = IF.SVBELN AND DI.SPOSNR = IF.SPOSNR
                     INNER JOIN SKUWC SW ON SW.OWNRKY = IF.OWNRKY AND SW.WAREKY = IF.WAREKY AND SW.SKUKEY = IF.SKUKEY
                     LEFT OUTER JOIN (SELECT OWNRKY, WAREKY, PTNRKY, MAX(CARNUM) AS CARNUM FROM CARFX GROUP BY OWNRKY, WAREKY, PTNRKY) C 
                                    ON IF.OWNRKY = C.OWNRKY AND IF.WAREKY = C.WAREKY AND IF.PTNRTO = C.PTNRKY
      WHERE 1=1 
        AND DI.SHPOKY = #{SHPOKY}
        AND IF.SVBELN = #{SVBELN}
        and if.xstat in ('R','D')
      ORDER BY DI.SHPOIT 
      
  </select> 
  
     <!-- [DL34] 차량정보 가져오기 -->
  <select id="DL34_GET_CARDESC_LIST" parameterType="hashmap" resultType="DataMap">
	  SELECT CARNUM AS CARNUM,
	         CARTYP AS RECTYP,
	         DESC01 AS DESC01
	    FROM CARMA
	   WHERE OWNRKY = #{OWNRKY}
	     AND WAREKY = #{WAREKY}
	     AND CARNUM = #{CARNUM}
  </select>
  
  	<!-- DL31Dialog_HEAD 조회 -->
	<select id="DL31Dialog2_HEAD_LIST" parameterType="hashmap" resultType="DataMap">
	    SELECT CM.OWNRKY AS OWNRKY,
	           CM.WAREKY AS WAREKY,
	           CM.CARNUM AS CARNUM,
	           CM.DESC01||'('||SR.SHIPSQ||')' AS DESC01,
	           CM.CARTYP AS CARTYP,
	           CM.CARGBN AS CARGBN,
	           CM.CARTMP AS CARTMP,
	           NVL(SUM(SI.QTALOC), 0) AS QTALOC,
	           NVL(ROUND(SUM(SI.QTALOC / SM.QTYSTD), 3), 0) AS PTQTY,
	           NVL(ROUND(SUM(SI.QTALOC / SM.QTDUOM), 2), 0) AS BOXQTY,
	           NVL(SUM(DECODE(SM.ASKU05, '001', ROUND(SI.QTALOC / CL.LOQTY1, 2), 0)), 0) AS RT1,       
	           NVL(SUM(DECODE(SM.ASKU05, '001', 0, ROUND(SI.QTALOC / CL.LOQTY1, 2))), 0) AS RT2,         
	           NVL(SUM(DECODE(SM.ASKU05, '001', SM.NETWGT * SI.QTALOC / DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT1, 
	           NVL(SUM(DECODE(SM.ASKU05, '001', 0, SM.NETWGT * SI.QTALOC/ DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)), 0) AS GRSWGT2,
	           COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
	           NVL(CD.USARG1, '20000') AS MAXCARTON,
	           NVL(SR.SHIPSQ, 0) AS SHIPSQ
	      FROM CARMA CM INNER JOIN SHPDR SR ON CM.CARNUM = SR.CARNUM AND SR.CARDAT = #{CARDAT}
	                    INNER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
	                    INNER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY AND SH.DOCDAT = #{DOCDAT} <if test="WAREKY != null and WAREKY != ''"> AND SH.WAREKY = #{WAREKY} </if>
	                    INNER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
	                    LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
	                    LEFT OUTER JOIN CMCDV CD ON CD.CMCDKY = 'CARTYP'  AND CM.CARTYP = CD.CMCDVL
	     WHERE 1 = 1
	       AND CM.DELMAK != '1'
	     <if test="OWNRKY != null and OWNRKY != ''">	
	       AND CM.OWNRKY = #{OWNRKY}	
	     </if>
	     <if test="WAREKY != null and WAREKY != ''">	
	       AND CM.WAREKY = #{WAREKY}	
	     </if>
	     <if test="CARGBN != null and CARGBN != ''">
	       AND CM.CARGBN = #{CARGBN}
	     </if>
	     <if test="CARTMP != null and CARTMP != ''">
	       AND CM.CARTMP = #{CARTMP}
	     </if>
	     
	     GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, CM.CARTYP, CM.CARGBN, CM.CARTMP, CD.USARG1, SR.SHIPSQ
	
	     UNION ALL
	
	    SELECT CM.OWNRKY AS OWNRKY,
	           CM.WAREKY AS WAREKY,
	           CM.CARNUM AS CARNUM,
	           CM.DESC01 AS DESC01,
	           CM.CARTYP AS CARTYP,
	           CM.CARGBN AS CARGBN,
	           CM.CARTMP AS CARTMP,
	           SUM(SI.QTALOC) AS QTALOC,
	           ROUND(SUM(SI.QTALOC / SM.QTYSTD), 3) AS PTQTY,
	           ROUND(SUM(SI.QTALOC / SM.QTDUOM), 2) AS BOXQTY,
	           SUM(DECODE(SM.ASKU05, '001', ROUND(SI.QTALOC / CL.LOQTY1, 2), 0)) AS RT1,       
	           SUM(DECODE(SM.ASKU05, '001', 0, ROUND(SI.QTALOC / CL.LOQTY1, 2))) AS RT2,         
	           SUM(DECODE(SM.ASKU05, '001', SM.NETWGT * SI.QTALOC / DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)) AS GRSWGT1, 
	           SUM(DECODE(SM.ASKU05, '001', 0, SM.NETWGT * SI.QTALOC/ DECODE(CM.CARWEG, 0, 1, CM.CARWEG), 0)) AS GRSWGT2,
	           COUNT(DISTINCT SH.DPTNKY) AS DPTCNT,
	           NVL(CD.USARG1, '20000') AS MAXCARTON,
	           0 AS SHIPSQ
	      FROM CARMA CM LEFT OUTER JOIN SHPDR SR ON CM.CARNUM = SR.CARNUM AND SR.CARDAT = #{CARDAT}
	                    LEFT OUTER JOIN SHPDI SI ON SR.SHPOKY = SI.SHPOKY AND SR.SHPOIT = SI.SHPOIT
	                    LEFT OUTER JOIN SHPDH SH ON SR.SHPOKY = SH.SHPOKY AND SH.DOCDAT = #{DOCDAT} <if test="WAREKY != null and WAREKY != ''"> AND SH.WAREKY = #{WAREKY} </if>
	                    LEFT OUTER JOIN SKUMA SM ON SH.OWNRKY = SM.OWNRKY AND SI.SKUKEY = SM.SKUKEY
	                    LEFT OUTER JOIN CLDMA CL ON SH.OWNRKY = CL.OWNRKY AND SI.SKUKEY = CL.SKUKEY
	                    LEFT OUTER JOIN CMCDV CD ON CD.CMCDKY = 'CARTYP'  AND CM.CARTYP = CD.CMCDVL
	     WHERE 1 = 1
	       AND CM.DELMAK != '1'
	     <if test="OWNRKY != null and OWNRKY != ''">	
	       AND CM.OWNRKY = #{OWNRKY}	
	     </if>
	     <if test="WAREKY != null and WAREKY != ''">	
	       AND CM.WAREKY = #{WAREKY}	
	     </if>
	     <if test="CARGBN != null and CARGBN != ''">
	       AND CM.CARGBN = #{CARGBN}
	     </if>
	     <if test="CARTMP != null and CARTMP != ''">
	       AND CM.CARTMP = #{CARTMP}
	     </if>
	     
	     GROUP BY CM.OWNRKY, CM.WAREKY, CM.CARNUM, CM.DESC01, CM.CARTYP, CM.CARGBN, CM.CARTMP, CD.USARG1    
	</select>
	
	<!-- DL31Dialog_ITEM 조회 -->
	<select id="DL31Dialog2_ITEM_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT A.SHPOKY AS SHPOKY,
		       A.SVBELN AS SVBELN,
		       A.SKUKEY AS SKUKEY,
		       A.DESC01 AS SKUDESC,
		       A.SHPOIT AS SHPOIT,
		       A.DPTNKY AS DPTNKY,
		       A.NAME01 AS NAME01,
		       A.DEPART AS DEPART,
		       A.ARRIVA AS ARRIVA,
		       A.CARNUM AS CARNUM, 
		       A.CARDAT AS CARDAT,
		       A.CARDAT AS OCARDAT,
		       A.CARNUM AS OCARNUM,
		       A.SHIPSQ AS SHIPSQ, 
		       A.SHIPSQ AS OSHIPSQ, 
		       A.GRSWGT AS GRSWGT,
		       A.BOXQTY AS BOXQTY,        
		       A.D1T AS D1T, 
		       A.D25T AS D25T,
		       A.D35T AS D35T,
		       A.D5T  AS D5T,
		       A.D8T  AS D8T,
		       A.D11T AS D11T,
		       A.D15T AS D15T,
		       A.ASKU05   AS  ASKU05,
		       SZF_GETCMCDVDESC('PGRC03',PGRC03)  AS PGRC03,
		       'O'  AS CHKFIELD,
		       A.USRID1 AS USRID1,
		       A.UNAME1 AS UNAME1 ,
		       A.DEPTID1 AS DEPTID1,
		       A.DNAME1 AS DNAME1,
		       A.USRID2 AS USRID2,
		       B.DESC01 AS DESC01,
		       B.DESC01 AS ODESC01,
		       NVL(TRIM(MAXCARTON),'200000') AS MAXCARTON,
		       A.PTNG07 AS PTNG07
		 FROM (
		    SELECT H.OWNRKY, 
		           H.WAREKY, 
		           H.SHPOKY,
		           I.SVBELN,
		           H.SHPMTY,
		           H.DOCDAT, 
		           H.DPTNKY, 
		           B.NAME01,
		           R.SHPOIT, 
		           R.DEPART, 
		           R.ARRIVA,
		           R.CARNUM,
		           R.CARDAT ,
		           R.SHIPSQ, 
		           R.SORTSQ,
		           I.SKUKEY,
		           S.DESC01,
		           I.QTALOC, 
		           H.PGRC03, 
		           H.USRID1,
		           H.UNAME1,
		           H.DEPTID1,
		           H.DNAME1,
		           H.USRID2,
		           SUM(S.GRSWGT) GRSWGT,
		           WM_CONCAT(DISTINCT S.ASKU05) ASKU05,
		           SUM(TRUNC(I.QTALOC / DECODE(S.QTDUOM, NULL,0,S.QTDUOM) ,0)) AS BOXQTY,
		           MAX(ROUND(DECODE(C.CARTYP, '1.5T', I.QTALOC/C.LOQTY1, 0),3)) D1T,
		           MAX(ROUND(DECODE(C.CARTYP, '2.5T', I.QTALOC/C.LOQTY1, 0),3)) D25T,
		           MAX(ROUND(DECODE(C.CARTYP, '3.5T', I.QTALOC/C.LOQTY1, 0),3)) D35T,
		           MAX(ROUND(DECODE(C.CARTYP, '5T'  , I.QTALOC/C.LOQTY1, 0),3)) D5T,
		           MAX(ROUND(DECODE(C.CARTYP, '8T'  , I.QTALOC/C.LOQTY1, 0),3)) D8T,
		           MAX(ROUND(DECODE(C.CARTYP, '11T' , I.QTALOC/C.LOQTY1, 0),3)) D11T,
		           MAX(ROUND(DECODE(C.CARTYP, '15T' , I.QTALOC/C.LOQTY1, 0),3)) D15T,
		           MAX(( SELECT USARG1 FROM CMCDV
		                 WHERE CMCDKY = 'CARTYP'
		                   AND CMCDVL = PTNG07)) MAXCARTON,
		           B.PTNG07
		      FROM SHPDH H, SHPDI I, SHPDR R,
		           CLDMA C, BZPTN B, SKUMA S
		     WHERE H.SHPOKY = I.SHPOKY
		       AND I.SHPOKY = R.SHPOKY
		       AND I.SHPOIT = R.SHPOIT
		       AND S.OWNRKY = C.OWNRKY(+)  
		       AND S.SKUKEY = C.SKUKEY(+)  
		       AND H.OWNRKY = B.OWNRKY
		       AND H.DPTNKY = B.PTNRKY
		       AND H.OWNRKY = S.OWNRKY
		       AND I.SKUKEY = S.SKUKEY
		       AND R.TASKKY = ' '
		       AND H.SHPMTY != '299'
		       AND I.STATIT != 'REF'
		       AND H.STATDO NOT IN ('FPC','PPC','FSH','PSH')
		       AND I.QTALOC &gt; 0
		     GROUP BY H.OWNRKY, H.WAREKY, H.SHPOKY, H.DPTNKY, B.NAME01, R.DEPART, R.ARRIVA, R.SHPOIT,
		              R.CARNUM, R.SHIPSQ, R.SORTSQ, I.SKUKEY, R.CARDAT , H.SHPMTY, 
		              H.DOCDAT, I.QTALOC, H.PGRC03, H.USRID1, H.UNAME1, H.DEPTID1, H.DNAME1, H.USRID2,
		              B.PTNG07, I.SVBELN, S.DESC01
		  ) A, CARMA B
		WHERE 1=1
		  AND A.OWNRKY = B.OWNRKY(+)
		  AND A.WAREKY = B.WAREKY(+)
		  AND A.CARNUM = B.CARNUM(+)
		  AND SHPOKY = #{SHPOKY}
		ORDER BY SHPOKY, SHPOIT
	
	</select>
	 	<!-- DL31Dialog_HEAD 조회 -->
	<select id="DL31Dialog2_CHECK_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT /*+ INDEX(R IDX_SHPDR_NEW01)*/ COUNT(*) AS CNT
		  FROM SHPDR R
		       INNER JOIN SHPDH H ON H.SHPOKY = R.SHPOKY
		 WHERE R.CARDAT = #{CARDAT}
		   AND R.SHIPSQ = #{SHIPSQ}
		   AND H.OWNRKY = #{OWNRKY}
		   AND H.WAREKY = #{WAREKY}
		   AND R.TASKKY != ' '
	</select>
	
	
  <!-- [DL50] 출고문서일자 없을경우 shpdh에서 가져옴 -->
  <select id="DL50_SHPDH_DOCDAT_MAP" parameterType="hashmap" resultType="DataMap">
  	SELECT DOCDAT FROM SHPDH WHERE SHPOKY = #{SHPOKY}
  </select>
  
    <!-- 출고중 저장 -->
	<update id="CLSYN_UPDATE"  parameterType="hashmap">
		MERGE INTO DL07_CLS
		USING DUAL ON (WAREKY=#{WAREKY})
		 WHEN MATCHED THEN 
	   UPDATE SET CLS_YN = #{CLS_YN},
                  PRC_YN = 'N',
                  LMODAT = TO_CHAR(SYSDATE, 'YYYYMMDD'),
                  LMOTIM = TO_CHAR(SYSDATE, 'HH24MISS'),
                  LMOUSR = #{SES_USER_ID}
		 WHEN NOT MATCHED THEN
       INSERT ( WAREKY
              , CLS_YN
              , PRC_YN
              , LMODAT
              , LMOTIM
              , LMOUSR
              )  
       VALUES ( #{WAREKY}
       		  , #{CLS_YN}
       		  , 'N'
       		  , TO_CHAR(SYSDATE, 'YYYYMMDD')
       		  , TO_CHAR(SYSDATE, 'HH24MISS')
       		  , #{SES_USER_ID}
         )
	</update>
	
  <!-- [DL00] 영업오더관리 : 출고 가능 재고가 있는지 Check -->
  <select id="CLSYN_CHK_MAP" parameterType="hashmap" resultType="DataMap">
  	SELECT SZF_GETDL07_CLSYN(#{WAREKY}) AS CLSYN FROM DUAL
  </select>
	
	
	<select id="DL35_COMPLET_CHK_LIST" parameterType="hashmap" resultType="DataMap">
		SELECT TASDH.TASKKY AS TASKKY 
	      FROM TASDH, TASDI
	     WHERE 1 = 1
	       AND TASDH.STATDO = 'FPC'
	       AND TASDH.TASKKY = TASDI.TASKKY
	       AND TASDH.WAREKY = #{WAREKY}
	       AND TASDI.OWNRKY = #{OWNRKY}
	       AND TASDH.USRID1 = #{CARDAT}
	       AND TASDH.UNAME1 = #{SHIPSQ}
	       AND TASDH.DOCDAT > '20190101'
	</select>
	
	<select id="OUTBOUND_FALCHK_MAP" parameterType="hashmap" resultType="DataMap">
		SELECT COUNT(*) AS CNT
		  FROM SHPDH 
		WHERE WAREKY = #{WAREKY}
		  AND STATDO = 'FAL'
		  AND WAREKY != '2254'
	</select>
	
	
	<update id="USRMA_UPDATE"  parameterType="hashmap">
		UPDATE USRMA
		   SET INDARC = #{INDARC}
		 WHERE USERID = #{USERID}
	</update>
	
  <!-- [DL32] 작업자 지정출고 : 미할당 아이템 Check -->
  <select id="DL32_ALLOC_CHK_MAP" parameterType="hashmap" resultType="DataMap">
		SELECT COUNT(1) AS CNT
		  FROM SHPDI
		 WHERE SHPOKY = #{SHPOKY}
		   AND SHPOIT = #{SHPOIT}
		   AND STATIT = 'NEW'
  </select>
</mapper>